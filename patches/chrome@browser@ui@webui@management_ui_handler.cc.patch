diff --git a/chrome/browser/ui/webui/management_ui_handler.cc b/chrome/browser/ui/webui/management_ui_handler.cc
index 518f0baa72c8..2d328d672aa7 100644
--- a/chrome/browser/ui/webui/management_ui_handler.cc
+++ b/chrome/browser/ui/webui/management_ui_handler.cc
@@ -26,7 +26,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
@@ -746,56 +745,6 @@ base::Value ManagementUIHandler::GetThreatProtectionInfo(
   const auto& chrome_policies = policy_service->GetPolicies(
       policy::PolicyNamespace(policy::POLICY_DOMAIN_CHROME, std::string()));
 
-  auto* on_file_attached =
-      chrome_policies.GetValue(policy::key::kOnFileAttachedEnterpriseConnector);
-  if (on_file_attached && on_file_attached->is_list() &&
-      !on_file_attached->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnFileAttachedEvent);
-    value.SetStringKey("permission", kManagementOnFileAttachedVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_file_downloaded = chrome_policies.GetValue(
-      policy::key::kOnFileDownloadedEnterpriseConnector);
-  if (on_file_downloaded && on_file_downloaded->is_list() &&
-      !on_file_downloaded->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnFileDownloadedEvent);
-    value.SetStringKey("permission", kManagementOnFileDownloadedVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_bulk_data_entry = chrome_policies.GetValue(
-      policy::key::kOnBulkDataEntryEnterpriseConnector);
-  if (on_bulk_data_entry && on_bulk_data_entry->is_list() &&
-      !on_bulk_data_entry->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnBulkDataEntryEvent);
-    value.SetStringKey("permission", kManagementOnBulkDataEntryVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_security_event = chrome_policies.GetValue(
-      policy::key::kOnSecurityEventEnterpriseConnector);
-  if (on_security_event && on_security_event->is_list() &&
-      !on_security_event->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementEnterpriseReportingEvent);
-    value.SetStringKey("permission", kManagementEnterpriseReportingVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_page_visited_event =
-      chrome_policies.GetValue(policy::key::kEnterpriseRealTimeUrlCheckMode);
-  if (on_page_visited_event && on_page_visited_event->is_int() &&
-      on_page_visited_event->GetInt() !=
-          safe_browsing::REAL_TIME_CHECK_DISABLED) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnPageVisitedEvent);
-    value.SetStringKey("permission", kManagementOnPageVisitedVisibleData);
-    info.Append(std::move(value));
-  }
 
 #if defined(OS_CHROMEOS)
   std::string management_domain = GetDeviceDomain();
