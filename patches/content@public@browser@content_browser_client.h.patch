diff --git a/content/public/browser/content_browser_client.h b/content/public/browser/content_browser_client.h
index c2642a399f14..b777cad70d33 100644
--- a/content/public/browser/content_browser_client.h
+++ b/content/public/browser/content_browser_client.h
@@ -19,7 +19,6 @@
 #include "base/containers/flat_set.h"
 #include "base/files/file_path.h"
 #include "base/memory/scoped_refptr.h"
-#include "base/metrics/ukm_source_id.h"
 #include "base/optional.h"
 #include "base/strings/string_piece.h"
 #include "base/time/time.h"
@@ -167,10 +166,6 @@ class SelectFilePolicy;
 class ClipboardFormatType;
 }  // namespace ui
 
-namespace ukm {
-class UkmService;
-}  // namespace ukm
-
 namespace url {
 class Origin;
 }  // namespace url
@@ -746,11 +741,6 @@ class CONTENT_EXPORT ContentBrowserClient {
   virtual void OnTrustAnchorUsed(BrowserContext* browser_context) {}
 #endif
 
-  // Notification that a signed certificate timestamp (SCT) report was enqueued.
-  // Allows an embedder to implement their own behavior for auditing SCTs.
-  virtual void OnSCTReportReady(BrowserContext* browser_context,
-                                const std::string& cache_key) {}
-
   // Allows the embedder to override the LocationProvider implementation.
   // Return nullptr to indicate the default one for the platform should be
   // created. This is used by Qt, see
@@ -1261,7 +1251,6 @@ class CONTENT_EXPORT ContentBrowserClient {
                mojo::PendingRemote<network::mojom::URLLoaderFactory>>;
   virtual void RegisterNonNetworkNavigationURLLoaderFactories(
       int frame_tree_node_id,
-      base::UkmSourceId ukm_source_id,
       NonNetworkURLLoaderFactoryDeprecatedMap* uniquely_owned_factories,
       NonNetworkURLLoaderFactoryMap* factories);
 
@@ -1915,9 +1904,6 @@ class CONTENT_EXPORT ContentBrowserClient {
   virtual bool ShouldAllowInsecurePrivateNetworkRequests(
       BrowserContext* browser_context,
       const GURL& url);
-
-  // Returns the URL-Keyed Metrics service for chrome:ukm.
-  virtual ukm::UkmService* GetUkmService();
 };
 
 }  // namespace content
