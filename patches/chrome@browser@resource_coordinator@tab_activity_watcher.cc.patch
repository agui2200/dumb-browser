diff --git a/chrome/browser/resource_coordinator/tab_activity_watcher.cc b/chrome/browser/resource_coordinator/tab_activity_watcher.cc
index 547989e76e7a5..9adf1fe4af668 100644
--- a/chrome/browser/resource_coordinator/tab_activity_watcher.cc
+++ b/chrome/browser/resource_coordinator/tab_activity_watcher.cc
@@ -22,7 +22,6 @@
 #include "chrome/browser/ui/browser_list.h"
 #include "chrome/browser/ui/browser_window.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
-#include "components/ukm/content/source_url_recorder.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/navigation_handle.h"
 #include "content/public/browser/render_view_host.h"
@@ -30,7 +29,6 @@
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_contents_observer.h"
 #include "content/public/browser/web_contents_user_data.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "third_party/blink/public/common/input/web_input_event.h"
 
 namespace resource_coordinator {
@@ -43,18 +41,6 @@ constexpr float kFrecencyScoreDecay = 0.8f;
 static int32_t reactivation_index = 0;
 // Used for generating label_ids and query_ids.
 int64_t internal_id_for_logging = 0;
-// Returns an int64_t number as label_id or query_id.
-int64_t NewInt64ForLabelIdOrQueryId() {
-  // The id is shifted 16 bits so that the lower bits are reserved for counting
-  // multiple queries.
-  // We choose 16 so that the lower bits for counting multiple queries and
-  // higher bits for labeling queries are both unlikely to overflow. (lower bits
-  // only overflows when we have more than 65536 queries without labeling
-  // events; higher bits only overflow when we have more than 100 billion
-  // discards.
-  constexpr int kIdShiftBits = 16;
-  return (++internal_id_for_logging) << kIdShiftBits;
-}
 
 }  // namespace
 
@@ -104,12 +90,6 @@ class TabActivityWatcher::WebContentsData
     // Copy background status so ForegroundOrClosed can potentially be logged.
     backgrounded_time_ = replaced_tab.backgrounded_time_;
 
-    // Copy the replaced tab's stats.
-    page_metrics_ = replaced_tab.page_metrics_;
-
-    // Recover the ukm_source_id from the |replaced_tab|.
-    ukm_source_id_ = replaced_tab.ukm_source_id_;
-
     // Copy the replaced label_id_.
     label_id_ = replaced_tab.label_id_;
 
@@ -146,6 +126,7 @@ class TabActivityWatcher::WebContentsData
     }
   }
 
+#if 0
   // Logs TabMetrics for the tab if it is considered to be backgrounded.
   void LogTabIfBackgrounded() {
     if (backgrounded_time_.is_null() || DisableBackgroundLogWithTabRanker())
@@ -174,6 +155,7 @@ class TabActivityWatcher::WebContentsData
     TabActivityWatcher::GetInstance()->tab_metrics_logger_->LogTabMetrics(
         ukm_source_id_, tab.value(), web_contents(), label_id_);
   }
+#endif
 
   // Sets foregrounded_time_ to NowTicks() so this becomes the
   // most-recently-used tab.
@@ -203,9 +185,6 @@ class TabActivityWatcher::WebContentsData
 
     creation_time_ = NowTicks();
 
-    // A navigation may already have completed if this is a replacement tab.
-    ukm_source_id_ = ukm::GetSourceIdForWebContentsDocument(web_contents);
-
     // When a tab is discarded, a new null_web_contents will be created (with
     // WasDiscarded set as true) applied as a replacement of the discarded tab.
     // We want to record this discarded state for later logging.
@@ -233,7 +212,6 @@ class TabActivityWatcher::WebContentsData
 
     backgrounded_time_ = NowTicks();
     discarded_since_backgrounded_ = false;
-    LogTabIfBackgrounded();
   }
 
   void WasShown() {
@@ -246,13 +224,8 @@ class TabActivityWatcher::WebContentsData
     if (browser && browser->tab_strip_model()->closing_all())
       return;
 
-    // Log the event before updating times.
-    LogForegroundedOrClosedMetrics(true /* is_foregrounded */);
-
     backgrounded_time_ = base::TimeTicks();
     foregrounded_time_ = NowTicks();
-
-    page_metrics_.num_reactivations++;
   }
 
   // content::WebContentsObserver:
@@ -270,29 +243,12 @@ class TabActivityWatcher::WebContentsData
         navigation_handle->IsSameDocument()) {
       return;
     }
-
-    // Use the same SourceId that SourceUrlRecorderWebContentsObserver populates
-    // and updates.
-    ukm::SourceId new_source_id = ukm::ConvertToSourceId(
-        navigation_handle->GetNavigationId(), ukm::SourceIdType::NAVIGATION_ID);
-    DCHECK_NE(new_source_id, ukm_source_id_)
-        << "Expected a unique Source ID for the navigation";
-    ukm_source_id_ = new_source_id;
-
-    // Reset the per-page data.
-    page_metrics_ = {};
-
-    // Update navigation info.
-    page_metrics_.page_transition = navigation_handle->GetPageTransition();
   }
 
   // Logs metrics for the tab when it stops loading instead of immediately
   // after a navigation commits, so we can have some idea of its status and
   // contents.
   void DidStopLoading() override {
-    // Ignore load events in foreground tabs. The tab state of a foreground tab
-    // will be logged if/when it is backgrounded.
-    LogTabIfBackgrounded();
   }
 
   void OnVisibilityChanged(content::Visibility visibility) override {
@@ -317,12 +273,6 @@ class TabActivityWatcher::WebContentsData
 
   // content::RenderWidgetHost::InputEventObserver:
   void OnInputEvent(const blink::WebInputEvent& event) override {
-    if (blink::WebInputEvent::IsMouseEventType(event.GetType()))
-      page_metrics_.mouse_event_count++;
-    else if (blink::WebInputEvent::IsKeyboardEventType(event.GetType()))
-      page_metrics_.key_event_count++;
-    else if (blink::WebInputEvent::IsTouchEventType(event.GetType()))
-      page_metrics_.touch_event_count++;
   }
 
   // Iterates through tabstrips to determine the index of |contents| in
@@ -373,6 +323,7 @@ class TabActivityWatcher::WebContentsData
   // TODO(charleszhao): refactor TabMetricsLogger::GetTabFeatures to return a
   // full TabFeatures instead of a partial TabFeatures.
   absl::optional<TabFeatures> GetTabFeatures() {
+#if 0
     if (web_contents()->IsBeingDestroyed() || backgrounded_time_.is_null())
       return absl::nullopt;
     // For tab features.
@@ -395,10 +346,13 @@ class TabActivityWatcher::WebContentsData
     tab->frecency_score = GetFrecencyScore();
 
     return tab;
+#endif
+    return absl::nullopt;
   }
 
   // Collect current ForegroundedOrClosedMetrics and send to ukm.
   void LogForegroundedOrClosedMetrics(bool is_foregrounded) {
+#if 0
     // If background time logging is disabled, then we only log the case where
     // the label_id_ != 0 (a feature is logged and a label has not been logged).
     if (DisableBackgroundLogWithTabRanker() && label_id_ == 0)
@@ -422,6 +376,7 @@ class TabActivityWatcher::WebContentsData
     // the rest are considered to be query time logging irrelevant, for which we
     // log with label_id == 0.
     label_id_ = 0;
+#endif
   }
 
   // Returns frecency score of this tab.
@@ -446,9 +401,6 @@ class TabActivityWatcher::WebContentsData
     frecency_score_.score = GetFrecencyScore() + 1.0f - kFrecencyScoreDecay;
   }
 
-  // Updated when a navigation is finished.
-  ukm::SourceId ukm_source_id_ = 0;
-
   // When the tab was created.
   base::TimeTicks creation_time_;
 
@@ -461,9 +413,6 @@ class TabActivityWatcher::WebContentsData
   // is activated.
   base::TimeTicks foregrounded_time_;
 
-  // Stores current page stats for the tab.
-  TabMetricsLogger::PageMetrics page_metrics_;
-
   // Set to true when the WebContents has been detached from its tab.
   bool is_detached_ = false;
 
@@ -491,8 +440,7 @@ class TabActivityWatcher::WebContentsData
 WEB_CONTENTS_USER_DATA_KEY_IMPL(TabActivityWatcher::WebContentsData)
 
 TabActivityWatcher::TabActivityWatcher()
-    : tab_metrics_logger_(std::make_unique<TabMetricsLogger>()),
-      browser_tab_strip_tracker_(this, this),
+    : browser_tab_strip_tracker_(this, this),
       predictor_(std::make_unique<tab_ranker::TabScorePredictor>()) {
   BrowserList::AddObserver(this);
   browser_tab_strip_tracker_.Init();
@@ -513,9 +461,6 @@ absl::optional<float> TabActivityWatcher::CalculateReactivationScore(
 
 void TabActivityWatcher::LogAndMaybeSortLifecycleUnitWithTabRanker(
     std::vector<LifecycleUnit*>* tabs) {
-  // Set query_id so that all TabFeatures logged in this query can be joined.
-  tab_metrics_logger_->set_query_id(NewInt64ForLabelIdOrQueryId());
-
   const bool should_sort_tabs =
       base::FeatureList::IsEnabled(features::kTabRanker);
 
@@ -541,7 +486,6 @@ void TabActivityWatcher::LogAndMaybeSortLifecycleUnitWithTabRanker(
     }
 
     const absl::optional<TabFeatures> tab = web_contents_data->GetTabFeatures();
-    web_contents_data->LogCurrentTabFeatures(tab);
 
     // No reason to store TabFeatures if TabRanker is disabled.
     if (should_sort_tabs) {
@@ -624,7 +568,6 @@ void TabActivityWatcher::OnTabStripModelChanged(
 void TabActivityWatcher::TabPinnedStateChanged(TabStripModel* tab_strip_model,
                                                content::WebContents* contents,
                                                int index) {
-  WebContentsData::FromWebContents(contents)->LogTabIfBackgrounded();
 }
 
 bool TabActivityWatcher::ShouldTrackBrowser(Browser* browser) {
@@ -636,7 +579,6 @@ bool TabActivityWatcher::ShouldTrackBrowser(Browser* browser) {
 }
 
 void TabActivityWatcher::ResetForTesting() {
-  tab_metrics_logger_ = std::make_unique<TabMetricsLogger>();
   predictor_ = std::make_unique<tab_ranker::TabScorePredictor>();
   internal_id_for_logging = 0;
 }
@@ -648,11 +590,6 @@ TabActivityWatcher* TabActivityWatcher::GetInstance() {
 }
 
 void TabActivityWatcher::OnTabClosed(WebContentsData* web_contents_data) {
-  // Log ForegroundedOrClosed event.
-  if (!web_contents_data->backgrounded_time_.is_null()) {
-    web_contents_data->LogForegroundedOrClosedMetrics(
-        false /*is_foregrounded */);
-  }
 }
 
 }  // namespace resource_coordinator
