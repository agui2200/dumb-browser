diff --git a/third_party/blink/renderer/modules/xr/xr_system.cc b/third_party/blink/renderer/modules/xr/xr_system.cc
index a657120bde31..20dbcf3502e4 100644
--- a/third_party/blink/renderer/modules/xr/xr_system.cc
+++ b/third_party/blink/renderer/modules/xr/xr_system.cc
@@ -6,7 +6,6 @@
 
 #include <utility>
 
-#include "services/metrics/public/cpp/ukm_builders.h"
 #include "third_party/blink/public/common/browser_interface_broker_proxy.h"
 #include "third_party/blink/public/mojom/feature_policy/feature_policy.mojom-blink.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
@@ -403,7 +402,6 @@ XRSystem::PendingSupportsSessionQuery::mode() const {
 }
 
 XRSystem::PendingRequestSessionQuery::PendingRequestSessionQuery(
-    int64_t ukm_source_id,
     ScriptPromiseResolver* resolver,
     device::mojom::blink::XRSessionMode session_mode,
     RequestedXRSessionFeatureSet required_features,
@@ -411,8 +409,7 @@ XRSystem::PendingRequestSessionQuery::PendingRequestSessionQuery(
     : resolver_(resolver),
       mode_(session_mode),
       required_features_(std::move(required_features)),
-      optional_features_(std::move(optional_features)),
-      ukm_source_id_(ukm_source_id) {
+      optional_features_(std::move(optional_features)) {
   ParseSensorRequirement();
 }
 
@@ -503,32 +500,11 @@ void XRSystem::PendingRequestSessionQuery::ReportRequestSessionResult(
   if (!resolver_->DomWindow())
     return;
 
-  auto feature_request_viewer =
-      GetFeatureRequestStatus(XRSessionFeature::REF_SPACE_VIEWER, session);
-  auto feature_request_local =
-      GetFeatureRequestStatus(XRSessionFeature::REF_SPACE_LOCAL, session);
-  auto feature_request_local_floor =
-      GetFeatureRequestStatus(XRSessionFeature::REF_SPACE_LOCAL_FLOOR, session);
-  auto feature_request_bounded_floor = GetFeatureRequestStatus(
-      XRSessionFeature::REF_SPACE_BOUNDED_FLOOR, session);
-  auto feature_request_unbounded =
-      GetFeatureRequestStatus(XRSessionFeature::REF_SPACE_UNBOUNDED, session);
   auto feature_request_dom_overlay =
       GetFeatureRequestStatus(XRSessionFeature::DOM_OVERLAY, session);
   auto feature_request_depth_sensing =
       GetFeatureRequestStatus(XRSessionFeature::DEPTH, session);
 
-  ukm::builders::XR_WebXR_SessionRequest(ukm_source_id_)
-      .SetMode(static_cast<int64_t>(mode_))
-      .SetStatus(static_cast<int64_t>(status))
-      .SetFeature_Viewer(static_cast<int64_t>(feature_request_viewer))
-      .SetFeature_Local(static_cast<int64_t>(feature_request_local))
-      .SetFeature_LocalFloor(static_cast<int64_t>(feature_request_local_floor))
-      .SetFeature_BoundedFloor(
-          static_cast<int64_t>(feature_request_bounded_floor))
-      .SetFeature_Unbounded(static_cast<int64_t>(feature_request_unbounded))
-      .Record(resolver_->DomWindow()->UkmRecorder());
-
   // If the session was successfully created and DOM overlay was requested,
   // count this as a use of the DOM overlay feature.
   if (session && status == SessionRequestStatus::kSuccess &&
@@ -547,13 +523,6 @@ void XRSystem::PendingRequestSessionQuery::ReportRequestSessionResult(
     UseCounter::Count(session->GetExecutionContext(),
                       WebFeature::kXRDepthSensing);
   }
-
-  if (session && metrics_recorder) {
-    mojo::Remote<device::mojom::blink::XRSessionMetricsRecorder> recorder(
-        std::move(metrics_recorder));
-    session->SetMetricsReporter(
-        std::make_unique<XRSession::MetricsReporter>(std::move(recorder)));
-  }
 }
 
 device::mojom::blink::XRSessionMode XRSystem::PendingRequestSessionQuery::mode()
@@ -809,10 +778,6 @@ XRSystem* XRSystem::xr(Navigator& navigator) {
   if (!xr) {
     xr = MakeGarbageCollected<XRSystem>(navigator);
     ProvideTo(navigator, xr);
-
-    ukm::builders::XR_WebXR(window->UkmSourceID())
-        .SetDidUseNavigatorXR(1)
-        .Record(window->UkmRecorder());
   }
   return xr;
 }
@@ -1021,9 +986,6 @@ void XRSystem::RequestImmersiveSession(PendingRequestSessionQuery* query,
   DVLOG(2) << __func__;
   // Log an immersive session request if we haven't already
   if (!did_log_request_immersive_session_) {
-    ukm::builders::XR_WebXR(DomWindow()->UkmSourceID())
-        .SetDidRequestPresentation(1)
-        .Record(DomWindow()->UkmRecorder());
     did_log_request_immersive_session_ = true;
   }
 
@@ -1254,10 +1216,6 @@ ScriptPromise XRSystem::requestSession(ScriptState* script_state,
     // We haven't created the query yet, so we can't use it to implicitly log
     // our metrics for us, so explicitly log it here, as the query requires the
     // features to be parsed before it can be built.
-    ukm::builders::XR_WebXR_SessionRequest(DomWindow()->UkmSourceID())
-        .SetMode(static_cast<int64_t>(session_mode))
-        .SetStatus(static_cast<int64_t>(SessionRequestStatus::kOtherError))
-        .Record(DomWindow()->UkmRecorder());
     return ScriptPromise();
   }
 
@@ -1308,7 +1266,7 @@ ScriptPromise XRSystem::requestSession(ScriptState* script_state,
 
   PendingRequestSessionQuery* query =
       MakeGarbageCollected<PendingRequestSessionQuery>(
-          DomWindow()->UkmSourceID(), resolver, session_mode,
+          resolver, session_mode,
           std::move(required_features), std::move(optional_features));
 
   if (query->HasFeature(device::mojom::XRSessionFeature::DOM_OVERLAY)) {
