diff --git a/third_party/blink/renderer/platform/graphics/bitmap_image.cc b/third_party/blink/renderer/platform/graphics/bitmap_image.cc
index 6e9b2c17d020..9afbba39acdd 100644
--- a/third_party/blink/renderer/platform/graphics/bitmap_image.cc
+++ b/third_party/blink/renderer/platform/graphics/bitmap_image.cc
@@ -33,7 +33,6 @@
 #include "base/memory/scoped_refptr.h"
 #include "base/metrics/histogram_macros.h"
 #include "third_party/blink/renderer/platform/geometry/float_rect.h"
-#include "third_party/blink/renderer/platform/graphics/bitmap_image_metrics.h"
 #include "third_party/blink/renderer/platform/graphics/deferred_image_decoder.h"
 #include "third_party/blink/renderer/platform/graphics/image_observer.h"
 #include "third_party/blink/renderer/platform/graphics/paint/paint_canvas.h"
@@ -197,15 +196,6 @@ Image::SizeAvailability BitmapImage::SetData(scoped_refptr<SharedBuffer> data,
   return DataChanged(all_data_received);
 }
 
-// Return the image density in 0.01 "bits per pixel" rounded to the nearest
-// integer.
-static inline uint64_t ImageDensityInCentiBpp(IntSize size,
-                                              size_t image_size_bytes) {
-  uint64_t image_area = static_cast<uint64_t>(size.Width()) * size.Height();
-  return (static_cast<uint64_t>(image_size_bytes) * 100 * 8 + image_area / 2) /
-         image_area;
-}
-
 Image::SizeAvailability BitmapImage::DataChanged(bool all_data_received) {
   TRACE_EVENT0("blink", "BitmapImage::dataChanged");
 
@@ -214,17 +204,6 @@ Image::SizeAvailability BitmapImage::DataChanged(bool all_data_received) {
   // requires a new PaintImageGenerator instance.
   cached_frame_ = PaintImage();
 
-  // Report the image density metric right after we received all the data. The
-  // SetData() call on the decoder_ (if there is one) should have decoded the
-  // images and we should know the image size at this point.
-  if (ShouldReportByteSizeUMAs(all_data_received) &&
-      decoder_->FilenameExtension() == "jpg") {
-    BitmapImageMetrics::CountImageJpegDensity(
-        std::min(Size().Width(), Size().Height()),
-        ImageDensityInCentiBpp(Size(), decoder_->ByteSize()),
-        decoder_->ByteSize());
-  }
-
   // Feed all the data we've seen so far to the image decoder.
   all_data_received_ = all_data_received;
   have_frame_count_ = false;
@@ -316,26 +295,11 @@ size_t BitmapImage::FrameCount() {
   return frame_count_;
 }
 
-static inline bool HasVisibleImageSize(IntSize size) {
-  return (size.Width() > 1 || size.Height() > 1);
-}
-
 bool BitmapImage::IsSizeAvailable() {
   if (size_available_)
     return true;
 
   size_available_ = decoder_ && decoder_->IsSizeAvailable();
-  if (size_available_ && HasVisibleImageSize(Size())) {
-    BitmapImageMetrics::CountDecodedImageType(decoder_->FilenameExtension());
-    if (decoder_->FilenameExtension() == "jpg") {
-      BitmapImageMetrics::CountImageOrientation(
-          decoder_->OrientationAtIndex(0).Orientation());
-
-      IntSize correctedSize = decoder_->DensityCorrectedSizeAtIndex(0);
-      BitmapImageMetrics::CountImageDensityCorrection(
-        !correctedSize.IsEmpty() && correctedSize != decoder_->Size());
-    }
-  }
 
   return size_available_;
 }
