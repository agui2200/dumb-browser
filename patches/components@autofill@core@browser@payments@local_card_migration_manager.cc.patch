diff --git a/components/autofill/core/browser/payments/local_card_migration_manager.cc b/components/autofill/core/browser/payments/local_card_migration_manager.cc
index ec61627e3134..bff2b3c0f0a7 100644
--- a/components/autofill/core/browser/payments/local_card_migration_manager.cc
+++ b/components/autofill/core/browser/payments/local_card_migration_manager.cc
@@ -15,7 +15,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "components/autofill/core/browser/autofill_client.h"
 #include "components/autofill/core/browser/autofill_experiments.h"
-#include "components/autofill/core/browser/autofill_metrics.h"
 #include "components/autofill/core/browser/data_model/credit_card.h"
 #include "components/autofill/core/browser/form_data_importer.h"
 #include "components/autofill/core/browser/payments/payments_client.h"
@@ -57,24 +56,14 @@ bool LocalCardMigrationManager::ShouldOfferLocalCardMigration(
   // Must be an existing card. New cards always get Upstream or local save.
   switch (imported_credit_card_record_type_) {
     case FormDataImporter::ImportedCreditCardRecordType::LOCAL_CARD:
-      local_card_migration_origin_ =
-          AutofillMetrics::LocalCardMigrationOrigin::UseOfLocalCard;
       break;
     case FormDataImporter::ImportedCreditCardRecordType::SERVER_CARD:
-      local_card_migration_origin_ =
-          AutofillMetrics::LocalCardMigrationOrigin::UseOfServerCard;
       break;
     default:
-      AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-          AutofillMetrics::LocalCardMigrationDecisionMetric::
-              NOT_OFFERED_USE_NEW_CARD);
       return false;
   }
 
   if (!IsCreditCardMigrationEnabled()) {
-    AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-        AutofillMetrics::LocalCardMigrationDecisionMetric::
-            NOT_OFFERED_FAILED_PREREQUISITES);
     return false;
   }
 
@@ -82,17 +71,11 @@ bool LocalCardMigrationManager::ShouldOfferLocalCardMigration(
   if (GetLocalCardMigrationStrikeDatabase()->IsMaxStrikesLimitReached()) {
     switch (imported_credit_card_record_type_) {
       case FormDataImporter::ImportedCreditCardRecordType::LOCAL_CARD:
-        AutofillMetrics::LogLocalCardMigrationNotOfferedDueToMaxStrikesMetric(
-            AutofillMetrics::SaveTypeMetric::LOCAL);
         break;
       case FormDataImporter::ImportedCreditCardRecordType::SERVER_CARD:
-        AutofillMetrics::LogLocalCardMigrationNotOfferedDueToMaxStrikesMetric(
-            AutofillMetrics::SaveTypeMetric::SERVER);
         break;
     }
-    AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-        AutofillMetrics::LocalCardMigrationDecisionMetric::
-            NOT_OFFERED_REACHED_MAX_STRIKE_COUNT);
+
     return false;
   }
 
@@ -113,14 +96,8 @@ bool LocalCardMigrationManager::ShouldOfferLocalCardMigration(
   } else if (imported_credit_card_record_type_ ==
                  FormDataImporter::ImportedCreditCardRecordType::LOCAL_CARD &&
              migratable_credit_cards_.size() == 1) {
-    AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-        AutofillMetrics::LocalCardMigrationDecisionMetric::
-            NOT_OFFERED_SINGLE_LOCAL_CARD);
     return false;
   } else {
-    AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-        AutofillMetrics::LocalCardMigrationDecisionMetric::
-            NOT_OFFERED_NO_MIGRATABLE_CARDS);
     return false;
   }
 }
@@ -151,9 +128,6 @@ void LocalCardMigrationManager::AttemptToOfferLocalCardMigration(
 // Call ShowMainMigrationDialog() to pop up a larger, modal dialog showing the
 // local cards to be uploaded.
 void LocalCardMigrationManager::OnUserAcceptedIntermediateMigrationDialog() {
-  AutofillMetrics::LogLocalCardMigrationPromptMetric(
-      local_card_migration_origin_,
-      AutofillMetrics::INTERMEDIATE_BUBBLE_ACCEPTED);
   ShowMainMigrationDialog();
 }
 
@@ -161,8 +135,6 @@ void LocalCardMigrationManager::OnUserAcceptedIntermediateMigrationDialog() {
 void LocalCardMigrationManager::OnUserAcceptedMainMigrationDialog(
     const std::vector<std::string>& selected_card_guids) {
   user_accepted_main_migration_dialog_ = true;
-  AutofillMetrics::LogLocalCardMigrationPromptMetric(
-      local_card_migration_origin_, AutofillMetrics::MAIN_DIALOG_ACCEPTED);
 
   // Log number of LocalCardMigration strikes when migration was accepted.
   base::UmaHistogramCounts1000(
@@ -209,9 +181,6 @@ void LocalCardMigrationManager::OnDidGetUploadDetails(
                             /*escape_apostrophes=*/true);
 
     if (legal_message_lines_.empty()) {
-      AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-          AutofillMetrics::LocalCardMigrationDecisionMetric::
-              NOT_OFFERED_INVALID_LEGAL_MESSAGE);
       return;
     }
 
@@ -222,9 +191,6 @@ void LocalCardMigrationManager::OnDidGetUploadDetails(
     // dialog. If triggered from settings page, we pop-up the main prompt
     // directly. If not, we pop up the intermediate bubble.
     if (is_from_settings_page) {
-      // Set the origin to SettingsPage.
-      local_card_migration_origin_ =
-          AutofillMetrics::LocalCardMigrationOrigin::SettingsPage;
       // Pops up a larger, modal dialog showing the local cards to be uploaded.
       ShowMainMigrationDialog();
     } else {
@@ -238,26 +204,17 @@ void LocalCardMigrationManager::OnDidGetUploadDetails(
           !payments::IsCreditCardNumberSupported(
               imported_credit_card_number_.value(),
               supported_card_bin_ranges)) {
-        AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-            AutofillMetrics::LocalCardMigrationDecisionMetric::
-                NOT_OFFERED_USE_UNSUPPORTED_LOCAL_CARD);
         return;
       }
       // Filter the migratable credit cards with |supported_card_bin_ranges|.
       FilterOutUnsupportedLocalCards(supported_card_bin_ranges);
       // Abandon the migration if no supported card left.
       if (migratable_credit_cards_.empty()) {
-        AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-            AutofillMetrics::LocalCardMigrationDecisionMetric::
-                NOT_OFFERED_NO_SUPPORTED_CARDS);
         return;
       }
       client_->ShowLocalCardMigrationDialog(base::BindOnce(
           &LocalCardMigrationManager::OnUserAcceptedIntermediateMigrationDialog,
           weak_ptr_factory_.GetWeakPtr()));
-      AutofillMetrics::LogLocalCardMigrationPromptMetric(
-          local_card_migration_origin_,
-          AutofillMetrics::INTERMEDIATE_BUBBLE_SHOWN);
     }
 
     // TODO(crbug.com/876895): Clean up the LoadRiskData Bind/BindRepeating
@@ -265,12 +222,6 @@ void LocalCardMigrationManager::OnDidGetUploadDetails(
     client_->LoadRiskData(base::BindRepeating(
         &LocalCardMigrationManager::OnDidGetMigrationRiskData,
         weak_ptr_factory_.GetWeakPtr()));
-    AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-        AutofillMetrics::LocalCardMigrationDecisionMetric::OFFERED);
-  } else {
-    AutofillMetrics::LogLocalCardMigrationDecisionMetric(
-        AutofillMetrics::LocalCardMigrationDecisionMetric::
-            NOT_OFFERED_GET_UPLOAD_DETAILS_FAILED);
   }
 }
 
@@ -376,8 +327,6 @@ LocalCardMigrationManager::GetLocalCardMigrationStrikeDatabase() {
 // OnUserAcceptedMainMigrationDialog(). Can be called when user agrees to
 // migration on the intermediate dialog or directly from settings page.
 void LocalCardMigrationManager::ShowMainMigrationDialog() {
-  AutofillMetrics::LogLocalCardMigrationPromptMetric(
-      local_card_migration_origin_, AutofillMetrics::MAIN_DIALOG_SHOWN);
   // Pops up a larger, modal dialog showing the local cards to be uploaded.
   client_->ConfirmMigrateLocalCardToCloud(
       legal_message_lines_,
