diff --git a/content/browser/background_sync/background_sync_manager.cc b/content/browser/background_sync/background_sync_manager.cc
index b196c9b50e34..b53c73de4b4d 100644
--- a/content/browser/background_sync/background_sync_manager.cc
+++ b/content/browser/background_sync/background_sync_manager.cc
@@ -18,7 +18,6 @@
 #include "base/time/default_clock.h"
 #include "base/time/time.h"
 #include "build/build_config.h"
-#include "content/browser/background_sync/background_sync_metrics.h"
 #include "content/browser/background_sync/background_sync_network_observer.h"
 #include "content/browser/service_worker/embedded_worker_status.h"
 #include "content/browser/service_worker/service_worker_context_wrapper.h"
@@ -83,8 +82,6 @@ void RecordFailureAndPostError(
     BackgroundSyncType sync_type,
     BackgroundSyncStatus status,
     BackgroundSyncManager::StatusAndRegistrationCallback callback) {
-  BackgroundSyncMetrics::CountRegisterFailure(sync_type, status);
-
   base::ThreadTaskRunnerHandle::Get()->PostTask(
       FROM_HERE, base::BindOnce(std::move(callback), status, nullptr));
 }
@@ -985,15 +982,6 @@ void BackgroundSyncManager::RegisterDidAskForPermission(
               GetBackgroundSyncType(options));
 
     if (existing_registration->options()->Equals(options)) {
-      BackgroundSyncMetrics::RegistrationCouldFire registration_could_fire =
-          AreOptionConditionsMet()
-              ? BackgroundSyncMetrics::REGISTRATION_COULD_FIRE
-              : BackgroundSyncMetrics::REGISTRATION_COULD_NOT_FIRE;
-      BackgroundSyncMetrics::CountRegisterSuccess(
-          existing_registration->sync_type(), options.min_interval,
-          registration_could_fire,
-          BackgroundSyncMetrics::REGISTRATION_IS_DUPLICATE);
-
       if (existing_registration->IsFiring()) {
         existing_registration->set_sync_state(
             blink::mojom::BackgroundSyncState::REREGISTERED_WHILE_FIRING);
@@ -1128,14 +1116,11 @@ void BackgroundSyncManager::UnregisterPeriodicSyncDidStore(
   DCHECK_CURRENTLY_ON(ServiceWorkerContext::GetCoreThreadId());
 
   if (status != blink::ServiceWorkerStatusCode::kOk) {
-    BackgroundSyncMetrics::CountUnregisterPeriodicSync(
-        BACKGROUND_SYNC_STATUS_STORAGE_ERROR);
     DisableAndClearManager(base::BindOnce(
         std::move(callback), BACKGROUND_SYNC_STATUS_STORAGE_ERROR));
     return;
   }
 
-  BackgroundSyncMetrics::CountUnregisterPeriodicSync(BACKGROUND_SYNC_STATUS_OK);
   ScheduleOrCancelDelayedProcessing(BackgroundSyncType::PERIODIC);
   base::ThreadTaskRunnerHandle::Get()->PostTask(
       FROM_HERE,
@@ -1269,8 +1254,6 @@ void BackgroundSyncManager::RegisterDidStore(
   }
 
   if (status != blink::ServiceWorkerStatusCode::kOk) {
-    BackgroundSyncMetrics::CountRegisterFailure(
-        registration.sync_type(), BACKGROUND_SYNC_STATUS_STORAGE_ERROR);
     DisableAndClearManager(base::BindOnce(
         std::move(callback), BACKGROUND_SYNC_STATUS_STORAGE_ERROR, nullptr));
     return;
@@ -1280,15 +1263,6 @@ void BackgroundSyncManager::RegisterDidStore(
   if (registration.sync_type() == BackgroundSyncType::PERIODIC)
     proxy_->AddToTrackedOrigins(registration.origin());
 
-  BackgroundSyncMetrics::RegistrationCouldFire registration_could_fire =
-      AreOptionConditionsMet()
-          ? BackgroundSyncMetrics::REGISTRATION_COULD_FIRE
-          : BackgroundSyncMetrics::REGISTRATION_COULD_NOT_FIRE;
-  BackgroundSyncMetrics::CountRegisterSuccess(
-      registration.sync_type(), registration.options()->min_interval,
-      registration_could_fire,
-      BackgroundSyncMetrics::REGISTRATION_IS_NOT_DUPLICATE);
-
   ScheduleOrCancelDelayedProcessing(BackgroundSyncType::PERIODIC);
 
   // Tell the client that the registration is ready. We won't fire it until the
@@ -2026,12 +2000,6 @@ void BackgroundSyncManager::FireReadyEventsImpl(
     }
   }
 
-  if (!reschedule) {
-    // This method has been called from a Chrome wakeup task.
-    BackgroundSyncMetrics::RecordEventsFiredFromWakeupTask(
-        sync_type, /* events_fired= */ !to_fire.empty());
-  }
-
   if (to_fire.empty()) {
     // TODO(crbug.com/996166): Reschedule wakeup after a non-zero delay if
     // called from a wakeup task.
@@ -2139,9 +2107,9 @@ void BackgroundSyncManager::FireReadyEventsDidFindRegistration(
   const bool last_chance =
       registration->num_attempts() == registration->max_attempts() - 1;
 
-  HasMainFrameWindowClient(
-      url::Origin::Create(service_worker_registration->scope().GetOrigin()),
-      base::BindOnce(&BackgroundSyncMetrics::RecordEventStarted, sync_type));
+  // HasMainFrameWindowClient(
+  //     url::Origin::Create(service_worker_registration->scope().GetOrigin()),
+  //     base::BindOnce(&BackgroundSyncMetrics::RecordEventStarted, sync_type));
 
   if (sync_type == BackgroundSyncType::ONE_SHOT) {
     DispatchSyncEvent(
@@ -2199,11 +2167,11 @@ void BackgroundSyncManager::EventComplete(
   // from here.
   url::Origin origin =
       url::Origin::Create(service_worker_registration->scope().GetOrigin());
-  HasMainFrameWindowClient(
-      origin,
-      base::BindOnce(&BackgroundSyncMetrics::RecordEventResult,
-                     registration_info->sync_type,
-                     status_code == blink::ServiceWorkerStatusCode::kOk));
+  // HasMainFrameWindowClient(
+  //     origin,
+  //     base::BindOnce(&BackgroundSyncMetrics::RecordEventResult,
+  //                    registration_info->sync_type,
+  //                    status_code == blink::ServiceWorkerStatusCode::kOk));
 
   auto id = op_scheduler_.CreateId();
   op_scheduler_.ScheduleOperation(
@@ -2346,9 +2314,6 @@ void BackgroundSyncManager::EventCompleteDidGetDelay(
   }
 
   if (registration_completed) {
-    BackgroundSyncMetrics::RecordRegistrationComplete(
-        succeeded, registration->num_attempts());
-
     if (ShouldLogToDevTools(registration->sync_type())) {
       devtools_context_->LogBackgroundServiceEventOnCoreThread(
           registration_info->service_worker_registration_id, origin,
@@ -2420,10 +2385,6 @@ void BackgroundSyncManager::OnAllSyncEventsCompleted(
     bool from_wakeup_task,
     int number_of_batched_sync_events,
     base::OnceClosure callback) {
-  // Record the combined time taken by all sync events.
-  BackgroundSyncMetrics::RecordBatchSyncEventComplete(
-      sync_type, base::TimeTicks::Now() - start_time, from_wakeup_task,
-      number_of_batched_sync_events);
   base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, std::move(callback));
 }
 
