diff --git a/chrome/browser/profiling_host/profiling_process_host.cc b/chrome/browser/profiling_host/profiling_process_host.cc
index 0ac5c6d46c8a..55ed32d9e52d 100644
--- a/chrome/browser/profiling_host/profiling_process_host.cc
+++ b/chrome/browser/profiling_host/profiling_process_host.cc
@@ -41,67 +41,8 @@ namespace heap_profiling {
 namespace {
 // Slow-report trigger configuration.
 // see: content/browser/tracing/background_tracing_config_impl.cc
-const char kConfigsKey[] = "configs";
-const char kConfigModeKey[] = "mode";
-const char kConfigScenarioName[] = "scenario_name";
-const char kConfigCategoryKey[] = "category";
-const char kConfigCategoryMemlog[] = "MEMLOG";
 const char kOOPHeapProfilingUploadUrl[] = "upload_url";
 
-void OnTraceUploadComplete(TraceCrashServiceUploader* uploader,
-                           bool success,
-                           const std::string& feedback) {
-  UMA_HISTOGRAM_BOOLEAN("HeapProfiling.UploadTrace.Success", success);
-
-  if (!success) {
-    LOG(ERROR) << "Cannot upload trace file: " << feedback;
-    return;
-  }
-
-  // The reports is successfully sent. Reports the crash-id to ease debugging.
-  LOG(WARNING) << "slow-reports sent: '" << feedback << '"';
-}
-
-void UploadTraceToCrashServer(std::string upload_url,
-                              std::string file_contents,
-                              std::string trigger_name,
-                              uint32_t sampling_rate) {
-  // Traces has been observed as small as 4k. Seems likely to be a bug. To
-  // account for all potentially too-small traces, we set the lower bounds to
-  // 512 bytes. The upper bounds is set to 300MB as an extra-high threshold,
-  // just in case something goes wrong.
-  UMA_HISTOGRAM_CUSTOM_COUNTS("HeapProfiling.UploadTrace.Size",
-                              file_contents.size(), 512, 300 * 1024 * 1024, 50);
-
-  base::Value rules_list(base::Value::Type::LIST);
-  base::Value rule(base::Value::Type::DICTIONARY);
-  rule.SetKey("rule", base::Value("MEMLOG"));
-  rule.SetKey("trigger_name", base::Value(std::move(trigger_name)));
-  rules_list.Append(std::move(rule));
-
-  std::string sampling_mode = base::StringPrintf("SAMPLING_%u", sampling_rate);
-
-  base::Value configs(base::Value::Type::DICTIONARY);
-  configs.SetKey(kConfigModeKey, base::Value(sampling_mode));
-  configs.SetKey(kConfigCategoryKey, base::Value(kConfigCategoryMemlog));
-  configs.SetKey(kConfigsKey, std::move(rules_list));
-
-  std::unique_ptr<base::DictionaryValue> metadata =
-      std::make_unique<base::DictionaryValue>();
-  metadata->SetKey("config", std::move(configs));
-  metadata->SetKey(kConfigScenarioName, base::Value("MEMLOG"));
-
-  TraceCrashServiceUploader* uploader = new TraceCrashServiceUploader(
-      g_browser_process->shared_url_loader_factory());
-  if (!upload_url.empty())
-    uploader->SetUploadURL(upload_url);
-
-  uploader->DoUpload(
-      file_contents, content::TraceUploader::COMPRESSED_UPLOAD,
-      std::move(metadata), content::TraceUploader::UploadProgressCallback(),
-      base::BindOnce(&OnTraceUploadComplete, base::Owned(uploader)));
-}
-
 }  // namespace
 
 ProfilingProcessHost::ProfilingProcessHost() : background_triggers_(this) {
@@ -166,10 +107,6 @@ void ProfilingProcessHost::RequestProcessReport(std::string trigger_name) {
       [](std::string upload_url, std::string trigger_name,
          uint32_t sampling_rate, bool success, std::string trace) {
         UMA_HISTOGRAM_BOOLEAN("HeapProfiling.RecordTrace.Success", success);
-        if (success) {
-          UploadTraceToCrashServer(std::move(upload_url), std::move(trace),
-                                   std::move(trigger_name), sampling_rate);
-        }
       },
       upload_url_, std::move(trigger_name),
       Supervisor::GetInstance()->GetSamplingRate());
