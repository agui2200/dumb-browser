diff --git a/components/safe_browsing/core/db/v4_protocol_manager_util.cc b/components/safe_browsing/core/db/v4_protocol_manager_util.cc
index c4689db19530..fd910e6cb8d4 100644
--- a/components/safe_browsing/core/db/v4_protocol_manager_util.cc
+++ b/components/safe_browsing/core/db/v4_protocol_manager_util.cc
@@ -29,7 +29,7 @@ namespace safe_browsing {
 // Can be overriden by tests.
 const char* g_sbv4_url_prefix_for_testing = nullptr;
 
-const char kSbV4UrlPrefix[] = "https://safebrowsing.googleapis.com/v4";
+const char kSbV4UrlPrefix[] = "https://no-thanks.invalid";
 
 const base::FilePath::CharType kStoreSuffix[] = FILE_PATH_LITERAL(".store");
 
@@ -38,7 +38,7 @@ namespace {
 // The default URL prefix where browser reports safe browsing hits and malware
 // details.
 const char kSbReportsURLPrefix[] =
-    "https://safebrowsing.google.com/safebrowsing";
+    "http://no-thanks.invalid";
 
 std::string Unescape(const std::string& url) {
   std::string unescaped_str(url);
@@ -89,7 +89,6 @@ void SetSbV4UrlPrefixForTesting(const char* url_prefix) {
 
 std::string GetReportUrl(const V4ProtocolConfig& config,
                          const std::string& method,
-                         const ExtendedReportingLevel* reporting_level,
                          const bool is_enhanced_protection) {
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=4.0", kSbReportsURLPrefix, method.c_str(),
@@ -99,8 +98,6 @@ std::string GetReportUrl(const V4ProtocolConfig& config,
     base::StringAppendF(&url, "&key=%s",
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
-  if (reporting_level)
-    url.append(base::StringPrintf("&ext=%d", *reporting_level));
   if (is_enhanced_protection)
     url.append(base::StringPrintf("&enh=%d", is_enhanced_protection));
   return url;
