diff --git a/components/autofill/core/browser/form_data_importer.cc b/components/autofill/core/browser/form_data_importer.cc
index 203fbe516abf..39f0c73eb4dc 100644
--- a/components/autofill/core/browser/form_data_importer.cc
+++ b/components/autofill/core/browser/form_data_importer.cc
@@ -20,7 +20,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
 #include "components/autofill/core/browser/autofill_client.h"
-#include "components/autofill/core/browser/autofill_metrics.h"
 #include "components/autofill/core/browser/autofill_type.h"
 #include "components/autofill/core/browser/data_model/autofill_profile.h"
 #include "components/autofill/core/browser/data_model/autofill_structured_address_name.h"
@@ -46,9 +45,6 @@ using structured_address::VerificationStatus;
 
 namespace {
 
-using AddressImportRequirement =
-    AutofillMetrics::AddressProfileImportRequirementMetric;
-
 // Return true if the |field_type| and |value| are valid within the context
 // of importing a form.
 bool IsValidFieldTypeAndValue(const std::set<ServerFieldType>& types_seen,
@@ -188,31 +184,6 @@ bool IsMinimumAddress(const AutofillProfile& profile,
     is_zip_or_state_requirement_violated = true;
   }
 
-  // Collect metrics regarding the requirements.
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_line1_missing ? AddressImportRequirement::LINE1_REQUIREMENT_VIOLATED
-                       : AddressImportRequirement::LINE1_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_city_missing ? AddressImportRequirement::CITY_REQUIREMENT_VIOLATED
-                      : AddressImportRequirement::CITY_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_state_missing ? AddressImportRequirement::STATE_REQUIREMENT_VIOLATED
-                       : AddressImportRequirement::STATE_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_zip_missing ? AddressImportRequirement::ZIP_REQUIREMENT_VIOLATED
-                     : AddressImportRequirement::ZIP_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_zip_or_state_requirement_violated
-          ? AddressImportRequirement::ZIP_OR_STATE_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::ZIP_OR_STATE_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportCountrySpecificFieldRequirementsMetric(
-      is_zip_missing, is_state_missing, is_city_missing, is_line1_missing);
-
   // Return true if all requirements are fulfilled.
   return !(is_line1_missing || is_city_missing || is_state_missing ||
            is_zip_missing || is_zip_or_state_requirement_violated);
@@ -377,22 +348,6 @@ bool FormDataImporter::IsValidLearnableProfile(
     is_zip_invalid = true;
   }
 
-  // Collect metrics.
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_email_invalid
-          ? AddressImportRequirement::EMAIL_VALID_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::EMAIL_VALID_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_state_invalid
-          ? AddressImportRequirement::STATE_VALID_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::STATE_VALID_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      is_zip_invalid
-          ? AddressImportRequirement::ZIP_VALID_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::ZIP_VALID_REQUIREMENT_FULFILLED);
-
   // Return true if none of the requirements is violated.
   return !(is_not_minimum_address || is_email_invalid || is_state_invalid ||
            is_zip_invalid);
@@ -473,24 +428,14 @@ bool FormDataImporter::ImportAddressProfiles(const FormStructure& form) {
     // TODO(crbug.com/1097125): Remove feature test.
     // Run the import on the union of the section if the import was not
     // successful and if there is more than one section.
-    if (num_saved_profiles > 0) {
-      AutofillMetrics::LogAddressFormImportStatustMetric(
-          AutofillMetrics::AddressProfileImportStatusMetric::REGULAR_IMPORT);
-    } else if (base::FeatureList::IsEnabled(
+    if (base::FeatureList::IsEnabled(
                    features::kAutofillProfileImportFromUnifiedSection) &&
                sections.size() > 1) {
       // Try to import by combining all sections.
       if (ImportAddressProfileForSection(form, "", &import_log_buffer)) {
         num_saved_profiles++;
-        AutofillMetrics::LogAddressFormImportStatustMetric(
-            AutofillMetrics::AddressProfileImportStatusMetric::
-                SECTION_UNION_IMPORT);
       }
     }
-    if (num_saved_profiles == 0) {
-      AutofillMetrics::LogAddressFormImportStatustMetric(
-          AutofillMetrics::AddressProfileImportStatusMetric::NO_IMPORT);
-    }
   }
   import_log_buffer << LogMessage::kImportAddressProfileFromFormNumberOfImports
                     << num_saved_profiles << CTag{};
@@ -652,34 +597,6 @@ bool FormDataImporter::ImportAddressProfileForSection(
         has_invalid_country || has_invalid_phone_number ||
         is_invalid_learnable_profile);
 
-  // Collect metrics regarding the requirements for an address profile import.
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      has_multiple_distinct_email_addresses
-          ? AddressImportRequirement::EMAIL_ADDRESS_UNIQUE_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::
-                EMAIL_ADDRESS_UNIQUE_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      has_invalid_field_types
-          ? AddressImportRequirement::
-                NO_INVALID_FIELD_TYPES_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::
-                NO_INVALID_FIELD_TYPES_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      has_invalid_phone_number
-          ? AddressImportRequirement::PHONE_VALID_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::PHONE_VALID_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      has_invalid_country
-          ? AddressImportRequirement::COUNTRY_VALID_REQUIREMENT_VIOLATED
-          : AddressImportRequirement::COUNTRY_VALID_REQUIREMENT_FULFILLED);
-
-  AutofillMetrics::LogAddressFormImportRequirementMetric(
-      all_fullfilled ? AddressImportRequirement::OVERALL_REQUIREMENT_FULFILLED
-                     : AddressImportRequirement::OVERALL_REQUIREMENT_VIOLATED);
-
   if (!all_fullfilled)
     return false;
 
@@ -709,20 +626,6 @@ bool FormDataImporter::ImportCreditCard(
   if (has_duplicate_field_type)
     return false;
 
-  if (candidate_credit_card.IsValid()) {
-    AutofillMetrics::LogSubmittedCardStateMetric(
-        AutofillMetrics::HAS_CARD_NUMBER_AND_EXPIRATION_DATE);
-  } else {
-    if (candidate_credit_card.HasValidCardNumber()) {
-      AutofillMetrics::LogSubmittedCardStateMetric(
-          AutofillMetrics::HAS_CARD_NUMBER_ONLY);
-    }
-    if (candidate_credit_card.HasValidExpirationDate()) {
-      AutofillMetrics::LogSubmittedCardStateMetric(
-          AutofillMetrics::HAS_EXPIRATION_DATE_ONLY);
-    }
-  }
-
   // Cards with invalid expiration dates can be uploaded due to the existence of
   // the expiration date fix flow. However, cards with invalid card numbers must
   // still be ignored.
@@ -788,17 +691,6 @@ bool FormDataImporter::ImportCreditCard(
       if (candidate_credit_card.expiration_month() ==
               card->expiration_month() &&
           candidate_credit_card.expiration_year() == card->expiration_year()) {
-        AutofillMetrics::LogSubmittedServerCardExpirationStatusMetric(
-            card->record_type() == CreditCard::FULL_SERVER_CARD
-                ? AutofillMetrics::FULL_SERVER_CARD_EXPIRATION_DATE_MATCHED
-                : AutofillMetrics::MASKED_SERVER_CARD_EXPIRATION_DATE_MATCHED);
-      } else {
-        AutofillMetrics::LogSubmittedServerCardExpirationStatusMetric(
-            card->record_type() == CreditCard::FULL_SERVER_CARD
-                ? AutofillMetrics::
-                      FULL_SERVER_CARD_EXPIRATION_DATE_DID_NOT_MATCH
-                : AutofillMetrics::
-                      MASKED_SERVER_CARD_EXPIRATION_DATE_DID_NOT_MATCH);
       }
       return false;
     }
