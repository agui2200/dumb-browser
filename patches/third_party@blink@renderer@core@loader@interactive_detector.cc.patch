diff --git a/third_party/blink/renderer/core/loader/interactive_detector.cc b/third_party/blink/renderer/core/loader/interactive_detector.cc
index 7db2d3b0d25f..889cd802ab01 100644
--- a/third_party/blink/renderer/core/loader/interactive_detector.cc
+++ b/third_party/blink/renderer/core/loader/interactive_detector.cc
@@ -6,8 +6,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/profiler/sample_metadata.h"
 #include "base/time/default_tick_clock.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "third_party/blink/renderer/core/dom/document.h"
 #include "third_party/blink/renderer/core/dom/events/event.h"
 #include "third_party/blink/renderer/core/frame/local_frame.h"
@@ -75,8 +73,7 @@ InteractiveDetector::InteractiveDetector(
           document.GetTaskRunner(TaskType::kInternalDefault),
           this,
           &InteractiveDetector::TimeToInteractiveTimerFired),
-      initially_hidden_(document.hidden()),
-      ukm_recorder_(document.UkmRecorder()) {}
+      initially_hidden_(document.hidden()) {}
 
 void InteractiveDetector::SetNavigationStartTime(
     base::TimeTicks navigation_start_time) {
@@ -628,66 +625,6 @@ void InteractiveDetector::SetTaskRunnerForTesting(
   time_to_interactive_timer_.MoveToNewTaskRunner(task_runner_for_testing);
 }
 
-ukm::UkmRecorder* InteractiveDetector::GetUkmRecorder() const {
-  return ukm_recorder_;
-}
-
-void InteractiveDetector::SetUkmRecorderForTesting(
-    ukm::UkmRecorder* test_ukm_recorder) {
-  ukm_recorder_ = test_ukm_recorder;
-}
-
-void InteractiveDetector::RecordInputEventTimingUKM(
-    const Event& event,
-    base::TimeTicks event_timestamp,
-    base::TimeTicks processing_start,
-    base::TimeTicks processing_end) {
-  DCHECK(event.isTrusted());
-
-  // This only happens sometimes on tests unrelated to InteractiveDetector. It
-  // is safe to ignore events that are not properly initialized.
-  if (event_timestamp.is_null())
-    return;
-
-  // We can't report a pointerDown until the pointerUp, in case it turns into a
-  // scroll.
-  if (event.type() == event_type_names::kPointerdown) {
-    pending_pointerdown_processing_time_ = processing_end - processing_start;
-    return;
-  }
-
-  base::TimeDelta input_delay;
-  base::TimeDelta processing_time;
-  if (event.type() == event_type_names::kPointerup) {
-    // PointerUp by itself is not considered a significant input.
-    if (!pending_pointerdown_processing_time_)
-      return;
-
-    input_delay = pending_pointerdown_delay_;
-    processing_time = pending_pointerdown_processing_time_.value();
-  } else {
-    processing_time = processing_end - processing_start;
-    input_delay = processing_start - event_timestamp;
-  }
-  pending_pointerdown_delay_ = base::TimeDelta();
-  pending_pointerdown_processing_time_ = base::nullopt;
-
-  // Record InputDelay and Input Event Processing Time UKM.
-  ukm::SourceId source_id = GetSupplementable()->UkmSourceID();
-  DCHECK_NE(source_id, ukm::kInvalidSourceId);
-  ukm::builders::InputEvent(source_id)
-      .SetInteractiveTiming_InputDelay(input_delay.InMilliseconds())
-      .SetInteractiveTiming_ProcessingTime(processing_time.InMilliseconds())
-      .Record(GetUkmRecorder());
-
-  if (!page_event_times_.first_input_processing_time) {
-    page_event_times_.first_input_processing_time = processing_time;
-    if (GetSupplementable()->Loader()) {
-      GetSupplementable()->Loader()->DidChangePerformanceTiming();
-    }
-  }
-}
-
 void InteractiveDetector::DidObserveFirstScrollDelay(
     base::TimeDelta first_scroll_delay,
     base::TimeTicks first_scroll_timestamp) {
