diff --git a/chrome/browser/download/chrome_download_manager_delegate.cc b/chrome/browser/download/chrome_download_manager_delegate.cc
index 9f3e66afa946..b31f29384957 100644
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -28,8 +28,6 @@
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.h"
-#include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings_factory.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
 #include "chrome/browser/download/download_crx_util.h"
@@ -39,19 +37,13 @@
 #include "chrome/browser/download/download_item_model.h"
 #include "chrome/browser/download/download_prefs.h"
 #include "chrome/browser/download/download_request_limiter.h"
-#include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/download/download_target_determiner.h"
 #include "chrome/browser/download/mixed_content_download_blocking.h"
 #include "chrome/browser/download/save_package_file_picker.h"
 #include "chrome/browser/enterprise/connectors/common.h"
 #include "chrome/browser/enterprise/connectors/file_system/rename_handler.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/buildflags.h"
@@ -71,9 +63,6 @@
 #include "components/prefs/pref_member.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/file_type_policies.h"
-#include "components/services/quarantine/public/mojom/quarantine.mojom.h"
-#include "components/services/quarantine/quarantine_impl.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_item_utils.h"
@@ -131,8 +120,6 @@ using content::DownloadManager;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadFileType;
-using safe_browsing::DownloadProtectionService;
 
 namespace {
 
@@ -290,7 +277,6 @@ void OnCheckExistingDownloadPathDone(
     content::DownloadTargetCallback callback,
     bool file_exists) {
   if (file_exists) {
-    RecordDownloadCancelReason(DownloadCancelReason::kExistingDownloadPath);
     target_info->result = download::DOWNLOAD_INTERRUPT_REASON_USER_CANCELED;
   }
 
@@ -352,15 +338,6 @@ void MaybeReportDangerousDownloadBlocked(
   if (!profile)
     return;
 
-  // If |download| has a deep scanning malware verdict, then it means the
-  // dangerous file has already been reported.
-  auto* scan_result = static_cast<enterprise_connectors::ScanResult*>(
-      download->GetUserData(enterprise_connectors::ScanResult::kKey));
-  if (scan_result &&
-      enterprise_connectors::ContainsMalwareVerdict(scan_result->response)) {
-    return;
-  }
-
   auto* router =
       extensions::SafeBrowsingPrivateEventRouterFactory::GetForProfile(profile);
   if (router) {
@@ -394,13 +371,6 @@ ChromeDownloadManagerDelegate::~ChromeDownloadManagerDelegate() {
 
 void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {
   download_manager_ = dm;
-
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && !profile_->IsOffTheRecord()) {
-    // Include this download manager in the set monitored by safe browsing.
-    sb_service->AddDownloadManager(dm);
-  }
 }
 
 #if defined(OS_ANDROID)
@@ -442,7 +412,6 @@ void ChromeDownloadManagerDelegate::SetNextId(uint32_t next_id) {
   // |download::DownloadItem::kInvalidId| will be returned only when history
   // database failed to initialize.
   bool history_db_available = (next_id != download::DownloadItem::kInvalidId);
-  RecordDatabaseAvailability(history_db_available);
   if (history_db_available)
     next_download_id_ = next_id;
   next_id_retrieved_ = true;
@@ -741,16 +710,6 @@ void ChromeDownloadManagerDelegate::ChooseSavePath(
 
 void ChromeDownloadManagerDelegate::SanitizeSavePackageResourceName(
     base::FilePath* filename) {
-  safe_browsing::FileTypePolicies* file_type_policies =
-      safe_browsing::FileTypePolicies::GetInstance();
-
-  if (file_type_policies->GetFileDangerLevel(*filename) ==
-      safe_browsing::DownloadFileType::NOT_DANGEROUS)
-    return;
-
-  base::FilePath default_filename = base::FilePath::FromUTF8Unsafe(
-      l10n_util::GetStringUTF8(IDS_DEFAULT_DOWNLOAD_FILENAME));
-  *filename = filename->AddExtension(default_filename.BaseName().value());
 }
 
 void ChromeDownloadManagerDelegate::SanitizeDownloadParameters(
@@ -790,12 +749,10 @@ void ChromeDownloadManagerDelegate::OpenDownload(DownloadItem* download) {
   download::DownloadItemRenameHandler* handler = download->GetRenameHandler();
   if (handler) {
     handler->OpenDownload();
-    RecordDownloadOpenMethod(DOWNLOAD_OPEN_METHOD_RENAME_HANDLER);
     return;
   }
 
   if (!DownloadItemModel(download).ShouldPreferOpeningInBrowser()) {
-    RecordDownloadOpenMethod(DOWNLOAD_OPEN_METHOD_DEFAULT_PLATFORM);
     OpenDownloadUsingPlatformHandler(download);
     return;
   }
@@ -820,8 +777,6 @@ void ChromeDownloadManagerDelegate::OpenDownload(DownloadItem* download) {
     chrome::ShowSettingsSubPage(browser, "certificates");
   else
     browser->OpenURL(params);
-
-  RecordDownloadOpenMethod(DOWNLOAD_OPEN_METHOD_DEFAULT_BROWSER);
 #endif  // OS_ANDROID
 }
 
@@ -878,19 +833,6 @@ ChromeDownloadManagerDelegate::ApplicationClientIdForFileScanning() {
   return std::string(chrome::kApplicationClientIDStringForAVScanning);
 }
 
-DownloadProtectionService*
-    ChromeDownloadManagerDelegate::GetDownloadProtectionService() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && sb_service->download_protection_service()) {
-    return sb_service->download_protection_service();
-  }
-#endif
-  return nullptr;
-}
-
 void ChromeDownloadManagerDelegate::GetMixedContentStatus(
     download::DownloadItem* download,
     const base::FilePath& virtual_path,
@@ -1221,21 +1163,6 @@ bool ChromeDownloadManagerDelegate::ShouldShowDownloadLaterDialog() const {
   if (require_cellular && !on_cellular)
     return false;
 
-  // Check lite mode if the download later prompt is never shown before.
-  if (!download_prefs_->HasDownloadLaterPromptShown()) {
-    bool require_lite_mode = base::GetFieldTrialParamByFeatureAsBool(
-        download::features::kDownloadLater,
-        download::features::kDownloadLaterRequireLiteMode,
-        /*default_value=*/false);
-    auto* data_reduction_settings =
-        DataReductionProxyChromeSettingsFactory::GetForBrowserContext(profile_);
-    bool lite_mode_enabled =
-        data_reduction_settings->IsDataReductionProxyEnabled();
-
-    if (require_lite_mode && !lite_mode_enabled)
-      return false;
-  }
-
   return download_prefs_->PromptDownloadLater();
 }
 
@@ -1448,8 +1375,6 @@ void ChromeDownloadManagerDelegate::OnDownloadTargetDetermined(
     if (item->GetOriginalMimeType() == "application/x-x509-user-cert")
       DownloadItemModel(item).SetShouldPreferOpeningInBrowser(true);
 #endif
-
-    DownloadItemModel(item).SetDangerLevel(target_info->danger_level);
   }
   if (ShouldBlockFile(target_info->danger_type, item)) {
     MaybeReportDangerousDownloadBlocked(
@@ -1636,28 +1561,13 @@ ChromeDownloadManagerDelegate::GetQuarantineConnectionCallback() {
 std::unique_ptr<download::DownloadItemRenameHandler>
 ChromeDownloadManagerDelegate::GetRenameHandlerForDownload(
     download::DownloadItem* download_item) {
-#if defined(OS_WIN) || defined(OS_LINUX) || defined(OS_CHROMEOS) || \
-    defined(OS_MAC)
-  return enterprise_connectors::FileSystemRenameHandler::CreateIfNeeded(
-      download_item);
-#else
   return nullptr;
-#endif
 }
 
 void ChromeDownloadManagerDelegate::OnCheckDownloadAllowedComplete(
     content::CheckDownloadAllowedCallback check_download_allowed_cb,
     bool storage_permission_granted,
     bool allow) {
-  if (!storage_permission_granted) {
-    // UMA for this will be recorded in MobileDownload.StoragePermission.
-  } else if (allow) {
-    // Presumes all downloads initiated by navigation use this throttle and
-    // nothing else does.
-    RecordDownloadSource(DOWNLOAD_INITIATED_BY_NAVIGATION);
-  } else {
-    RecordDownloadCount(CHROME_DOWNLOAD_COUNT_BLOCKED_BY_THROTTLING);
-  }
 
   std::move(check_download_allowed_cb).Run(allow);
 }
@@ -1677,16 +1587,4 @@ ChromeDownloadManagerDelegate::GetWeakPtr() {
 // static
 void ChromeDownloadManagerDelegate::ConnectToQuarantineService(
     mojo::PendingReceiver<quarantine::mojom::Quarantine> receiver) {
-#if defined(OS_WIN)
-  if (base::FeatureList::IsEnabled(quarantine::kOutOfProcessQuarantine)) {
-    content::ServiceProcessHost::Launch(
-        std::move(receiver), content::ServiceProcessHost::Options()
-                                 .WithDisplayName("Quarantine Service")
-                                 .Pass());
-    return;
-  }
-#endif
-
-  mojo::MakeSelfOwnedReceiver(std::make_unique<quarantine::QuarantineImpl>(),
-                              std::move(receiver));
 }
