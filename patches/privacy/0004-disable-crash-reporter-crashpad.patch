--- a/services/network/cors/cors_url_loader_factory.cc
+++ b/services/network/cors/cors_url_loader_factory.cc
@@ -15,7 +15,6 @@
 #include "net/base/load_flags.h"
 #include "services/network/cors/cors_url_loader.h"
 #include "services/network/cors/preflight_controller.h"
-#include "services/network/crash_keys.h"
 #include "services/network/cross_origin_read_blocking.h"
 #include "services/network/network_context.h"
 #include "services/network/network_service.h"
@@ -236,7 +235,6 @@ void CorsURLLoaderFactory::CreateLoaderA
     const ResourceRequest& resource_request,
     mojo::PendingRemote<mojom::URLLoaderClient> client,
     const net::MutableNetworkTrafficAnnotationTag& traffic_annotation) {
-  debug::ScopedRequestCrashKeys request_crash_keys(resource_request);

   if (!IsValidRequest(resource_request, options)) {
     mojo::Remote<mojom::URLLoaderClient>(std::move(client))
@@ -407,9 +405,6 @@ bool CorsURLLoaderFactory::IsValidReques
       NOTREACHED();
       if (base::FeatureList::IsEnabled(
               features::kRequestInitiatorSiteLockEnfocement)) {
-        url::debug::ScopedOriginCrashKey initiator_lock_crash_key(
-            debug::GetRequestInitiatorSiteLockCrashKey(),
-            base::OptionalOrNullptr(request_initiator_site_lock_));
         mojo::ReportBadMessage(
             "CorsURLLoaderFactory: lock VS initiator mismatch");
         return false;
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -205,8 +205,6 @@ static_library("ui") {
     "webui/constrained_web_dialog_ui.h",
     "webui/cookies_tree_model_util.cc",
     "webui/cookies_tree_model_util.h",
-    "webui/crashes_ui.cc",
-    "webui/crashes_ui.h",
     "webui/device_log_ui.cc",
     "webui/device_log_ui.h",
     "webui/domain_reliability_internals_ui.cc",
@@ -605,8 +603,6 @@ static_library("ui") {
   if (!is_fuchsia) {
     # TODO(crbug.com/753619): Enable crash reporting on Fuchsia.
     deps += [
-      "//components/crash/core/app",
-      "//components/crash/core/browser",
     ]
   }

--- a/chrome/browser/chrome_browser_application_mac.mm
+++ b/chrome/browser/chrome_browser_application_mac.mm
@@ -108,10 +108,6 @@ std::string DescriptionForNSEvent(NSEven
 @implementation BrowserCrApplication

 + (void)initialize {
-  // Turn all deallocated Objective-C objects into zombies, keeping
-  // the most recent 10,000 of them on the treadmill.
-  ObjcEvilDoers::ZombieEnable(true, 10000);
-
   chrome::InstallObjcExceptionPreprocessor();

   cocoa_l10n_util::ApplyForcedRTL();
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -676,29 +676,12 @@ bool ChromeMainDelegate::BasicStartupCom
   }
 #endif

-#if defined(OS_MACOSX)
-  // Give the browser process a longer treadmill, since crashes
-  // there have more impact.
-  const bool is_browser = !command_line.HasSwitch(switches::kProcessType);
-  ObjcEvilDoers::ZombieEnable(true, is_browser ? 10000 : 1000);
-#endif
-
   content::Profiling::ProcessStarted();

   // Setup tracing sampler profiler as early as possible at startup if needed.
   tracing_sampler_profiler_ =
       tracing::TracingSamplerProfiler::CreateOnMainThread();

-#if defined(OS_WIN)
-  v8_crashpad_support::SetUp();
-#endif
-
-#if defined(OS_LINUX)
-  if (!crash_reporter::IsCrashpadEnabled()) {
-    breakpad::SetFirstChanceExceptionHandler(v8::TryHandleWebAssemblyTrapPosix);
-  }
-#endif
-
 #if defined(OS_POSIX)
   if (HandleVersionSwitches(command_line)) {
     *exit_code = 0;
--- a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -35,7 +35,6 @@
 #include "chrome/browser/ui/webui/chromeos/in_session_password_change/password_change_ui.h"
 #include "chrome/browser/ui/webui/components/components_ui.h"
 #include "chrome/browser/ui/webui/constrained_web_dialog_ui.h"
-#include "chrome/browser/ui/webui/crashes_ui.h"
 #include "chrome/browser/ui/webui/device_log_ui.h"
 #include "chrome/browser/ui/webui/domain_reliability_internals_ui.h"
 #include "chrome/browser/ui/webui/download_internals/download_internals_ui.h"
@@ -429,8 +428,6 @@ WebUIFactoryFunction GetWebUIFactoryFunc
     return &NewWebUI<ComponentsUI>;
   if (url.spec() == chrome::kChromeUIConstrainedHTMLTestURL)
     return &NewWebUI<ConstrainedWebDialogUI>;
-  if (url.host_piece() == chrome::kChromeUICrashesHost)
-    return &NewWebUI<CrashesUI>;
   if (url.host_piece() == chrome::kChromeUIDeviceLogHost)
     return &NewWebUI<chromeos::DeviceLogUI>;
   if (url.host_piece() == chrome::kChromeUIDomainReliabilityInternalsHost)
@@ -1007,9 +1004,6 @@ base::RefCountedMemory* ChromeWebUIContr
     return ConflictsUI::GetFaviconResourceBytes(scale_factor);
 #endif

-  if (page_url.host_piece() == chrome::kChromeUICrashesHost)
-    return CrashesUI::GetFaviconResourceBytes(scale_factor);
-
   if (page_url.host_piece() == chrome::kChromeUIFlagsHost)
     return FlagsUI::GetFaviconResourceBytes(scale_factor);

--- a/chrome/browser/notifications/notification_platform_bridge_mac.mm
+++ b/chrome/browser/notifications/notification_platform_bridge_mac.mm
@@ -42,7 +42,6 @@
 #include "content/public/browser/browser_thread.h"
 #include "net/base/registry_controlled_domains/registry_controlled_domain.h"
 #include "third_party/blink/public/common/notifications/notification_constants.h"
-#include "third_party/crashpad/crashpad/client/crashpad_client.h"
 #include "ui/base/l10n/l10n_util_mac.h"
 #include "ui/message_center/public/cpp/notification.h"
 #include "ui/message_center/public/cpp/notification_types.h"
@@ -650,16 +649,6 @@ getDisplayedAlertsForProfileId:(NSString
 // service has its exception port configured for crash reporting.
 - (id<NotificationDelivery>)serviceProxy {
   id<NotificationDelivery> proxy = [_xpcConnection remoteObjectProxy];
-
-  if (!_setExceptionPort) {
-    base::mac::ScopedMachSendRight exceptionPort(
-        crash_reporter::GetCrashpadClient().GetHandlerMachPort());
-    base::scoped_nsobject<CrXPCMachPort> xpcPort(
-        [[CrXPCMachPort alloc] initWithMachSendRight:std::move(exceptionPort)]);
-    [proxy setMachExceptionPort:xpcPort];
-    _setExceptionPort = YES;
-  }
-
   return proxy;
 }

--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -161,10 +161,6 @@
 #include "content/public/browser/system_connector.h"
 #endif

-#if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_ANDROID)
-#include "third_party/crashpad/crashpad/client/crashpad_info.h"
-#endif
-
 #if !defined(OS_CHROMEOS)
 #include "chrome/browser/signin/chrome_signin_status_metrics_provider_delegate.h"
 #include "components/signin/core/browser/signin_status_metrics_provider.h"
@@ -512,12 +508,6 @@ void ChromeMetricsServiceClient::OnEnvir
     return;

   g_environment_for_crash_reporter.Get() = std::move(*environment);
-
-  crashpad::CrashpadInfo::GetCrashpadInfo()->AddUserDataMinidumpStream(
-      kSystemProfileMinidumpStreamType,
-      reinterpret_cast<const void*>(
-          g_environment_for_crash_reporter.Get().data()),
-      g_environment_for_crash_reporter.Get().size());
 #endif  // OS_WIN || OS_MACOSX || OS_ANDROID
 }

--- a/chrome/browser/ui/cocoa/notifications/alert_notification_service.mm
+++ b/chrome/browser/ui/cocoa/notifications/alert_notification_service.mm
@@ -12,26 +12,9 @@
 #import "chrome/browser/ui/cocoa/notifications/notification_builder_mac.h"
 #include "chrome/browser/ui/cocoa/notifications/notification_constants_mac.h"
 #import "chrome/browser/ui/cocoa/notifications/xpc_transaction_handler.h"
-#include "third_party/crashpad/crashpad/client/crashpad_client.h"
-#include "third_party/crashpad/crashpad/client/crashpad_info.h"
-#include "third_party/crashpad/crashpad/client/simple_string_dictionary.h"

 @class NSUserNotificationCenter;

-namespace {
-
-crashpad::SimpleStringDictionary* GetCrashpadAnnotations() {
-  static crashpad::SimpleStringDictionary* annotations = []() {
-    auto* annotations = new crashpad::SimpleStringDictionary();
-    annotations->SetKeyValue("ptype", "AlertNotificationService.xpc");
-    annotations->SetKeyValue("pid", base::NumberToString(getpid()).c_str());
-    return annotations;
-  }();
-  return annotations;
-}
-
-}  // namespace
-
 @implementation AlertNotificationService {
   XPCTransactionHandler* _transactionHandler;

@@ -51,29 +34,9 @@ crashpad::SimpleStringDictionary* GetCra
 }

 - (void)setMachExceptionPort:(CrXPCMachPort*)port {
-  base::mac::ScopedMachSendRight sendRight([port takeRight]);
-  if (!sendRight.is_valid()) {
-    NOTREACHED();
-    return;
-  }
-
-  @synchronized(self) {
-    if (_didSetExceptionPort) {
-      return;
-    }
-
-    crashpad::CrashpadClient client;
-    _didSetExceptionPort = client.SetHandlerMachPort(std::move(sendRight));
-    DCHECK(_didSetExceptionPort);
-
-    crashpad::CrashpadInfo::GetCrashpadInfo()->set_simple_annotations(
-        GetCrashpadAnnotations());
-  }
 }

 - (void)deliverNotification:(NSDictionary*)notificationData {
-  DCHECK(_didSetExceptionPort);
-
   base::scoped_nsobject<NotificationBuilder> builder(
       [[NotificationBuilder alloc] initWithDictionary:notificationData]);

@@ -85,8 +48,6 @@ crashpad::SimpleStringDictionary* GetCra

 - (void)closeNotificationWithId:(NSString*)notificationId
                   withProfileId:(NSString*)profileId {
-  DCHECK(_didSetExceptionPort);
-
   NSUserNotificationCenter* notificationCenter =
       [NSUserNotificationCenter defaultUserNotificationCenter];
   for (NSUserNotification* candidate in
@@ -107,8 +68,6 @@ crashpad::SimpleStringDictionary* GetCra
 }

 - (void)closeAllNotifications {
-  DCHECK(_didSetExceptionPort);
-
   [[NSUserNotificationCenter defaultUserNotificationCenter]
       removeAllDeliveredNotifications];
   [_transactionHandler closeTransactionIfNeeded];
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -139,7 +139,6 @@ static_library("test_support") {
   if (!is_fuchsia) {
     # TODO(crbug.com/753619): Enable crash reporting on Fuchsia.
     deps += [
-      "//components/crash/core/app",
       "//components/crash/core/app:test_support",
     ]
   }
--- a/components/browser_watcher/BUILD.gn
+++ b/components/browser_watcher/BUILD.gn
@@ -20,7 +20,6 @@ if (is_win) {
       ":stability_common",
       "//base",
       "//components/metrics",
-      "//third_party/crashpad/crashpad/client",
     ]
   }

@@ -36,11 +35,6 @@ if (is_win) {
       ":stability_client",
       ":stability_common",
       "//base",
-      "//third_party/crashpad/crashpad/client",
-      "//third_party/crashpad/crashpad/compat",
-      "//third_party/crashpad/crashpad/handler",
-      "//third_party/crashpad/crashpad/minidump",
-      "//third_party/crashpad/crashpad/snapshot",
     ]
   }

@@ -55,8 +49,6 @@ if (is_win) {
       ":stability_client",
       "//base",
       "//components/variations",
-      "//third_party/crashpad/crashpad/client:client",
-      "//third_party/crashpad/crashpad/util",
     ]
   }

@@ -76,8 +68,6 @@ if (is_win) {
     deps = [
       ":activity_report_proto",
       "//base",
-      "//third_party/crashpad/crashpad/client",
-      "//third_party/crashpad/crashpad/util",
     ]

     # This needs to be a public dep because of base::win::PEImage.
@@ -104,12 +94,6 @@ if (is_win) {
       "//components/metrics:metrics",
       "//testing/gmock",
       "//testing/gtest",
-      "//third_party/crashpad/crashpad/client",
-
-      # TODO(manzagop): remove this lib once Crashpad writes the minidumps.
-      "//third_party/crashpad/crashpad/minidump",
-      "//third_party/crashpad/crashpad/snapshot",
-      "//third_party/crashpad/crashpad/util",
     ]
   }

--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -2948,7 +2948,6 @@ static_library("browser") {
       "//third_party/android_ndk:cpu_features",
       "//third_party/android_opengl/etc1",
       "//third_party/blink/public/common",
-      "//third_party/crashpad/crashpad/client:client",
       "//third_party/libaddressinput:util",
       "//third_party/libphonenumber",
       "//third_party/smhasher:murmurhash2",
@@ -4155,7 +4154,6 @@ static_library("browser") {
       "//components/browser_watcher:stability_client",
       "//components/chrome_cleaner/public/constants",
       "//components/download/quarantine",
-      "//third_party/crashpad/crashpad/client:client",
       "//third_party/iaccessible2",
       "//third_party/isimpledom",
       "//third_party/wtl",
@@ -4312,7 +4310,6 @@ static_library("browser") {
       "//chrome/browser/ui/cocoa/notifications:common",
       "//components/metal_util",
       "//services/video_capture/public/mojom:constants",
-      "//third_party/crashpad/crashpad/client:client",
       "//third_party/google_toolbox_for_mac",
       "//third_party/mozilla",
     ]
--- a/third_party/breakpad/breakpad/src/client/linux/sender/google_crash_report_sender.cc
+++ b/third_party/breakpad/breakpad/src/client/linux/sender/google_crash_report_sender.cc
@@ -85,6 +85,7 @@ bool CheckForRequiredFlagsOrDie() {
 }

 int main(int argc, char* argv[]) {
+  return 0;
   google::InitGoogleLogging(argv[0]);
   google::ParseCommandLineFlags(&argc, &argv, true);
   if (!CheckForRequiredFlagsOrDie()) {
--- a/chrome/browser/tracing/crash_service_uploader.cc
+++ b/chrome/browser/tracing/crash_service_uploader.cc
@@ -40,7 +40,7 @@ using std::string;

 namespace {

-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "http://no-thanks.invalid";
 const char kCrashUploadContentType[] = "multipart/form-data";
 const char kCrashMultipartBoundary[] =
     "----**--yradnuoBgoLtrapitluMklaTelgooG--**----";
@@ -129,11 +129,16 @@ void TraceCrashServiceUploader::DoUpload
   progress_callback_ = progress_callback;
   done_callback_ = std::move(done_callback);

-  base::ThreadPool::PostTask(
+  if (!progress_callback_.is_null()) {
+    base::ThreadPool::PostTask(
       FROM_HERE, {base::TaskPriority::BEST_EFFORT},
-      base::BindOnce(&TraceCrashServiceUploader::DoCompressOnBackgroundThread,
-                     base::Unretained(this), file_contents, upload_mode,
-                     upload_url_, std::move(metadata)));
+      base::Bind(progress_callback_, 1, 1));
+  }
+  if (!done_callback_.is_null()) {
+    base::ThreadPool::PostTask(
+      FROM_HERE, {base::TaskPriority::BEST_EFFORT},
+      base::BindOnce(std::move(done_callback_), true, "Upload skipped."));
+  }
 }

 void TraceCrashServiceUploader::DoCompressOnBackgroundThread(
@@ -306,6 +311,7 @@ bool TraceCrashServiceUploader::Compress
 void TraceCrashServiceUploader::CreateAndStartURLLoader(
     const std::string& upload_url,
     const std::string& post_data) {
+  return;
   DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
   DCHECK(!simple_url_loader_);

--- a/chrome/chrome_cleaner/crash/crashpad_crash_reporter.cc
+++ b/chrome/chrome_cleaner/crash/crashpad_crash_reporter.cc
@@ -28,7 +28,7 @@
 namespace {

 // The URL where crash reports are uploaded.
-const char kReportUploadURL[] = "https://clients2.google.com/cr/report";
+const char kReportUploadURL[] = "http://no-thanks.invalid";

 // Whether the current process is connected to a crash handler process.
 bool g_is_connected_to_crash_handler = false;
--- a/components/crash/core/app/crash_reporter_client.cc
+++ b/components/crash/core/app/crash_reporter_client.cc
@@ -24,7 +24,7 @@ namespace {
 CrashReporterClient* g_client = nullptr;

 #if BUILDFLAG(GOOGLE_CHROME_BRANDING) && defined(OFFICIAL_BUILD)
-const char kDefaultUploadURL[] = "https://clients2.google.com/cr/report";
+const char kDefaultUploadURL[] = "http://no-thanks.invalid";
 #endif

 }  // namespace
--- a/extensions/browser/api/crash_report_private/crash_report_private_api.cc
+++ b/extensions/browser/api/crash_report_private/crash_report_private_api.cc
@@ -30,7 +30,7 @@ base::Time g_last_called_time;
 base::Clock* g_clock = base::DefaultClock::GetInstance();

 #if defined(GOOGLE_CHROME_BUILD)
-constexpr char kCrashEndpointUrl[] = "https://clients2.google.com/cr/report";
+constexpr char kCrashEndpointUrl[] = "http://no-thanks.invalid";
 #else
 constexpr char kCrashEndpointUrl[] = "";
 #endif
--- a/third_party/crashpad/crashpad/client/crashpad_client_mac.cc
+++ b/third_party/crashpad/crashpad/client/crashpad_client_mac.cc
@@ -490,6 +490,7 @@ bool CrashpadClient::SetHandlerMachPort(
 }

 base::mac::ScopedMachSendRight CrashpadClient::GetHandlerMachPort() const {
+  return base::mac::ScopedMachSendRight(MACH_PORT_NULL);
   DCHECK(exception_port_.is_valid());

   // For the purposes of this method, only return a port set by
--- a/content/shell/BUILD.gn
+++ b/content/shell/BUILD.gn
@@ -846,9 +846,9 @@ if (is_mac) {

   bundle_data("content_shell_framework_helpers") {
     testonly = true
-    sources = [ "$root_out_dir/chrome_crashpad_handler" ]
+    sources = []
     outputs = [ "{{bundle_contents_dir}}/Helpers/{{source_file_part}}" ]
-    public_deps = [ "//components/crash/core/app:chrome_crashpad_handler" ]
+    public_deps = []
     foreach(helper_params, content_mac_helpers) {
       sources += [
         "$root_out_dir/${content_shell_helper_name}${helper_params[2]}.app",
--- a/headless/BUILD.gn
+++ b/headless/BUILD.gn
@@ -473,7 +473,6 @@ component("headless_non_renderer") {
   }

   if (is_mac) {
-    deps += [ ":mac_helpers" ]
     libs = [
       "AppKit.framework",
       "CoreFoundation.framework",
@@ -634,10 +633,6 @@ test("headless_browsertests") {
     "test/data/",
   ]

-  if (is_mac) {
-    data_deps = [ ":mac_helpers" ]
-  }
-
   defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]

   deps = [
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index f06eeeee05c8..215ead28b2bd 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -143,8 +143,6 @@ if (!is_android && !is_mac) {
         "app/chrome_exe_main_win.cc",
         "app/main_dll_loader_win.cc",
         "app/main_dll_loader_win.h",
-        "common/crash_keys.cc",
-        "common/crash_keys.h",
       ]

       deps += [
@@ -163,8 +161,6 @@ if (!is_android && !is_mac) {
         "//chrome/installer/util:constants",
         "//chrome/installer/util:did_run_support",
         "//components/browser_watcher:browser_watcher_client",
-        "//components/crash/core/app:run_as_crashpad_handler",
-        "//components/crash/core/common",
         "//components/flags_ui:switches",
         "//content:sandbox_helper_win",
         "//content/public/common:static_switches",
@@ -173,7 +169,6 @@ if (!is_android && !is_mac) {
         "//services/service_manager/sandbox",
         "//third_party/breakpad:breakpad_handler",
         "//third_party/breakpad:breakpad_sender",
-        "//third_party/crashpad/crashpad/util",
       ]
       data_deps = [
         "//chrome/app/version_assembly:version_assembly_manifest",
@@ -324,7 +319,6 @@ if (is_win) {
       "//chrome/install_static:install_static_util",
       "//chrome/install_static:secondary_module",
       "//components/browser_watcher:stability_client",
-      "//components/crash/core/app",
       "//components/policy:generated",
       "//content/app/resources",
       "//content/public/common:service_names",
@@ -697,14 +691,12 @@ if (is_win) {
   bundle_data("chrome_framework_helpers") {
     sources = [
       "$root_out_dir/app_mode_loader",
-      "$root_out_dir/chrome_crashpad_handler",
     ]

     outputs = [ "{{bundle_contents_dir}}/Helpers/{{source_file_part}}" ]

     public_deps = [
       "//chrome/app_shim:app_mode_loader",
-      "//components/crash/core/app:chrome_crashpad_handler",
     ]

     foreach(helper_params, content_mac_helpers) {
@@ -935,7 +927,6 @@ if (is_win) {
       "//chrome/app:command_ids",
       "//chrome/common:buildflags",
       "//chrome/common/profiler",
-      "//components/crash/core/app",
       "//components/policy:generated",
       "//content/public/app",
       "//content/public/common:service_names",
