diff --git a/.gn b/.gn
index c789fe56958f..12e24ada2dfe 100644
--- a/.gn
+++ b/.gn
@@ -516,7 +516,6 @@ check_targets = [
   "//third_party/rnnoise/*",
   "//third_party/robolectric/*",
   "//third_party/s2cellid/*",
-  "//third_party/safe_browsing/*",
   "//third_party/scan-build/*",
   "//third_party/shaderc/*",
   "//third_party/simplejson/*",
diff --git a/android_webview/browser/aw_browser_context.cc b/android_webview/browser/aw_browser_context.cc
index 84559ab0d969..9194f631d6df 100644
--- a/android_webview/browser/aw_browser_context.cc
+++ b/android_webview/browser/aw_browser_context.cc
@@ -45,7 +45,6 @@
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_service_factory.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/url_formatter/url_fixer.h"
 #include "components/user_prefs/user_prefs.h"
 #include "components/visitedlink/browser/visitedlink_writer.h"
@@ -450,8 +449,6 @@ void AwBrowserContext::RebuildTable(
 }
 
 void AwBrowserContext::SetExtendedReportingAllowed(bool allowed) {
-  user_pref_service_->SetBoolean(
-      ::prefs::kSafeBrowsingExtendedReportingOptInAllowed, allowed);
 }
 
 // TODO(amalova): Make sure NetworkContextParams is configured correctly when
diff --git a/base/trace_event/builtin_categories.h b/base/trace_event/builtin_categories.h
index 31f563dd4d59..fbca2d280ce1 100644
--- a/base/trace_event/builtin_categories.h
+++ b/base/trace_event/builtin_categories.h
@@ -128,7 +128,6 @@
   X("renderer_host")                                                     \
   X("renderer.scheduler")                                                \
   X("RLZ")                                                               \
-  X("safe_browsing")                                                     \
   X("screenlock_monitor")                                                \
   X("sequence_manager")                                                  \
   X("service_manager")                                                   \
diff --git a/base/trace_event/memory_infra_background_allowlist.cc b/base/trace_event/memory_infra_background_allowlist.cc
index dfaf6271f1fc..f866812a2672 100644
--- a/base/trace_event/memory_infra_background_allowlist.cc
+++ b/base/trace_event/memory_infra_background_allowlist.cc
@@ -238,18 +238,7 @@ const char* const kAllocatorDumpNameAllowlist[] = {
     "net/url_request_context/proxy/0x?/http_cache/memory_backend",
     "net/url_request_context/proxy/0x?/http_cache/simple_backend",
     "net/url_request_context/proxy/0x?/http_network_session",
-    "net/url_request_context/safe_browsing",
-    "net/url_request_context/safe_browsing/0x?",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/cookies",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
-    "tasks_pending_global",
-    "net/url_request_context/safe_browsing/0x?/cookie_monster/"
     "tasks_pending_for_key",
-    "net/url_request_context/safe_browsing/0x?/http_cache",
-    "net/url_request_context/safe_browsing/0x?/http_cache/memory_backend",
-    "net/url_request_context/safe_browsing/0x?/http_cache/simple_backend",
-    "net/url_request_context/safe_browsing/0x?/http_network_session",
     "net/url_request_context/system",
     "net/url_request_context/system/0x?",
     "net/url_request_context/system/0x?/cookie_monster",
diff --git a/chrome/app/BUILD.gn b/chrome/app/BUILD.gn
index b3e39704fb16..355edd3a69d2 100644
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -41,10 +41,7 @@ source_set("chrome_dll_resources") {
   deps = [ ":command_ids" ]
 
   if (is_win) {
-    sources += [
-      "chrome_dll.rc",
-      "etw_events/chrome_events_win.rc",
-    ]
+    sources += [ "chrome_dll.rc" ]
 
     deps += [
       "//build:branding_buildflags",
@@ -210,7 +207,6 @@ source_set("chrome_content_browser_overlay_manifest") {
     "//components/contextual_search/content/common/mojom",
     "//components/metrics/public/mojom:call_stack_mojo_bindings",
     "//components/page_load_metrics/common:page_load_metrics_mojom",
-    "//components/safe_browsing/content/common:interfaces",
     "//components/services/heap_profiling/public/mojom",
     "//components/translate/content/common",
     "//extensions/buildflags",
diff --git a/chrome/app/chrome_content_browser_overlay_manifest.cc b/chrome/app/chrome_content_browser_overlay_manifest.cc
index 870364781856..6680761ccca0 100644
--- a/chrome/app/chrome_content_browser_overlay_manifest.cc
+++ b/chrome/app/chrome_content_browser_overlay_manifest.cc
@@ -13,7 +13,6 @@
 #include "chrome/common/cache_stats_recorder.mojom.h"
 #include "chrome/common/net_benchmarking.mojom.h"
 #include "components/metrics/public/mojom/call_stack_profile_collector.mojom.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "extensions/buildflags/buildflags.h"
 #include "services/service_manager/public/cpp/manifest_builder.h"
 
@@ -36,11 +35,11 @@ const service_manager::Manifest& GetChromeContentBrowserOverlayManifest() {
                               chrome::mojom::AvailableOfflineContentProvider,
                               chrome::mojom::CacheStatsRecorder,
                               chrome::mojom::NetBenchmarking,
-                              metrics::mojom::CallStackProfileCollector,
+                              metrics::mojom::CallStackProfileCollector
 #if defined(OS_WIN)
-                              mojom::ModuleEventSink,
+                              ,mojom::ModuleEventSink
 #endif
-                              safe_browsing::mojom::SafeBrowsing>())
+                              >())
         .RequireCapability("ash", "system_ui")
         .RequireCapability("ash", "test")
         .RequireCapability("ash", "display")
diff --git a/chrome/app/chromium_strings.grd b/chrome/app/chromium_strings.grd
index 157fe9c51eed..de6c12332bb6 100644
--- a/chrome/app/chromium_strings.grd
+++ b/chrome/app/chromium_strings.grd
@@ -500,14 +500,6 @@ Chromium is unable to recover your settings.
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> may be dangerous, so Chromium has blocked it.
       </message>
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chromium has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chromium has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
          desc="Message shown to the user on chrome://downloads page to explain that this download is blocked because it is malware.">
         This file is dangerous, so Chromium has blocked it.
diff --git a/chrome/app/generated_resources.grd b/chrome/app/generated_resources.grd
index 15e301fc0521..e49e0e017156 100644
--- a/chrome/app/generated_resources.grd
+++ b/chrome/app/generated_resources.grd
@@ -1680,14 +1680,6 @@ are declared in tools/grit/grit_rule.gni.
           Extensions, apps, and themes can harm your computer. Are you sure you want to continue?
         </message>
       </if>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> is not commonly downloaded and may be dangerous.
-      </message>
-      <message name="IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION"
-         desc="Message shown to the user to validate the download when the download content is classified as uncommon by safebrowsing. This variant is shown when the user is enrolled in the Advanced Protection program.">
-        <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> was blocked by Advanced Protection.
-      </message>
       <message name="IDS_PROMPT_DEEP_SCANNING_DOWNLOAD"
         desc="Message shown in the download shelf when a download is being scanned">
         Checking <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> with your organization's security policies...
diff --git a/chrome/app/google_chrome_strings.grd b/chrome/app/google_chrome_strings.grd
index af6368e1185b..896026d95bf3 100644
--- a/chrome/app/google_chrome_strings.grd
+++ b/chrome/app/google_chrome_strings.grd
@@ -506,14 +506,6 @@ Google Chrome is unable to recover your settings.
         <ph name="FILE_NAME">$1<ex>bla.exe</ex></ph> may be dangerous, so Chrome has blocked it.
       </message>
 
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_URL"
-         desc="Message shown to the user to validate the download when the download url is classified to lead to malware by the safebrowsing database.">
-        This file is dangerous, so Chrome has blocked it.
-      </message>
-      <message name="IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT"
-         desc="Message shown to the user to validate the download when the download content is classified to lead to malware by safebrowsing.">
-        <ph name="FILE_NAME">$1<ex>malware.exe</ex></ph> is dangerous, so Chrome has blocked it.
-      </message>
       <message name="IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD"
          desc="Message shown to the user on chrome://downloads page to explain that this download is blocked because it is malware.">
         This file is dangerous, so Chrome has blocked it.
diff --git a/chrome/app/settings_strings.grdp b/chrome/app/settings_strings.grdp
index 3875e9050471..72e4856d14ca 100644
--- a/chrome/app/settings_strings.grdp
+++ b/chrome/app/settings_strings.grdp
@@ -1248,72 +1248,9 @@
   <message name="IDS_SETTINGS_NETWORK_PREDICTION_ENABLED_DESC_COOKIES_PAGE" desc="On the cookies page, the secondary text next to the checkbox that enables prediction of network actions.">
     Pre-fetches information from pages, including pages you have not yet visited. Information fetched may include cookies, if you allow cookies.
   </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION" desc="The section title of 'Protects you and your device from dangerous sites'">
-    Safe Browsing (protects you and your device from dangerous sites)
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC" desc="Checkbox label: should Chrome protect user and user's device from dangerous sites">
-    Sends URLs of some pages you visit to Google, when your security is at risk
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING" desc="The section title of the extended safe browsing checkbox to help improve safe browsing">
-    Help improve Chrome security
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC" desc="Description for extended safe browsing">
-    Sends URLs of some pages you visit, limited system information, and some page content to Google, to help discover new threats and protect everyone on the web.
-  </message>
   <message name="IDS_SETTINGS_SAFEBROWSING_SECTION_LABEL" desc="The section label of the safe browsing section grouping safe browsing settings">
     Safe Browsing
   </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED" desc="Label for safe browsing enhanced protection mode">
-    Enhanced protection
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_DESC" desc="Description of safe browsing enhanced protection mode">
-    Faster, proactive protection against dangerous websites, downloads, and extensions. Warns you about password breaches. Requires browsing data to be sent to Google.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_ONE" desc="First bullet point under the safe browsing enhanced protection mode">
-    Predicts and warns you about dangerous events before they happen
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_TWO" desc="Second bullet point under the safe browsing enhanced protection mode">
-    Keeps you safe on Chrome and may be used to improve your security in other Google apps when you are signed in
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_THREE" desc="Third bullet point under the safe browsing enhanced protection mode">
-    Improves security for you and everyone on the web
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FOUR" desc="Fourth bullet point under the safe browsing enhanced protection mode">
-    Warns you if passwords are exposed in a data breach
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FIVE" desc="Fourth bullet point under the safe browsing enhanced protection mode">
-    Sends URLs to Safe Browsing to check them. Also sends a small sample of pages, downloads, extension activity, and system information to help discover new threats. Temporarily links this data to your Google Account when you're signed in, to protect you across Google apps.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD" desc="Label for safe browsing standard protection mode">
-    Standard protection
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_DESC" desc="Description for safe browsing standard protection mode">
-    Standard protection against websites, downloads, and extensions that are known to be dangerous.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_ONE" desc="First bullet point under the safe browsing standard protection mode">
-    Detects and warns you about dangerous events when they happen
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_TWO" desc="First bullet point under the safe browsing standard protection mode">
-    Checks URLs with a list of unsafe sites stored in Chrome. If a site tries to steal your password, or when you download a harmful file, Chrome may also send URLs, including bits of page content, to Safe Browsing.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_STANDARD_HELP_IMPROVE" desc="The name of the toggle to enable reporting to help improve safe browsing">
-    Help improve security on the web for everyone
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_NONE" desc="Label for safe browsing no protection mode">
-    No protection (not recommended)
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_NONE_DESC" desc="Description for safe browsing no protection mode">
-    Does not protect you against dangerous websites, downloads, and extensions. You’ll still get Safe Browsing protection, where available, in other Google services, like Gmail and Search.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_TITLE" desc="Title for the confirmation dialog to turn off SafeBrowsing">
-    Turn off Safe Browsing?
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_DESC" desc="Description for the confirmation dialog to turn off SafeBrowsing">
-    Safe Browsing protects you against attackers who may trick you into doing something dangerous like installing malicious software or revealing personal information like passwords, phone numbers, or credit cards. If you turn it off, be careful when browsing unfamiliar or unreputable sites.
-  </message>
-  <message name="IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_CONFIRM" desc="Title for the confirmation dialog to turn off SafeBrowsing">
-    Turn off
-  </message>
   <message name="IDS_SETTINGS_ENABLE_DO_NOT_TRACK" desc="The label of the checkbox to enable/disable sending the 'Do Not track' header">
     Send a "Do Not Track" request with your browsing traffic
   </message>
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 995b99c5ba9d..7ebabe5c31b5 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -316,8 +316,6 @@ static_library("browser") {
     "component_updater/ssl_error_assistant_component_installer.h",
     "component_updater/sth_set_component_remover.cc",
     "component_updater/sth_set_component_remover.h",
-    "component_updater/subresource_filter_component_installer.cc",
-    "component_updater/subresource_filter_component_installer.h",
     "component_updater/tls_deprecation_config_component_installer.cc",
     "component_updater/tls_deprecation_config_component_installer.h",
     "component_updater/trust_token_key_commitments_component_installer.cc",
@@ -1109,8 +1107,6 @@ static_library("browser") {
     "permissions/contextual_notification_permission_ui_selector.h",
     "permissions/crowd_deny_preload_data.cc",
     "permissions/crowd_deny_preload_data.h",
-    "permissions/crowd_deny_safe_browsing_request.cc",
-    "permissions/crowd_deny_safe_browsing_request.h",
     "permissions/permission_decision_auto_blocker_factory.cc",
     "permissions/permission_decision_auto_blocker_factory.h",
     "permissions/permission_manager_factory.cc",
@@ -1802,7 +1798,6 @@ static_library("browser") {
   allow_circular_includes_from = [
     "//chrome/browser/ui",
     "//chrome/browser/ui/webui/bluetooth_internals",
-    "//chrome/browser/safe_browsing",
   ]

   public_deps = [
@@ -1863,7 +1858,6 @@ static_library("browser") {
     "//chrome/browser/reputation:proto",
     "//chrome/browser/resource_coordinator:mojo_bindings",
     "//chrome/browser/resource_coordinator:tab_manager_features",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/sharing:buildflags",
     "//chrome/browser/sharing/proto",
     "//chrome/browser/storage_access_api:permissions",
@@ -1994,8 +1988,6 @@ static_library("browser") {
     "//components/rappor",
     "//components/renderer_context_menu",
     "//components/resources",
-    "//components/safe_browsing/core:public",
-    "//components/safe_browsing/core/common:safe_browsing_policy_handler",
     "//components/safe_search_api",
     "//components/safe_search_api:safe_search_client",
     "//components/schema_org/common:improved_mojom",
@@ -3099,8 +3091,6 @@ static_library("browser") {
       "download/download_commands.h",
       "download/download_crx_util.cc",
       "download/download_crx_util.h",
-      "download/download_danger_prompt.cc",
-      "download/download_danger_prompt.h",
       "download/download_dir_policy_handler.cc",
       "download/download_dir_policy_handler.h",
       "download/download_dir_util.cc",
@@ -3471,8 +3461,6 @@ static_library("browser") {
       "resource_coordinator/tab_metrics_logger.h",
       "resource_coordinator/usage_clock.cc",
       "resource_coordinator/usage_clock.h",
-      "safe_browsing/generated_safe_browsing_pref.cc",
-      "safe_browsing/generated_safe_browsing_pref.h",
       "search/background/ntp_background_data.cc",
       "search/background/ntp_background_data.h",
       "search/background/ntp_background_service.cc",
@@ -4025,8 +4013,6 @@ static_library("browser") {
       "chrome_browser_main_win.cc",
       "chrome_browser_main_win.h",
       "component_updater/recovery_improved_component_installer_win.cc",
-      "component_updater/sw_reporter_installer_win.cc",
-      "component_updater/sw_reporter_installer_win.h",
       "download/download_status_updater_win.cc",
       "download/trusted_sources_manager_win.cc",
       "first_run/first_run_internal_win.cc",
@@ -4158,8 +4144,6 @@ static_library("browser") {
     ]
     deps += [
       ":chrome_process_finder",
-      "//chrome/browser/safe_browsing/chrome_cleaner",
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/chrome_elf:constants",
       "//chrome/chrome_elf:dll_hash",
@@ -4181,8 +4165,6 @@ static_library("browser") {
       "//ui/base:fullscreen_win",
       "//ui/base/cursor",
     ]
-    allow_circular_includes_from +=
-        [ "//chrome/browser/safe_browsing/chrome_cleaner" ]

     all_dependent_configs = [ ":browser_win_linker_flags" ]

@@ -6053,7 +6035,6 @@ static_library("test_support") {

   public_deps = [
     ":browser",
-    "//chrome/browser/safe_browsing:test_support",
     "//chrome/browser/ui:test_support",
   ]
   deps = [
@@ -6061,14 +6042,12 @@ static_library("test_support") {
     "//chrome/browser",
     "//chrome/browser/subresource_filter:test_support",
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/browser_sync:test_support",
     "//components/invalidation/impl",
     "//components/invalidation/impl:test_support",
     "//components/password_manager/core/browser:test_support",
     "//components/policy/core/browser:test_support",
     "//components/prefs:test_support",
-    "//components/safe_browsing/core:csd_proto",
     "//components/search_engines:test_support",
     "//components/services/unzip/content",
     "//components/sessions:test_support",
diff --git a/chrome/browser/DEPS b/chrome/browser/DEPS
index c0f59b3f421c..41406410e219 100644
--- a/chrome/browser/DEPS
+++ b/chrome/browser/DEPS
@@ -221,7 +221,6 @@ include_rules = [
   "+components/remote_cocoa/common",
   "+components/renderer_context_menu",
   "+components/rlz",
-  "+components/safe_browsing",
   "+components/safe_search_api",
   "+components/schema_org",
   "+components/search",
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 12172c1e9bd3..1517551159fc 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -114,7 +114,6 @@
 #include "components/previews/core/previews_features.h"
 #include "components/previews/core/previews_switches.h"
 #include "components/query_tiles/switches.h"
-#include "components/safe_browsing/core/features.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/security_interstitials/core/features.h"
 #include "components/security_state/core/features.h"
diff --git a/chrome/browser/browser_process.h b/chrome/browser/browser_process.h
index 132f2a8d15fd..262cbd4c08cb 100644
--- a/chrome/browser/browser_process.h
+++ b/chrome/browser/browser_process.h
@@ -46,10 +46,6 @@ class NetworkQualityTracker;
 class SharedURLLoaderFactory;
 }
 
-namespace safe_browsing {
-class SafeBrowsingService;
-}
-
 namespace subresource_filter {
 class RulesetService;
 }
@@ -211,14 +207,6 @@ class BrowserProcess {
   // on this platform (or this is a unit test).
   virtual StatusTray* status_tray() = 0;
 
-  // Returns the SafeBrowsing service.
-  virtual safe_browsing::SafeBrowsingService* safe_browsing_service() = 0;
-
-  // Returns the service providing versioned storage for rules used by the Safe
-  // Browsing subresource filter.
-  virtual subresource_filter::RulesetService*
-  subresource_filter_ruleset_service() = 0;
-
   // Returns the service providing versioned storage for a blocklist of flocs.
   virtual federated_learning::FlocBlocklistService*
   floc_blocklist_service() = 0;
diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
index 77faedcc2944..232a991227b2 100644
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -69,7 +69,6 @@
 #include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/resource_coordinator/resource_coordinator_parts.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/site_isolation/prefs_observer.h"
 #include "chrome/browser/ssl/secure_origin_prefs_observer.h"
@@ -110,7 +109,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/rappor/public/rappor_utils.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/core/safe_browsing_service_interface.h"
 #include "components/sessions/core/session_id_generator.h"
 #include "components/subresource_filter/content/browser/ruleset_service.h"
 #include "components/subresource_filter/core/browser/subresource_filter_constants.h"
@@ -375,8 +373,6 @@ void BrowserProcessImpl::StartTearDown() {
 
   metrics_services_manager_.reset();
   intranet_redirect_detector_.reset();
-  if (safe_browsing_service_.get())
-    safe_browsing_service()->ShutDown();
   network_time_tracker_.reset();
 #if BUILDFLAG(ENABLE_PLUGINS)
   plugins_resource_service_.reset();
@@ -990,22 +986,6 @@ StatusTray* BrowserProcessImpl::status_tray() {
   return status_tray_.get();
 }
 
-safe_browsing::SafeBrowsingService*
-BrowserProcessImpl::safe_browsing_service() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!created_safe_browsing_service_)
-    CreateSafeBrowsingService();
-  return safe_browsing_service_.get();
-}
-
-subresource_filter::RulesetService*
-BrowserProcessImpl::subresource_filter_ruleset_service() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!created_subresource_filter_ruleset_service_)
-    CreateSubresourceFilterRulesetService();
-  return subresource_filter_ruleset_service_.get();
-}
-
 federated_learning::FlocBlocklistService*
 BrowserProcessImpl::floc_blocklist_service() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
@@ -1264,58 +1244,6 @@ void BrowserProcessImpl::CreateBackgroundPrintingManager() {
 #endif
 }
 
-void BrowserProcessImpl::CreateSafeBrowsingService() {
-  DCHECK(!safe_browsing_service_);
-  // Set this flag to true so that we don't retry indefinitely to
-  // create the service class if there was an error.
-  created_safe_browsing_service_ = true;
-
-  // The factory can be overridden in tests.
-  if (!safe_browsing::SafeBrowsingServiceInterface::HasFactory()) {
-    safe_browsing::SafeBrowsingServiceInterface::RegisterFactory(
-        safe_browsing::GetSafeBrowsingServiceFactory());
-  }
-
-  // TODO(crbug/925153): Port consumers of the |safe_browsing_service_| to use
-  // the interface in components/safe_browsing, and remove this cast.
-  safe_browsing_service_ = static_cast<safe_browsing::SafeBrowsingService*>(
-      safe_browsing::SafeBrowsingServiceInterface::CreateSafeBrowsingService());
-  if (safe_browsing_service_)
-    safe_browsing_service_->Initialize();
-}
-
-void BrowserProcessImpl::CreateSubresourceFilterRulesetService() {
-  DCHECK(!subresource_filter_ruleset_service_);
-  created_subresource_filter_ruleset_service_ = true;
-
-  if (!base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter)) {
-    return;
-  }
-
-  // Runner for tasks critical for user experience.
-  scoped_refptr<base::SequencedTaskRunner> blocking_task_runner(
-      base::ThreadPool::CreateSequencedTaskRunner(
-          {base::MayBlock(), base::TaskPriority::USER_BLOCKING,
-           base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN}));
-
-  // Runner for tasks that do not influence user experience.
-  scoped_refptr<base::SequencedTaskRunner> background_task_runner(
-      base::ThreadPool::CreateSequencedTaskRunner(
-          {base::MayBlock(), base::TaskPriority::BEST_EFFORT,
-           base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN}));
-
-  base::FilePath user_data_dir;
-  base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir);
-  base::FilePath indexed_ruleset_base_dir =
-      user_data_dir.Append(subresource_filter::kTopLevelDirectoryName)
-          .Append(subresource_filter::kIndexedRulesetBaseDirectoryName);
-  subresource_filter_ruleset_service_ =
-      std::make_unique<subresource_filter::RulesetService>(
-          local_state(), background_task_runner, indexed_ruleset_base_dir,
-          blocking_task_runner);
-}
-
 void BrowserProcessImpl::CreateFlocBlocklistService() {
   DCHECK(!floc_blocklist_service_);
   floc_blocklist_service_ =
diff --git a/chrome/browser/browser_process_impl.h b/chrome/browser/browser_process_impl.h
index 5ac13a0eecee..0f49684535ff 100644
--- a/chrome/browser/browser_process_impl.h
+++ b/chrome/browser/browser_process_impl.h
@@ -168,9 +168,6 @@ class BrowserProcessImpl : public BrowserProcess,
   void set_background_mode_manager_for_test(
       std::unique_ptr<BackgroundModeManager> manager) override;
   StatusTray* status_tray() override;
-  safe_browsing::SafeBrowsingService* safe_browsing_service() override;
-  subresource_filter::RulesetService* subresource_filter_ruleset_service()
-      override;
   federated_learning::FlocBlocklistService* floc_blocklist_service() override;
   optimization_guide::OptimizationGuideService* optimization_guide_service()
       override;
@@ -218,8 +215,6 @@ class BrowserProcessImpl : public BrowserProcess,
   void CreateNotificationUIManager();
   void CreatePrintPreviewDialogController();
   void CreateBackgroundPrintingManager();
-  void CreateSafeBrowsingService();
-  void CreateSubresourceFilterRulesetService();
   void CreateFlocBlocklistService();
   void CreateOptimizationGuideService();
   void CreateStatusTray();
@@ -314,9 +309,6 @@ class BrowserProcessImpl : public BrowserProcess,
   std::unique_ptr<BackgroundModeManager> background_mode_manager_;
 #endif
 
-  bool created_safe_browsing_service_ = false;
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-
   bool created_subresource_filter_ruleset_service_ = false;
   std::unique_ptr<subresource_filter::RulesetService>
       subresource_filter_ruleset_service_;
diff --git a/chrome/browser/browser_resources.grd b/chrome/browser/browser_resources.grd
index f8dfa359c301..e890c3fdc6df 100644
--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -453,11 +453,6 @@
           <include name="IDR_OOBE_ARC_APPS_DOWNLOADING_VIDEO" file="internal\resources\arc_support\videos\app_downloading.mp4" type="BINDATA" />
         </if>
       </if>
-      <if expr="safe_browsing_mode == 1">
-        <include name="IDR_RESET_PASSWORD_HTML" file="resources\reset_password\reset_password.html" type="BINDATA" />
-        <include name="IDR_RESET_PASSWORD_JS" file="resources\reset_password\reset_password.js" type="BINDATA" />
-        <include name="IDR_RESET_PASSWORD_MOJOM_LITE_JS" file="${root_gen_dir}\chrome\browser\ui\webui\reset_password\reset_password.mojom-lite.js" use_base_dir="false" type="BINDATA" />
-      </if>
       <if expr="not is_android">
         <include name="IDR_TAB_RANKER_EXAMPLE_PREPROCESSOR_CONFIG_PB" file="resource_coordinator\tab_ranker\example_preprocessor_config.pb" type="BINDATA" />
         <include name="IDR_TAB_RANKER_PAIRWISE_EXAMPLE_PREPROCESSOR_CONFIG_PB" file="resource_coordinator\tab_ranker\pairwise_preprocessor_config.pb" type="BINDATA" />
diff --git a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
index 8657083e9250..543dd9219b1b 100644
--- a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
+++ b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
@@ -65,7 +65,6 @@
 #include "chrome/browser/previews/previews_service.h"
 #include "chrome/browser/previews/previews_service_factory.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
 #include "chrome/browser/ui/find_bar/find_bar_state.h"
 #include "chrome/browser/ui/find_bar/find_bar_state_factory.h"
@@ -692,36 +691,6 @@ void ChromeBrowsingDataRemoverDelegate::RemoveEmbedderData(
         ContentSettingsType::CLIENT_HINTS, base::Time(), base::Time::Max(),
         website_settings_filter);
 
-    // Clear the safebrowsing cookies only if time period is for "all time".  It
-    // doesn't make sense to apply the time period of deleting in the last X
-    // hours/days to the safebrowsing cookies since they aren't the result of
-    // any user action.
-    if (IsForAllTime()) {
-      safe_browsing::SafeBrowsingService* sb_service =
-          g_browser_process->safe_browsing_service();
-      if (sb_service) {
-        mojo::Remote<network::mojom::CookieManager> cookie_manager;
-        sb_service->GetNetworkContext()->GetCookieManager(
-            cookie_manager.BindNewPipeAndPassReceiver());
-
-        network::mojom::CookieManager* manager_ptr = cookie_manager.get();
-
-        network::mojom::CookieDeletionFilterPtr deletion_filter =
-            filter_builder->BuildCookieDeletionFilter();
-        if (!delete_begin_.is_null())
-          deletion_filter->created_after_time = delete_begin_;
-        if (!delete_end_.is_null())
-          deletion_filter->created_before_time = delete_end_;
-
-        manager_ptr->DeleteCookies(
-            std::move(deletion_filter),
-            base::BindOnce(
-                &OnClearedCookies,
-                CreateTaskCompletionClosure(TracingDataType::kCookies),
-                std::move(cookie_manager)));
-      }
-    }
-
     if (filter_builder->GetMode() == BrowsingDataFilterBuilder::BLACKLIST) {
       MediaDeviceIDSalt::Reset(profile_->GetPrefs());
 
diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index 5448284d476e..40daab7d1f99 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -1087,12 +1087,6 @@ void ChromeBrowserMainParts::PreBrowserStart() {
   // other services to start up before we start adjusting the oom priority.
   g_browser_process->GetTabManager()->Start();
 #endif
-
-  // The RulesetService will make the filtering rules available to renderers
-  // immediately after its construction, provided that the rules are already
-  // available at no cost in an indexed format. This enables activating
-  // subresource filtering, if needed, also for page loads on start-up.
-  g_browser_process->subresource_filter_ruleset_service();
 }
 
 void ChromeBrowserMainParts::PostBrowserStart() {
diff --git a/chrome/browser/chrome_browser_main_win.cc b/chrome/browser/chrome_browser_main_win.cc
index 25d97c7f3860..44a271abb0f4 100644
--- a/chrome/browser/chrome_browser_main_win.cc
+++ b/chrome/browser/chrome_browser_main_win.cc
@@ -48,9 +48,6 @@
 #include "chrome/browser/first_run/first_run.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/profiles/profile_shortcut_manager.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_config.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_util_win.h"
 #include "chrome/browser/ui/simple_message_box.h"
 #include "chrome/browser/ui/uninstall_browser_prompt.h"
 #include "chrome/browser/web_applications/chrome_pwa_launcher/last_browser_file_util.h"
@@ -444,15 +441,6 @@ void ShowCloseBrowserFirstMessageBox() {
       l10n_util::GetStringUTF16(IDS_UNINSTALL_CLOSE_APP));
 }
 
-void MaybePostSettingsResetPrompt() {
-  if (base::FeatureList::IsEnabled(safe_browsing::kSettingsResetPrompt)) {
-    content::GetUIThreadTaskRunner({base::TaskPriority::BEST_EFFORT})
-        ->PostTask(FROM_HERE,
-                   base::BindOnce(
-                       safe_browsing::MaybeShowSettingsResetPromptWithDelay));
-  }
-}
-
 // Updates all Progressive Web App launchers in |profile_dir| to the latest
 // version.
 void UpdatePwaLaunchersForProfile(const base::FilePath& profile_dir) {
@@ -651,22 +639,6 @@ void ChromeBrowserMainPartsWin::PostBrowserStart() {
 
   InitializeChromeElf();
 
-  // Reset settings for the current profile if it's tagged to be reset after a
-  // complete run of the Chrome Cleanup tool. If post-cleanup settings reset is
-  // enabled, we delay checks for settings reset prompt until the scheduled
-  // reset is finished.
-  if (safe_browsing::PostCleanupSettingsResetter::IsEnabled()) {
-    // Using last opened profiles, because we want to find reset the profile
-    // that was open in the last Chrome run, which may not be open yet in
-    // the current run.
-    safe_browsing::PostCleanupSettingsResetter().ResetTaggedProfiles(
-        g_browser_process->profile_manager()->GetLastOpenedProfiles(),
-        base::BindOnce(&MaybePostSettingsResetPrompt),
-        std::make_unique<
-            safe_browsing::PostCleanupSettingsResetter::Delegate>());
-  } else {
-    MaybePostSettingsResetPrompt();
-  }
   // Record UMA data about whether the fault-tolerant heap is enabled.
   // Use a delayed task to minimize the impact on startup time.
   content::GetUIThreadTaskRunner({})->PostDelayedTask(
diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index c72f20b6cda0..7b61eeb26471 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -113,17 +113,6 @@
 #include "chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.h"
 #include "chrome/browser/renderer_preferences_util.h"
 #include "chrome/browser/resource_coordinator/background_tab_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
-#include "chrome/browser/safe_browsing/chrome_enterprise_url_lookup_service.h"
-#include "chrome/browser/safe_browsing/chrome_enterprise_url_lookup_service_factory.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
-#include "chrome/browser/safe_browsing/delayed_warning_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_throttle.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
-#include "chrome/browser/safe_browsing/url_checker_delegate_impl.h"
-#include "chrome/browser/safe_browsing/url_lookup_service_factory.h"
 #include "chrome/browser/search/search.h"
 #include "chrome/browser/sharing/sms/sms_remote_fetcher.h"
 #include "chrome/browser/signin/chrome_signin_proxying_url_loader_factory.h"
@@ -239,14 +228,6 @@
 #include "components/previews/core/previews_features.h"
 #include "components/previews/core/previews_switches.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
-#include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
-#include "components/safe_browsing/core/browser/url_checker_delegate.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
-#include "components/safe_browsing/core/db/database_manager.h"
-#include "components/safe_browsing/core/features.h"
-#include "components/safe_browsing/core/realtime/policy_engine.h"
-#include "components/safe_browsing/core/realtime/url_lookup_service.h"
 #include "components/security_interstitials/content/insecure_form_navigation_throttle.h"
 #include "components/security_interstitials/content/origin_policy_ui.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
@@ -873,30 +854,6 @@ void SetApplicationLocaleOnIOThread(const std::string& locale) {
   GetIOThreadApplicationLocale() = locale;
 }
 
-// An implementation of the SSLCertReporter interface used by
-// SSLErrorHandler. Uses CertificateReportingService to send reports. The
-// service handles queueing and re-sending of failed reports. Each certificate
-// error creates a new instance of this class.
-class CertificateReportingServiceCertReporter : public SSLCertReporter {
- public:
-  explicit CertificateReportingServiceCertReporter(
-      content::WebContents* web_contents)
-      : service_(CertificateReportingServiceFactory::GetForBrowserContext(
-            web_contents->GetBrowserContext())) {}
-  ~CertificateReportingServiceCertReporter() override {}
-
-  // SSLCertReporter implementation
-  void ReportInvalidCertificateChain(
-      const std::string& serialized_report) override {
-    service_->Send(serialized_report);
-  }
-
- private:
-  CertificateReportingService* service_;
-
-  DISALLOW_COPY_AND_ASSIGN(CertificateReportingServiceCertReporter);
-};
-
 #if BUILDFLAG(ENABLE_EXTENSIONS)
 
 AppLoadedInTabSource ClassifyAppLoadedInTabSource(
@@ -1396,7 +1353,6 @@ void ChromeContentBrowserClient::PostAfterStartupTask(
   InitNetworkContextsParentDirectory();
 
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  safe_browsing_service_ = g_browser_process->safe_browsing_service();
 }
 
 bool ChromeContentBrowserClient::IsBrowserStartupComplete() {
@@ -2225,8 +2181,7 @@ void ChromeContentBrowserClient::AppendExtraCommandLineSwitches(
       // Disable client-side phishing detection in the renderer if it is
       // disabled in the Profile preferences, or by command line flag.
       if (!safe_browsing::IsSafeBrowsingEnabled(*prefs) ||
-          !safe_browsing::ClientSideDetectionServiceFactory::GetForProfile(
-              profile)) {
+          true) {
         command_line->AppendSwitch(
             switches::kDisableClientSidePhishingDetection);
       }
@@ -4040,7 +3995,7 @@ ChromeContentBrowserClient::CreateThrottlesForNavigation(
       base::BindRepeating(&MaybeTriggerSecurityInterstitialShownEvent));
   throttles.push_back(std::make_unique<SSLErrorNavigationThrottle>(
       handle,
-      std::make_unique<CertificateReportingServiceCertReporter>(web_contents),
+      nullptr,
       base::BindOnce(&HandleSSLErrorWrapper), base::BindOnce(&IsInHostedApp)));
 
   throttles.push_back(std::make_unique<LoginNavigationThrottle>(handle));
@@ -4061,14 +4016,13 @@ ChromeContentBrowserClient::CreateThrottlesForNavigation(
       &throttles);
 #endif
 
-  throttles.push_back(
-      std::make_unique<safe_browsing::SafeBrowsingNavigationThrottle>(handle));
-
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   if (base::FeatureList::IsEnabled(safe_browsing::kDelayedWarnings)) {
     throttles.push_back(
         std::make_unique<safe_browsing::DelayedWarningNavigationThrottle>(
             handle));
   }
+#endif
 
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
     (defined(OS_LINUX) && !defined(OS_CHROMEOS))
@@ -5115,54 +5069,6 @@ const ui::NativeTheme* ChromeContentBrowserClient::GetWebTheme() const {
   return ui::NativeTheme::GetInstanceForWeb();
 }
 
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-ChromeContentBrowserClient::GetSafeBrowsingUrlCheckerDelegate(
-    bool safe_browsing_enabled_for_profile,
-    bool should_check_on_sb_disabled) {
-  DCHECK_CURRENTLY_ON(BrowserThread::IO);
-
-  // Should not bypass safe browsing check if the check is for enterprise
-  // lookup.
-  if (!safe_browsing_enabled_for_profile && !should_check_on_sb_disabled)
-    return nullptr;
-
-  // |safe_browsing_service_| may be unavailable in tests.
-  if (safe_browsing_service_ && !safe_browsing_url_checker_delegate_) {
-    safe_browsing_url_checker_delegate_ =
-        base::MakeRefCounted<safe_browsing::UrlCheckerDelegateImpl>(
-            safe_browsing_service_->database_manager(),
-            safe_browsing_service_->ui_manager());
-  }
-
-  return safe_browsing_url_checker_delegate_;
-}
-
-safe_browsing::RealTimeUrlLookupServiceBase*
-ChromeContentBrowserClient::GetUrlLookupService(
-    content::BrowserContext* browser_context,
-    bool is_enterprise_lookup_enabled,
-    bool is_consumer_lookup_enabled) {
-  // |safe_browsing_service_| may be unavailable in tests.
-  if (!safe_browsing_service_) {
-    return nullptr;
-  }
-
-  Profile* profile = Profile::FromBrowserContext(browser_context);
-
-#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
-  if (is_enterprise_lookup_enabled) {
-    return safe_browsing::ChromeEnterpriseRealTimeUrlLookupServiceFactory::
-        GetForProfile(profile);
-  }
-#endif
-
-  if (is_consumer_lookup_enabled) {
-    return safe_browsing::RealTimeUrlLookupServiceFactory::GetForProfile(
-        profile);
-  }
-  return nullptr;
-}
-
 base::Optional<std::string>
 ChromeContentBrowserClient::GetOriginPolicyErrorPage(
     network::OriginPolicyState error_reason,
diff --git a/chrome/browser/chrome_content_browser_client.h b/chrome/browser/chrome_content_browser_client.h
index dad13f199206..6c13fd4218eb 100644
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -59,12 +59,6 @@ class PreviewsDecider;
 class PreviewsUserData;
 }  // namespace previews
 
-namespace safe_browsing {
-class RealTimeUrlLookupServiceBase;
-class SafeBrowsingService;
-class UrlCheckerDelegate;
-}  // namespace safe_browsing
-
 namespace ui {
 class NativeTheme;
 }
@@ -720,34 +714,10 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
       bool allow);
 #endif
 
-  // Returns the existing UrlCheckerDelegate object if it is already created.
-  // Otherwise, creates a new one and returns it. It returns nullptr if
-  // |safe_browsing_enabled_for_profile| is false, because it should bypass safe
-  // browsing check when safe browsing is disabled. Set
-  // |should_check_on_sb_disabled| to true if you still want to perform safe
-  // browsing check when safe browsing is disabled(e.g. for enterprise real time
-  // URL check).
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-  GetSafeBrowsingUrlCheckerDelegate(bool safe_browsing_enabled_for_profile,
-                                    bool should_check_on_sb_disabled);
-
-  // Returns a RealTimeUrlLookupServiceBase object used for real time URL check.
-  // Returns an enterprise version if |is_enterprise_lookup_enabled| is true.
-  // Returns a consumer version if |is_enterprise_lookup_enabled| is false and
-  // |is_consumer_lookup_enabled| is true. Returns nullptr if both are false.
-  safe_browsing::RealTimeUrlLookupServiceBase* GetUrlLookupService(
-      content::BrowserContext* browser_context,
-      bool is_enterprise_lookup_enabled,
-      bool is_consumer_lookup_enabled);
-
   // Vector of additional ChromeContentBrowserClientParts.
   // Parts are deleted in the reverse order they are added.
   std::vector<ChromeContentBrowserClientParts*> extra_parts_;
 
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-      safe_browsing_url_checker_delegate_;
-
   StartupData* startup_data_;
 
 #if !defined(OS_ANDROID)
diff --git a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
index be44c1ca684f..4a4f8727c624 100644
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -27,7 +27,6 @@
 #include "components/metrics/call_stack_profile_collector.h"
 #include "components/password_manager/content/browser/content_password_manager_driver_factory.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -71,39 +70,6 @@
 
 namespace {
 
-// Helper method for ExposeInterfacesToRenderer() that checks the latest
-// SafeBrowsing pref value on the UI thread before hopping over to the IO
-// thread.
-void MaybeCreateSafeBrowsingForRenderer(
-    int process_id,
-    content::ResourceContext* resource_context,
-    base::RepeatingCallback<scoped_refptr<safe_browsing::UrlCheckerDelegate>(
-        bool safe_browsing_enabled,
-        bool should_check_on_sb_disabled)> get_checker_delegate,
-    mojo::PendingReceiver<safe_browsing::mojom::SafeBrowsing> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  content::RenderProcessHost* render_process_host =
-      content::RenderProcessHost::FromID(process_id);
-  if (!render_process_host)
-    return;
-
-  bool safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-      *Profile::FromBrowserContext(render_process_host->GetBrowserContext())
-           ->GetPrefs());
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(
-          &safe_browsing::MojoSafeBrowsingImpl::MaybeCreate, process_id,
-          resource_context,
-          base::BindRepeating(get_checker_delegate, safe_browsing_enabled,
-                              // Navigation initiated from renderer should never
-                              // check when safe browsing is disabled, because
-                              // enterprise check only supports mainframe URL.
-                              /*should_check_on_sb_disabled=*/false),
-          std::move(receiver)));
-}
-
 }  // namespace
 
 void ChromeContentBrowserClient::ExposeInterfacesToRenderer(
diff --git a/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc b/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
index 125e85387dd6..df423dc6f326 100644
--- a/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
+++ b/chrome/browser/chromeos/lock_screen_apps/lock_screen_profile_creator_impl.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "extensions/browser/extension_system.h"
 
 namespace lock_screen_apps {
@@ -92,8 +91,6 @@ void LockScreenProfileCreatorImpl::OnProfileReady(
     // SafeBrowsingService when the user has safe browsing disabled (reasoning
     // similar to http://crbug.com/461493).
     // TODO(tbarzic): Revisit this if webviews get enabled for lock screen apps.
-    profile->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-    profile->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
     return;
   }
 
diff --git a/chrome/browser/component_updater/file_type_policies_component_installer.cc b/chrome/browser/component_updater/file_type_policies_component_installer.cc
index 92e4a4bcc2cb..d4cfb30bc225 100644
--- a/chrome/browser/component_updater/file_type_policies_component_installer.cc
+++ b/chrome/browser/component_updater/file_type_policies_component_installer.cc
@@ -20,7 +20,6 @@
 #include "base/task/thread_pool.h"
 #include "base/version.h"
 #include "components/component_updater/component_updater_paths.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 
 using component_updater::ComponentUpdateService;
 
@@ -39,20 +38,6 @@ const uint8_t kFileTypePoliciesPublicKeySHA256[32] = {
 const char kFileTypePoliciesManifestName[] = "File Type Policies";
 
 void LoadFileTypesFromDisk(const base::FilePath& pb_path) {
-  if (pb_path.empty())
-    return;
-
-  VLOG(1) << "Reading Download File Types from file: " << pb_path.value();
-  std::string binary_pb;
-  if (!base::ReadFileToString(pb_path, &binary_pb)) {
-    // The file won't exist on new installations, so this is not always an
-    // error.
-    VLOG(1) << "Failed reading from " << pb_path.value();
-    return;
-  }
-
-  safe_browsing::FileTypePolicies::GetInstance()->PopulateFromDynamicUpdate(
-      binary_pb);
 }
 
 }  // namespace
diff --git a/chrome/browser/component_updater/registration.cc b/chrome/browser/component_updater/registration.cc
index 25565a712894..cf1eb9d5fab0 100644
--- a/chrome/browser/component_updater/registration.cc
+++ b/chrome/browser/component_updater/registration.cc
@@ -115,7 +115,6 @@ void RegisterComponentsForUpdate(bool is_off_the_record_profile,
   whitelist_installer->RegisterComponents();
 #endif
 
-  RegisterSubresourceFilterComponent(cus);
   RegisterFlocBlocklistComponent(cus,
                                  g_browser_process->floc_blocklist_service());
   RegisterOnDeviceHeadSuggestComponent(
@@ -159,7 +158,6 @@ void RegisterComponentsForUpdate(bool is_off_the_record_profile,
   // on chromium build bots, it is always registered here and
   // RegisterSwReporterComponent() has support for running only in official
   // builds or tests.
-  RegisterSwReporterComponent(cus);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   RegisterThirdPartyModuleListComponent(cus);
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
diff --git a/chrome/browser/download/chrome_download_manager_delegate.cc b/chrome/browser/download/chrome_download_manager_delegate.cc
index dc4fa716f776..09673ea92ddd 100644
--- a/chrome/browser/download/chrome_download_manager_delegate.cc
+++ b/chrome/browser/download/chrome_download_manager_delegate.cc
@@ -41,9 +41,6 @@
 #include "chrome/browser/download/save_package_file_picker.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/buildflags.h"
@@ -63,7 +60,6 @@
 #include "components/prefs/pref_member.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "components/services/quarantine/public/mojom/quarantine.mojom.h"
 #include "components/services/quarantine/quarantine_impl.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -122,8 +118,6 @@ using content::DownloadManager;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
 using download::PathValidationResult;
-using safe_browsing::DownloadFileType;
-using safe_browsing::DownloadProtectionService;
 
 namespace {
 
@@ -358,13 +352,6 @@ ChromeDownloadManagerDelegate::~ChromeDownloadManagerDelegate() {
 
 void ChromeDownloadManagerDelegate::SetDownloadManager(DownloadManager* dm) {
   download_manager_ = dm;
-
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && !profile_->IsOffTheRecord()) {
-    // Include this download manager in the set monitored by safe browsing.
-    sb_service->AddDownloadManager(dm);
-  }
 }
 
 #if defined(OS_ANDROID)
@@ -697,16 +684,6 @@ void ChromeDownloadManagerDelegate::ChooseSavePath(
 
 void ChromeDownloadManagerDelegate::SanitizeSavePackageResourceName(
     base::FilePath* filename) {
-  safe_browsing::FileTypePolicies* file_type_policies =
-      safe_browsing::FileTypePolicies::GetInstance();
-
-  if (file_type_policies->GetFileDangerLevel(*filename) ==
-      safe_browsing::DownloadFileType::NOT_DANGEROUS)
-    return;
-
-  base::FilePath default_filename = base::FilePath::FromUTF8Unsafe(
-      l10n_util::GetStringUTF8(IDS_DEFAULT_DOWNLOAD_FILENAME));
-  *filename = filename->AddExtension(default_filename.BaseName().value());
 }
 
 void ChromeDownloadManagerDelegate::SanitizeDownloadParameters(
@@ -819,19 +796,6 @@ ChromeDownloadManagerDelegate::ApplicationClientIdForFileScanning() {
   return std::string(chrome::kApplicationClientIDStringForAVScanning);
 }
 
-DownloadProtectionService*
-    ChromeDownloadManagerDelegate::GetDownloadProtectionService() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (sb_service && sb_service->download_protection_service()) {
-    return sb_service->download_protection_service();
-  }
-#endif
-  return nullptr;
-}
-
 void ChromeDownloadManagerDelegate::GetMixedContentStatus(
     download::DownloadItem* download,
     const base::FilePath& virtual_path,
@@ -1342,8 +1306,6 @@ void ChromeDownloadManagerDelegate::OnDownloadTargetDetermined(
     if (item->GetOriginalMimeType() == "application/x-x509-user-cert")
       DownloadItemModel(item).SetShouldPreferOpeningInBrowser(true);
 #endif
-
-    DownloadItemModel(item).SetDangerLevel(target_info->danger_level);
   }
   if (ShouldBlockFile(target_info->danger_type, item)) {
     target_info->result = download::DOWNLOAD_INTERRUPT_REASON_FILE_BLOCKED;
diff --git a/chrome/browser/download/chrome_download_manager_delegate.h b/chrome/browser/download/chrome_download_manager_delegate.h
index 3cd23237a3b0..55593f48406a 100644
--- a/chrome/browser/download/chrome_download_manager_delegate.h
+++ b/chrome/browser/download/chrome_download_manager_delegate.h
@@ -22,8 +22,6 @@
 #include "chrome/browser/download/download_completion_blocker.h"
 #include "chrome/browser/download/download_target_determiner_delegate.h"
 #include "chrome/browser/download/download_target_info.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_util.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -138,32 +136,12 @@ class ChromeDownloadManagerDelegate
 
   DownloadPrefs* download_prefs() { return download_prefs_.get(); }
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  // The state of a safebrowsing check.
-  class SafeBrowsingState : public DownloadCompletionBlocker {
-   public:
-    SafeBrowsingState() = default;
-    ~SafeBrowsingState() override;
-
-    // String pointer used for identifying safebrowing data associated with
-    // a download item.
-    static const char kSafeBrowsingUserDataKey[];
-
-   private:
-    DISALLOW_COPY_AND_ASSIGN(SafeBrowsingState);
-  };
-#endif  // FULL_SAFE_BROWSING
-
   // Callback function after the DownloadProtectionService completes.
-  void CheckClientDownloadDone(uint32_t download_id,
-                               safe_browsing::DownloadCheckResult result);
+  void CheckClientDownloadDone(uint32_t download_id);
 
   base::WeakPtr<ChromeDownloadManagerDelegate> GetWeakPtr();
 
  protected:
-  virtual safe_browsing::DownloadProtectionService*
-      GetDownloadProtectionService();
-
   // Show file picker for |download|.
   virtual void ShowFilePickerForDownload(
       download::DownloadItem* download,
diff --git a/chrome/browser/download/download_item_model.cc b/chrome/browser/download/download_item_model.cc
index 84c306439efb..dfbf5a240ae4 100644
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -27,16 +27,12 @@
 #include "chrome/browser/enterprise/connectors/common.h"
 #include "chrome/browser/enterprise/connectors/connectors_manager.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/file_type_policies.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 #include "content/public/browser/download_item_utils.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/l10n/time_format.h"
@@ -49,7 +45,6 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using MixedContentStatus = download::DownloadItem::MixedContentStatus;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -79,10 +74,6 @@ class DownloadItemModelData : public base::SupportsUserData::Data {
   // for the file type.
   bool should_prefer_opening_in_browser_;
 
-  // Danger level of the file determined based on the file type and whether
-  // there was a user action associated with the download.
-  DownloadFileType::DangerLevel danger_level_;
-
   // Whether the download is currently being revived.
   bool is_being_revived_;
 
@@ -118,7 +109,6 @@ DownloadItemModelData::DownloadItemModelData()
     : should_show_in_shelf_(true),
       was_ui_notified_(false),
       should_prefer_opening_in_browser_(false),
-      danger_level_(DownloadFileType::NOT_DANGEROUS),
       is_being_revived_(false) {}
 
 } // namespace
@@ -298,14 +288,7 @@ bool DownloadItemModel::IsMixedContent() const {
 }
 
 bool DownloadItemModel::ShouldAllowDownloadFeedback() const {
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  if (!IsDangerous())
-    return false;
-  return safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *download_);
-#else
   return false;
-#endif
 }
 
 bool DownloadItemModel::ShouldRemoveFromShelfWhenComplete() const {
@@ -402,17 +385,6 @@ void DownloadItemModel::SetShouldPreferOpeningInBrowser(bool preference) {
   data->should_prefer_opening_in_browser_ = preference;
 }
 
-DownloadFileType::DangerLevel DownloadItemModel::GetDangerLevel() const {
-  const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
-  return data ? data->danger_level_ : DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadItemModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {
-  DownloadItemModelData* data = DownloadItemModelData::GetOrCreate(download_);
-  data->danger_level_ = danger_level;
-}
-
 download::DownloadItem::MixedContentStatus
 DownloadItemModel::GetMixedContentStatus() const {
   return download_->GetMixedContentStatus();
@@ -569,9 +541,6 @@ bool DownloadItemModel::IsCommandEnabled(
       // filename. Don't base an "Always open" decision based on it. Also
       // exclude extensions.
       return download_->CanOpenDownload() &&
-             safe_browsing::FileTypePolicies::GetInstance()
-                 ->IsAllowedToOpenAutomatically(
-                     download_->GetTargetFilePath()) &&
              !download_crx_util::IsExtensionDownload(*download_);
     case DownloadCommands::PAUSE:
       return !download_->IsSavePackageDownload() &&
@@ -729,6 +698,7 @@ void DownloadItemModel::ExecuteCommand(DownloadCommands* download_commands,
       DownloadUIModel::ExecuteCommand(download_commands, command);
       break;
     case DownloadCommands::DEEP_SCAN:
+#if BUILDFLAG(FULL_SAFE_BROWSING)
       safe_browsing::SafeBrowsingService* sb_service =
           g_browser_process->safe_browsing_service();
       if (!sb_service)
@@ -754,6 +724,7 @@ void DownloadItemModel::ExecuteCommand(DownloadCommands* download_commands,
           safe_browsing::DeepScanningRequest::DeepScanTrigger::
               TRIGGER_APP_PROMPT,
           std::move(settings));
+#endif
       break;
   }
 }
diff --git a/chrome/browser/download/download_item_model.h b/chrome/browser/download/download_item_model.h
index fb1fc21d3f73..1c3dcff948d1 100644
--- a/chrome/browser/download/download_item_model.h
+++ b/chrome/browser/download/download_item_model.h
@@ -13,7 +13,6 @@
 #include "chrome/browser/download/download_ui_model.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 // Implementation of DownloadUIModel that wrappers around a |DownloadItem*|. As
 // such, the caller is expected to ensure that the |download| passed into the
@@ -50,9 +49,6 @@ class DownloadItemModel : public DownloadUIModel,
   void SetWasUINotified(bool should_notify) override;
   bool ShouldPreferOpeningInBrowser() const override;
   void SetShouldPreferOpeningInBrowser(bool preference) override;
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const override;
-  void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level) override;
   download::DownloadItem::MixedContentStatus GetMixedContentStatus()
       const override;
   void OpenUsingPlatformHandler() override;
diff --git a/chrome/browser/download/download_prefs.cc b/chrome/browser/download/download_prefs.cc
index 6c30afbd726b..d89bca880549 100644
--- a/chrome/browser/download/download_prefs.cc
+++ b/chrome/browser/download/download_prefs.cc
@@ -41,7 +41,6 @@
 #include "components/policy/core/browser/url_blacklist_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/save_page_type.h"
@@ -60,7 +59,6 @@
 using content::BrowserContext;
 using content::BrowserThread;
 using content::DownloadManager;
-using safe_browsing::FileTypePolicies;
 
 namespace {
 
@@ -219,8 +217,6 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
   download_path_.Init(prefs::kDownloadDefaultDirectory, prefs);
   save_file_path_.Init(prefs::kSaveFileDefaultDirectory, prefs);
   save_file_type_.Init(prefs::kSaveFileType, prefs);
-  safebrowsing_for_trusted_sources_enabled_.Init(
-      prefs::kSafeBrowsingForTrustedSourcesEnabled, prefs);
   download_restriction_.Init(prefs::kDownloadRestrictions, prefs);
 
   pref_change_registrar_.Add(
@@ -264,14 +260,7 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
         base::FilePath::StringType(1, base::FilePath::kExtensionSeparator) +
         extension);
 
-    // Note that the list of file types that are not allowed to open
-    // automatically can change in the future. When the list is tightened, it is
-    // expected that some entries in the users' auto open list will get dropped
-    // permanently as a result.
-    if (FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-            filename_with_extension)) {
-      auto_open_by_user_.insert(extension);
-    }
+    auto_open_by_user_.insert(extension);
   }
 }
 
@@ -291,8 +280,6 @@ void DownloadPrefs::RegisterProfilePrefs(
   registry->RegisterIntegerPref(prefs::kSaveFileType,
                                 content::SAVE_PAGE_TYPE_AS_COMPLETE_HTML);
   registry->RegisterIntegerPref(prefs::kDownloadRestrictions, 0);
-  registry->RegisterBooleanPref(prefs::kSafeBrowsingForTrustedSourcesEnabled,
-                                true);
 
   const base::FilePath& default_download_path = GetDefaultDownloadDirectory();
   registry->RegisterFilePathPref(prefs::kDownloadDefaultDirectory,
@@ -457,10 +444,6 @@ bool DownloadPrefs::IsAutoOpenByPolicy(const GURL& url,
 bool DownloadPrefs::EnableAutoOpenByUserBasedOnExtension(
     const base::FilePath& file_name) {
   base::FilePath::StringType extension = file_name.Extension();
-  if (!FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-          file_name)) {
-    return false;
-  }
 
   DCHECK(extension[0] == base::FilePath::kExtensionSeparator);
   extension.erase(0, 1);
diff --git a/chrome/browser/download/download_prefs.h b/chrome/browser/download/download_prefs.h
index 4484ddc660ca..dfa826226efa 100644
--- a/chrome/browser/download/download_prefs.h
+++ b/chrome/browser/download/download_prefs.h
@@ -77,9 +77,6 @@ class DownloadPrefs {
   DownloadRestriction download_restriction() const {
     return static_cast<DownloadRestriction>(*download_restriction_);
   }
-  bool safebrowsing_for_trusted_sources_enabled() const {
-    return *safebrowsing_for_trusted_sources_enabled_;
-  }
 
   // Returns true if the prompt_for_download preference has been set and the
   // download location is not managed (which means the user shouldn't be able
@@ -153,7 +150,6 @@ class DownloadPrefs {
   FilePathPrefMember save_file_path_;
   IntegerPrefMember save_file_type_;
   IntegerPrefMember download_restriction_;
-  BooleanPrefMember safebrowsing_for_trusted_sources_enabled_;
 
   PrefChangeRegistrar pref_change_registrar_;
 
diff --git a/chrome/browser/download/download_target_determiner.cc b/chrome/browser/download/download_target_determiner.cc
index cdeecb35a998..d609fbc68c7a 100644
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -28,7 +28,6 @@
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/history/core/browser/history_service.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -61,7 +60,6 @@
 using content::BrowserThread;
 using download::DownloadItem;
 using download::DownloadPathReservationTracker;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -101,8 +99,6 @@ DownloadTargetDeterminer::DownloadTargetDeterminer(
       should_notify_extensions_(false),
       create_target_directory_(false),
       conflict_action_(conflict_action),
-      danger_type_(download->GetDangerType()),
-      danger_level_(DownloadFileType::NOT_DANGEROUS),
       virtual_path_(initial_virtual_path),
       is_filetype_handled_safely_(false),
 #if defined(OS_ANDROID)
@@ -292,13 +288,6 @@ base::FilePath DownloadTargetDeterminer::GenerateFileName() const {
       download_->GetURL(), download_->GetContentDisposition(), referrer_charset,
       suggested_filename, sniffed_mime_type, default_filename);
 
-  // We don't replace the file extension if safe browsing consider the file
-  // extension to be unsafe. Just let safe browsing scan the generated file.
-  if (safe_browsing::FileTypePolicies::GetInstance()->IsCheckedBinaryFile(
-          generated_filename)) {
-    return generated_filename;
-  }
-
   // If no mime type or explicitly specified a name, don't replace file
   // extension.
   if (sniffed_mime_type.empty() || !suggested_filename.empty())
@@ -779,24 +768,12 @@ DownloadTargetDeterminer::Result
   DCHECK(!virtual_path_.empty());
   next_state_ = STATE_CHECK_VISITED_REFERRER_BEFORE;
 
-  // If user has validated a dangerous download, don't check.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_USER_VALIDATED)
-    return CONTINUE;
-
-  delegate_->CheckDownloadUrl(
-      download_,
-      virtual_path_,
-      base::Bind(&DownloadTargetDeterminer::CheckDownloadUrlDone,
-                 weak_ptr_factory_.GetWeakPtr()));
-  return QUIT_DOLOOP;
+  return CONTINUE;
 }
 
-void DownloadTargetDeterminer::CheckDownloadUrlDone(
-    download::DownloadDangerType danger_type) {
+void DownloadTargetDeterminer::CheckDownloadUrlDone() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  DVLOG(20) << "URL Check Result:" << danger_type;
   DCHECK_EQ(STATE_CHECK_VISITED_REFERRER_BEFORE, next_state_);
-  danger_type_ = danger_type;
   DoLoop();
 }
 
@@ -805,50 +782,6 @@ DownloadTargetDeterminer::Result
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   next_state_ = STATE_DETERMINE_INTERMEDIATE_PATH;
 
-  // Checking if there are prior visits to the referrer is only necessary if the
-  // danger level of the download depends on the file type.
-  if (danger_type_ != download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS &&
-      danger_type_ != download::DOWNLOAD_DANGER_TYPE_MAYBE_DANGEROUS_CONTENT &&
-      danger_type_ != download::DOWNLOAD_DANGER_TYPE_WHITELISTED_BY_POLICY) {
-    return CONTINUE;
-  }
-
-  // First determine the danger level assuming that the user doesn't have any
-  // prior visits to the referrer recoreded in history. The resulting danger
-  // level would be ALLOW_ON_USER_GESTURE if the level depends on the visit
-  // history. In the latter case, we can query the history DB to determine if
-  // there were prior requests and determine the danger level again once the
-  // result is available.
-  danger_level_ = GetDangerLevel(NO_VISITS_TO_REFERRER);
-
-  if (danger_level_ == DownloadFileType::NOT_DANGEROUS)
-    return CONTINUE;
-
-  if (danger_level_ == DownloadFileType::ALLOW_ON_USER_GESTURE) {
-    // HistoryServiceFactory redirects incognito profiles to on-record profiles.
-    // There's no history for on-record profiles in unit_tests.
-    history::HistoryService* history_service =
-        HistoryServiceFactory::GetForProfile(
-            GetProfile(), ServiceAccessType::EXPLICIT_ACCESS);
-
-    if (history_service && download_->GetReferrerUrl().is_valid()) {
-      history_service->GetVisibleVisitCountToHost(
-          download_->GetReferrerUrl(),
-          base::BindOnce(
-              &VisitCountsToVisitedBefore,
-              base::BindOnce(
-                  &DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone,
-                  weak_ptr_factory_.GetWeakPtr())),
-          &history_tracker_);
-      return QUIT_DOLOOP;
-    }
-  }
-
-  // If the danger level doesn't depend on having visited the refererrer URL or
-  // if original profile doesn't have a HistoryService or the referrer url is
-  // invalid, then assume the referrer has not been visited before.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
   return CONTINUE;
 }
 
@@ -856,11 +789,6 @@ void DownloadTargetDeterminer::CheckVisitedReferrerBeforeDone(
     bool visited_referrer_before) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK_EQ(STATE_DETERMINE_INTERMEDIATE_PATH, next_state_);
-  danger_level_ = GetDangerLevel(
-      visited_referrer_before ? VISITED_REFERRER : NO_VISITS_TO_REFERRER);
-  if (danger_level_ != DownloadFileType::NOT_DANGEROUS &&
-      danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS)
-    danger_type_ = download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE;
   DoLoop();
 }
 
@@ -902,58 +830,31 @@ DownloadTargetDeterminer::Result
   // target path. In practice the temporary download file that was created prior
   // to download filename determination is already named
   // download_->GetForcedFilePath().
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS &&
-      !download_->GetForcedFilePath().empty()) {
+  if(!download_->GetForcedFilePath().empty()) {
     DCHECK_EQ(download_->GetForcedFilePath().value(), local_path_.value());
     intermediate_path_ = local_path_;
     return COMPLETE;
   }
 
   // Transient downloads don't need to be renamed to intermediate file.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS &&
-      download_->IsTransient()) {
+  if(download_->IsTransient()) {
     intermediate_path_ = local_path_;
     return COMPLETE;
   }
 
-  // Other safe downloads get a .crdownload suffix for their intermediate name.
-  if (danger_type_ == download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS) {
-    intermediate_path_ = GetCrDownloadPath(local_path_);
-    return COMPLETE;
-  }
-
   // If this is a resumed download, then re-use the existing intermediate path
   // if one is available. A resumed download shouldn't cause a non-dangerous
   // download to be considered dangerous upon resumption. Therefore the
   // intermediate file should already be in the correct form.
   if (is_resumption_ && !download_->GetFullPath().empty() &&
       local_path_.DirName() == download_->GetFullPath().DirName()) {
-    DCHECK_NE(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS,
-              download_->GetDangerType());
     DCHECK_EQ(kCrdownloadSuffix, download_->GetFullPath().Extension());
     intermediate_path_ = download_->GetFullPath();
     return COMPLETE;
   }
 
-  // Dangerous downloads receive a random intermediate name that looks like:
-  // 'Unconfirmed <random>.crdownload'.
-  const base::FilePath::CharType kUnconfirmedFormatSuffix[] =
-      FILE_PATH_LITERAL(" %d.crdownload");
-  // Range of the <random> uniquifier.
-  const int kUnconfirmedUniquifierRange = 1000000;
-#if defined(OS_WIN)
-  base::string16 unconfirmed_format =
-      l10n_util::GetStringUTF16(IDS_DOWNLOAD_UNCONFIRMED_PREFIX);
-#else
-  std::string unconfirmed_format =
-      l10n_util::GetStringUTF8(IDS_DOWNLOAD_UNCONFIRMED_PREFIX);
-#endif
-  unconfirmed_format.append(kUnconfirmedFormatSuffix);
-
-  base::FilePath::StringType file_name = base::StringPrintf(
-      unconfirmed_format.c_str(),
-      base::RandInt(0, kUnconfirmedUniquifierRange));
-  intermediate_path_ = local_path_.DirName().Append(file_name);
+  // Other safe downloads get a .crdownload suffix for their intermediate name.
+  intermediate_path_ = GetCrDownloadPath(local_path_);
   return COMPLETE;
 }
 
@@ -964,8 +865,6 @@ void DownloadTargetDeterminer::ScheduleCallbackAndDeleteSelf(
             << " Local:" << local_path_.AsUTF8Unsafe()
             << " Intermediate:" << intermediate_path_.AsUTF8Unsafe()
             << " Confirmation reason:" << static_cast<int>(confirmation_reason_)
-            << " Danger type:" << danger_type_
-            << " Danger level:" << danger_level_
             << " Result:" << static_cast<int>(result);
   std::unique_ptr<DownloadTargetInfo> target_info(new DownloadTargetInfo);
 
@@ -976,8 +875,6 @@ void DownloadTargetDeterminer::ScheduleCallbackAndDeleteSelf(
                confirmation_reason_ != DownloadConfirmationReason::NONE
            ? DownloadItem::TARGET_DISPOSITION_PROMPT
            : DownloadItem::TARGET_DISPOSITION_OVERWRITE);
-  target_info->danger_type = danger_type_;
-  target_info->danger_level = danger_level_;
   target_info->intermediate_path = intermediate_path_;
   target_info->mime_type = mime_type_;
   target_info->is_filetype_handled_safely = is_filetype_handled_safely_;
@@ -1066,55 +963,6 @@ bool DownloadTargetDeterminer::HasPromptedForPath() const {
                                 DownloadItem::TARGET_DISPOSITION_PROMPT);
 }
 
-DownloadFileType::DangerLevel DownloadTargetDeterminer::GetDangerLevel(
-    PriorVisitsToReferrer visits) const {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  // If the user has has been prompted or will be, assume that the user has
-  // approved the download. A programmatic download is considered safe unless it
-  // contains malware.
-  if (HasPromptedForPath() ||
-      confirmation_reason_ != DownloadConfirmationReason::NONE ||
-      !download_->GetForcedFilePath().empty())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  // User-initiated extension downloads from pref-whitelisted sources are not
-  // considered dangerous.
-  if (download_->HasUserGesture() &&
-      download_crx_util::IsTrustedExtensionDownload(GetProfile(), *download_)) {
-    return DownloadFileType::NOT_DANGEROUS;
-  }
-
-  // Anything the user has marked auto-open is OK if it's user-initiated.
-  if (download_prefs_->IsAutoOpenEnabled(download_->GetURL(), virtual_path_) &&
-      download_->HasUserGesture())
-    return DownloadFileType::NOT_DANGEROUS;
-
-  DownloadFileType::DangerLevel danger_level =
-      safe_browsing::FileTypePolicies::GetInstance()->GetFileDangerLevel(
-          virtual_path_.BaseName());
-
-  // A danger level of ALLOW_ON_USER_GESTURE is used to label potentially
-  // dangerous file types that have a high frequency of legitimate use. We would
-  // like to avoid prompting for the legitimate cases as much as possible. To
-  // that end, we consider a download to be legitimate if one of the following
-  // is true, and avoid prompting:
-  //
-  // * The user navigated to the download URL via the omnibox (either by typing
-  //   the URL, pasting it, or using search).
-  //
-  // * The navigation that initiated the download has a user gesture associated
-  //   with it AND the user the user is familiar with the referring origin. A
-  //   user is considered familiar with a referring origin if a visit for a page
-  //   from the same origin was recorded on the previous day or earlier.
-  if (danger_level == DownloadFileType::ALLOW_ON_USER_GESTURE &&
-      ((download_->GetTransitionType() &
-        ui::PAGE_TRANSITION_FROM_ADDRESS_BAR) != 0 ||
-       (download_->HasUserGesture() && visits == VISITED_REFERRER)))
-    return DownloadFileType::NOT_DANGEROUS;
-  return danger_level;
-}
-
 void DownloadTargetDeterminer::OnDownloadDestroyed(
     DownloadItem* download) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
diff --git a/chrome/browser/download/download_target_determiner.h b/chrome/browser/download/download_target_determiner.h
index 3dc27593fe8d..a9ff07ddd00d 100644
--- a/chrome/browser/download/download_target_determiner.h
+++ b/chrome/browser/download/download_target_determiner.h
@@ -19,7 +19,6 @@
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 #include "content/public/browser/download_manager_delegate.h"
 #include "ppapi/buildflags/buildflags.h"
 
@@ -267,7 +266,7 @@ class DownloadTargetDeterminer : public download::DownloadItem::Observer {
 
   // Callback invoked after the delegate has checked the download URL. Sets the
   // danger type of the download to |danger_type|.
-  void CheckDownloadUrlDone(download::DownloadDangerType danger_type);
+  void CheckDownloadUrlDone();
 
   // Checks if the user has visited the referrer URL of the download prior to
   // today. The actual check is only performed if it would be needed to
@@ -316,16 +315,6 @@ class DownloadTargetDeterminer : public download::DownloadItem::Observer {
   // operation.
   bool HasPromptedForPath() const;
 
-  // Returns true if this download should show the "dangerous file" warning.
-  // Various factors are considered, such as the type of the file, whether a
-  // user action initiated the download, and whether the user has explicitly
-  // marked the file type as "auto open". Protected virtual for testing.
-  //
-  // If |require_explicit_consent| is non-null then the pointed bool will be set
-  // to true if the download requires explicit user consent.
-  safe_browsing::DownloadFileType::DangerLevel GetDangerLevel(
-      PriorVisitsToReferrer visits) const;
-
   // Generates the download file name based on information from URL, response
   // headers and sniffed mime type.
   base::FilePath GenerateFileName() const;
@@ -340,8 +329,6 @@ class DownloadTargetDeterminer : public download::DownloadItem::Observer {
   bool create_target_directory_;
   download::DownloadPathReservationTracker::FilenameConflictAction
       conflict_action_;
-  download::DownloadDangerType danger_type_;
-  safe_browsing::DownloadFileType::DangerLevel danger_level_;
   base::FilePath virtual_path_;
   base::FilePath local_path_;
   base::FilePath intermediate_path_;
diff --git a/chrome/browser/download/download_target_info.cc b/chrome/browser/download/download_target_info.cc
index 30142aa148e9..6a6499789cbb 100644
--- a/chrome/browser/download/download_target_info.cc
+++ b/chrome/browser/download/download_target_info.cc
@@ -4,12 +4,9 @@
 
 #include "chrome/browser/download/download_target_info.h"
 
-#include "components/safe_browsing/core/file_type_policies.h"
-
 DownloadTargetInfo::DownloadTargetInfo()
     : target_disposition(download::DownloadItem::TARGET_DISPOSITION_OVERWRITE),
       danger_type(download::DOWNLOAD_DANGER_TYPE_NOT_DANGEROUS),
-      danger_level(safe_browsing::DownloadFileType::NOT_DANGEROUS),
       is_filetype_handled_safely(false),
       result(download::DOWNLOAD_INTERRUPT_REASON_NONE),
       mixed_content_status(
diff --git a/chrome/browser/download/download_target_info.h b/chrome/browser/download/download_target_info.h
index 87a5cf3b8de4..c99631011a5b 100644
--- a/chrome/browser/download/download_target_info.h
+++ b/chrome/browser/download/download_target_info.h
@@ -13,7 +13,6 @@
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/download/public/common/download_schedule.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 struct DownloadTargetInfo {
   DownloadTargetInfo();
@@ -58,7 +57,6 @@ struct DownloadTargetInfo {
   //       UNKONWN, the file will still be conisdered a DANGEROUS_FILE. However,
   //       SafeBrowsing may flag the file as being malicious, in which case the
   //       malicious classification should take precedence.
-  safe_browsing::DownloadFileType::DangerLevel danger_level;
 
   // Suggested intermediate path. The downloaded bytes should be written to this
   // path until all the bytes are available and the user has accepted a
diff --git a/chrome/browser/download/download_ui_model.cc b/chrome/browser/download/download_ui_model.cc
index 2015cddc5490..388b0c542056 100644
--- a/chrome/browser/download/download_ui_model.cc
+++ b/chrome/browser/download/download_ui_model.cc
@@ -9,8 +9,6 @@
 #include "base/time/time.h"
 #include "chrome/browser/download/download_commands.h"
 #include "chrome/browser/download/offline_item_utils.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
@@ -33,7 +31,6 @@
 
 using base::TimeDelta;
 using download::DownloadItem;
-using safe_browsing::DownloadFileType;
 using offline_items_collection::FailState;
 
 namespace {
@@ -253,7 +250,7 @@ base::string16 DownloadUIModel::GetWarningText(const base::string16& filename,
   DCHECK(IsDangerous() || IsMixedContent());
   switch (GetDangerType()) {
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL: {
-      return l10n_util::GetStringUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_URL);
+      break;
     }
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE: {
       if (IsExtensionDownload()) {
@@ -265,23 +262,9 @@ base::string16 DownloadUIModel::GetWarningText(const base::string16& filename,
       }
     }
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
-    case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST: {
-      return l10n_util::GetStringFUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT,
-                                        filename, offset);
-    }
+    case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST:
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool request_ap_verdicts = false;
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-      request_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->IsUnderAdvancedProtection();
-#endif
-      return l10n_util::GetStringFUTF16(
-          request_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
-          filename, offset);
+      break;
     }
     case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED: {
       return l10n_util::GetStringFUTF16(IDS_PROMPT_DOWNLOAD_CHANGES_SETTINGS,
@@ -426,13 +409,6 @@ bool DownloadUIModel::ShouldPreferOpeningInBrowser() const {
 
 void DownloadUIModel::SetShouldPreferOpeningInBrowser(bool preference) {}
 
-DownloadFileType::DangerLevel DownloadUIModel::GetDangerLevel() const {
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadUIModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {}
-
 download::DownloadItem::MixedContentStatus
 DownloadUIModel::GetMixedContentStatus() const {
   return download::DownloadItem::MixedContentStatus::UNKNOWN;
diff --git a/chrome/browser/download/download_ui_model.h b/chrome/browser/download/download_ui_model.h
index dc22edf69dfd..26eb69d6acae 100644
--- a/chrome/browser/download/download_ui_model.h
+++ b/chrome/browser/download/download_ui_model.h
@@ -17,7 +17,6 @@
 #include "components/download/public/common/download_item.h"
 #include "components/offline_items_collection/core/offline_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 #if !defined(OS_ANDROID)
 #include "chrome/browser/download/download_commands.h"
@@ -168,15 +167,6 @@ class DownloadUIModel {
   // Change what's returned by ShouldPreferOpeningInBrowser to |preference|.
   virtual void SetShouldPreferOpeningInBrowser(bool preference);
 
-  // Return the danger level determined during download target determination.
-  // The value returned here is independent of the danger level as determined by
-  // the Safe Browsing.
-  virtual safe_browsing::DownloadFileType::DangerLevel GetDangerLevel() const;
-
-  // Change what's returned by GetDangerLevel().
-  virtual void SetDangerLevel(
-      safe_browsing::DownloadFileType::DangerLevel danger_level);
-
   // Return the mixed content status determined during download target
   // determination.
   virtual download::DownloadItem::MixedContentStatus GetMixedContentStatus()
diff --git a/chrome/browser/download/notification/download_item_notification.cc b/chrome/browser/download/notification/download_item_notification.cc
index d037f5e397f5..539310b43a3e 100644
--- a/chrome/browser/download/notification/download_item_notification.cc
+++ b/chrome/browser/download/notification/download_item_notification.cc
@@ -27,8 +27,6 @@
 #include "chrome/browser/notifications/notification_display_service.h"
 #include "chrome/browser/notifications/notification_display_service_factory.h"
 #include "chrome/browser/notifications/notification_handler.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/chrome_pages.h"
 #include "chrome/browser/ui/scoped_tabbed_browser_displayer.h"
 #include "chrome/common/url_constants.h"
@@ -841,9 +839,13 @@ base::string16 DownloadItemNotification::GetWarningStatusString() const {
     }
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
       bool requests_ap_verdicts =
+#if BUILDFLAG(FULL_SAFE_BROWSING)
           safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
               profile())
               ->IsUnderAdvancedProtection();
+#else
+          false;
+#endif
       return l10n_util::GetStringFUTF16(
           requests_ap_verdicts
               ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
diff --git a/chrome/browser/download/notification/download_notification_browsertest.cc b/chrome/browser/download/notification/download_notification_browsertest.cc
index cf8f1a9c2ad0..6f2c3eeba1c9 100644
--- a/chrome/browser/download/notification/download_notification_browsertest.cc
+++ b/chrome/browser/download/notification/download_notification_browsertest.cc
@@ -89,13 +89,6 @@ class TestChromeDownloadManagerDelegate : public ChromeDownloadManagerDelegate {
   // Return if  the download is opened.
   bool opened() const { return opened_; }
 
- protected:
-  // Disable DownloadProtectionService in order to disable content checking.
-  safe_browsing::DownloadProtectionService* GetDownloadProtectionService()
-      override {
-    return nullptr;
-  }
-
  private:
   bool opened_;
 };
diff --git a/chrome/browser/download/save_package_file_picker.cc b/chrome/browser/download/save_package_file_picker.cc
index b534612ff65a..b47156f01f27 100644
--- a/chrome/browser/download/save_package_file_picker.cc
+++ b/chrome/browser/download/save_package_file_picker.cc
@@ -45,7 +45,6 @@ namespace {
 bool g_should_prompt_for_filename = true;
 
 void OnSavePackageDownloadCreated(download::DownloadItem* download) {
-  ChromeDownloadManagerDelegate::DisableSafeBrowsing(download);
 }
 
 // Adds "Webpage, HTML Only" type to FileTypeInfo.
diff --git a/chrome/browser/enterprise/connectors/connectors_manager.cc b/chrome/browser/enterprise/connectors/connectors_manager.cc
index 26ebf6a59cc0..c52aa0e037be 100644
--- a/chrome/browser/enterprise/connectors/connectors_manager.cc
+++ b/chrome/browser/enterprise/connectors/connectors_manager.cc
@@ -6,6 +6,7 @@
 
 #include <memory>
 
+#include "base/bind.h"
 #include "base/feature_list.h"
 #include "base/memory/singleton.h"
 #include "base/values.h"
@@ -13,7 +14,6 @@
 #include "chrome/browser/enterprise/connectors/connectors_prefs.h"
 #include "components/policy/core/browser/url_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/url_matcher/url_matcher.h"
 #include "url/gurl.h"
 
@@ -276,49 +276,19 @@ ConnectorsManager::GetAnalysisSettingsFromLegacyPolicies(
 
 BlockUntilVerdict ConnectorsManager::LegacyBlockUntilVerdict(
     bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kDelayDeliveryUntilVerdict);
-  if (pref == safe_browsing::DELAY_NONE)
-    return BlockUntilVerdict::NO_BLOCK;
-  if (pref == safe_browsing::DELAY_UPLOADS_AND_DOWNLOADS)
-    return BlockUntilVerdict::BLOCK;
-  return ((upload && pref == safe_browsing::DELAY_UPLOADS) ||
-          (!upload && pref == safe_browsing::DELAY_DOWNLOADS))
-             ? BlockUntilVerdict::BLOCK
-             : BlockUntilVerdict::NO_BLOCK;
+  return BlockUntilVerdict::NO_BLOCK;
 }
 
 bool ConnectorsManager::LegacyBlockPasswordProtectedFiles(bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kAllowPasswordProtectedFiles);
-  if (pref == safe_browsing::ALLOW_NONE)
-    return true;
-  if (pref == safe_browsing::ALLOW_UPLOADS_AND_DOWNLOADS)
-    return false;
-  return upload ? pref != safe_browsing::ALLOW_UPLOADS
-                : pref != safe_browsing::ALLOW_DOWNLOADS;
+  return false;
 }
 
 bool ConnectorsManager::LegacyBlockLargeFiles(bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kBlockLargeFileTransfer);
-  if (pref == safe_browsing::BLOCK_NONE)
-    return false;
-  if (pref == safe_browsing::BLOCK_LARGE_UPLOADS_AND_DOWNLOADS)
-    return true;
-  return upload ? pref == safe_browsing::BLOCK_LARGE_UPLOADS
-                : pref == safe_browsing::BLOCK_LARGE_DOWNLOADS;
+  return false;
 }
 
 bool ConnectorsManager::LegacyBlockUnsupportedFileTypes(bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kBlockUnsupportedFiletypes);
-  if (pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_NONE)
-    return false;
-  if (pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_UPLOADS_AND_DOWNLOADS)
-    return true;
-  return upload ? pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_UPLOADS
-                : pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_DOWNLOADS;
+  return false;
 }
 
 bool ConnectorsManager::MatchURLAgainstLegacyDlpPolicies(const GURL& url,
@@ -326,17 +296,9 @@ bool ConnectorsManager::MatchURLAgainstLegacyDlpPolicies(const GURL& url,
   const base::ListValue all_patterns = AllPatterns();
   const base::ListValue no_patterns = base::ListValue();
 
-  const base::ListValue* patterns_to_scan;
-  const base::ListValue* patterns_to_exempt;
-  if (upload) {
-    patterns_to_scan = &all_patterns;
-    patterns_to_exempt = g_browser_process->local_state()->GetList(
-        prefs::kURLsToNotCheckComplianceOfUploadedContent);
-  } else {
-    patterns_to_scan = g_browser_process->local_state()->GetList(
-        prefs::kURLsToCheckComplianceOfDownloadedContent);
-    patterns_to_exempt = &no_patterns;
-  }
+  // these may need to be swapped
+  const base::ListValue* patterns_to_scan = &all_patterns;
+  const base::ListValue* patterns_to_exempt = &no_patterns;
 
   return MatchURLAgainstPatterns(url, patterns_to_scan, patterns_to_exempt);
 }
@@ -347,17 +309,9 @@ bool ConnectorsManager::MatchURLAgainstLegacyMalwarePolicies(
   const base::ListValue all_patterns = AllPatterns();
   const base::ListValue no_patterns = base::ListValue();
 
-  const base::ListValue* patterns_to_scan;
-  const base::ListValue* patterns_to_exempt;
-  if (upload) {
-    patterns_to_scan = g_browser_process->local_state()->GetList(
-        prefs::kURLsToCheckForMalwareOfUploadedContent);
-    patterns_to_exempt = &no_patterns;
-  } else {
-    patterns_to_scan = &all_patterns;
-    patterns_to_exempt = g_browser_process->local_state()->GetList(
-        prefs::kURLsToNotCheckForMalwareOfDownloadedContent);
-  }
+  // these may need to be swapped
+  const base::ListValue* patterns_to_scan = &all_patterns;
+  const base::ListValue* patterns_to_exempt = &no_patterns;
 
   return MatchURLAgainstPatterns(url, patterns_to_scan, patterns_to_exempt);
 }
@@ -395,14 +349,7 @@ ConnectorsManager::GetReportingSettingsFromConnectorPolicy(
 base::Optional<ReportingSettings>
 ConnectorsManager::GetReportingSettingsFromLegacyPolicies(
     ReportingConnector connector) const {
-  if (!g_browser_process || !g_browser_process->local_state() ||
-      !g_browser_process->local_state()->GetBoolean(
-          prefs::kUnsafeEventsReportingEnabled)) {
     return base::nullopt;
-  }
-
-  return ReportingSettings(
-      GURL("https://chromereporting-pa.googleapis.com/v1/events"));
 }
 
 void ConnectorsManager::StartObservingPrefs() {
diff --git a/chrome/browser/extensions/api/downloads/downloads_api.cc b/chrome/browser/extensions/api/downloads/downloads_api.cc
index cd347b06c7ba..2641f4e10238 100644
--- a/chrome/browser/extensions/api/downloads/downloads_api.cc
+++ b/chrome/browser/extensions/api/downloads/downloads_api.cc
@@ -38,7 +38,6 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/browser/download/download_file_icon_extractor.h"
 #include "chrome/browser/download/download_open_prompt.h"
 #include "chrome/browser/download/download_prefs.h"
@@ -1332,9 +1331,6 @@ DownloadsAcceptDangerFunction::DownloadsAcceptDangerFunction() {}
 
 DownloadsAcceptDangerFunction::~DownloadsAcceptDangerFunction() {}
 
-DownloadsAcceptDangerFunction::OnPromptCreatedCallback*
-    DownloadsAcceptDangerFunction::on_prompt_created_ = NULL;
-
 ExtensionFunction::ResponseAction DownloadsAcceptDangerFunction::Run() {
   std::unique_ptr<downloads::AcceptDanger::Params> params(
       downloads::AcceptDanger::Params::Create(*args_));
@@ -1372,43 +1368,7 @@ void DownloadsAcceptDangerFunction::PromptOrWait(int download_id, int retries) {
     return;
   }
   RecordApiFunctions(DOWNLOADS_FUNCTION_ACCEPT_DANGER);
-  // DownloadDangerPrompt displays a modal dialog using native widgets that the
-  // user must either accept or cancel. It cannot be scripted.
-  DownloadDangerPrompt* prompt = DownloadDangerPrompt::Create(
-      download_item,
-      web_contents,
-      true,
-      base::Bind(&DownloadsAcceptDangerFunction::DangerPromptCallback,
-                 this, download_id));
-  // DownloadDangerPrompt deletes itself
-  if (on_prompt_created_ && !on_prompt_created_->is_null())
-    on_prompt_created_->Run(prompt);
-  // Function finishes in DangerPromptCallback().
-}
-
-void DownloadsAcceptDangerFunction::DangerPromptCallback(
-    int download_id, DownloadDangerPrompt::Action action) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  DownloadItem* download_item = GetDownload(
-      browser_context(), include_incognito_information(), download_id);
-  std::string error;
-  if (InvalidId(download_item, &error) ||
-      Fault(download_item->GetState() != DownloadItem::IN_PROGRESS,
-            download_extension_errors::kNotInProgress, &error)) {
-    Respond(Error(std::move(error)));
-    return;
-  }
-  switch (action) {
-    case DownloadDangerPrompt::ACCEPT:
-      download_item->ValidateDangerousDownload();
-      break;
-    case DownloadDangerPrompt::CANCEL:
-      download_item->Remove();
-      break;
-    case DownloadDangerPrompt::DISMISS:
-      break;
-  }
-  Respond(NoArguments());
+  download_item->ValidateDangerousDownload();
 }
 
 DownloadsShowFunction::DownloadsShowFunction() {}
diff --git a/chrome/browser/extensions/api/downloads/downloads_api.h b/chrome/browser/extensions/api/downloads/downloads_api.h
index 8188d91a7f94..fd747a03c1c2 100644
--- a/chrome/browser/extensions/api/downloads/downloads_api.h
+++ b/chrome/browser/extensions/api/downloads/downloads_api.h
@@ -13,7 +13,6 @@
 #include "base/macros.h"
 #include "base/scoped_observer.h"
 #include "base/time/time.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/common/extensions/api/downloads.h"
 #include "components/download/content/public/all_download_item_notifier.h"
 #include "components/download/public/common/download_path_reservation_tracker.h"
@@ -187,25 +186,16 @@ class DownloadsRemoveFileFunction : public ExtensionFunction {
 
 class DownloadsAcceptDangerFunction : public ExtensionFunction {
  public:
-  typedef base::Callback<void(DownloadDangerPrompt*)> OnPromptCreatedCallback;
-  static void OnPromptCreatedForTesting(
-      OnPromptCreatedCallback* callback) {
-    on_prompt_created_ = callback;
-  }
-
   DECLARE_EXTENSION_FUNCTION("downloads.acceptDanger", DOWNLOADS_ACCEPTDANGER)
   DownloadsAcceptDangerFunction();
   ResponseAction Run() override;
 
  protected:
   ~DownloadsAcceptDangerFunction() override;
-  void DangerPromptCallback(int download_id,
-                            DownloadDangerPrompt::Action action);
 
  private:
   void PromptOrWait(int download_id, int retries);
 
-  static OnPromptCreatedCallback* on_prompt_created_;
   DISALLOW_COPY_AND_ASSIGN(DownloadsAcceptDangerFunction);
 };
 
diff --git a/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper.cc b/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper.cc
index caa308117897..1ce8abb8a00a 100644
--- a/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper.cc
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/chrome_desktop_report_request_helper.cc
@@ -218,22 +218,6 @@ GenerateChromeUserProfileReportRequest(const base::Value& profile_report,
     }
   }
 
-  if (prefs->GetBoolean(enterprise_reporting::kReportSafeBrowsingData)) {
-    if (const base::Value* count =
-            profile_report.FindKey(kSafeBrowsingWarnings)) {
-      if (!count->is_int())
-        return nullptr;
-      request->set_safe_browsing_warnings(count->GetInt());
-    }
-
-    if (const base::Value* count =
-            profile_report.FindKey(kSafeBrowsingWarningsClickThrough)) {
-      if (!count->is_int())
-        return nullptr;
-      request->set_safe_browsing_warnings_click_through(count->GetInt());
-    }
-  }
-
   return request;
 }
 
diff --git a/chrome/browser/extensions/api/enterprise_reporting_private/prefs.cc b/chrome/browser/extensions/api/enterprise_reporting_private/prefs.cc
index f7bd0c9b44b2..a642b9b83767 100644
--- a/chrome/browser/extensions/api/enterprise_reporting_private/prefs.cc
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/prefs.cc
@@ -22,16 +22,12 @@ const char kReportUserIDData[] = "enterprise_reporting.report_user_id_data";
 const char kReportExtensionsAndPluginsData[] =
     "enterprise_reporting.report_extensions_and_plugins_data";
 
-const char kReportSafeBrowsingData[] =
-    "enterprise_reporting.report_safe_browsing_data";
-
 void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(kReportVersionData, true);
   registry->RegisterBooleanPref(kReportPolicyData, true);
   registry->RegisterBooleanPref(kReportMachineIDData, true);
   registry->RegisterBooleanPref(kReportUserIDData, true);
   registry->RegisterBooleanPref(kReportExtensionsAndPluginsData, true);
-  registry->RegisterBooleanPref(kReportSafeBrowsingData, false);
   registry->RegisterBooleanPref(prefs::kCloudReportingEnabled, false);
 }
 
diff --git a/chrome/browser/extensions/api/enterprise_reporting_private/prefs.h b/chrome/browser/extensions/api/enterprise_reporting_private/prefs.h
index 1896ca3622de..fb23d164cef5 100644
--- a/chrome/browser/extensions/api/enterprise_reporting_private/prefs.h
+++ b/chrome/browser/extensions/api/enterprise_reporting_private/prefs.h
@@ -27,9 +27,6 @@ extern const char kReportUserIDData[];
 // Controls reporting of Chrome extensions and plugins data.
 extern const char kReportExtensionsAndPluginsData[];
 
-// Controls reporting of Safe browsing data.
-extern const char kReportSafeBrowsingData[];
-
 void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry);
 
 }  // namespace enterprise_reporting
diff --git a/chrome/browser/extensions/api/preference/preference_api.cc b/chrome/browser/extensions/api/preference/preference_api.cc
index eed1b286bd95..754c0bf1c005 100644
--- a/chrome/browser/extensions/api/preference/preference_api.cc
+++ b/chrome/browser/extensions/api/preference/preference_api.cc
@@ -32,7 +32,6 @@
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 #include "extensions/browser/extension_pref_value_map.h"
@@ -115,11 +114,6 @@ const PrefMappingEntry kPrefMapping[] = {
      APIPermission::kPrivacy},
     {"doNotTrackEnabled", prefs::kEnableDoNotTrack, APIPermission::kPrivacy,
      APIPermission::kPrivacy},
-    {"safeBrowsingEnabled", prefs::kSafeBrowsingEnabled,
-     APIPermission::kPrivacy, APIPermission::kPrivacy},
-    {"safeBrowsingExtendedReportingEnabled",
-     prefs::kSafeBrowsingScoutReportingEnabled, APIPermission::kPrivacy,
-     APIPermission::kPrivacy},
     {"searchSuggestEnabled", prefs::kSearchSuggestEnabled,
      APIPermission::kPrivacy, APIPermission::kPrivacy},
     {"spellingServiceEnabled", spellcheck::prefs::kSpellCheckUseSpellingService,
@@ -806,18 +800,6 @@ ExtensionFunction::ResponseAction SetPreferenceFunction::Run() {
         base::Value(browser_pref_value->GetBool()));
   }
 
-  // Whenever an extension takes control of the |kSafeBrowsingEnabled|
-  // preference, it must also set |kSafeBrowsingEnhanced| to false.
-  // See crbug.com/1064722 for more background.
-  //
-  // TODO(crbug.com/1064722): Consider extending
-  // chrome.privacy.services.safeBrowsingEnabled to a three-state enum.
-  if (prefs::kSafeBrowsingEnabled == browser_pref) {
-    preference_api->SetExtensionControlledPref(extension_id(),
-                                               prefs::kSafeBrowsingEnhanced,
-                                               scope, base::Value(false));
-  }
-
   // Whenever an extension takes control of the |kBlockThirdPartyCookies|
   // preference, we must also set |kCookieControlsMode|.
   // See crbug.com/1065392 for more background.
@@ -897,18 +879,6 @@ ExtensionFunction::ResponseAction ClearPreferenceFunction::Run() {
   PreferenceAPI::Get(browser_context())
       ->RemoveExtensionControlledPref(extension_id(), browser_pref, scope);
 
-  // Whenever an extension clears the |kSafeBrowsingEnabled| preference,
-  // it must also clear |kSafeBrowsingEnhanced|. See crbug.com/1064722 for
-  // more background.
-  //
-  // TODO(crbug.com/1064722): Consider extending
-  // chrome.privacy.services.safeBrowsingEnabled to a three-state enum.
-  if (prefs::kSafeBrowsingEnabled == browser_pref) {
-    PreferenceAPI::Get(browser_context())
-        ->RemoveExtensionControlledPref(extension_id(),
-                                        prefs::kSafeBrowsingEnhanced, scope);
-  }
-
   return RespondNow(NoArguments());
 }
 
diff --git a/chrome/browser/extensions/api/preference/preference_apitest.cc b/chrome/browser/extensions/api/preference/preference_apitest.cc
index e11e90a7f909..f6dfd104e2a2 100644
--- a/chrome/browser/extensions/api/preference/preference_apitest.cc
+++ b/chrome/browser/extensions/api/preference/preference_apitest.cc
@@ -29,7 +29,6 @@
 #include "components/keep_alive_registry/scoped_keep_alive.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/translate/core/browser/translate_pref_names.h"
 #include "content/public/browser/notification_service.h"
 #include "content/public/test/browser_test.h"
@@ -63,7 +62,6 @@ class ExtensionPreferenceApiTest : public extensions::ExtensionApiTest {
               prefs->GetInteger(prefs::kNetworkPredictionOptions));
     EXPECT_TRUE(
         prefs->GetBoolean(password_manager::prefs::kCredentialsEnableService));
-    EXPECT_TRUE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
     EXPECT_TRUE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
   }
 
@@ -88,7 +86,6 @@ class ExtensionPreferenceApiTest : public extensions::ExtensionApiTest {
               prefs->GetInteger(prefs::kNetworkPredictionOptions));
     EXPECT_FALSE(
         prefs->GetBoolean(password_manager::prefs::kCredentialsEnableService));
-    EXPECT_FALSE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
     EXPECT_FALSE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
   }
 
@@ -159,7 +156,6 @@ IN_PROC_BROWSER_TEST_F(ExtensionPreferenceApiTest, Standard) {
   prefs->SetInteger(prefs::kNetworkPredictionOptions,
                     chrome_browser_net::NETWORK_PREDICTION_NEVER);
   prefs->SetBoolean(password_manager::prefs::kCredentialsEnableService, false);
-  prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
   prefs->SetBoolean(prefs::kSearchSuggestEnabled, false);
   prefs->SetBoolean(prefs::kWebRTCMultipleRoutesEnabled, false);
   prefs->SetBoolean(prefs::kWebRTCNonProxiedUdpEnabled, false);
diff --git a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_api.cc b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_api.cc
index 579d813e1bea..61556095cdc6 100644
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_api.cc
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_api.cc
@@ -52,37 +52,7 @@ SafeBrowsingPrivateGetReferrerChainFunction::Run() {
         base::StringPrintf("Could not find tab with id %d.", params->tab_id)));
   }
 
-  Profile* profile = Profile::FromBrowserContext(browser_context());
-  if (!SafeBrowsingNavigationObserverManager::IsEnabledAndReady(profile))
-    return RespondNow(NoArguments());
-
-  scoped_refptr<SafeBrowsingNavigationObserverManager>
-      navigation_observer_manager = g_browser_process->safe_browsing_service()
-                                        ->navigation_observer_manager();
-
-  safe_browsing::ReferrerChain referrer_chain;
-  SafeBrowsingNavigationObserverManager::AttributionResult result =
-      navigation_observer_manager->IdentifyReferrerChainByWebContents(
-          contents, kReferrerUserGestureLimit, &referrer_chain);
-
-  // If the referrer chain is incomplete we'll append the most recent
-  // navigations to referrer chain for diagnostic purposes. This only happens if
-  // the user is not in incognito mode and has opted into extended reporting or
-  // Scout reporting. Otherwise, |CountOfRecentNavigationsToAppend| returns 0.
-  int recent_navigations_to_collect =
-      SafeBrowsingNavigationObserverManager::CountOfRecentNavigationsToAppend(
-          *profile, result);
-  if (recent_navigations_to_collect > 0) {
-    navigation_observer_manager->AppendRecentNavigations(
-        recent_navigations_to_collect, &referrer_chain);
-  }
-
   std::vector<api::safe_browsing_private::ReferrerChainEntry> referrer_entries;
-  referrer_entries.reserve(referrer_chain.size());
-  for (const auto& entry : referrer_chain) {
-    referrer_entries.emplace_back(
-        safe_browsing_util::ReferrerToReferrerChainEntry(entry));
-  }
   return RespondNow(ArgumentList(
       api::safe_browsing_private::GetReferrerChain::Results::Create(
           referrer_entries)));
diff --git a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
index 6c34804f9dc5..089ef1981ab6 100644
--- a/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
+++ b/chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.cc
@@ -812,32 +812,16 @@ void SafeBrowsingPrivateEventRouter::OnCloudPolicyClientAvailable(
 }
 
 bool SafeBrowsingPrivateEventRouter::IsRealtimeReportingEnabled() {
-  auto settings =
-      enterprise_connectors::ConnectorsManager::GetInstance()
-          ->GetReportingSettings(
-              enterprise_connectors::ReportingConnector::SECURITY_EVENT);
-  return settings.has_value();
+  return false;
 }
 
 void SafeBrowsingPrivateEventRouter::IfAuthorized(
     base::OnceCallback<void(bool)> cont) {
-  if (!binary_upload_service_ && g_browser_process) {
-    binary_upload_service_ =
-        safe_browsing::BinaryUploadServiceFactory::GetForProfile(
-            Profile::FromBrowserContext(context_));
-  }
-
-  // TODO(crbug/1069049): Use reporting URL.
-  if (binary_upload_service_)
-    binary_upload_service_->IsAuthorized(GURL(), std::move(cont));
 }
 
 void SafeBrowsingPrivateEventRouter::ReportRealtimeEvent(
     const std::string& name,
     EventBuilder event_builder) {
-  IfAuthorized(base::BindOnce(
-      &SafeBrowsingPrivateEventRouter::ReportRealtimeEventCallback,
-      weak_ptr_factory_.GetWeakPtr(), name, std::move(event_builder)));
 }
 
 void SafeBrowsingPrivateEventRouter::ReportRealtimeEventCallback(
@@ -907,20 +891,7 @@ const user_manager::User* SafeBrowsingPrivateEventRouter::GetChromeOSUser() {
 #endif
 
 bool SafeBrowsingPrivateEventRouter::IsRealtimeReportingAvailable() {
-#if defined(OS_CHROMEOS)
-  // The device must be managed.
-  if (!g_browser_process->platform_part()
-           ->browser_policy_connector_chromeos()
-           ->IsEnterpriseManaged())
-    return false;
-
-  // The Chrome OS user must be affiliated with the device.
-  // This also implies that the user is managed.
-  auto* user = GetChromeOSUser();
-  return user && user->IsAffiliated();
-#else
-  return policy::ChromeBrowserCloudManagementController::IsEnabled();
-#endif
+  return false;
 }
 
 }  // namespace extensions
diff --git a/chrome/browser/extensions/api/settings_private/generated_prefs.cc b/chrome/browser/extensions/api/settings_private/generated_prefs.cc
index 708717077ca2..6999b0b46979 100644
--- a/chrome/browser/extensions/api/settings_private/generated_prefs.cc
+++ b/chrome/browser/extensions/api/settings_private/generated_prefs.cc
@@ -9,7 +9,6 @@
 #include "chrome/browser/content_settings/generated_cookie_prefs.h"
 #include "chrome/browser/extensions/api/settings_private/generated_pref.h"
 #include "chrome/browser/extensions/api/settings_private/prefs_util_enums.h"
-#include "chrome/browser/safe_browsing/generated_safe_browsing_pref.h"
 #include "chrome/common/extensions/api/settings_private.h"
 #include "components/content_settings/core/common/pref_names.h"
 
@@ -34,8 +33,6 @@ GeneratedPrefs::GeneratedPrefs(Profile* profile) {
   prefs_[content_settings::kCookieSessionOnly] =
       std::make_unique<content_settings::GeneratedCookieSessionOnlyPref>(
           profile);
-  prefs_[safe_browsing::kGeneratedSafeBrowsingPref] =
-      std::make_unique<safe_browsing::GeneratedSafeBrowsingPref>(profile);
 }
 
 GeneratedPrefs::~GeneratedPrefs() = default;
diff --git a/chrome/browser/extensions/api/settings_private/prefs_util.cc b/chrome/browser/extensions/api/settings_private/prefs_util.cc
index a6d8479abd96..27c9078cf8fd 100644
--- a/chrome/browser/extensions/api/settings_private/prefs_util.cc
+++ b/chrome/browser/extensions/api/settings_private/prefs_util.cc
@@ -31,7 +31,6 @@
 #include "components/payments/core/payment_prefs.h"
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_manager.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/translate/core/browser/translate_pref_names.h"
@@ -253,14 +252,6 @@ const PrefsUtil::TypedPrefMap& PrefsUtil::GetWhitelistedKeys() {
   (*s_whitelist)[::prefs::kDnsOverHttpsTemplates] =
       settings_api::PrefType::PREF_TYPE_STRING;
 
-  // Security page
-  (*s_whitelist)[::prefs::kSafeBrowsingEnabled] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_whitelist)[::prefs::kSafeBrowsingEnhanced] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-  (*s_whitelist)[::prefs::kSafeBrowsingScoutReportingEnabled] =
-      settings_api::PrefType::PREF_TYPE_BOOLEAN;
-
   // Sync and personalization page.
   (*s_whitelist)[::prefs::kSearchSuggestEnabled] =
       settings_api::PrefType::PREF_TYPE_BOOLEAN;
diff --git a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
index ebfeb3568a37..5dae53c7d66a 100644
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_api.cc
@@ -29,8 +29,6 @@
 #include "chrome/browser/extensions/install_tracker.h"
 #include "chrome/browser/extensions/scoped_active_install.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/ui/app_list/app_list_util.h"
 #include "chrome/browser/ui/browser_dialogs.h"
@@ -65,8 +63,6 @@
 #include "chrome/browser/supervised_user/supervised_user_service_factory.h"
 #endif  // BUILDFLAG(ENABLE_SUPERVISED_USERS)
 
-using safe_browsing::SafeBrowsingNavigationObserverManager;
-
 namespace extensions {
 
 namespace BeginInstallWithManifest3 =
@@ -1036,51 +1032,9 @@ WebstorePrivateGetReferrerChainFunction::
 
 ExtensionFunction::ResponseAction
 WebstorePrivateGetReferrerChainFunction::Run() {
-  Profile* profile = chrome_details_.GetProfile();
-  if (!SafeBrowsingNavigationObserverManager::IsEnabledAndReady(profile))
-    return RespondNow(ArgumentList(
-        api::webstore_private::GetReferrerChain::Results::Create("")));
-
-  content::WebContents* web_contents = GetSenderWebContents();
-  if (!web_contents) {
-    return RespondNow(ErrorWithArguments(
-        api::webstore_private::GetReferrerChain::Results::Create(""),
-        kWebstoreUserCancelledError));
-  }
-
-  scoped_refptr<SafeBrowsingNavigationObserverManager>
-      navigation_observer_manager = g_browser_process->safe_browsing_service()
-                                        ->navigation_observer_manager();
-
-  safe_browsing::ReferrerChain referrer_chain;
-  SafeBrowsingNavigationObserverManager::AttributionResult result =
-      navigation_observer_manager->IdentifyReferrerChainByWebContents(
-          web_contents, kExtensionReferrerUserGestureLimit, &referrer_chain);
-
-  // If the referrer chain is incomplete we'll append the most recent
-  // navigations to referrer chain for diagnostic purposes. This only happens if
-  // the user is not in incognito mode and has opted into extended reporting or
-  // Scout reporting. Otherwise, |CountOfRecentNavigationsToAppend| returns 0.
-  int recent_navigations_to_collect =
-      SafeBrowsingNavigationObserverManager::CountOfRecentNavigationsToAppend(
-          *profile, result);
-  if (recent_navigations_to_collect > 0) {
-    navigation_observer_manager->AppendRecentNavigations(
-        recent_navigations_to_collect, &referrer_chain);
-  }
-
-  safe_browsing::ExtensionWebStoreInstallRequest request;
-  request.mutable_referrer_chain()->Swap(&referrer_chain);
-  request.mutable_referrer_chain_options()->set_recent_navigations_to_collect(
-      recent_navigations_to_collect);
-
-  std::string serialized_referrer_proto = request.SerializeAsString();
-  // Base64 encode the proto to avoid issues with base::Value rejecting strings
-  // which are not valid UTF8.
-  base::Base64Encode(serialized_referrer_proto, &serialized_referrer_proto);
   return RespondNow(
       ArgumentList(api::webstore_private::GetReferrerChain::Results::Create(
-          serialized_referrer_proto)));
+          "")));
 }
 
 WebstorePrivateGetExtensionStatusFunction::
diff --git a/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc b/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
index 4a1771a1d799..f34360078647 100644
--- a/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
+++ b/chrome/browser/extensions/api/webstore_private/webstore_private_apitest.cc
@@ -728,9 +728,6 @@ IN_PROC_BROWSER_TEST_F(ExtensionWebstorePrivateGetReferrerChainApiTest,
 IN_PROC_BROWSER_TEST_F(ExtensionWebstorePrivateGetReferrerChainApiTest,
                        GetReferrerChainForNonSafeBrowsingUser) {
   PrefService* pref_service = browser()->profile()->GetPrefs();
-  EXPECT_TRUE(pref_service->GetBoolean(prefs::kSafeBrowsingEnabled));
-  // Disable SafeBrowsing.
-  pref_service->SetBoolean(prefs::kSafeBrowsingEnabled, false);
 
   GURL page_url = GetTestServerURLWithReferrers("empty_referrer_chain.html");
   ASSERT_TRUE(RunPageTest(page_url.spec()));
diff --git a/chrome/browser/extensions/blacklist.cc b/chrome/browser/extensions/blacklist.cc
index c182a08dd638..f7d72d39daa8 100644
--- a/chrome/browser/extensions/blacklist.cc
+++ b/chrome/browser/extensions/blacklist.cc
@@ -18,141 +18,18 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/extensions/blacklist_factory.h"
 #include "chrome/browser/extensions/blacklist_state_fetcher.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/db/util.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "extensions/browser/extension_prefs.h"
 
 using content::BrowserThread;
-using safe_browsing::SafeBrowsingDatabaseManager;
 
 namespace extensions {
 
 namespace {
 
-// The safe browsing database manager to use. Make this a global/static variable
-// rather than a member of Blacklist because Blacklist accesses the real
-// database manager before it has a chance to get a fake one.
-class LazySafeBrowsingDatabaseManager {
- public:
-  LazySafeBrowsingDatabaseManager() {
-#if BUILDFLAG(SAFE_BROWSING_DB_LOCAL)
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      instance_ =
-          g_browser_process->safe_browsing_service()->database_manager();
-    }
-#endif
-  }
-
-  scoped_refptr<SafeBrowsingDatabaseManager> get() {
-    return instance_;
-  }
-
-  void set(scoped_refptr<SafeBrowsingDatabaseManager> instance) {
-    instance_ = instance;
-    database_changed_callback_list_.Notify();
-  }
-
-  std::unique_ptr<base::CallbackList<void()>::Subscription>
-  RegisterDatabaseChangedCallback(const base::RepeatingClosure& cb) {
-    return database_changed_callback_list_.Add(cb);
-  }
-
- private:
-  scoped_refptr<SafeBrowsingDatabaseManager> instance_;
-  base::CallbackList<void()> database_changed_callback_list_;
-};
-
-static base::LazyInstance<LazySafeBrowsingDatabaseManager>::DestructorAtExit
-    g_database_manager = LAZY_INSTANCE_INITIALIZER;
-
-// Implementation of SafeBrowsingDatabaseManager::Client, the class which is
-// called back from safebrowsing queries.
-//
-// Constructed on any thread but lives on the IO from then on.
-class SafeBrowsingClientImpl
-    : public SafeBrowsingDatabaseManager::Client,
-      public base::RefCountedThreadSafe<SafeBrowsingClientImpl> {
- public:
-  using OnResultCallback = base::Callback<void(const std::set<std::string>&)>;
-
-  // Constructs a client to query the database manager for |extension_ids| and
-  // run |callback| with the IDs of those which have been blacklisted.
-  static void Start(
-      const std::set<std::string>& extension_ids,
-      const OnResultCallback& callback) {
-    auto safe_browsing_client = base::WrapRefCounted(
-        new SafeBrowsingClientImpl(extension_ids, callback));
-    content::GetIOThreadTaskRunner({})->PostTask(
-        FROM_HERE,
-        base::BindOnce(&SafeBrowsingClientImpl::StartCheck,
-                       safe_browsing_client, g_database_manager.Get().get(),
-                       extension_ids));
-  }
-
- private:
-  friend class base::RefCountedThreadSafe<SafeBrowsingClientImpl>;
-
-  SafeBrowsingClientImpl(const std::set<std::string>& extension_ids,
-                         const OnResultCallback& callback)
-      : callback_task_runner_(base::ThreadTaskRunnerHandle::Get()),
-        callback_(callback) {}
-
-  ~SafeBrowsingClientImpl() override {}
-
-  // Pass |database_manager| as a parameter to avoid touching
-  // SafeBrowsingService on the IO thread.
-  void StartCheck(scoped_refptr<SafeBrowsingDatabaseManager> database_manager,
-                  const std::set<std::string>& extension_ids) {
-    DCHECK_CURRENTLY_ON(BrowserThread::IO);
-    if (database_manager->CheckExtensionIDs(extension_ids, this)) {
-      // Definitely not blacklisted. Callback immediately.
-      callback_task_runner_->PostTask(
-          FROM_HERE, base::BindOnce(callback_, std::set<std::string>()));
-      return;
-    }
-    // Something might be blacklisted, response will come in
-    // OnCheckExtensionsResult.
-    AddRef();  // Balanced in OnCheckExtensionsResult
-  }
-
-  void OnCheckExtensionsResult(const std::set<std::string>& hits) override {
-    DCHECK_CURRENTLY_ON(BrowserThread::IO);
-    callback_task_runner_->PostTask(FROM_HERE, base::BindOnce(callback_, hits));
-    Release();  // Balanced in StartCheck.
-  }
-
-  scoped_refptr<base::SingleThreadTaskRunner> callback_task_runner_;
-  OnResultCallback callback_;
-
-  DISALLOW_COPY_AND_ASSIGN(SafeBrowsingClientImpl);
-};
-
-void CheckOneExtensionState(
-    const Blacklist::IsBlacklistedCallback& callback,
-    const Blacklist::BlacklistStateMap& state_map) {
-  callback.Run(state_map.empty() ? NOT_BLACKLISTED : state_map.begin()->second);
-}
-
-void GetMalwareFromBlacklistStateMap(
-    const Blacklist::GetMalwareIDsCallback& callback,
-    const Blacklist::BlacklistStateMap& state_map) {
-  std::set<std::string> malware;
-  for (const auto& state_pair : state_map) {
-    // TODO(oleg): UNKNOWN is treated as MALWARE for backwards compatibility.
-    // In future GetMalwareIDs will be removed and the caller will have to
-    // deal with BLACKLISTED_UNKNOWN state returned from GetBlacklistedIDs.
-    if (state_pair.second == BLACKLISTED_MALWARE ||
-        state_pair.second == BLACKLISTED_UNKNOWN) {
-      malware.insert(state_pair.first);
-    }
-  }
-  callback.Run(malware);
-}
-
 }  // namespace
 
 Blacklist::Observer::Observer(Blacklist* blacklist) : blacklist_(blacklist) {
@@ -163,24 +40,7 @@ Blacklist::Observer::~Observer() {
   blacklist_->RemoveObserver(this);
 }
 
-Blacklist::ScopedDatabaseManagerForTest::ScopedDatabaseManagerForTest(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager)
-    : original_(GetDatabaseManager()) {
-  SetDatabaseManager(database_manager);
-}
-
-Blacklist::ScopedDatabaseManagerForTest::~ScopedDatabaseManagerForTest() {
-  SetDatabaseManager(original_);
-}
-
 Blacklist::Blacklist(ExtensionPrefs* prefs) {
-  auto& lazy_database_manager = g_database_manager.Get();
-  // Using base::Unretained is safe because when this object goes away, the
-  // subscription will automatically be destroyed.
-  database_changed_subscription_ =
-      lazy_database_manager.RegisterDatabaseChangedCallback(base::BindRepeating(
-          &Blacklist::ObserveNewDatabase, base::Unretained(this)));
-
   ObserveNewDatabase();
 }
 
@@ -196,25 +56,15 @@ void Blacklist::GetBlacklistedIDs(const std::set<std::string>& ids,
                                   const GetBlacklistedIDsCallback& callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
-  if (ids.empty() || !GetDatabaseManager().get()) {
+  if (ids.empty()) {
     base::ThreadTaskRunnerHandle::Get()->PostTask(
         FROM_HERE, base::BindOnce(callback, BlacklistStateMap()));
     return;
   }
-
-  // Constructing the SafeBrowsingClientImpl begins the process of asking
-  // safebrowsing for the blacklisted extensions. The set of blacklisted
-  // extensions returned by SafeBrowsing will then be passed to
-  // GetBlacklistStateIDs to get the particular BlacklistState for each id.
-  SafeBrowsingClientImpl::Start(
-      ids,
-      base::Bind(&Blacklist::GetBlacklistStateForIDs, AsWeakPtr(), callback));
 }
 
 void Blacklist::GetMalwareIDs(const std::set<std::string>& ids,
                               const GetMalwareIDsCallback& callback) {
-  GetBlacklistedIDs(ids, base::Bind(&GetMalwareFromBlacklistStateMap,
-                                    callback));
 }
 
 
@@ -222,7 +72,6 @@ void Blacklist::IsBlacklisted(const std::string& extension_id,
                               const IsBlacklistedCallback& callback) {
   std::set<std::string> check;
   check.insert(extension_id);
-  GetBlacklistedIDs(check, base::Bind(&CheckOneExtensionState, callback));
 }
 
 void Blacklist::GetBlacklistStateForIDs(
@@ -339,29 +188,8 @@ void Blacklist::RemoveObserver(Observer* observer) {
   observers_.RemoveObserver(observer);
 }
 
-// static
-void Blacklist::SetDatabaseManager(
-    scoped_refptr<SafeBrowsingDatabaseManager> database_manager) {
-  g_database_manager.Get().set(database_manager);
-}
-
-// static
-scoped_refptr<SafeBrowsingDatabaseManager> Blacklist::GetDatabaseManager() {
-  return g_database_manager.Get().get();
-}
-
 void Blacklist::ObserveNewDatabase() {
-  auto database_manager = GetDatabaseManager();
-  if (database_manager.get()) {
-    // Using base::Unretained is safe because when this object goes away, the
-    // subscription to the callback list will automatically be destroyed.
-    database_updated_subscription_ =
-        database_manager.get()->RegisterDatabaseUpdatedCallback(
-            base::BindRepeating(&Blacklist::NotifyObservers,
-                                base::Unretained(this)));
-  } else {
-    database_updated_subscription_.reset();
-  }
+  database_updated_subscription_.reset();
 }
 
 void Blacklist::NotifyObservers() {
diff --git a/chrome/browser/extensions/blacklist.h b/chrome/browser/extensions/blacklist.h
index cbcb5d10af9a..f8e8b37551f8 100644
--- a/chrome/browser/extensions/blacklist.h
+++ b/chrome/browser/extensions/blacklist.h
@@ -18,7 +18,6 @@
 #include "base/memory/weak_ptr.h"
 #include "base/observer_list.h"
 #include "components/keyed_service/core/keyed_service.h"
-#include "components/safe_browsing/core/db/database_manager.h"
 #include "extensions/browser/blacklist_state.h"
 
 namespace content {
@@ -48,20 +47,6 @@ class Blacklist : public KeyedService,
     Blacklist* blacklist_;
   };
 
-  class ScopedDatabaseManagerForTest {
-   public:
-    explicit ScopedDatabaseManagerForTest(
-        scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-            database_manager);
-
-    ~ScopedDatabaseManagerForTest();
-
-   private:
-    scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager> original_;
-
-    DISALLOW_COPY_AND_ASSIGN(ScopedDatabaseManagerForTest);
-  };
-
   using BlacklistStateMap = std::map<std::string, BlacklistState>;
 
   using GetBlacklistedIDsCallback =
@@ -116,13 +101,6 @@ class Blacklist : public KeyedService,
   void RemoveObserver(Observer* observer);
 
  private:
-  // Use via ScopedDatabaseManagerForTest.
-  static void SetDatabaseManager(
-      scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-          database_manager);
-  static scoped_refptr<safe_browsing::SafeBrowsingDatabaseManager>
-      GetDatabaseManager();
-
   void ObserveNewDatabase();
 
   void NotifyObservers();
diff --git a/chrome/browser/extensions/blacklist_state_fetcher.cc b/chrome/browser/extensions/blacklist_state_fetcher.cc
index 568a8f7dd98e..c71743964e4c 100644
--- a/chrome/browser/extensions/blacklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blacklist_state_fetcher.cc
@@ -8,9 +8,6 @@
 #include "base/strings/stringprintf.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/common/safe_browsing/crx_info.pb.h"
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "content/public/browser/browser_thread.h"
 #include "net/base/escape.h"
 #include "net/traffic_annotation/network_traffic_annotation.h"
@@ -31,90 +28,12 @@ BlacklistStateFetcher::~BlacklistStateFetcher() {
 void BlacklistStateFetcher::Request(const std::string& id,
                                     const RequestCallback& callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  if (!safe_browsing_config_) {
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      SetSafeBrowsingConfig(
-          g_browser_process->safe_browsing_service()->GetV4ProtocolConfig());
-    } else {
-      base::ThreadTaskRunnerHandle::Get()->PostTask(
-          FROM_HERE, base::BindOnce(callback, BLACKLISTED_UNKNOWN));
-      return;
-    }
-  }
-
-  bool request_already_sent = base::Contains(callbacks_, id);
-  callbacks_.insert(std::make_pair(id, callback));
-  if (request_already_sent)
-    return;
-
-  if (g_browser_process && g_browser_process->safe_browsing_service()) {
-    url_loader_factory_ =
-        g_browser_process->safe_browsing_service()->GetURLLoaderFactory();
-  }
-
-  SendRequest(id);
+  base::ThreadTaskRunnerHandle::Get()->PostTask(
+      FROM_HERE, base::BindOnce(callback, BLACKLISTED_UNKNOWN));
 }
 
 void BlacklistStateFetcher::SendRequest(const std::string& id) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-
-  ClientCRXListInfoRequest request;
-  request.set_id(id);
-  std::string request_str;
-  request.SerializeToString(&request_str);
-
-  GURL request_url = GURL(safe_browsing::GetReportUrl(
-      *safe_browsing_config_, "clientreport/crx-list-info"));
-  net::NetworkTrafficAnnotationTag traffic_annotation =
-      net::DefineNetworkTrafficAnnotation("extension_blacklist", R"(
-        semantics {
-          sender: "Extension Blacklist"
-          description:
-            "Chromium protects the users from malicious extensions by checking "
-            "extensions that are being installed or have been installed "
-            "against a list of known malwares. Chromium sends the identifiers "
-            "of extensions to Google and Google responds with whether it "
-            "believes each extension is malware or not. Only extensions that "
-            "match the safe browsing blacklist can trigger this request."
-          trigger:
-            "When extensions are being installed and at startup when existing "
-            "extensions are scanned."
-          data: "The identifier of the installed extension."
-          destination: GOOGLE_OWNED_SERVICE
-        }
-        policy {
-          cookies_allowed: YES
-          cookies_store: "Safe Browsing cookies store"
-          setting:
-            "Users can enable or disable this feature by toggling 'Protect you "
-            "and your device from dangerous sites' in Chromium settings under "
-            "Privacy. This feature is enabled by default."
-          chrome_policy {
-            SafeBrowsingEnabled {
-              policy_options {mode: MANDATORY}
-              SafeBrowsingEnabled: false
-            }
-          }
-        })");
-  auto resource_request = std::make_unique<network::ResourceRequest>();
-  resource_request->url = request_url;
-  resource_request->method = "POST";
-  std::unique_ptr<network::SimpleURLLoader> fetcher_ptr =
-      network::SimpleURLLoader::Create(std::move(resource_request),
-                                       traffic_annotation);
-  auto* fetcher = fetcher_ptr.get();
-  fetcher->AttachStringForUpload(request_str, "application/octet-stream");
-  requests_[fetcher] = {std::move(fetcher_ptr), id};
-  fetcher->DownloadToStringOfUnboundedSizeUntilCrashAndDie(
-      url_loader_factory_.get(),
-      base::BindOnce(&BlacklistStateFetcher::OnURLLoaderComplete,
-                     base::Unretained(this), fetcher));
-}
-
-void BlacklistStateFetcher::SetSafeBrowsingConfig(
-    const safe_browsing::V4ProtocolConfig& config) {
-  safe_browsing_config_ =
-      std::make_unique<safe_browsing::V4ProtocolConfig>(config);
 }
 
 void BlacklistStateFetcher::OnURLLoaderComplete(
@@ -152,12 +71,7 @@ void BlacklistStateFetcher::OnURLLoaderCompleteInternal(
 
   BlacklistState state;
   if (net_error == net::OK && response_code == 200) {
-    ClientCRXListInfoResponse response;
-    if (response.ParseFromString(response_body)) {
-      state = static_cast<BlacklistState>(response.verdict());
-    } else {
-      state = BLACKLISTED_UNKNOWN;
-    }
+    state = BLACKLISTED_UNKNOWN;
   } else {
     if (net_error != net::OK) {
       VLOG(1) << "Blacklist request for: " << id
@@ -166,7 +80,6 @@ void BlacklistStateFetcher::OnURLLoaderCompleteInternal(
       VLOG(1) << "Blacklist request for: " << id
               << " failed with error: " << response_code;
     }
-
     state = BLACKLISTED_UNKNOWN;
   }
 
diff --git a/chrome/browser/extensions/blacklist_state_fetcher.h b/chrome/browser/extensions/blacklist_state_fetcher.h
index d21e2ba0350c..c86d0b01a224 100644
--- a/chrome/browser/extensions/blacklist_state_fetcher.h
+++ b/chrome/browser/extensions/blacklist_state_fetcher.h
@@ -11,10 +11,11 @@
 #include <string>
 
 #include "base/callback.h"
+#include "base/containers/flat_map.h"
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
-#include "components/safe_browsing/core/db/util.h"
 #include "extensions/browser/blacklist_state.h"
+#include "url/gurl.h"
 
 namespace network {
 class SharedURLLoaderFactory;
@@ -34,8 +35,6 @@ class BlacklistStateFetcher {
 
   virtual void Request(const std::string& id, const RequestCallback& callback);
 
-  void SetSafeBrowsingConfig(const safe_browsing::V4ProtocolConfig& config);
-
  protected:
   void OnURLLoaderComplete(network::SimpleURLLoader* url_loader,
                            std::unique_ptr<std::string> response_body);
@@ -54,7 +53,6 @@ class BlacklistStateFetcher {
 
   void SendRequest(const std::string& id);
 
-  std::unique_ptr<safe_browsing::V4ProtocolConfig> safe_browsing_config_;
   scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory_;
 
   // SimpleURLLoader -> (owned loader, extension id).
diff --git a/chrome/browser/extensions/browser_context_keyed_service_factories.cc b/chrome/browser/extensions/browser_context_keyed_service_factories.cc
index 8e7870ab958b..bd969b0f5a89 100644
--- a/chrome/browser/extensions/browser_context_keyed_service_factories.cc
+++ b/chrome/browser/extensions/browser_context_keyed_service_factories.cc
@@ -124,7 +124,6 @@ void EnsureBrowserContextKeyedServiceFactoriesBuilt() {
 #endif
   extensions::PreferenceAPI::GetFactoryInstance();
   extensions::ProcessesAPI::GetFactoryInstance();
-  extensions::SafeBrowsingPrivateEventRouterFactory::GetInstance();
   extensions::SessionsAPI::GetFactoryInstance();
   extensions::SettingsPrivateEventRouterFactory::GetInstance();
   extensions::SettingsOverridesAPI::GetFactoryInstance();
diff --git a/chrome/browser/extensions/crx_installer.cc b/chrome/browser/extensions/crx_installer.cc
index 5227a357c3f4..bed2aa5f4279 100644
--- a/chrome/browser/extensions/crx_installer.cc
+++ b/chrome/browser/extensions/crx_installer.cc
@@ -639,12 +639,9 @@ void CrxInstaller::CheckInstall() {
 
   policy_check_ = std::make_unique<PolicyCheck>(profile_, extension());
   requirements_check_ = std::make_unique<RequirementsChecker>(extension());
-  blacklist_check_ =
-      std::make_unique<BlacklistCheck>(Blacklist::Get(profile_), extension_);
 
   check_group_->AddCheck(policy_check_.get());
   check_group_->AddCheck(requirements_check_.get());
-  check_group_->AddCheck(blacklist_check_.get());
 
   check_group_->Start(
       base::BindOnce(&CrxInstaller::OnInstallChecksComplete, this));
diff --git a/chrome/browser/extensions/webstore_data_fetcher.cc b/chrome/browser/extensions/webstore_data_fetcher.cc
index d1e568ec1da3..2cc6acd3a25a 100644
--- a/chrome/browser/extensions/webstore_data_fetcher.cc
+++ b/chrome/browser/extensions/webstore_data_fetcher.cc
@@ -10,7 +10,6 @@
 #include "base/metrics/field_trial_params.h"
 #include "base/values.h"
 #include "chrome/browser/extensions/webstore_data_fetcher_delegate.h"
-#include "components/safe_browsing/core/features.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/storage_partition.h"
diff --git a/chrome/browser/interstitials/enterprise_util.cc b/chrome/browser/interstitials/enterprise_util.cc
index c8fb7afb5396..3a0061880411 100644
--- a/chrome/browser/interstitials/enterprise_util.cc
+++ b/chrome/browser/interstitials/enterprise_util.cc
@@ -4,44 +4,15 @@
 
 #include "chrome/browser/interstitials/enterprise_util.h"
 
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "content/public/browser/web_contents.h"
 #include "extensions/buildflags/buildflags.h"
 
-namespace {
-
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-extensions::SafeBrowsingPrivateEventRouter* GetEventRouter(
-    content::WebContents* web_contents) {
-  // |web_contents| can be null in tests.
-  if (!web_contents)
-    return nullptr;
-
-  content::BrowserContext* browser_context = web_contents->GetBrowserContext();
-  if (browser_context->IsOffTheRecord())
-    return nullptr;
-
-  return extensions::SafeBrowsingPrivateEventRouterFactory::GetForProfile(
-      browser_context);
-}
-#endif  // BUILDFLAG(ENABLE_EXTENSIONS)
-
-}  // namespace
-
 void MaybeTriggerSecurityInterstitialShownEvent(
     content::WebContents* web_contents,
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialShown(page_url, reason, net_error_code);
-#endif
 }
 
 void MaybeTriggerSecurityInterstitialProceededEvent(
@@ -49,51 +20,4 @@ void MaybeTriggerSecurityInterstitialProceededEvent(
     const GURL& page_url,
     const std::string& reason,
     int net_error_code) {
-#if BUILDFLAG(ENABLE_EXTENSIONS)
-  extensions::SafeBrowsingPrivateEventRouter* event_router =
-      GetEventRouter(web_contents);
-  if (!event_router)
-    return;
-  event_router->OnSecurityInterstitialProceeded(page_url, reason,
-                                                net_error_code);
-#endif
-}
-
-std::string GetThreatTypeStringForInterstitial(
-    safe_browsing::SBThreatType threat_type) {
-  switch (threat_type) {
-    case safe_browsing::SB_THREAT_TYPE_URL_PHISHING:
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING:
-      return "SOCIAL_ENGINEERING";
-    case safe_browsing::SB_THREAT_TYPE_URL_MALWARE:
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE:
-      return "MALWARE";
-    case safe_browsing::SB_THREAT_TYPE_URL_UNWANTED:
-      return "UNWANTED_SOFTWARE";
-    case safe_browsing::SB_THREAT_TYPE_BILLING:
-      return "THREAT_TYPE_UNSPECIFIED";
-    case safe_browsing::SB_THREAT_TYPE_UNUSED:
-    case safe_browsing::SB_THREAT_TYPE_SAFE:
-    case safe_browsing::SB_THREAT_TYPE_URL_BINARY_MALWARE:
-    case safe_browsing::SB_THREAT_TYPE_EXTENSION:
-    case safe_browsing::SB_THREAT_TYPE_BLACKLISTED_RESOURCE:
-    case safe_browsing::SB_THREAT_TYPE_API_ABUSE:
-    case safe_browsing::SB_THREAT_TYPE_SUBRESOURCE_FILTER:
-    case safe_browsing::SB_THREAT_TYPE_CSD_WHITELIST:
-    case safe_browsing::
-        DEPRECATED_SB_THREAT_TYPE_URL_PASSWORD_PROTECTION_PHISHING:
-    case safe_browsing::SB_THREAT_TYPE_SAVED_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_SYNC_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_NON_SYNC_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_AD_SAMPLE:
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_POPUP:
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_REDIRECT:
-    case safe_browsing::SB_THREAT_TYPE_SUSPICIOUS_SITE:
-    case safe_browsing::SB_THREAT_TYPE_ENTERPRISE_PASSWORD_REUSE:
-    case safe_browsing::SB_THREAT_TYPE_APK_DOWNLOAD:
-    case safe_browsing::SB_THREAT_TYPE_HIGH_CONFIDENCE_ALLOWLIST:
-      NOTREACHED();
-      break;
-  }
-  return std::string();
 }
diff --git a/chrome/browser/interstitials/enterprise_util.h b/chrome/browser/interstitials/enterprise_util.h
index 731f697803f9..eeee135a56c2 100644
--- a/chrome/browser/interstitials/enterprise_util.h
+++ b/chrome/browser/interstitials/enterprise_util.h
@@ -5,7 +5,9 @@
 #ifndef CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
 #define CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
 
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
+#include <string>
+
+#include "url/gurl.h"
 
 namespace content {
 class WebContents;
@@ -27,7 +29,4 @@ void MaybeTriggerSecurityInterstitialProceededEvent(
     const std::string& reason,
     int net_error_code);
 
-std::string GetThreatTypeStringForInterstitial(
-    safe_browsing::SBThreatType threat_type);
-
 #endif  // CHROME_BROWSER_INTERSTITIALS_ENTERPRISE_UTIL_H_
diff --git a/chrome/browser/media/webrtc/display_media_access_handler.cc b/chrome/browser/media/webrtc/display_media_access_handler.cc
index 3c002920c1d5..a5d00899b1df 100644
--- a/chrome/browser/media/webrtc/display_media_access_handler.cc
+++ b/chrome/browser/media/webrtc/display_media_access_handler.cc
@@ -17,7 +17,6 @@
 #include "chrome/browser/media/webrtc/native_desktop_media_list.h"
 #include "chrome/browser/media/webrtc/tab_desktop_media_list.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/user_interaction_observer.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/url_formatter/elide_url.h"
@@ -101,21 +100,6 @@ void DisplayMediaAccessHandler::HandleRequest(
     return;
   }

-  // SafeBrowsing Delayed Warnings experiment can delay some SafeBrowsing
-  // warnings until user interaction. If the current page has a delayed warning,
-  // it'll have a user interaction observer attached. Show the warning
-  // immediately in that case.
-  safe_browsing::SafeBrowsingUserInteractionObserver* observer =
-      safe_browsing::SafeBrowsingUserInteractionObserver::FromWebContents(
-          web_contents);
-  if (observer) {
-    std::move(callback).Run(
-        blink::MediaStreamDevices(),
-        blink::mojom::MediaStreamRequestResult::PERMISSION_DENIED, nullptr);
-    observer->OnDesktopCaptureRequest();
-    return;
-  }
-
 #if defined(OS_MACOSX)
   // Do not allow picker UI to be shown on a page that isn't in the foreground
   // in Mac, because the UI implementation in Mac pops a window over any content
diff --git a/chrome/browser/metrics/chrome_metrics_service_accessor.h b/chrome/browser/metrics/chrome_metrics_service_accessor.h
index cfa0d4f7d2e0..ee21e3665c14 100644
--- a/chrome/browser/metrics/chrome_metrics_service_accessor.h
+++ b/chrome/browser/metrics/chrome_metrics_service_accessor.h
@@ -54,18 +54,6 @@ namespace welcome {
 void JoinOnboardingGroup(Profile* profile);
 }
 
-namespace safe_browsing {
-class ChromeCleanerControllerDelegate;
-class DownloadUrlSBClient;
-class IncidentReportingService;
-class SafeBrowsingService;
-class SafeBrowsingUIManager;
-
-namespace internal {
-class ReporterRunner;
-}  // namespace internal
-}  // namespace safe_browsing
-
 namespace settings {
 class MetricsReportingHandler;
 }
@@ -104,12 +92,6 @@ class ChromeMetricsServiceAccessor : public metrics::MetricsServiceAccessor {
   friend class heap_profiling::BackgroundProfilingTriggers;
   friend class settings::MetricsReportingHandler;
   friend class UmaSessionStats;
-  friend class safe_browsing::ChromeCleanerControllerDelegate;
-  friend class safe_browsing::DownloadUrlSBClient;
-  friend class safe_browsing::IncidentReportingService;
-  friend class safe_browsing::internal::ReporterRunner;
-  friend class safe_browsing::SafeBrowsingService;
-  friend class safe_browsing::SafeBrowsingUIManager;
   friend class ChromeMetricsServiceClient;
   friend class ChromePasswordManagerClient;
   friend void welcome::JoinOnboardingGroup(Profile* profile);
diff --git a/chrome/browser/metrics/chrome_metrics_service_client.cc b/chrome/browser/metrics/chrome_metrics_service_client.cc
index 476ccb433b9e..7a4e99f6a9d3 100644
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -52,7 +52,6 @@
 #include "chrome/browser/privacy_budget/privacy_budget_prefs.h"
 #include "chrome/browser/privacy_budget/privacy_budget_ukm_entry_filter.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/browser/tracing/background_tracing_metrics_provider.h"
@@ -748,9 +747,6 @@ void ChromeMetricsServiceClient::RegisterMetricsServiceProviders() {
   metrics_service_->RegisterMetricsProvider(
       std::make_unique<HttpsEngagementMetricsProvider>());
 
-  metrics_service_->RegisterMetricsProvider(
-      std::make_unique<CertificateReportingMetricsProvider>());
-
 #if !defined(OS_ANDROID) && !defined(OS_CHROMEOS)
   metrics_service_->RegisterMetricsProvider(
       std::make_unique<UpgradeMetricsProvider>());
diff --git a/chrome/browser/native_file_system/chrome_native_file_system_permission_context.cc b/chrome/browser/native_file_system/chrome_native_file_system_permission_context.cc
index 2581ac84ae26..6d89a902fdd5 100644
--- a/chrome/browser/native_file_system/chrome_native_file_system_permission_context.cc
+++ b/chrome/browser/native_file_system/chrome_native_file_system_permission_context.cc
@@ -18,7 +18,6 @@
 #include "chrome/browser/native_file_system/native_file_system_permission_context_factory.h"
 #include "chrome/browser/native_file_system/native_file_system_permission_request_manager.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
 #include "chrome/browser/ui/native_file_system_dialogs.h"
 #include "chrome/common/chrome_paths.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
@@ -184,79 +183,6 @@ BindResultCallbackToCurrentSequence(
       base::SequencedTaskRunnerHandle::Get(), std::move(callback));
 }
 
-void DoSafeBrowsingCheckOnUIThread(
-    content::GlobalFrameRoutingId frame_id,
-    std::unique_ptr<content::NativeFileSystemWriteItem> item,
-    safe_browsing::CheckDownloadCallback callback) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  // Download Protection Service is not supported on Android.
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (!sb_service || !sb_service->download_protection_service() ||
-      !sb_service->download_protection_service()->enabled()) {
-    std::move(callback).Run(safe_browsing::DownloadCheckResult::UNKNOWN);
-    return;
-  }
-
-  if (!item->browser_context) {
-    content::RenderProcessHost* rph =
-        content::RenderProcessHost::FromID(frame_id.child_id);
-    if (!rph) {
-      std::move(callback).Run(safe_browsing::DownloadCheckResult::UNKNOWN);
-      return;
-    }
-    item->browser_context = rph->GetBrowserContext();
-  }
-
-  if (!item->web_contents) {
-    content::RenderFrameHost* rfh = content::RenderFrameHost::FromID(frame_id);
-    if (rfh)
-      item->web_contents = content::WebContents::FromRenderFrameHost(rfh);
-  }
-
-  sb_service->download_protection_service()->CheckNativeFileSystemWrite(
-      std::move(item), std::move(callback));
-#endif
-}
-
-ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult
-InterpretSafeBrowsingResult(safe_browsing::DownloadCheckResult result) {
-  using Result = safe_browsing::DownloadCheckResult;
-  switch (result) {
-    // Only allow downloads that are marked as SAFE or UNKNOWN by SafeBrowsing.
-    // All other types are going to be blocked. UNKNOWN could be the result of a
-    // failed safe browsing ping.
-    case Result::UNKNOWN:
-    case Result::SAFE:
-    case Result::WHITELISTED_BY_POLICY:
-      return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::
-          kAllow;
-
-    case Result::DANGEROUS:
-    case Result::UNCOMMON:
-    case Result::DANGEROUS_HOST:
-    case Result::POTENTIALLY_UNWANTED:
-    case Result::BLOCKED_PASSWORD_PROTECTED:
-    case Result::BLOCKED_TOO_LARGE:
-    case Result::BLOCKED_UNSUPPORTED_FILE_TYPE:
-      return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::
-          kBlock;
-
-    // This shouldn't be returned for Native File System write checks.
-    case Result::ASYNC_SCANNING:
-    case Result::SENSITIVE_CONTENT_WARNING:
-    case Result::SENSITIVE_CONTENT_BLOCK:
-    case Result::DEEP_SCANNED_SAFE:
-    case Result::PROMPT_FOR_SCANNING:
-      NOTREACHED();
-      return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::
-          kAllow;
-  }
-  NOTREACHED();
-  return ChromeNativeFileSystemPermissionContext::AfterWriteCheckResult::kBlock;
-}
-
 }  // namespace
 
 ChromeNativeFileSystemPermissionContext::Grants::Grants() = default;
@@ -324,29 +250,6 @@ void ChromeNativeFileSystemPermissionContext::ConfirmSensitiveDirectoryAccess(
                      std::move(callback)));
 }
 
-void ChromeNativeFileSystemPermissionContext::PerformAfterWriteChecks(
-    std::unique_ptr<content::NativeFileSystemWriteItem> item,
-    content::GlobalFrameRoutingId frame_id,
-
-    base::OnceCallback<void(AfterWriteCheckResult)> callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  content::GetUIThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(
-          &DoSafeBrowsingCheckOnUIThread, frame_id, std::move(item),
-          base::BindOnce(
-              [](scoped_refptr<base::TaskRunner> task_runner,
-                 base::OnceCallback<void(AfterWriteCheckResult result)>
-                     callback,
-                 safe_browsing::DownloadCheckResult result) {
-                task_runner->PostTask(
-                    FROM_HERE,
-                    base::BindOnce(std::move(callback),
-                                   InterpretSafeBrowsingResult(result)));
-              },
-              base::SequencedTaskRunnerHandle::Get(), std::move(callback))));
-}
-
 void ChromeNativeFileSystemPermissionContext::
     DidConfirmSensitiveDirectoryAccess(
         const url::Origin& origin,
diff --git a/chrome/browser/native_file_system/chrome_native_file_system_permission_context.h b/chrome/browser/native_file_system/chrome_native_file_system_permission_context.h
index 6a952a3346e6..014847b8ea63 100644
--- a/chrome/browser/native_file_system/chrome_native_file_system_permission_context.h
+++ b/chrome/browser/native_file_system/chrome_native_file_system_permission_context.h
@@ -52,10 +52,6 @@ class ChromeNativeFileSystemPermissionContext
       bool is_directory,
       content::GlobalFrameRoutingId frame_id,
       base::OnceCallback<void(SensitiveDirectoryResult)> callback) override;
-  void PerformAfterWriteChecks(
-      std::unique_ptr<content::NativeFileSystemWriteItem> item,
-      content::GlobalFrameRoutingId frame_id,
-      base::OnceCallback<void(AfterWriteCheckResult)> callback) override;
   bool CanObtainWritePermission(const url::Origin& origin) override;
 
   ContentSetting GetReadGuardContentSetting(const url::Origin& origin);
diff --git a/chrome/browser/net/system_network_context_manager.cc b/chrome/browser/net/system_network_context_manager.cc
index 2163341048bb..6bb540e0f324 100644
--- a/chrome/browser/net/system_network_context_manager.cc
+++ b/chrome/browser/net/system_network_context_manager.cc
@@ -24,7 +24,6 @@
 #include "chrome/browser/component_updater/crl_set_component_installer.h"
 #include "chrome/browser/component_updater/tls_deprecation_config_component_installer.h"
 #include "chrome/browser/net/chrome_mojo_proxy_resolver_factory.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/ssl/ssl_config_service_manager.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/chrome_features.h"
diff --git a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
index a6a9196252e9..d2f0f1018fe4 100644
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.cc
@@ -16,11 +16,8 @@
 #include "build/build_config.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/chrome_features.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -43,12 +40,6 @@ TrialComparisonCertVerifierController::TrialComparisonCertVerifierController(
     // enabled.
     return;
   }
-
-  pref_change_registrar_.Init(profile_->GetPrefs());
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingScoutReportingEnabled,
-      base::BindRepeating(&TrialComparisonCertVerifierController::RefreshState,
-                          base::Unretained(this)));
 }
 
 TrialComparisonCertVerifierController::
@@ -94,9 +85,7 @@ bool TrialComparisonCertVerifierController::IsAllowed() const {
   if (!MaybeAllowedForProfile(profile_))
     return false;
 
-  const PrefService& prefs = *profile_->GetPrefs();
-
-  return safe_browsing::IsExtendedReportingEnabled(prefs);
+  return false;
 }
 
 void TrialComparisonCertVerifierController::SendTrialReport(
@@ -131,9 +120,6 @@ void TrialComparisonCertVerifierController::SendTrialReport(
   std::string serialized_report;
   if (!report.Serialize(&serialized_report))
     return;
-
-  CertificateReportingServiceFactory::GetForBrowserContext(profile_)->Send(
-      serialized_report);
 }
 
 // static
diff --git a/chrome/browser/net/trial_comparison_cert_verifier_controller.h b/chrome/browser/net/trial_comparison_cert_verifier_controller.h
index e6e1b1b3b25d..e86afa6f1886 100644
--- a/chrome/browser/net/trial_comparison_cert_verifier_controller.h
+++ b/chrome/browser/net/trial_comparison_cert_verifier_controller.h
@@ -14,7 +14,6 @@
 #include "base/memory/ref_counted.h"
 #include "base/memory/weak_ptr.h"
 #include "base/threading/thread_checker.h"
-#include "components/prefs/pref_change_registrar.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/receiver_set.h"
@@ -70,7 +69,6 @@ class TrialComparisonCertVerifierController
   void RefreshState();
 
   Profile* profile_;
-  PrefChangeRegistrar pref_change_registrar_;
 
   mojo::ReceiverSet<network::mojom::TrialComparisonCertVerifierReportClient>
       receiver_set_;
diff --git a/chrome/browser/password_manager/chrome_password_manager_client.cc b/chrome/browser/password_manager/chrome_password_manager_client.cc
index fcbf0e0475a2..873898bdbdec 100644
--- a/chrome/browser/password_manager/chrome_password_manager_client.cc
+++ b/chrome/browser/password_manager/chrome_password_manager_client.cc
@@ -30,8 +30,6 @@
 #include "chrome/browser/password_manager/password_store_factory.h"
 #include "chrome/browser/prerender/prerender_contents.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
-#include "chrome/browser/safe_browsing/user_interaction_observer.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
@@ -101,10 +99,10 @@
 #if BUILDFLAG(FULL_SAFE_BROWSING)
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
+#endif
 #include "third_party/blink/public/mojom/clipboard/clipboard.mojom.h"
 #include "ui/base/clipboard/clipboard.h"
 #include "ui/events/keycodes/keyboard_codes.h"
-#endif

 #if defined(OS_ANDROID)
 #include "base/feature_list.h"
@@ -747,6 +745,7 @@ std::string ChromePasswordManagerClient::GetPageLanguage() const {
   return std::string();
 }

+#if BUILDFLAG(FULL_SAFE_BROWSING)
 #if defined(ON_FOCUS_PING_ENABLED) || \
     defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 safe_browsing::PasswordProtectionService*
@@ -777,24 +776,12 @@ void ChromePasswordManagerClient::CheckProtectedPasswordEntry(
     const std::vector<password_manager::MatchingReusedCredential>&
         matching_reused_credentials,
     bool password_field_exists) {
-  safe_browsing::PasswordProtectionService* pps =
-      GetPasswordProtectionService();
-  if (!pps)
-    return;
-
-  pps->MaybeStartProtectedPasswordEntryRequest(
-      web_contents(), web_contents()->GetLastCommittedURL(), username,
-      password_type, matching_reused_credentials, password_field_exists);
 }
 #endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#endif // BUILDFLAG(FULL_SAFE_BROWSING)

 #if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
 void ChromePasswordManagerClient::LogPasswordReuseDetectedEvent() {
-  safe_browsing::PasswordProtectionService* pps =
-      GetPasswordProtectionService();
-  if (pps) {
-    pps->MaybeLogPasswordReuseDetectedEvent(web_contents());
-  }
 }
 #endif  // defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)

@@ -1206,9 +1193,11 @@ void ChromePasswordManagerClient::OnPaste() {
   base::string16 text;
   clipboard->ReadText(ui::ClipboardBuffer::kCopyPaste, &text);
   was_on_paste_called_ = true;
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   password_reuse_detection_manager_.OnPaste(std::move(text));
+#endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 }
-#endif
+#endif  // !defined(OS_ANDROID)

 void ChromePasswordManagerClient::RenderFrameCreated(
     content::RenderFrameHost* render_frame_host) {
@@ -1245,7 +1234,9 @@ void ChromePasswordManagerClient::OnInputEvent(
   if (key_event.windows_key_code == (ui::VKEY_V & 0x1f)) {
     OnPaste();
   } else {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
     password_reuse_detection_manager_.OnKeyPressedCommitted(key_event.text);
+#endif  // defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   }
 #endif  // defined(OS_ANDROID)
 }
@@ -1284,17 +1275,6 @@ bool ChromePasswordManagerClient::IsPasswordManagementEnabledForCurrentPage(
     is_enabled = false;
   }

-  // SafeBrowsing Delayed Warnings experiment can delay some SafeBrowsing
-  // warnings until user interaction. If the current page has a delayed warning,
-  // it'll have a user interaction observer attached. Disable password
-  // management in that case.
-  if (auto* observer =
-          safe_browsing::SafeBrowsingUserInteractionObserver::FromWebContents(
-              web_contents())) {
-    observer->OnPasswordSaveOrAutofillDenied();
-    is_enabled = false;
-  }
-
   if (log_manager_->IsLoggingActive()) {
     password_manager::BrowserSavePasswordProgressLogger logger(
         log_manager_.get());
diff --git a/chrome/browser/password_manager/chrome_password_manager_client.h b/chrome/browser/password_manager/chrome_password_manager_client.h
index cd09cf009888..2072b17e42e2 100644
--- a/chrome/browser/password_manager/chrome_password_manager_client.h
+++ b/chrome/browser/password_manager/chrome_password_manager_client.h
@@ -175,18 +175,19 @@ class ChromePasswordManagerClient
   void AnnotateNavigationEntry(bool has_password_field) override;
   std::string GetPageLanguage() const override;
 
-#if defined(ON_FOCUS_PING_ENABLED) || \
-    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#if (defined(ON_FOCUS_PING_ENABLED) || \
+    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)) && \
+    BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
       const override;
 #endif
 
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   void CheckSafeBrowsingReputation(const GURL& form_action,
                                    const GURL& frame_url) override;
 #endif
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   void CheckProtectedPasswordEntry(
       password_manager::metrics_util::PasswordType reused_password_type,
       const std::string& username,
diff --git a/chrome/browser/password_manager/password_store_factory.cc b/chrome/browser/password_manager/password_store_factory.cc
index 8f2f5cbe3f8e..6e7c9f3b0759 100644
--- a/chrome/browser/password_manager/password_store_factory.cc
+++ b/chrome/browser/password_manager/password_store_factory.cc
@@ -46,9 +46,7 @@
 #include "ui/base/ui_base_features.h"
 #endif
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 #include "chrome/browser/password_manager/password_store_signin_notifier_impl.h"
-#endif
 
 using password_manager::PasswordStore;
 
diff --git a/chrome/browser/policy/configuration_policy_handler_list_factory.cc b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
index 82b4882cb830..722e3a250c87 100644
--- a/chrome/browser/policy/configuration_policy_handler_list_factory.cc
+++ b/chrome/browser/policy/configuration_policy_handler_list_factory.cc
@@ -73,8 +73,6 @@
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/policy/core/common/schema.h"
 #include "components/policy/policy_constants.h"
-#include "components/safe_browsing/core/common/safe_browsing_policy_handler.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_policy_handler.h"
 #include "components/search_engines/search_engines_pref_names.h"
 #include "components/signin/public/base/signin_pref_names.h"
@@ -183,12 +181,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kQuicAllowed,
     prefs::kQuicAllowed,
     base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingEnabled,
-    prefs::kSafeBrowsingEnabled,
-    base::Value::Type::BOOLEAN },
-  { key::kSafeBrowsingForTrustedSourcesEnabled,
-    prefs::kSafeBrowsingForTrustedSourcesEnabled,
-    base::Value::Type::BOOLEAN },
   { key::kUrlKeyedAnonymizedDataCollectionEnabled,
     unified_consent::prefs::kUrlKeyedAnonymizedDataCollectionEnabled,
     base::Value::Type::BOOLEAN },
@@ -333,24 +325,9 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kGloballyScopeHTTPAuthCacheEnabled,
     prefs::kGloballyScopeHTTPAuthCacheEnabled,
     base::Value::Type::BOOLEAN },
-  { key::kPasswordProtectionWarningTrigger,
-    prefs::kPasswordProtectionWarningTrigger,
-    base::Value::Type::INTEGER },
-  { key::kSafeBrowsingWhitelistDomains,
-    prefs::kSafeBrowsingWhitelistDomains,
-    base::Value::Type::LIST },
-  { key::kPasswordProtectionLoginURLs,
-    prefs::kPasswordProtectionLoginURLs,
-    base::Value::Type::LIST },
-  { key::kPasswordProtectionChangePasswordURL,
-    prefs::kPasswordProtectionChangePasswordURL,
-    base::Value::Type::STRING },
   { key::kSafeSitesFilterBehavior,
     policy_prefs::kSafeSitesFilterBehavior,
     base::Value::Type::INTEGER },
-  { key::kSendFilesForMalwareCheck,
-    prefs::kSafeBrowsingSendFilesForMalwareCheck,
-    base::Value::Type::INTEGER },
   { key::kAmbientAuthenticationInPrivateModesEnabled,
     prefs::kAmbientAuthenticationInPrivateModesEnabled,
     base::Value::Type::INTEGER },
@@ -443,7 +420,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kImportAutofillFormData,
     prefs::kImportDialogAutofillFormData,
     base::Value::Type::BOOLEAN },
-
   { key::kMaxConnectionsPerProxy,
     prefs::kMaxConnectionsPerProxy,
     base::Value::Type::INTEGER },
@@ -459,9 +435,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kDefaultMediaStreamSetting,
     prefs::kManagedDefaultMediaStreamSetting,
     base::Value::Type::INTEGER },
-  { key::kDisableSafeBrowsingProceedAnyway,
-    prefs::kSafeBrowsingProceedAnywayDisabled,
-    base::Value::Type::BOOLEAN },
   { key::kSSLErrorOverrideAllowed,
     prefs::kSSLErrorOverrideAllowed,
     base::Value::Type::BOOLEAN },
@@ -597,9 +570,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kDNSInterceptionChecksEnabled,
     prefs::kDNSInterceptionChecksEnabled,
     base::Value::Type::BOOLEAN },
-  { key::kAdvancedProtectionAllowed,
-    prefs::kAdvancedProtectionAllowed,
-    base::Value::Type::BOOLEAN },
   { key::kAccessibilityImageLabelsEnabled,
     prefs::kAccessibilityImageLabelsEnabled,
     base::Value::Type::BOOLEAN },
@@ -657,36 +627,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kBrowserGuestModeEnforced,
     prefs::kBrowserGuestModeEnforced,
     base::Value::Type::BOOLEAN },
-  { key::kUnsafeEventsReportingEnabled,
-    prefs::kUnsafeEventsReportingEnabled,
-    base::Value::Type::BOOLEAN },
-  { key::kDelayDeliveryUntilVerdict,
-    prefs::kDelayDeliveryUntilVerdict,
-    base::Value::Type::INTEGER },
-  { key::kBlockLargeFileTransfer,
-    prefs::kBlockLargeFileTransfer,
-    base::Value::Type::INTEGER },
-  { key::kAllowPasswordProtectedFiles,
-    prefs::kAllowPasswordProtectedFiles,
-    base::Value::Type::INTEGER },
-  { key::kCheckContentCompliance,
-    prefs::kCheckContentCompliance,
-    base::Value::Type::INTEGER },
-  { key::kBlockUnsupportedFiletypes,
-    prefs::kBlockUnsupportedFiletypes,
-    base::Value::Type::INTEGER },
-  { key::kURLsToCheckComplianceOfDownloadedContent,
-    prefs::kURLsToCheckComplianceOfDownloadedContent,
-    base::Value::Type::LIST },
-  { key::kURLsToCheckForMalwareOfUploadedContent,
-    prefs::kURLsToCheckForMalwareOfUploadedContent,
-    base::Value::Type::LIST },
-  { key::kURLsToNotCheckForMalwareOfDownloadedContent,
-    prefs::kURLsToNotCheckForMalwareOfDownloadedContent,
-    base::Value::Type::LIST },
-  { key::kURLsToNotCheckComplianceOfUploadedContent,
-    prefs::kURLsToNotCheckComplianceOfUploadedContent,
-    base::Value::Type::LIST },
 #endif  // defined(OS_ANDROID)
 
 #if defined(OS_CHROMEOS)
@@ -1272,9 +1212,6 @@ const PolicyToPreferenceMapEntry kSimplePolicyMap[] = {
   { key::kReportExtensionsAndPluginsData,
     extensions::enterprise_reporting::kReportExtensionsAndPluginsData,
     base::Value::Type::BOOLEAN },
-  { key::kReportSafeBrowsingData,
-    extensions::enterprise_reporting::kReportSafeBrowsingData,
-    base::Value::Type::BOOLEAN },
   { key::kBlockExternalExtensions,
     extensions::pref_names::kBlockExternalExtensions,
     base::Value::Type::BOOLEAN },
@@ -1378,11 +1315,6 @@ std::unique_ptr<ConfigurationPolicyHandlerList> BuildHandlerList(
       new ConfigurationPolicyHandlerList(
           base::Bind(&PopulatePolicyHandlerParameters),
           base::Bind(&GetChromePolicyDetails), AreFuturePoliciesSupported()));
-  for (size_t i = 0; i < base::size(kSimplePolicyMap); ++i) {
-    handlers->AddHandler(std::make_unique<SimplePolicyHandler>(
-        kSimplePolicyMap[i].policy_name, kSimplePolicyMap[i].preference_path,
-        kSimplePolicyMap[i].value_type));
-  }
 
   handlers->AddHandler(
       std::make_unique<autofill::AutofillAddressPolicyHandler>());
@@ -1441,8 +1373,6 @@ std::unique_ptr<ConfigurationPolicyHandlerList> BuildHandlerList(
   handlers->AddHandler(std::make_unique<JavascriptPolicyHandler>());
   handlers->AddHandler(std::make_unique<NetworkPredictionPolicyHandler>());
   handlers->AddHandler(std::make_unique<RestoreOnStartupPolicyHandler>());
-  handlers->AddHandler(
-      std::make_unique<safe_browsing::SafeBrowsingPolicyHandler>());
   handlers->AddHandler(std::make_unique<syncer::SyncPolicyHandler>());
   handlers->AddHandler(std::make_unique<StringMappingListPolicyHandler>(
       key::kEnableDeprecatedWebPlatformFeatures,
@@ -1469,13 +1399,6 @@ std::unique_ptr<ConfigurationPolicyHandlerList> BuildHandlerList(
       SimpleSchemaValidatingPolicyHandler::RECOMMENDED_ALLOWED,
       SimpleSchemaValidatingPolicyHandler::MANDATORY_PROHIBITED));
 
-  handlers->AddHandler(std::make_unique<SimpleSchemaValidatingPolicyHandler>(
-      key::kSafeBrowsingExtendedReportingEnabled,
-      prefs::kSafeBrowsingScoutReportingEnabled, chrome_schema,
-      SCHEMA_ALLOW_UNKNOWN,
-      SimpleSchemaValidatingPolicyHandler::RECOMMENDED_ALLOWED,
-      SimpleSchemaValidatingPolicyHandler::MANDATORY_ALLOWED));
-
   // Handlers for policies with embedded JSON strings. These handlers are very
   // lenient - as long as the root value is of the right type, they only display
   // warnings and never reject the policy value.
diff --git a/chrome/browser/prefs/browser_prefs.cc b/chrome/browser/prefs/browser_prefs.cc
index 6dc80ff464ee..385f2760a432 100644
--- a/chrome/browser/prefs/browser_prefs.cc
+++ b/chrome/browser/prefs/browser_prefs.cc
@@ -93,7 +93,6 @@
 #include "chrome/common/pref_names.h"
 #include "chrome/common/secure_origin_allowlist.h"
 #include "components/autofill/core/common/autofill_prefs.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/browsing_data/core/pref_names.h"
 #include "components/certificate_transparency/pref_names.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
@@ -137,7 +136,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/proxy_config/pref_proxy_config_tracker_impl.h"
 #include "components/rappor/rappor_service_impl.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/template_url_prepopulate_data.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/sessions/core/session_id_generator.h"
@@ -370,14 +368,11 @@
 #endif
 
 #if defined(OS_WIN)
-#include "chrome/browser/component_updater/sw_reporter_installer_win.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
 #include "chrome/browser/win/conflicts/module_database.h"
 #include "chrome/browser/win/conflicts/third_party_conflicts_manager.h"
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
-#include "chrome/browser/safe_browsing/chrome_cleaner/settings_resetter_win.h"
-#include "chrome/browser/safe_browsing/settings_reset_prompt/settings_reset_prompt_prefs_manager.h"
 #endif
 
 #if defined(OS_WIN) || defined(OS_MACOSX)
@@ -701,7 +696,6 @@ void RegisterLocalState(PrefRegistrySimple* registry) {
   profiles::RegisterPrefs(registry);
   rappor::RapporServiceImpl::RegisterPrefs(registry);
   RegisterScreenshotPrefs(registry);
-  safe_browsing::RegisterLocalStatePrefs(registry);
   secure_origin_allowlist::RegisterPrefs(registry);
   sessions::SessionIdGenerator::RegisterPrefs(registry);
   SSLConfigServiceManager::RegisterPrefs(registry);
@@ -833,7 +827,6 @@ void RegisterLocalState(PrefRegistrySimple* registry) {
   registry->RegisterBooleanPref(prefs::kRendererCodeIntegrityEnabled, true);
   registry->RegisterBooleanPref(
       policy::policy_prefs::kNativeWindowOcclusionEnabled, true);
-  component_updater::RegisterPrefsForSwReporter(registry);
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
   IncompatibleApplicationsUpdater::RegisterLocalStatePrefs(registry);
   ModuleDatabase::RegisterLocalStatePrefs(registry);
@@ -917,9 +910,6 @@ void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry,
   PushMessagingAppIdentifier::RegisterProfilePrefs(registry);
   QuietNotificationPermissionUiState::RegisterProfilePrefs(registry);
   RegisterBrowserUserPrefs(registry);
-  safe_browsing::RegisterProfilePrefs(registry);
-  blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
-      registry);
   SessionStartupPref::RegisterProfilePrefs(registry);
   SharingSyncPreference::RegisterProfilePrefs(registry);
   sync_sessions::SessionSyncPrefs::RegisterProfilePrefs(registry);
@@ -1092,11 +1082,7 @@ void RegisterProfilePrefs(user_prefs::PrefRegistrySyncable* registry,
 #endif  // defined(OS_CHROMEOS)
 
 #if defined(OS_WIN)
-  component_updater::RegisterProfilePrefsForSwReporter(registry);
   NetworkProfileBubble::RegisterProfilePrefs(registry);
-  safe_browsing::SettingsResetPromptPrefsManager::RegisterProfilePrefs(
-      registry);
-  safe_browsing::PostCleanupSettingsResetter::RegisterProfilePrefs(registry);
 #endif
 
 #if defined(OS_WIN) || defined(OS_MACOSX) || \
diff --git a/chrome/browser/prefs/chrome_command_line_pref_store.cc b/chrome/browser/prefs/chrome_command_line_pref_store.cc
index 782d368081ba..ffa4cb9d3aa1 100644
--- a/chrome/browser/prefs/chrome_command_line_pref_store.cc
+++ b/chrome/browser/prefs/chrome_command_line_pref_store.cc
@@ -27,7 +27,6 @@
 #include "components/language/core/browser/pref_names.h"
 #include "components/proxy_config/proxy_config_dictionary.h"
 #include "components/proxy_config/proxy_config_pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_switches.h"
 #include "components/sync/base/pref_names.h"
 #include "content/public/common/content_switches.h"
@@ -74,8 +73,6 @@ const CommandLinePrefStore::BooleanSwitchToPreferenceMapEntry
         {switches::kAllowCrossOriginAuthPrompt,
          prefs::kAllowCrossOriginAuthPrompt, true},
         {switches::kDisablePrintPreview, prefs::kPrintPreviewDisabled, true},
-        {safe_browsing::switches::kSbEnableEnhancedProtection,
-         prefs::kSafeBrowsingEnhanced, true},
 #if defined(OS_CHROMEOS)
         {chromeos::switches::kEnableTouchpadThreeFingerClick,
          prefs::kEnableTouchpadThreeFingerClick, true},
diff --git a/chrome/browser/prefs/chrome_pref_service_factory.cc b/chrome/browser/prefs/chrome_pref_service_factory.cc
index 68b01b41f022..d627931baaf4 100644
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -47,7 +47,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_store.h"
 #include "components/prefs/pref_value_store.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/search_engines/default_search_manager.h"
 #include "components/search_engines/search_engines_pref_names.h"
 #include "components/signin/public/base/signin_pref_names.h"
@@ -145,8 +144,6 @@ const prefs::TrackedPreferenceMetadata kTrackedPrefs[] = {
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
     // kSyncRemainingRollbackTries is deprecated and will be removed a few
     // releases after M50.
-    {18, prefs::kSafeBrowsingIncidentsSent, EnforcementLevel::ENFORCE_ON_LOAD,
-     PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
 #if defined(OS_WIN)
     {19, prefs::kSwReporterPromptVersion, EnforcementLevel::ENFORCE_ON_LOAD,
      PrefTrackingStrategy::ATOMIC, ValueType::IMPERSONAL},
diff --git a/chrome/browser/prefs/pref_functional_browsertest.cc b/chrome/browser/prefs/pref_functional_browsertest.cc
index c309e692782d..4f367cb1d76f 100644
--- a/chrome/browser/prefs/pref_functional_browsertest.cc
+++ b/chrome/browser/prefs/pref_functional_browsertest.cc
@@ -23,7 +23,6 @@
 #include "components/content_settings/core/common/content_settings_types.h"
 #include "components/content_settings/core/common/pref_names.h"
 #include "components/embedder_support/pref_names.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/test/browser_test.h"
@@ -219,9 +218,6 @@ IN_PROC_BROWSER_TEST_F(PrefsFunctionalTest, PRE_TestPrivacySecurityPrefs) {
   prefs->SetInteger(prefs::kNetworkPredictionOptions,
                     chrome_browser_net::NETWORK_PREDICTION_NEVER);
 
-  EXPECT_TRUE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
-  prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-
   EXPECT_TRUE(prefs->GetBoolean(embedder_support::kAlternateErrorPagesEnabled));
   prefs->SetBoolean(embedder_support::kAlternateErrorPagesEnabled, false);
 
@@ -235,7 +231,6 @@ IN_PROC_BROWSER_TEST_F(PrefsFunctionalTest, TestPrivacySecurityPrefs) {
 
   EXPECT_EQ(chrome_browser_net::NETWORK_PREDICTION_NEVER,
             prefs->GetInteger(prefs::kNetworkPredictionOptions));
-  EXPECT_FALSE(prefs->GetBoolean(prefs::kSafeBrowsingEnabled));
   EXPECT_FALSE(
       prefs->GetBoolean(embedder_support::kAlternateErrorPagesEnabled));
   EXPECT_FALSE(prefs->GetBoolean(prefs::kSearchSuggestEnabled));
diff --git a/chrome/browser/profile_resetter/reset_report_uploader.cc b/chrome/browser/profile_resetter/reset_report_uploader.cc
index 5d3476358665..6964e5dc092c 100644
--- a/chrome/browser/profile_resetter/reset_report_uploader.cc
+++ b/chrome/browser/profile_resetter/reset_report_uploader.cc
@@ -20,7 +20,7 @@
 
 namespace {
 const char kResetReportUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/chrome-reset";
+    "https://no-thanks.invalid";
 
 GURL GetClientReportUrl(const std::string& report_url) {
   GURL url(report_url);
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
index 1c5b68d01bdc..2012acb45362 100644
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -61,7 +61,6 @@
 #include "chrome/browser/prerender/prerender_message_filter.h"
 #include "chrome/browser/profiles/gaia_info_update_service_factory.h"
 #include "chrome/browser/profiles/renderer_updater_factory.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_service_factory.h"
 #include "chrome/browser/search/suggestions/suggestions_service_factory.h"
 #include "chrome/browser/search_engines/template_url_fetcher_factory.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
@@ -245,7 +244,6 @@ void ChromeBrowserMainExtraPartsProfiles::
 #if BUILDFLAG(ENABLE_CAPTIVE_PORTAL_DETECTION)
   CaptivePortalServiceFactory::GetInstance();
 #endif
-  CertificateReportingServiceFactory::GetInstance();
   ChromeBrowsingDataRemoverDelegateFactory::GetInstance();
   ChromeSigninClientFactory::GetInstance();
   ClientHintsFactory::GetInstance();
diff --git a/chrome/browser/profiles/pref_service_builder_utils.cc b/chrome/browser/profiles/pref_service_builder_utils.cc
index a7c58cc4bb9f..ee06ef24fa2a 100644
--- a/chrome/browser/profiles/pref_service_builder_utils.cc
+++ b/chrome/browser/profiles/pref_service_builder_utils.cc
@@ -12,13 +12,13 @@
 #include "base/files/file_util.h"
 #include "base/path_service.h"
 #include "base/sequenced_task_runner.h"
+#include "base/strings/stringprintf.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/policy/chrome_browser_policy_connector.h"
 #include "chrome/browser/prefs/browser_prefs.h"
 #include "chrome/browser/prefs/chrome_pref_service_factory.h"
 #include "chrome/browser/prefs/profile_pref_store_manager.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/chrome_constants.h"
 #include "chrome/grit/chromium_strings.h"
diff --git a/chrome/browser/profiles/profile.cc b/chrome/browser/profiles/profile.cc
index f1a0dda49f6b..c5c748ae5c1a 100644
--- a/chrome/browser/profiles/profile.cc
+++ b/chrome/browser/profiles/profile.cc
@@ -24,7 +24,6 @@
 #include "components/language/core/browser/pref_names.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
 #include "components/sync/base/sync_prefs.h"
 #include "components/sync/driver/sync_driver_switches.h"
diff --git a/chrome/browser/profiles/profile_impl.cc b/chrome/browser/profiles/profile_impl.cc
index 2036106ea054..c5f00e619992 100644
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -94,7 +94,6 @@
 #include "chrome/browser/profiles/profile_metrics.h"
 #include "chrome/browser/push_messaging/push_messaging_service_factory.h"
 #include "chrome/browser/push_messaging/push_messaging_service_impl.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/sharing/sharing_service_factory.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "chrome/browser/signin/signin_ui_util.h"
@@ -591,17 +590,7 @@ void ProfileImpl::LoadPrefsForNormalStartup(bool async_prefs) {
 
   mojo::PendingRemote<prefs::mojom::TrackedPreferenceValidationDelegate>
       pref_validation_delegate;
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service(
-      g_browser_process->safe_browsing_service());
-  if (safe_browsing_service.get()) {
-    auto pref_validation_delegate_impl =
-        safe_browsing_service->CreatePreferenceValidationDelegate(this);
-    if (pref_validation_delegate_impl) {
-      mojo::MakeSelfOwnedReceiver(
-          std::move(pref_validation_delegate_impl),
-          pref_validation_delegate.InitWithNewPipeAndPassReceiver());
-    }
-  }
+  auto _ = pref_validation_delegate.InitWithNewPipeAndPassReceiver();
 
   prefs_ =
       CreatePrefService(pref_registry_, CreateExtensionPrefStore(this, false),
diff --git a/chrome/browser/profiles/profiles_state.cc b/chrome/browser/profiles/profiles_state.cc
index b25fcdb6ac3c..5ce29fd490d6 100644
--- a/chrome/browser/profiles/profiles_state.cc
+++ b/chrome/browser/profiles/profiles_state.cc
@@ -217,9 +217,6 @@ void RemoveBrowsingDataForProfile(const base::FilePath& profile_path) {
   // The BrowsingDataRemover relies on many objects that aren't created in unit
   // tests. Previously this code would depend on content::ResourceDispatcherHost
   // but that's gone, so do a similar hack for now.
-  if (!g_browser_process->safe_browsing_service())
-    return;
-
   Profile* profile = g_browser_process->profile_manager()->GetProfileByPath(
       profile_path);
   if (!profile)
diff --git a/chrome/browser/resources/settings/BUILD.gn b/chrome/browser/resources/settings/BUILD.gn
index a0a669d3b123..972cc57c3088 100644
--- a/chrome/browser/resources/settings/BUILD.gn
+++ b/chrome/browser/resources/settings/BUILD.gn
@@ -156,7 +156,6 @@ group("closure_compile_module") {
     "printing_page:closure_compile_module",
     "privacy_page:closure_compile_module",
     "reset_page:closure_compile_module",
-    "safety_check_page:closure_compile_module",
     "search_engines_page:closure_compile_module",
     "search_page:closure_compile_module",
     "settings_main:closure_compile_module",
@@ -219,7 +218,7 @@ js_library("settings") {
     "autofill_page:password_manager_proxy",
     "people_page:sync_browser_proxy.m",
     "privacy_page:privacy_page_browser_proxy.m",
-    "safety_check_page:safety_check_browser_proxy",
+
     "search_engines_page:search_engines_browser_proxy.m",
     "settings_ui:settings_ui",
   ]
@@ -343,7 +342,6 @@ group("polymer3_elements") {
     "printing_page:web_components",
     "privacy_page:polymer3_elements",
     "reset_page:web_components",
-    "safety_check_page:web_components",
     "search_engines_page:web_components",
     "search_page:web_components",
     "settings_main:web_components",
diff --git a/chrome/browser/resources/settings/basic_page/BUILD.gn b/chrome/browser/resources/settings/basic_page/BUILD.gn
index 21924f68c30f..d3e0b3feef84 100644
--- a/chrome/browser/resources/settings/basic_page/BUILD.gn
+++ b/chrome/browser/resources/settings/basic_page/BUILD.gn
@@ -20,7 +20,6 @@ js_library("basic_page") {
     "..:search_settings.m",
     "../chrome_cleanup_page:chrome_cleanup_proxy",
     "../prefs:prefs_behavior.m",
-    "../safety_check_page:safety_check_page",
     "../search_page",
     "../settings_page:main_page_behavior.m",
     "//ui/webui/resources/js:load_time_data.m",
diff --git a/chrome/browser/resources/settings/basic_page/basic_page.html b/chrome/browser/resources/settings/basic_page/basic_page.html
index 3d1c2102aa46..ad19cadeaa2d 100644
--- a/chrome/browser/resources/settings/basic_page/basic_page.html
+++ b/chrome/browser/resources/settings/basic_page/basic_page.html
@@ -91,15 +91,6 @@
             <settings-autofill-page prefs="{{prefs}}"></settings-autofill-page>
           </settings-section>
         </template>
-        <template is="dom-if" if="[[showSafetyCheckPage_(
-            pageVisibility.safetyCheck)]]" restamp>
-          <settings-section page-title="$i18n{safetyCheckSectionTitle}"
-              section="safetyCheck"
-              id="safetyCheckSettingsSection">
-            <settings-safety-check-page prefs="{{prefs}}">
-            </settings-safety-check-page>
-          </settings-section>
-        </template>
         <template is="dom-if" if="[[showPage_(pageVisibility.privacy)]]"
             restamp>
           <settings-section page-title="$i18n{privacyPageTitle}"
diff --git a/chrome/browser/resources/settings/privacy_page/disable_safebrowsing_dialog.html b/chrome/browser/resources/settings/privacy_page/disable_safebrowsing_dialog.html
index 752ed00db589..5ab40875db1a 100644
--- a/chrome/browser/resources/settings/privacy_page/disable_safebrowsing_dialog.html
+++ b/chrome/browser/resources/settings/privacy_page/disable_safebrowsing_dialog.html
@@ -1,12 +1,9 @@
     <cr-dialog id="dialog" close-text="$i18n{close}">
-      <div slot="title">$i18n{safeBrowsingDisableDialog}</div>
-      <div slot="body">$i18n{safeBrowsingDisableDialogDesc}</div>
       <div slot="button-container">
         <cr-button class="cancel-button" on-click="onDialogCancel_">
           $i18n{cancel}
         </cr-button>
         <cr-button class="action-button" on-click="onDialogConfirm_">
-          $i18n{safeBrowsingDisableDialogConfirm}
         </cr-button>
       </div>
     </cr-dialog>
diff --git a/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.html b/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.html
index 09855ab8775e..19586fbf60de 100644
--- a/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.html
+++ b/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.html
@@ -12,7 +12,6 @@
         sub-label="[[getPasswordsLeakDetectionSubLabel_(
             userSignedIn_, passwordsLeakDetectionAvailable_)]]"
         disabled="[[getDisabledLeakDetection_(
-            userSignedIn_, prefs.safebrowsing.enabled.value,
-            prefs.safebrowsing.enhanced.value)]]"
+            userSignedIn_)]]"
         on-settings-boolean-control-change="onPasswordsLeakDetectionChange_">
     </settings-toggle-button>
diff --git a/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.js b/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.js
index b17529f9e2bc..49f65d823994 100644
--- a/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.js
+++ b/chrome/browser/resources/settings/privacy_page/passwords_leak_detection_toggle.js
@@ -128,8 +128,7 @@ Polymer({
     if (this.prefs === undefined) {
       return false;
     }
-    return !this.userSignedIn_ || !this.getPref('safebrowsing.enabled').value ||
-        !!this.getPref('safebrowsing.enhanced').value;
+    return true;
   },
 
   /** @private */
diff --git a/chrome/browser/resources/settings/privacy_page/privacy_page.html b/chrome/browser/resources/settings/privacy_page/privacy_page.html
index 2e78468ccebc..de8b063ef2c2 100644
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.html
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.html
@@ -30,27 +30,11 @@
           </cr-expand-button>
           <iron-collapse id="moreCollapse" opened="[[moreOpened_]]"
               class="iron-collapse-indented">
-            <settings-toggle-button id="safeBrowsingToggle"
-                pref="{{prefs.safebrowsing.enabled}}"
-                label="$i18n{safeBrowsingEnableProtection}"
-                sub-label="$i18n{safeBrowsingEnableProtectionDesc}"
-                on-settings-boolean-control-change=
-                    "onSafeBrowsingToggleChange_">
-            </settings-toggle-button>
             <settings-passwords-leak-detection-toggle
                 id="passwordsLeakDetectionToggle"
                 prefs="{{prefs}}"
                 sync-status="[[syncStatus]]">
             </settings-passwords-leak-detection-toggle>
-            <settings-toggle-button id="safeBrowsingReportingToggle"
-                class="hr"
-                pref="[[safeBrowsingReportingPref_]]" no-set-pref
-                label="$i18n{safeBrowsingEnableExtendedReporting}"
-                sub-label="$i18n{safeBrowsingEnableExtendedReportingDesc}"
-                disabled="[[getDisabledExtendedSafeBrowsing_(prefs.*)]]"
-                on-settings-boolean-control-change=
-                    "onSafeBrowsingReportingToggleChange_">
-            </settings-toggle-button>
             <settings-do-not-track-toggle id="doNotTrack" prefs="{{prefs}}">
             </settings-do-not-track-toggle>
             <settings-toggle-button id="canMakePaymentToggle"
@@ -492,26 +476,6 @@
           </category-setting-exceptions>
         </settings-subpage>
       </template>
-      <template is="dom-if" if="[[enableSafeBrowsingSubresourceFilter_]]"
-          no-search>
-        <template is="dom-if" route-path="/content/ads" no-search>
-          <settings-subpage page-title="$i18n{siteSettingsAds}"
-              search-label="$i18n{siteSettingsAllSitesSearch}"
-              search-term="{{searchFilter_}}">
-            <category-default-setting
-                category="{{ContentSettingsTypes.ADS}}"
-                toggle-off-label="$i18n{siteSettingsAdsBlockRecommended}"
-                toggle-on-label="$i18n{siteSettingsAllowed}">
-            </category-default-setting>
-            <category-setting-exceptions
-                category="{{ContentSettingsTypes.ADS}}"
-                read-only-list
-                block-header="$i18n{siteSettingsBlock}"
-                search-filter="[[searchFilter_]]">
-            </category-setting-exceptions>
-          </settings-subpage>
-       </template>
-     </template>
      <template is="dom-if" route-path="/content/unsandboxedPlugins" no-search>
         <settings-subpage page-title="$i18n{siteSettingsUnsandboxedPlugins}"
             search-label="$i18n{siteSettingsAllSitesSearch}"
diff --git a/chrome/browser/resources/settings/privacy_page/privacy_page.js b/chrome/browser/resources/settings/privacy_page/privacy_page.js
index 970352dadf7e..13186f78a80c 100644
--- a/chrome/browser/resources/settings/privacy_page/privacy_page.js
+++ b/chrome/browser/resources/settings/privacy_page/privacy_page.js
@@ -129,14 +129,6 @@ Polymer({
       value: NetworkPredictionOptions.NEVER,
     },
 
-    /** @private */
-    enableSafeBrowsingSubresourceFilter_: {
-      type: Boolean,
-      value() {
-        return loadTimeData.getBoolean('enableSafeBrowsingSubresourceFilter');
-      }
-    },
-
     /** @private */
     privacySettingsRedesignEnabled_: {
       type: Boolean,
@@ -383,7 +375,7 @@ Polymer({
    * @private
    */
   getDisabledExtendedSafeBrowsing_() {
-    return !this.getPref('safebrowsing.enabled').value;
+    return true;
   },
 
   /** @private */
@@ -397,20 +389,6 @@ Polymer({
 
   /** @private */
   onSafeBrowsingReportingPrefChange_() {
-    if (this.prefs === undefined) {
-      return;
-    }
-    const safeBrowsingScoutPref =
-        this.getPref('safebrowsing.scout_reporting_enabled');
-    const prefValue = !!this.getPref('safebrowsing.enabled').value &&
-        !!safeBrowsingScoutPref.value;
-    this.safeBrowsingReportingPref_ = {
-      key: '',
-      type: chrome.settingsPrivate.PrefType.BOOLEAN,
-      value: prefValue,
-      enforcement: safeBrowsingScoutPref.enforcement,
-      controlledBy: safeBrowsingScoutPref.controlledBy,
-    };
   },
 
   /**
diff --git a/chrome/browser/resources/settings/privacy_page/security_page.html b/chrome/browser/resources/settings/privacy_page/security_page.html
index 9f7e235a24bd..7ddb3f23a30d 100644
--- a/chrome/browser/resources/settings/privacy_page/security_page.html
+++ b/chrome/browser/resources/settings/privacy_page/security_page.html
@@ -59,101 +59,6 @@
       <img id="banner" alt=""
           src="chrome://settings/images/safe_browsing_banner.svg">
     </picture>
-    <div id="safeBrowsingSection">
-      <h2>$i18n{safeBrowsingSectionLabel}</h2>
-      <cr-radio-group id="safeBrowsingRadio"
-          selected="[[selectSafeBrowsingRadio_]]"
-          selectable-elements="cr-radio-button, settings-collapse-radio-button"
-          on-selected-changed="onSafeBrowsingRadioChange_">
-        <settings-collapse-radio-button name="[[safeBrowsingEnum_.ENHANCED]]"
-            id="safeBrowsingEnhanced"
-            label="$i18n{safeBrowsingEnhanced}"
-            sub-label="$i18n{safeBrowsingEnhancedDesc}"
-            hidden="[[!safeBrowsingEnhancedEnabled_]]"
-            disabled="[[safeBrowsingRadioManagedState_.enhanced.disabled]]"
-            policy-indicator-type=
-                "[[safeBrowsingRadioManagedState_.enhanced.indicator]]">
-          <div slot="collapse">
-            <div class="bullet-line">
-              <iron-icon icon="cr:security"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulOne}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings20:googleg"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulTwo}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings:public"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulThree}
-              </div>
-            </div>
-            <div class="bullet-line">
-              <iron-icon icon="settings20:vpn-key"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulFour}
-              </div>
-            </div>
-            <div class="bullet-line three-line last-collapse-item">
-              <iron-icon icon="settings20:data"></iron-icon>
-              <div class="secondary">
-                $i18n{safeBrowsingEnhancedBulFive}
-              </div>
-            </div>
-          </div>
-        </settings-collapse-radio-button>
-        <settings-collapse-radio-button name="[[safeBrowsingEnum_.STANDARD]]"
-            id="safeBrowsingStandard"
-            label="$i18n{safeBrowsingStandard}"
-            sub-label="$i18n{safeBrowsingStandardDesc}"
-            info-opened="{{infoOpened_}}"
-            disabled="[[safeBrowsingRadioManagedState_.standard.disabled]]"
-            policy-indicator-type=
-                "[[safeBrowsingRadioManagedState_.standard.indicator]]">
-          <div slot="collapse">
-            <div class="bullet-line">
-              <iron-icon icon="cr:security"></iron-icon>
-              <div class="secondary">
-                  $i18n{safeBrowsingStandardBulOne}
-              </div>
-            </div>
-            <div class="bullet-line three-line">
-              <iron-icon icon="settings20:data"></iron-icon>
-              <div class="secondary">
-                  $i18n{safeBrowsingStandardBulTwo}
-              </div>
-            </div>
-          </div>
-          <div slot="noSelectionCollapse">
-            <settings-toggle-button id="safeBrowsingReportingToggle"
-                pref="{{prefs.safebrowsing.scout_reporting_enabled}}"
-                label="$i18n{safeBrowsingStandardReportingLabel}"
-                sub-label="$i18n{safeBrowsingEnableExtendedReportingDesc}"
-                on-change="onSafeBrowsingExtendedReportingChange_"
-                disabled="[[
-                    getDisabledExtendedSafeBrowsing_(prefs.safebrowsing.*)]]">
-            </settings-toggle-button>
-            <settings-passwords-leak-detection-toggle id="passwordsLeakToggle"
-                class="collapsable"
-                prefs="{{prefs}}"
-                sync-status="[[syncStatus]]">
-            </settings-passwords-leak-detection-toggle>
-          </div>
-        </settings-collapse-radio-button>
-        <settings-collapse-radio-button name="[[safeBrowsingEnum_.DISABLED]]"
-            id="safeBrowsingDisabled" no-collapse
-            label="$i18n{safeBrowsingNone}"
-            sub-label="$i18n{safeBrowsingNoneDesc}"
-            disabled="[[safeBrowsingRadioManagedState_.disabled.disabled]]"
-            policy-indicator-type=
-                "[[safeBrowsingRadioManagedState_.disabled.indicator]]">
-        </settings-collapse-radio-button>
-      </cr-radio-group>
-    </div>
     <div class="cr-row first">
       <h2>$i18n{advancedPageTitle}</h2>
     </div>
@@ -184,8 +89,3 @@
         on-click="onAdvancedProtectionProgramLinkClick_"
         external>
     </cr-link-row>
-    <template is="dom-if" if="[[showDisableSafebrowsingDialog_]]" restamp>
-      <settings-disable-safebrowsing-dialog prefs="{{prefs}}"
-          on-close="onDisableSafebrowsingDialogClose_">
-      </settings-disable-safebrowsing-dialog>
-    </template>
diff --git a/chrome/browser/resources/settings/privacy_page/security_page.js b/chrome/browser/resources/settings/privacy_page/security_page.js
index 9184974d33ae..d0bea3ba0f33 100644
--- a/chrome/browser/resources/settings/privacy_page/security_page.js
+++ b/chrome/browser/resources/settings/privacy_page/security_page.js
@@ -27,7 +27,6 @@ import {routes} from '../route.js';
 import {Router} from '../router.m.js';
 
 import {PrivacyPageBrowserProxy, PrivacyPageBrowserProxyImpl} from './privacy_page_browser_proxy.m.js';
-import {SafeBrowsingBrowserProxy, SafeBrowsingBrowserProxyImpl, SafeBrowsingRadioManagedState} from './safe_browsing_browser_proxy.js';
 
 /**
  * Enumeration of all safe browsing modes.
@@ -119,7 +118,6 @@ Polymer({
   },
 
   observers: [
-    'onSafeBrowsingPrefChange_(prefs.safebrowsing.*)',
   ],
 
   /*
@@ -149,14 +147,7 @@ Polymer({
    * @private
    */
   computeSelectSafeBrowsingRadio_() {
-    if (this.prefs === undefined) {
-      return SafeBrowsing.STANDARD;
-    }
-    if (!this.getPref('safebrowsing.enabled').value) {
-      return SafeBrowsing.DISABLED;
-    }
-    return this.getPref('safebrowsing.enhanced').value ? SafeBrowsing.ENHANCED :
-                                                         SafeBrowsing.STANDARD;
+    return SafeBrowsing.DISABLED;
   },
 
   /** @private {PrivacyPageBrowserProxy} */
@@ -172,11 +163,6 @@ Polymer({
     this.metricsBrowserProxy_ = MetricsBrowserProxyImpl.getInstance();
   },
 
-  /** @override */
-  attached() {
-    SafeBrowsingBrowserProxyImpl.getInstance().validateSafeBrowsingEnhanced();
-  },
-
   /**
    * Updates the various underlying cookie prefs based on the newly selected
    * radio button.
@@ -200,16 +186,7 @@ Polymer({
    * @private
    */
   getDisabledExtendedSafeBrowsing_() {
-    return !this.getPref('safebrowsing.enabled').value ||
-        !!this.getPref('safebrowsing.enhanced').value;
-  },
-
-  /** @private */
-  async onSafeBrowsingPrefChange_() {
-    // Retrieve and update safe browsing radio managed state.
-    this.safeBrowsingRadioManagedState_ =
-        await SafeBrowsingBrowserProxyImpl.getInstance()
-            .getSafeBrowsingRadioManagedState();
+    return true;
   },
 
   /** @private */
diff --git a/chrome/browser/resources/settings/site_settings/site_settings_behavior.js b/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
index 5bf88a68a4e6..9a68753a94fb 100644
--- a/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
+++ b/chrome/browser/resources/settings/site_settings/site_settings_behavior.js
@@ -217,8 +217,6 @@ const SiteSettingsBehaviorImpl = {
     addOrRemoveSettingWithFlag(
         ContentSettingsTypes.BLUETOOTH_SCANNING,
         'enableExperimentalWebPlatformFeatures');
-    addOrRemoveSettingWithFlag(
-        ContentSettingsTypes.ADS, 'enableSafeBrowsingSubresourceFilter');
     addOrRemoveSettingWithFlag(
         ContentSettingsTypes.PAYMENT_HANDLER,
         'enablePaymentHandlerContentSetting');
diff --git a/chrome/browser/resources/settings/site_settings_page/site_settings_page.js b/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
index 9695e7428356..e55a68dc976d 100644
--- a/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
+++ b/chrome/browser/resources/settings/site_settings_page/site_settings_page.js
@@ -51,8 +51,7 @@ function getCategoryItemMap() {
       icon: 'settings:ads',
       enabledLabel: 'siteSettingsAllowed',
       disabledLabel: 'siteSettingsAdsBlock',
-      shouldShow: () =>
-          loadTimeData.getBoolean('enableSafeBrowsingSubresourceFilter'),
+      shouldShow: () => false,
     },
     {
       route: routes.SITE_SETTINGS_AR,
diff --git a/chrome/browser/safe_browsing/BUILD.gn b/chrome/browser/safe_browsing/BUILD.gn
index 82edacf2604a..9c6997716633 100644
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -6,6 +6,7 @@ import("//components/safe_browsing/buildflags.gni")
 import("//extensions/buildflags/buildflags.gni")
 
 static_library("safe_browsing") {
+  if (false) {
   sources = [
     "chrome_controller_client.cc",
     "chrome_controller_client.h",
@@ -62,6 +63,7 @@ static_library("safe_browsing") {
     ]
     deps += [ "//extensions/browser" ]
   }
+  }
 
   if (safe_browsing_mode != 0) {
     # "Safe Browsing Basic" files used for safe browsing in full mode
diff --git a/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc b/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
index b578dadd429c..b7376bf495f0 100644
--- a/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
+++ b/chrome/browser/safe_browsing/ad_redirect_trigger_browsertest.cc
@@ -17,7 +17,6 @@
 #include "components/prefs/testing_pref_service.h"
 #include "components/safe_browsing/content/triggers/ad_redirect_trigger.h"
 #include "components/safe_browsing/content/triggers/mock_trigger_manager.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents.h"
diff --git a/chrome/browser/safe_browsing/advanced_protection_status_manager.cc b/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
index dd6097a49102..609d2f17061a 100644
--- a/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
+++ b/chrome/browser/safe_browsing/advanced_protection_status_manager.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/signin/public/identity_manager/accounts_mutator.h"
 #include "components/signin/public/identity_manager/consent_level.h"
@@ -62,10 +61,7 @@ void AdvancedProtectionStatusManager::MaybeRefreshOnStartUp() {
 
   is_under_advanced_protection_ = core_info.is_under_advanced_protection;
 
-  if (pref_service_->HasPrefPath(prefs::kAdvancedProtectionLastRefreshInUs)) {
-    last_refreshed_ = base::Time::FromDeltaSinceWindowsEpoch(
-        base::TimeDelta::FromMicroseconds(pref_service_->GetInt64(
-            prefs::kAdvancedProtectionLastRefreshInUs)));
+  if (false) {
     if (is_under_advanced_protection_)
       ScheduleNextRefresh();
   } else {
@@ -221,20 +217,10 @@ void AdvancedProtectionStatusManager::CancelFutureRefresh() {
 
 void AdvancedProtectionStatusManager::UpdateLastRefreshTime() {
   last_refreshed_ = base::Time::Now();
-  pref_service_->SetInt64(
-      prefs::kAdvancedProtectionLastRefreshInUs,
-      last_refreshed_.ToDeltaSinceWindowsEpoch().InMicroseconds());
 }
 
 bool AdvancedProtectionStatusManager::IsUnderAdvancedProtection() const {
-  if (!pref_service_->GetBoolean(prefs::kAdvancedProtectionAllowed))
-    return false;
-
-  if (base::CommandLine::ForCurrentProcess()->HasSwitch(
-          kForceTreatUserAsAdvancedProtection))
-    return true;
-
-  return is_under_advanced_protection_;
+  return false;
 }
 
 bool AdvancedProtectionStatusManager::IsUnconsentedPrimaryAccount(
diff --git a/chrome/browser/safe_browsing/android/services_delegate_android.h b/chrome/browser/safe_browsing/android/services_delegate_android.h
index 3deffea3b1a3..5e03e4810c83 100644
--- a/chrome/browser/safe_browsing/android/services_delegate_android.h
+++ b/chrome/browser/safe_browsing/android/services_delegate_android.h
@@ -7,7 +7,6 @@
 
 #include "base/macros.h"
 #include "chrome/browser/safe_browsing/services_delegate.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
 namespace safe_browsing {
 
diff --git a/chrome/browser/safe_browsing/certificate_reporting_service.cc b/chrome/browser/safe_browsing/certificate_reporting_service.cc
index becf1b2c012c..f7ad590528ba 100644
--- a/chrome/browser/safe_browsing/certificate_reporting_service.cc
+++ b/chrome/browser/safe_browsing/certificate_reporting_service.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "content/public/browser/browser_thread.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
diff --git a/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc b/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
index dc94615fe513..57fd9c340cbe 100644
--- a/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
+++ b/chrome/browser/safe_browsing/certificate_reporting_service_browsertest.cc
@@ -26,7 +26,6 @@
 #include "chrome/test/base/in_process_browser_test.h"
 #include "chrome/test/base/ui_test_utils.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "components/variations/variations_params_manager.h"
diff --git a/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn b/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
index fcc691839bff..e63b5c15fd8a 100644
--- a/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
+++ b/chrome/browser/safe_browsing/chrome_cleaner/BUILD.gn
@@ -56,7 +56,6 @@ static_library("chrome_cleaner") {
     # TODO(crbug.com/920223): Break dependency cycles with //chrome/browser
     ":public",
     "//chrome/browser/extensions",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui",
     "//chrome/common",
     "//chrome/installer/util:with_no_strings",
@@ -66,7 +65,6 @@ static_library("chrome_cleaner") {
     "//components/crx_file",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//content/public/browser",
     "//extensions/browser",
     "//third_party/protobuf:protobuf_lite",
diff --git a/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc b/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
index 683b70442354..a82e7892ef3d 100644
--- a/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_impl_win.cc
@@ -42,7 +42,6 @@
 #include "components/component_updater/component_updater_service.h"
 #include "components/component_updater/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "extensions/browser/extension_registry.h"
diff --git a/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc b/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
index f86d21f84a42..860cd75bf6e5 100644
--- a/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/reporter_runner_browsertest_win.cc
@@ -45,7 +45,6 @@
 #include "components/policy/core/common/mock_configuration_policy_provider.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/test/browser_test.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
diff --git a/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc b/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
index c77abf4651a2..1320193a4fe1 100644
--- a/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
+++ b/chrome/browser/safe_browsing/chrome_cleaner/srt_client_info_win.cc
@@ -12,7 +12,6 @@
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/common/channel_info.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/version_info/version_info.h"
 
 namespace safe_browsing {
diff --git a/chrome/browser/safe_browsing/chrome_password_protection_service.cc b/chrome/browser/safe_browsing/chrome_password_protection_service.cc
index 8d4c7a5daed3..019c86540d3b 100644
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.cc
@@ -48,7 +48,6 @@
 #include "components/safe_browsing/content/password_protection/password_protection_navigation_throttle.h"
 #include "components/safe_browsing/content/password_protection/password_protection_request.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/features.h"
@@ -1251,14 +1250,6 @@ bool ChromePasswordProtectionService::HasUnhandledEnterprisePasswordReuse(
 }
 
 void ChromePasswordProtectionService::OnWarningTriggerChanged() {
-  const base::Value* pref_value = pref_change_registrar_->prefs()->Get(
-      prefs::kPasswordProtectionWarningTrigger);
-  // If password protection is not turned off, do nothing.
-  if (static_cast<PasswordProtectionTrigger>(pref_value->GetInt()) !=
-      PASSWORD_PROTECTION_OFF) {
-    return;
-  }
-
   // Clears captured enterprise password hashes or GSuite sync password hashes.
   scoped_refptr<password_manager::PasswordStore> password_store =
       GetProfilePasswordStore();
@@ -1418,7 +1409,7 @@ PrefService* ChromePasswordProtectionService::GetPrefs() {
 }
 
 bool ChromePasswordProtectionService::IsSafeBrowsingEnabled() {
-  return ::safe_browsing::IsSafeBrowsingEnabled(*GetPrefs());
+  return false;
 }
 
 bool ChromePasswordProtectionService::IsExtendedReporting() {
@@ -1442,6 +1433,7 @@ bool ChromePasswordProtectionService::IsInPasswordAlertMode(
 bool ChromePasswordProtectionService::IsPingingEnabled(
     LoginReputationClientRequest::TriggerType trigger_type,
     ReusedPasswordAccountType password_type) {
+  return false;
   if (!IsSafeBrowsingEnabled()) {
     return false;
   }
@@ -1656,24 +1648,6 @@ MaybeCreateNavigationThrottle(content::NavigationHandle* navigation_handle) {
                  : nullptr;
 }
 
-PasswordProtectionTrigger
-ChromePasswordProtectionService::GetPasswordProtectionWarningTriggerPref(
-    ReusedPasswordAccountType password_type) const {
-  if (password_type.account_type() == ReusedPasswordAccountType::GMAIL ||
-      (password_type.account_type() ==
-           ReusedPasswordAccountType::SAVED_PASSWORD &&
-       base::FeatureList::IsEnabled(
-           safe_browsing::kPasswordProtectionForSavedPasswords)))
-    return PHISHING_REUSE;
-
-  bool is_policy_managed = profile_->GetPrefs()->HasPrefPath(
-      prefs::kPasswordProtectionWarningTrigger);
-  PasswordProtectionTrigger trigger_level =
-      static_cast<PasswordProtectionTrigger>(profile_->GetPrefs()->GetInteger(
-          prefs::kPasswordProtectionWarningTrigger));
-  return is_policy_managed ? trigger_level : PHISHING_REUSE;
-}
-
 bool ChromePasswordProtectionService::IsURLWhitelistedForPasswordEntry(
     const GURL& url) const {
   if (!profile_)
diff --git a/chrome/browser/safe_browsing/chrome_password_protection_service.h b/chrome/browser/safe_browsing/chrome_password_protection_service.h
index 16f98371d69d..92e0055fec1e 100644
--- a/chrome/browser/safe_browsing/chrome_password_protection_service.h
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service.h
@@ -216,13 +216,6 @@ class ChromePasswordProtectionService : public PasswordProtectionService {
   bool UserClickedThroughSBInterstitial(
       content::WebContents* web_contents) override;
 
-  // If |prefs::kPasswordProtectionWarningTrigger| is not managed by enterprise
-  // policy, this function should always return PHISHING_REUSE. Otherwise,
-  // returns the specified pref value adjusted for the given username's account
-  // type.
-  PasswordProtectionTrigger GetPasswordProtectionWarningTriggerPref(
-      ReusedPasswordAccountType password_type) const override;
-
   // If |url| matches Safe Browsing whitelist domains, password protection
   // change password URL, or password protection login URLs in the enterprise
   // policy.
diff --git a/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc b/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
index 96c1efdb56d8..a45176effcd7 100644
--- a/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service_browsertest.cc
@@ -34,7 +34,6 @@
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/content/password_protection/metrics_util.h"
 #include "components/safe_browsing/content/password_protection/password_protection_request.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/security_state/core/security_state.h"
 #include "components/signin/public/identity_manager/account_info.h"
diff --git a/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc b/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
index 060e197e131d..01fea7dd5630 100644
--- a/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
+++ b/chrome/browser/safe_browsing/chrome_password_protection_service_sync_browsertest.cc
@@ -11,7 +11,7 @@
 #include "build/build_config.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
-#include "chrome/browser/ssl/security_state_tab_helper.h"
+#include "chrome/browser/ssl/security_state_tab_helper.h"`
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/browser/sync/test/integration/profile_sync_service_harness.h"
 #include "chrome/browser/sync/test/integration/sync_test.h"
@@ -28,7 +28,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/safe_browsing/content/password_protection/password_protection_request.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_state/core/security_state.h"
 #include "components/signin/public/base/signin_pref_names.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
diff --git a/chrome/browser/safe_browsing/client_side_detection_host.cc b/chrome/browser/safe_browsing/client_side_detection_host.cc
index 2c4909e82c9f..e9b665b2314c 100644
--- a/chrome/browser/safe_browsing/client_side_detection_host.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_host.cc
@@ -29,7 +29,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom-shared.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/allowlist_checker_client.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
diff --git a/chrome/browser/safe_browsing/client_side_detection_service.cc b/chrome/browser/safe_browsing/client_side_detection_service.cc
index ecfe9e93ddc9..8139295dbe0f 100644
--- a/chrome/browser/safe_browsing/client_side_detection_service.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_service.cc
@@ -25,7 +25,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/proto/client_model.pb.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
@@ -57,7 +56,7 @@ const int ClientSideDetectionService::kNegativeCacheIntervalDays = 1;
 const int ClientSideDetectionService::kPositiveCacheIntervalMinutes = 30;
 
 const char ClientSideDetectionService::kClientReportPhishingUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
+    "https://no-thanks.invalid";
 
 struct ClientSideDetectionService::ClientPhishingReportInfo {
   std::unique_ptr<network::SimpleURLLoader> loader;
@@ -111,49 +110,6 @@ void ClientSideDetectionService::Shutdown() {
 }
 
 void ClientSideDetectionService::OnPrefsUpdated() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  bool enabled = IsSafeBrowsingEnabled(*profile_->GetPrefs());
-  bool extended_reporting =
-      IsEnhancedProtectionEnabled(*profile_->GetPrefs()) ||
-      IsExtendedReportingEnabled(*profile_->GetPrefs());
-  if (enabled == enabled_ && extended_reporting_ == extended_reporting)
-    return;
-
-  enabled_ = enabled;
-  extended_reporting_ = extended_reporting;
-
-  if (enabled_) {
-    if (!model_factory_.is_null()) {
-      model_loader_ = model_factory_.Run();
-    } else {
-      model_loader_ = std::make_unique<ModelLoader>(
-          base::BindRepeating(&ClientSideDetectionService::SendModelToRenderers,
-                              base::Unretained(this)),
-          url_loader_factory_, extended_reporting_);
-    }
-    // Refresh the models when the service is enabled.  This can happen when
-    // either of the preferences are toggled, or early during startup if
-    // safe browsing is already enabled. In a lot of cases the model will be
-    // in the cache so it  won't actually be fetched from the network.
-    // We delay the first model fetches to avoid slowing down browser startup.
-    model_loader_->ScheduleFetch(kInitialClientModelFetchDelayMs);
-  } else {
-    if (model_loader_) {
-      // Cancel model loads in progress.
-      model_loader_->CancelFetcher();
-    }
-    // Invoke pending callbacks with a false verdict.
-    for (auto it = client_phishing_reports_.begin();
-         it != client_phishing_reports_.end(); ++it) {
-      ClientPhishingReportInfo* info = it->second.get();
-      if (!info->callback.is_null())
-        info->callback.Run(info->phishing_url, false);
-    }
-    client_phishing_reports_.clear();
-    cache_.clear();
-  }
-
-  SendModelToRenderers();  // always refresh the renderer state
 }
 
 void ClientSideDetectionService::SendClientReportPhishingRequest(
@@ -161,13 +117,6 @@ void ClientSideDetectionService::SendClientReportPhishingRequest(
     bool is_extended_reporting,
     bool is_enhanced_reporting,
     const ClientReportPhishingRequestCallback& callback) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  base::ThreadTaskRunnerHandle::Get()->PostTask(
-      FROM_HERE,
-      base::BindOnce(
-          &ClientSideDetectionService::StartClientReportPhishingRequest,
-          weak_factory_.GetWeakPtr(), verdict, is_extended_reporting,
-          is_enhanced_reporting, callback));
 }
 
 bool ClientSideDetectionService::IsPrivateIPAddress(
@@ -220,6 +169,7 @@ void ClientSideDetectionService::StartClientReportPhishingRequest(
     bool is_extended_reporting,
     bool is_enhanced_reporting,
     const ClientReportPhishingRequestCallback& callback) {
+  return;
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   std::unique_ptr<ClientPhishingRequest> request(verdict);
 
@@ -318,18 +268,9 @@ void ClientSideDetectionService::HandlePhishingVerdict(
   ClientPhishingResponse response;
   std::unique_ptr<ClientPhishingReportInfo> info =
       std::move(client_phishing_reports_[source]);
-  client_phishing_reports_.erase(source);
-
-  bool is_phishing = false;
-  if (net_error == net::OK && net::HTTP_OK == response_code &&
-      response.ParseFromString(data)) {
-    // Cache response, possibly flushing an old one.
-    cache_[info->phishing_url] =
-        base::WrapUnique(new CacheState(response.phishy(), base::Time::Now()));
-    is_phishing = response.phishy();
-  }
+
   if (!info->callback.is_null())
-    info->callback.Run(info->phishing_url, is_phishing);
+    info->callback.Run(GURL(), false);
 }
 
 bool ClientSideDetectionService::IsInCache(const GURL& url) {
diff --git a/chrome/browser/safe_browsing/client_side_model_loader.cc b/chrome/browser/safe_browsing/client_side_model_loader.cc
index 0c740b727f21..4b194fd24e01 100644
--- a/chrome/browser/safe_browsing/client_side_model_loader.cc
+++ b/chrome/browser/safe_browsing/client_side_model_loader.cc
@@ -58,7 +58,7 @@ std::string ReadFileIntoString(base::FilePath path) {
 const size_t ModelLoader::kMaxModelSizeBytes = 150 * 1024;
 const int ModelLoader::kClientModelFetchIntervalMs = 3600 * 1000;
 const char ModelLoader::kClientModelUrlPrefix[] =
-    "https://ssl.gstatic.com/safebrowsing/csd/";
+    "https://no-thanks.invalid/";
 const char ModelLoader::kClientModelNamePattern[] =
     "client_model_v5%s_variation_%d.pb";
 const char ModelLoader::kClientModelFinchExperiment[] =
diff --git a/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc b/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
index c9fe7c53783d..03cb67b57a82 100644
--- a/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
+++ b/chrome/browser/safe_browsing/cloud_content_scanning/binary_upload_service.cc
@@ -30,7 +30,6 @@
 #include "components/enterprise/common/strings.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/webprotect.pb.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -43,10 +42,10 @@ namespace {
 const int kScanningTimeoutSeconds = 5 * 60;  // 5 minutes
 
 const char kSbEnterpriseUploadUrl[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/scan";
+    "https://no-thanks.invalid";
 
 const char kSbAppUploadUrl[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/app";
+    "https://no-thanks.invalid";
 
 bool IsAdvancedProtectionRequest(const BinaryUploadService::Request& request) {
   if (request.use_legacy_proto()) {
diff --git a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
index e2ef3618c1e5..ee4ddeabb902 100644
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
@@ -34,7 +34,6 @@
 #include "components/policy/core/browser/url_util.h"
 #include "components/policy/core/common/policy_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/file_type_policies.h"
diff --git a/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc b/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
index 25d42accbc99..ad8636761246 100644
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request_base.cc
@@ -25,7 +25,6 @@
 #include "chrome/browser/signin/identity_manager_factory.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/utils.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/file_type_policies.h"
@@ -163,8 +162,12 @@ CheckClientDownloadRequestBase::CheckClientDownloadRequestBase(
     is_incognito_ = browser_context->IsOffTheRecord();
     is_under_advanced_protection_ =
         profile &&
+#if BUILDFLAG(FULL_SAFE_BROWSING)
         AdvancedProtectionStatusManagerFactory::GetForProfile(profile)
             ->IsUnderAdvancedProtection();
+#else
+        false;
+#endif
     is_enhanced_protection_ =
         profile && IsEnhancedProtectionEnabled(*profile->GetPrefs());
     signin::IdentityManager* identity_manager =
diff --git a/chrome/browser/safe_browsing/download_protection/download_feedback.cc b/chrome/browser/safe_browsing/download_protection/download_feedback.cc
index b3a1ee0b6655..2ced82c74e62 100644
--- a/chrome/browser/safe_browsing/download_protection/download_feedback.cc
+++ b/chrome/browser/safe_browsing/download_protection/download_feedback.cc
@@ -255,7 +255,7 @@ const int64_t DownloadFeedback::kMaxUploadSize = 50 * 1024 * 1024;
 
 // static
 const char DownloadFeedback::kSbFeedbackURL[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/chrome";
+    "https://no-thanks.invalid";
 
 // static
 DownloadFeedbackFactory* DownloadFeedback::factory_ = nullptr;
diff --git a/chrome/browser/safe_browsing/download_protection/download_protection_service.cc b/chrome/browser/safe_browsing/download_protection/download_protection_service.cc
index c59f4fd7b97d..6d93dc23a8b4 100644
--- a/chrome/browser/safe_browsing/download_protection/download_protection_service.cc
+++ b/chrome/browser/safe_browsing/download_protection/download_protection_service.cc
@@ -349,8 +349,12 @@ void DownloadProtectionService::ShowDetailsForDownload(
   Profile* profile = Profile::FromBrowserContext(
       content::DownloadItemUtils::GetBrowserContext(item));
   if (profile &&
+#if BUILDFLAG(FULL_SAFE_BROWSING)
       AdvancedProtectionStatusManagerFactory::GetForProfile(profile)
           ->IsUnderAdvancedProtection() &&
+#else
+      false &&
+#endif
       item->GetDangerType() ==
           download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT) {
     learn_more_url = GURL(chrome::kAdvancedProtectionDownloadLearnMoreURL);
diff --git a/chrome/browser/safe_browsing/download_protection/ppapi_download_request.cc b/chrome/browser/safe_browsing/download_protection/ppapi_download_request.cc
index 1ac58b83526f..5e012e99ac00 100644
--- a/chrome/browser/safe_browsing/download_protection/ppapi_download_request.cc
+++ b/chrome/browser/safe_browsing/download_protection/ppapi_download_request.cc
@@ -35,7 +35,7 @@ using content::BrowserThread;
 namespace safe_browsing {
 
 const char PPAPIDownloadRequest::kDownloadRequestUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/download";
+    "https://no-thanks.invalid";
 
 PPAPIDownloadRequest::PPAPIDownloadRequest(
     const GURL& requestor_url,
diff --git a/chrome/browser/safe_browsing/incident_reporting/incident_report_uploader_impl.cc b/chrome/browser/safe_browsing/incident_reporting/incident_report_uploader_impl.cc
index 74fe066d3949..f92784720e95 100644
--- a/chrome/browser/safe_browsing/incident_reporting/incident_report_uploader_impl.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/incident_report_uploader_impl.cc
@@ -22,7 +22,7 @@ namespace safe_browsing {
 namespace {
 
 const char kSbIncidentReportUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/incident";
+    "https://no-thanks.invalid";
 
 constexpr net::NetworkTrafficAnnotationTag
     kSafeBrowsingIncidentTrafficAnnotation =
diff --git a/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc b/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
index b12350930163..2006206d7b82 100644
--- a/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/incident_reporting_service.cc
@@ -39,7 +39,6 @@
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_item_utils.h"
@@ -302,11 +301,7 @@ IncidentReportingService::UploadContext::~UploadContext() {
 
 // static
 bool IncidentReportingService::IsEnabledForProfile(Profile* profile) {
-  if (profile->IsOffTheRecord())
-    return false;
-  if (!IsSafeBrowsingEnabled(*profile->GetPrefs()))
-    return false;
-  return IsExtendedReportingEnabled(*profile->GetPrefs());
+  return false;
 }
 
 IncidentReportingService::IncidentReportingService(
diff --git a/chrome/browser/safe_browsing/incident_reporting/state_store.cc b/chrome/browser/safe_browsing/incident_reporting/state_store.cc
index 62466bc1baca..6c4e4a86edb7 100644
--- a/chrome/browser/safe_browsing/incident_reporting/state_store.cc
+++ b/chrome/browser/safe_browsing/incident_reporting/state_store.cc
@@ -13,7 +13,6 @@
 #include "chrome/browser/safe_browsing/incident_reporting/incident.h"
 #include "chrome/browser/safe_browsing/incident_reporting/platform_state_store.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
 namespace safe_browsing {
 
diff --git a/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc b/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
index 350cdb315320..aed9e324b42e 100644
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -21,7 +21,6 @@
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/triggers/trigger_manager.h"
 #include "components/security_interstitials/content/content_metrics_helper.h"
@@ -63,8 +62,7 @@ class SafeBrowsingBlockingPageFactoryImpl
     PrefService* prefs =
         Profile::FromBrowserContext(web_contents->GetBrowserContext())
             ->GetPrefs();
-    bool is_extended_reporting_opt_in_allowed =
-        IsExtendedReportingOptInAllowed(*prefs);
+    bool is_extended_reporting_opt_in_allowed = false;
     bool is_proceed_anyway_disabled =
         prefs->GetBoolean(prefs::kSafeBrowsingProceedAnywayDisabled);
 
diff --git a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
index 66c2e986d459..68bb0d0afa80 100644
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page_test.cc
@@ -51,7 +51,6 @@
 #include "components/safe_browsing/content/browser/threat_details.h"
 #include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "components/safe_browsing/content/renderer/threat_dom_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/db/test_database_manager.h"
 #include "components/safe_browsing/core/db/util.h"
diff --git a/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc b/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
index 5ee28dfc5810..30e35ee52c5f 100644
--- a/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.cc
@@ -253,10 +253,7 @@ GURL SafeBrowsingNavigationObserverManager::ClearURLRef(const GURL& url) {
 // static
 bool SafeBrowsingNavigationObserverManager::IsEnabledAndReady(
     Profile* profile) {
-  return IsSafeBrowsingEnabled(*profile->GetPrefs()) &&
-         g_browser_process->safe_browsing_service() &&
-         g_browser_process->safe_browsing_service()
-             ->navigation_observer_manager();
+  return false;
 }
 
 // static
diff --git a/chrome/browser/safe_browsing/safe_browsing_service.cc b/chrome/browser/safe_browsing/safe_browsing_service.cc
index 0c70a941f7ba..9d98132c1a15 100644
--- a/chrome/browser/safe_browsing/safe_browsing_service.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_service.cc
@@ -85,7 +85,6 @@ base::FilePath SafeBrowsingService::GetBaseFilename() {
 
 SafeBrowsingService::SafeBrowsingService()
     : services_delegate_(ServicesDelegate::Create(this)),
-      estimated_extended_reporting_by_prefs_(SBER_LEVEL_OFF),
       shutdown_(false),
       enabled_(false),
       enabled_by_prefs_(false) {}
@@ -221,8 +220,6 @@ TriggerManager* SafeBrowsingService::trigger_manager() const {
 
 PasswordProtectionService* SafeBrowsingService::GetPasswordProtectionService(
     Profile* profile) const {
-  if (IsSafeBrowsingEnabled(*profile->GetPrefs()))
-    return services_delegate_->GetPasswordProtectionService(profile);
   return nullptr;
 }
 
@@ -343,9 +340,6 @@ void SafeBrowsingService::OnProfileAdded(Profile* profile) {
   std::unique_ptr<PrefChangeRegistrar> registrar =
       std::make_unique<PrefChangeRegistrar>();
   registrar->Init(pref_service);
-  registrar->Add(
-      prefs::kSafeBrowsingEnabled,
-      base::Bind(&SafeBrowsingService::RefreshState, base::Unretained(this)));
   // ClientSideDetectionService will need to be refresh the models
   // renderers have if extended-reporting changes.
   registrar->Add(
@@ -357,14 +351,6 @@ void SafeBrowsingService::OnProfileAdded(Profile* profile) {
   prefs_map_[pref_service] = std::move(registrar);
   RefreshState();
 
-  // Record the current pref state for standard protection.
-  UMA_HISTOGRAM_BOOLEAN("SafeBrowsing.Pref.General",
-                        pref_service->GetBoolean(prefs::kSafeBrowsingEnabled));
-  // Record the current pref state for enhanced protection. Enhanced protection
-  // is a subset of the standard protection. Thus, |kSafeBrowsingEnabled| count
-  // should always be more than the count of enhanced protection.
-  UMA_HISTOGRAM_BOOLEAN("SafeBrowsing.Pref.Enhanced",
-                        pref_service->GetBoolean(prefs::kSafeBrowsingEnhanced));
   // Extended Reporting metrics are handled together elsewhere.
   RecordExtendedReportingMetrics(*pref_service);
 
@@ -401,18 +387,6 @@ void SafeBrowsingService::RefreshState() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   // Check if any profile requires the service to be active.
   enabled_by_prefs_ = false;
-  estimated_extended_reporting_by_prefs_ = SBER_LEVEL_OFF;
-  for (const auto& pref : prefs_map_) {
-    if (IsSafeBrowsingEnabled(*pref.first)) {
-      enabled_by_prefs_ = true;
-
-      ExtendedReportingLevel erl =
-          safe_browsing::GetExtendedReportingLevel(*pref.first);
-      if (erl != SBER_LEVEL_OFF) {
-        estimated_extended_reporting_by_prefs_ = erl;
-      }
-    }
-  }
 
   if (enabled_by_prefs_)
     Start();
diff --git a/chrome/browser/safe_browsing/safe_browsing_service.h b/chrome/browser/safe_browsing/safe_browsing_service.h
index cfbf8193e2b4..8242def89885 100644
--- a/chrome/browser/safe_browsing/safe_browsing_service.h
+++ b/chrome/browser/safe_browsing/safe_browsing_service.h
@@ -25,7 +25,6 @@
 #include "chrome/browser/profiles/profile_observer.h"
 #include "chrome/browser/safe_browsing/services_delegate.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "components/safe_browsing/core/safe_browsing_service_interface.h"
 #include "content/public/browser/browser_thread.h"
@@ -93,15 +92,6 @@ class SafeBrowsingService : public SafeBrowsingServiceInterface,
   // Called on the main thread to let us know that the io_thread is going away.
   void ShutDown();
 
-  // NOTE(vakh): This is not the most reliable way to find out if extended
-  // reporting has been enabled. That's why it starts with estimated_. It
-  // returns true if any of the profiles have extended reporting enabled. It may
-  // be called on any thread. That can lead to a race condition, but that's
-  // acceptable.
-  ExtendedReportingLevel estimated_extended_reporting_by_prefs() const {
-    return estimated_extended_reporting_by_prefs_;
-  }
-
   // Get current enabled status. Must be called on IO thread.
   bool enabled() const {
     DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
@@ -271,10 +261,6 @@ class SafeBrowsingService : public SafeBrowsingServiceInterface,
   // Provides phishing and malware statistics. Accessed on UI thread.
   std::unique_ptr<PingManager> ping_manager_;
 
-  // Whether SafeBrowsing Extended Reporting is enabled by the current set of
-  // profiles. Updated on the UI thread.
-  ExtendedReportingLevel estimated_extended_reporting_by_prefs_;
-
   // Whether the service has been shutdown.
   bool shutdown_;
 
diff --git a/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc b/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
index 4bc8d90b9835..a14bd1e65daa 100644
--- a/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
+++ b/chrome/browser/safe_browsing/telemetry/android/android_telemetry_service.cc
@@ -133,11 +133,9 @@ bool AndroidTelemetryService::CanSendPing(download::DownloadItem* item) {
     return false;
   }
 
-  if (!IsSafeBrowsingEnabled(*GetPrefs())) {
     RecordApkDownloadTelemetryOutcome(
         ApkDownloadTelemetryOutcome::NOT_SENT_SAFE_BROWSING_NOT_ENABLED);
     return false;
-  }
 
   if (profile_->IsOffTheRecord()) {
     RecordApkDownloadTelemetryOutcome(
diff --git a/chrome/browser/safe_browsing/ui_manager.cc b/chrome/browser/safe_browsing/ui_manager.cc
index 2c28202d7841..b134eed06e34 100644
--- a/chrome/browser/safe_browsing/ui_manager.cc
+++ b/chrome/browser/safe_browsing/ui_manager.cc
@@ -24,7 +24,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/ping_manager.h"
 #include "components/security_interstitials/content/security_interstitial_tab_helper.h"
diff --git a/chrome/browser/safe_browsing/url_checker_delegate_impl.cc b/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
index 5484c90aa2b2..5a746048ca38 100644
--- a/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
+++ b/chrome/browser/safe_browsing/url_checker_delegate_impl.cc
@@ -15,7 +15,6 @@
 #include "components/prerender/common/prerender_final_status.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/content/triggers/suspicious_site_trigger.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/database_manager.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/core/features.h"
diff --git a/chrome/browser/ssl/certificate_reporting_test_utils.cc b/chrome/browser/ssl/certificate_reporting_test_utils.cc
index 5c7742c9f217..dd24ac0cc2c6 100644
--- a/chrome/browser/ssl/certificate_reporting_test_utils.cc
+++ b/chrome/browser/ssl/certificate_reporting_test_utils.cc
@@ -15,7 +15,6 @@
 #include "build/build_config.h"
 #include "chrome/browser/profiles/profile.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/certificate_error_report.h"
 #include "components/variations/variations_associated_data.h"
diff --git a/chrome/browser/ssl/security_state_tab_helper.cc b/chrome/browser/ssl/security_state_tab_helper.cc
index 16d1ca932afd..d81bfef70c8c 100644
--- a/chrome/browser/ssl/security_state_tab_helper.cc
+++ b/chrome/browser/ssl/security_state_tab_helper.cc
@@ -16,8 +16,6 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/known_interception_disclosure_infobar_delegate.h"
 #include "chrome/browser/ssl/tls_deprecation_config.h"
 #include "chrome/common/chrome_features.h"
@@ -28,7 +26,6 @@
 #include "components/omnibox/common/omnibox_features.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/buildflags.h"
 #include "components/security_state/content/content_utils.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/navigation_entry.h"
@@ -51,10 +48,6 @@
 #include "chrome/browser/chromeos/policy/policy_cert_service_factory.h"
 #endif  // defined(OS_CHROMEOS)
 
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
-#endif
-
 namespace {
 
 void RecordSecurityLevel(
@@ -118,7 +111,6 @@ bool IsLegacyTLS(GURL url, int connection_status) {
 }  // namespace
 
 using password_manager::metrics_util::PasswordType;
-using safe_browsing::SafeBrowsingUIManager;
 
 SecurityStateTabHelper::SecurityStateTabHelper(
     content::WebContents* web_contents)
@@ -256,92 +248,6 @@ bool SecurityStateTabHelper::UsedPolicyInstalledCertificate() const {
 
 security_state::MaliciousContentStatus
 SecurityStateTabHelper::GetMaliciousContentStatus() const {
-  content::NavigationEntry* entry =
-      web_contents()->GetController().GetVisibleEntry();
-  if (!entry)
-    return security_state::MALICIOUS_CONTENT_STATUS_NONE;
-  safe_browsing::SafeBrowsingService* sb_service =
-      g_browser_process->safe_browsing_service();
-  if (!sb_service)
-    return security_state::MALICIOUS_CONTENT_STATUS_NONE;
-  scoped_refptr<SafeBrowsingUIManager> sb_ui_manager = sb_service->ui_manager();
-  safe_browsing::SBThreatType threat_type;
-  if (sb_ui_manager->IsUrlWhitelistedOrPendingForWebContents(
-          entry->GetURL(), false, entry, web_contents(), false, &threat_type)) {
-    switch (threat_type) {
-      case safe_browsing::SB_THREAT_TYPE_UNUSED:
-      case safe_browsing::SB_THREAT_TYPE_SAFE:
-      case safe_browsing::SB_THREAT_TYPE_URL_PHISHING:
-      case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING:
-        return security_state::MALICIOUS_CONTENT_STATUS_SOCIAL_ENGINEERING;
-      case safe_browsing::SB_THREAT_TYPE_URL_MALWARE:
-      case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE:
-        return security_state::MALICIOUS_CONTENT_STATUS_MALWARE;
-      case safe_browsing::SB_THREAT_TYPE_URL_UNWANTED:
-        return security_state::MALICIOUS_CONTENT_STATUS_UNWANTED_SOFTWARE;
-      case safe_browsing::SB_THREAT_TYPE_SAVED_PASSWORD_REUSE:
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-        return security_state::MALICIOUS_CONTENT_STATUS_SAVED_PASSWORD_REUSE;
-#endif
-      case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_SYNC_PASSWORD_REUSE:
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-        if (safe_browsing::ChromePasswordProtectionService::
-                ShouldShowPasswordReusePageInfoBubble(
-                    web_contents(), PasswordType::PRIMARY_ACCOUNT_PASSWORD)) {
-          return security_state::
-              MALICIOUS_CONTENT_STATUS_SIGNED_IN_SYNC_PASSWORD_REUSE;
-        }
-        // If user has already changed Gaia password, returns the regular
-        // social engineering content status.
-        return security_state::MALICIOUS_CONTENT_STATUS_SOCIAL_ENGINEERING;
-#endif
-      case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_NON_SYNC_PASSWORD_REUSE:
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-        if (safe_browsing::ChromePasswordProtectionService::
-                ShouldShowPasswordReusePageInfoBubble(
-                    web_contents(), PasswordType::OTHER_GAIA_PASSWORD)) {
-          return security_state::
-              MALICIOUS_CONTENT_STATUS_SIGNED_IN_NON_SYNC_PASSWORD_REUSE;
-        }
-        // If user has already changed Gaia password, returns the regular
-        // social engineering content status.
-        return security_state::MALICIOUS_CONTENT_STATUS_SOCIAL_ENGINEERING;
-#endif
-      case safe_browsing::SB_THREAT_TYPE_ENTERPRISE_PASSWORD_REUSE:
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-        if (safe_browsing::ChromePasswordProtectionService::
-                ShouldShowPasswordReusePageInfoBubble(
-                    web_contents(), PasswordType::ENTERPRISE_PASSWORD)) {
-          return security_state::
-              MALICIOUS_CONTENT_STATUS_ENTERPRISE_PASSWORD_REUSE;
-        }
-        // If user has already changed Gaia password, returns the regular
-        // social engineering content status.
-        return security_state::MALICIOUS_CONTENT_STATUS_SOCIAL_ENGINEERING;
-#endif
-      case safe_browsing::SB_THREAT_TYPE_BILLING:
-        return security_state::MALICIOUS_CONTENT_STATUS_BILLING;
-      case safe_browsing::
-          DEPRECATED_SB_THREAT_TYPE_URL_PASSWORD_PROTECTION_PHISHING:
-      case safe_browsing::SB_THREAT_TYPE_URL_BINARY_MALWARE:
-      case safe_browsing::SB_THREAT_TYPE_EXTENSION:
-      case safe_browsing::SB_THREAT_TYPE_BLACKLISTED_RESOURCE:
-      case safe_browsing::SB_THREAT_TYPE_API_ABUSE:
-      case safe_browsing::SB_THREAT_TYPE_SUBRESOURCE_FILTER:
-      case safe_browsing::SB_THREAT_TYPE_CSD_WHITELIST:
-      case safe_browsing::SB_THREAT_TYPE_AD_SAMPLE:
-      case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_POPUP:
-      case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_REDIRECT:
-      case safe_browsing::SB_THREAT_TYPE_SUSPICIOUS_SITE:
-      case safe_browsing::SB_THREAT_TYPE_APK_DOWNLOAD:
-      case safe_browsing::SB_THREAT_TYPE_HIGH_CONFIDENCE_ALLOWLIST:
-        // These threat types are not currently associated with
-        // interstitials, and thus resources with these threat types are
-        // not ever whitelisted or pending whitelisting.
-        NOTREACHED();
-        break;
-    }
-  }
   return security_state::MALICIOUS_CONTENT_STATUS_NONE;
 }
 
diff --git a/chrome/browser/ssl/ssl_browsertest.cc b/chrome/browser/ssl/ssl_browsertest.cc
index a5578a39fec5..80e2a2f195c7 100644
--- a/chrome/browser/ssl/ssl_browsertest.cc
+++ b/chrome/browser/ssl/ssl_browsertest.cc
@@ -86,7 +86,6 @@
 #include "components/policy/core/common/policy_map.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/testing_pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/bad_clock_blocking_page.h"
 #include "components/security_interstitials/content/captive_portal_blocking_page.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
diff --git a/chrome/browser/ssl/ssl_error_controller_client.cc b/chrome/browser/ssl/ssl_error_controller_client.cc
index 8a054a06a9f8..673518130427 100644
--- a/chrome/browser/ssl/ssl_error_controller_client.cc
+++ b/chrome/browser/ssl/ssl_error_controller_client.cc
@@ -21,7 +21,6 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/url_constants.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/content_metrics_helper.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/security_interstitials/content/utils.h"
diff --git a/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc b/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
index 86fde3de38bf..73f93c586dd7 100644
--- a/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
+++ b/chrome/browser/subresource_filter/chrome_subresource_filter_client.cc
@@ -13,17 +13,14 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/infobars/infobar_service.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/subresource_filter/subresource_filter_content_settings_manager.h"
 #include "chrome/browser/subresource_filter/subresource_filter_profile_context.h"
 #include "chrome/browser/subresource_filter/subresource_filter_profile_context_factory.h"
 #include "components/content_settings/browser/tab_specific_content_settings.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings_types.h"
-#include "components/safe_browsing/core/db/database_manager.h"
 #include "components/subresource_filter/content/browser/content_subresource_filter_throttle_manager.h"
 #include "components/subresource_filter/content/browser/ruleset_service.h"
-#include "components/subresource_filter/content/browser/subresource_filter_safe_browsing_activation_throttle.h"
 #include "components/subresource_filter/core/browser/subresource_filter_features.h"
 #include "components/subresource_filter/core/common/activation_decision.h"
 #include "components/subresource_filter/core/common/activation_scope.h"
@@ -45,10 +42,7 @@ ChromeSubresourceFilterClient::ChromeSubresourceFilterClient(
           Profile::FromBrowserContext(web_contents->GetBrowserContext()));
   settings_manager_ = context->settings_manager();
 
-  subresource_filter::RulesetService* ruleset_service =
-      g_browser_process->subresource_filter_ruleset_service();
-  subresource_filter::VerifiedRulesetDealer::Handle* dealer =
-      ruleset_service ? ruleset_service->GetRulesetDealer() : nullptr;
+  subresource_filter::VerifiedRulesetDealer::Handle* dealer = nullptr;
   throttle_manager_ = std::make_unique<
       subresource_filter::ContentSubresourceFilterThrottleManager>(
       this, dealer, web_contents);
@@ -69,18 +63,6 @@ void ChromeSubresourceFilterClient::DidStartNavigation(
 void ChromeSubresourceFilterClient::MaybeAppendNavigationThrottles(
     content::NavigationHandle* navigation_handle,
     std::vector<std::unique_ptr<content::NavigationThrottle>>* throttles) {
-  safe_browsing::SafeBrowsingService* safe_browsing_service =
-      g_browser_process->safe_browsing_service();
-  if (navigation_handle->IsInMainFrame() && safe_browsing_service) {
-    throttles->push_back(
-        std::make_unique<subresource_filter::
-                             SubresourceFilterSafeBrowsingActivationThrottle>(
-            navigation_handle, this, content::GetIOThreadTaskRunner({}),
-            safe_browsing_service->database_manager()));
-  }
-
-  throttle_manager_->MaybeAppendNavigationThrottles(navigation_handle,
-                                                    throttles);
 }
 
 void ChromeSubresourceFilterClient::OnReloadRequested() {
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index a429fd975116..f1fe926d24a5 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -320,15 +320,9 @@ static_library("ui") {
     ]
   }
 
-  if (safe_browsing_mode == 1) {
-    sources += [
-      "webui/reset_password/reset_password_ui.cc",
-      "webui/reset_password/reset_password_ui.h",
-    ]
-  }
 
   # TODO(crbug/925153): Remove this circular dependency.
-  allow_circular_includes_from = [ "//chrome/browser/safe_browsing" ]
+  allow_circular_includes_from = []
   defines = []
   libs = []
 
@@ -344,7 +338,6 @@ static_library("ui") {
   # browser, then we can clean up these dependencies.
   public_deps = [
     "//components/dom_distiller/core",
-    "//components/safe_browsing:buildflags",
     "//components/sync",
     "//components/sync_user_events",
     "//components/translate/content/browser",
@@ -382,7 +375,6 @@ static_library("ui") {
     "//chrome/browser/resources/omnibox:resources",
     "//chrome/browser/resources/quota_internals:quota_internals_resources",
     "//chrome/browser/resources/usb_internals:resources",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/ui/webui/bluetooth_internals",
     "//chrome/browser/ui/webui/downloads:mojo_bindings",
     "//chrome/browser/ui/webui/interventions_internals:mojo_bindings",
@@ -478,17 +470,6 @@ static_library("ui") {
     "//components/rappor",
     "//components/renderer_context_menu",
     "//components/resources",
-    "//components/safe_browsing/content/password_protection",
-    "//components/safe_browsing/content/password_protection:password_protection_metrics_util",
-    "//components/safe_browsing/content/triggers:ad_popup_trigger",
-    "//components/safe_browsing/content/triggers:ad_redirect_trigger",
-    "//components/safe_browsing/content/web_ui",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:util",
     "//components/schema_org/common:improved_mojom",
     "//components/search",
     "//components/search_engines",
@@ -1384,10 +1365,6 @@ static_library("ui") {
       "webui/settings/recent_site_settings_helper.h",
       "webui/settings/reset_settings_handler.cc",
       "webui/settings/reset_settings_handler.h",
-      "webui/settings/safe_browsing_handler.cc",
-      "webui/settings/safe_browsing_handler.h",
-      "webui/settings/safety_check_handler.cc",
-      "webui/settings/safety_check_handler.h",
       "webui/settings/search_engines_handler.cc",
       "webui/settings/search_engines_handler.h",
       "webui/settings/settings_clear_browsing_data_handler.cc",
@@ -1461,7 +1438,6 @@ static_library("ui") {
       "//chrome/browser/profile_resetter:profile_reset_report_proto",
       "//chrome/browser/resource_coordinator:tab_metrics_event_proto",
       "//chrome/browser/resource_coordinator/tab_ranker",
-      "//chrome/browser/safe_browsing:advanced_protection",
       "//chrome/browser/ui/color:color_headers",
       "//chrome/browser/ui/color:mixers",
       "//chrome/browser/ui/webui/app_management:mojo_bindings",
@@ -1476,7 +1452,6 @@ static_library("ui") {
       "//components/network_session_configurator/common",
       "//components/page_load_metrics/browser",
       "//components/profile_metrics",
-      "//components/safety_check",
       "//components/search_provider_logos",
       "//components/services/app_service/public/cpp:app_update",
       "//components/services/app_service/public/mojom",
@@ -2920,10 +2895,6 @@ static_library("ui") {
       "views/apps/glass_app_window_frame_view_win.cc",
       "views/apps/glass_app_window_frame_view_win.h",
       "views/certificate_viewer_win.cc",
-      "views/chrome_cleaner_dialog_win.cc",
-      "views/chrome_cleaner_dialog_win.h",
-      "views/chrome_cleaner_reboot_dialog_win.cc",
-      "views/chrome_cleaner_reboot_dialog_win.h",
       "views/color_chooser_dialog.cc",
       "views/color_chooser_dialog.h",
       "views/color_chooser_win.cc",
@@ -2948,8 +2919,6 @@ static_library("ui") {
       "views/frame/windows_10_caption_button.cc",
       "views/frame/windows_10_caption_button.h",
       "views/network_profile_bubble_view.cc",
-      "views/settings_reset_prompt_dialog.cc",
-      "views/settings_reset_prompt_dialog.h",
       "views/status_icons/status_icon_win.cc",
       "views/status_icons/status_icon_win.h",
       "views/status_icons/status_tray_state_changer_win.cc",
@@ -2970,8 +2939,6 @@ static_library("ui") {
       "webui/conflicts/conflicts_handler.h",
       "webui/conflicts/conflicts_ui.cc",
       "webui/conflicts/conflicts_ui.h",
-      "webui/settings/chrome_cleanup_handler_win.cc",
-      "webui/settings/chrome_cleanup_handler_win.h",
       "webui/settings_utils_win.cc",
       "webui/version_handler_win.cc",
       "webui/version_handler_win.h",
@@ -2983,7 +2950,6 @@ static_library("ui") {
       "//ui/views/controls/webview",
     ]
     deps += [
-      "//chrome/browser/safe_browsing/chrome_cleaner:public",
       "//chrome/browser/ui/startup:buildflags",
       "//chrome/browser/win/conflicts:module_info",
       "//chrome/credential_provider/common:common_constants",
@@ -3292,7 +3258,6 @@ static_library("ui") {
       "views/device_chooser_content_view.h",
       "views/devtools_process_observer.cc",
       "views/devtools_process_observer.h",
-      "views/download/download_danger_prompt_views.cc",
       "views/download/download_in_progress_dialog_view.cc",
       "views/download/download_in_progress_dialog_view.h",
       "views/download/download_item_view.cc",
@@ -3685,14 +3650,6 @@ static_library("ui") {
       "views/relaunch_notification/relaunch_required_timer_internal.h",
       "views/sad_tab_view.cc",
       "views/sad_tab_view.h",
-      "views/safe_browsing/deep_scanning_failure_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_failure_modal_dialog.h",
-      "views/safe_browsing/deep_scanning_modal_dialog.cc",
-      "views/safe_browsing/deep_scanning_modal_dialog.h",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.cc",
-      "views/safe_browsing/password_reuse_modal_warning_dialog.h",
-      "views/safe_browsing/prompt_for_scanning_modal_dialog.cc",
-      "views/safe_browsing/prompt_for_scanning_modal_dialog.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.cc",
       "views/send_tab_to_self/send_tab_to_self_bubble_device_button.h",
       "views/send_tab_to_self/send_tab_to_self_bubble_view_impl.cc",
@@ -4282,15 +4239,6 @@ static_library("ui") {
     }
   }
 
-  if (safe_browsing_mode == 1) {
-    deps += [
-      "//chrome/browser/ui/webui/reset_password:mojo_bindings",
-      "//chrome/common/safe_browsing:proto",
-      "//components/safe_browsing/content/password_protection:password_protection_metrics_util",
-      "//components/safe_browsing/core:csd_proto",
-    ]
-  }
-
   if (use_dbus) {
     deps += [ "//dbus" ]
   }
diff --git a/chrome/browser/ui/browser.cc b/chrome/browser/ui/browser.cc
index 1db4e6376e52..95ec9c99af4d 100644
--- a/chrome/browser/ui/browser.cc
+++ b/chrome/browser/ui/browser.cc
@@ -177,7 +177,6 @@
 #include "components/paint_preview/buildflags/buildflags.h"
 #include "components/permissions/permission_request_manager.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/content/triggers/ad_redirect_trigger.h"
 #include "components/search/search.h"
 #include "components/security_state/content/content_utils.h"
 #include "components/security_state/core/security_state.h"
@@ -1463,10 +1462,6 @@ void Browser::OnDidBlockNavigation(
       framebust_helper->AddBlockedUrl(blocked_url, base::BindOnce(on_click));
     }
   }
-  if (auto* trigger =
-          safe_browsing::AdRedirectTrigger::FromWebContents(web_contents)) {
-    trigger->OnDidBlockNavigation(initiator_url);
-  }
 }
 
 content::PictureInPictureResult Browser::EnterPictureInPicture(
diff --git a/chrome/browser/ui/browser_dialogs.h b/chrome/browser/ui/browser_dialogs.h
index a6fc6d6eecbc..41484e6f4b45 100644
--- a/chrome/browser/ui/browser_dialogs.h
+++ b/chrome/browser/ui/browser_dialogs.h
@@ -53,9 +53,6 @@ enum class PermissionAction;
 }
 
 namespace safe_browsing {
-class ChromeCleanerController;
-class ChromeCleanerDialogController;
-class ChromeCleanerRebootDialogController;
 class SettingsResetPromptController;
 }  // namespace safe_browsing
 
@@ -298,21 +295,6 @@ void ShowSettingsResetPrompt(
     Browser* browser,
     safe_browsing::SettingsResetPromptController* controller);
 
-// Shows the Chrome Cleanup dialog asking the user if they want to clean their
-// system from unwanted software. This is called when unwanted software has been
-// detected on the system.
-void ShowChromeCleanerPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerDialogController* dialog_controller,
-    safe_browsing::ChromeCleanerController* cleaner_controller);
-
-// Shows the Chrome Cleanup reboot dialog asking the user if they want to
-// restart their computer once a cleanup has finished. This is called when the
-// Chrome Cleanup ends in a reboot required state.
-void ShowChromeCleanerRebootPrompt(
-    Browser* browser,
-    safe_browsing::ChromeCleanerRebootDialogController* dialog_controller);
-
 #endif  // OS_WIN
 
 // Displays a dialog to notify the user that the extension installation is
diff --git a/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc b/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
index e31679eebc54..155a5d1d4f48 100644
--- a/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
+++ b/chrome/browser/ui/tab_contents/chrome_web_contents_view_handle_drop.cc
@@ -12,104 +12,16 @@
 #include "base/task/thread_pool.h"
 #include "base/task_runner_util.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_dialog_delegate.h"
-#include "chrome/browser/safe_browsing/cloud_content_scanning/deep_scanning_utils.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_contents_view_delegate.h"
 #include "content/public/common/drop_data.h"
 
 namespace {
 
-void DeepScanCompletionCallback(
-    content::WebContentsViewDelegate::DropCompletionCallback callback,
-    const safe_browsing::DeepScanningDialogDelegate::Data& data,
-    const safe_browsing::DeepScanningDialogDelegate::Result& result) {
-  // If any result is negative, block the drop.
-  const auto all_true_fn = [](const auto& vec) {
-    return std::all_of(vec.cbegin(), vec.cend(), [](bool b) { return b; });
-  };
-  bool all_true =
-      all_true_fn(result.text_results) && all_true_fn(result.paths_results);
-
-  std::move(callback).Run(
-      all_true
-          ? content::WebContentsViewDelegate::DropCompletionResult::kContinue
-          : content::WebContentsViewDelegate::DropCompletionResult::kAbort);
-}
-
-safe_browsing::DeepScanningDialogDelegate::Data GetPathsToScan(
-    content::WebContents* web_contents,
-    const content::DropData& drop_data,
-    safe_browsing::DeepScanningDialogDelegate::Data data) {
-  for (const auto& file : drop_data.filenames) {
-    base::File::Info info;
-
-    // Ignore the path if it's a symbolic link.
-    if (!base::GetFileInfo(file.path, &info) || info.is_symbolic_link)
-      continue;
-
-    // If the file is a directory, recursively add the files it holds to |data|.
-    if (info.is_directory) {
-      base::FileEnumerator file_enumerator(file.path, /*recursive=*/true,
-                                           base::FileEnumerator::FILES);
-      for (base::FilePath sub_path = file_enumerator.Next(); !sub_path.empty();
-           sub_path = file_enumerator.Next()) {
-        data.paths.push_back(sub_path);
-      }
-    } else {
-      data.paths.push_back(file.path);
-    }
-  }
-
-  return data;
-}
-
-void ScanData(content::WebContents* web_contents,
-              content::WebContentsViewDelegate::DropCompletionCallback callback,
-              safe_browsing::DeepScanningDialogDelegate::Data data) {
-  safe_browsing::DeepScanningDialogDelegate::ShowForWebContents(
-      web_contents, std::move(data),
-      base::BindOnce(&DeepScanCompletionCallback, std::move(callback)),
-      safe_browsing::DeepScanAccessPoint::DRAG_AND_DROP);
-}
-
 }  // namespace
 
 void HandleOnPerformDrop(
     content::WebContents* web_contents,
     const content::DropData& drop_data,
     content::WebContentsViewDelegate::DropCompletionCallback callback) {
-  safe_browsing::DeepScanningDialogDelegate::Data data;
-  Profile* profile =
-      Profile::FromBrowserContext(web_contents->GetBrowserContext());
-  auto connector =
-      drop_data.filenames.empty()
-          ? enterprise_connectors::AnalysisConnector::BULK_DATA_ENTRY
-          : enterprise_connectors::AnalysisConnector::FILE_ATTACHED;
-  if (!safe_browsing::DeepScanningDialogDelegate::IsEnabled(
-          profile, web_contents->GetLastCommittedURL(), &data, connector)) {
-    std::move(callback).Run(
-        content::WebContentsViewDelegate::DropCompletionResult::kContinue);
-    return;
-  }
-
-  // Collect the data that needs to be scanned.
-  if (!drop_data.url_title.empty())
-    data.text.push_back(drop_data.url_title);
-  if (drop_data.text)
-    data.text.push_back(*drop_data.text);
-  if (drop_data.html)
-    data.text.push_back(*drop_data.html);
-  if (!drop_data.file_contents.empty())
-    data.text.push_back(base::UTF8ToUTF16(drop_data.file_contents));
-
-  if (drop_data.filenames.empty()) {
-    ScanData(web_contents, std::move(callback), std::move(data));
-  } else {
-    base::ThreadPool::PostTaskAndReplyWithResult(
-        FROM_HERE, {base::TaskPriority::USER_VISIBLE, base::MayBlock()},
-        base::BindOnce(&GetPathsToScan, web_contents, std::move(drop_data),
-                       std::move(data)),
-        base::BindOnce(&ScanData, web_contents, std::move(callback)));
-  }
 }
diff --git a/chrome/browser/ui/tab_helpers.cc b/chrome/browser/ui/tab_helpers.cc
index 925ad1238783..acd2c4c2c2a3 100644
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -57,8 +57,6 @@
 #include "chrome/browser/profiles/profile_key.h"
 #include "chrome/browser/reputation/reputation_web_contents_observer.h"
 #include "chrome/browser/resource_coordinator/tab_helper.h"
-#include "chrome/browser/safe_browsing/safe_browsing_navigation_observer.h"
-#include "chrome/browser/safe_browsing/trigger_creator.h"
 #include "chrome/browser/sessions/session_tab_helper_factory.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/connection_help_tab_helper.h"
@@ -235,10 +233,6 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
   ChromePasswordManagerClient::CreateForWebContentsWithAutofillClient(
       web_contents,
       autofill::ChromeAutofillClient::FromWebContents(web_contents));
-  if (base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter)) {
-    ChromeSubresourceFilterClient::CreateForWebContents(web_contents);
-  }
   ChromeTranslateClient::CreateForWebContents(web_contents);
   PrefService* local_state = g_browser_process->local_state();
   client_hints::ClientHints::CreateForWebContents(
@@ -297,10 +291,6 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
   resource_coordinator::ResourceCoordinatorTabHelper::CreateForWebContents(
       web_contents);
   ResourceLoadingHintsWebContentsObserver::CreateForWebContents(web_contents);
-  safe_browsing::SafeBrowsingNavigationObserver::MaybeCreateForWebContents(
-      web_contents);
-  safe_browsing::TriggerCreator::MaybeCreateTriggersForWebContents(
-      profile, web_contents);
   ReputationWebContentsObserver::CreateForWebContents(web_contents);
   SearchEngineTabHelper::CreateForWebContents(web_contents);
   SecurityStateTabHelper::CreateForWebContents(web_contents);
@@ -363,7 +353,6 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
   pdf::PDFWebContentsHelper::CreateForWebContentsWithClient(
       web_contents, std::make_unique<ChromePDFWebContentsHelperClient>());
   SadTabHelper::CreateForWebContents(web_contents);
-  safe_browsing::SafeBrowsingTabObserver::CreateForWebContents(web_contents);
   SearchTabHelper::CreateForWebContents(web_contents);
   if (base::FeatureList::IsEnabled(
           switches::kSyncSupportTrustedVaultPassphrase)) {
diff --git a/chrome/browser/ui/views/download/download_danger_prompt_views.cc b/chrome/browser/ui/views/download/download_danger_prompt_views.cc
index 4ece90d33c39..f5b4906d1524 100644
--- a/chrome/browser/ui/views/download/download_danger_prompt_views.cc
+++ b/chrome/browser/ui/views/download/download_danger_prompt_views.cc
@@ -205,17 +205,18 @@ base::string16 DownloadDangerPromptViews::GetMessageBody() const {
             download_->GetFileNameToReportUser().LossyDisplayName());
       }
       case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
         if (safe_browsing::AdvancedProtectionStatusManagerFactory::
                 GetForProfile(profile_)
                     ->IsUnderAdvancedProtection()) {
           return l10n_util::GetStringFUTF16(
               IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION,
               download_->GetFileNameToReportUser().LossyDisplayName());
-        } else {
+        } else
+#endif
           return l10n_util::GetStringFUTF16(
               IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
               download_->GetFileNameToReportUser().LossyDisplayName());
-        }
       }
       case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED: {
         return l10n_util::GetStringFUTF16(
diff --git a/chrome/browser/ui/views/download/download_item_view.cc b/chrome/browser/ui/views/download/download_item_view.cc
index 80c1490a2f54..10a513de428c 100644
--- a/chrome/browser/ui/views/download/download_item_view.cc
+++ b/chrome/browser/ui/views/download/download_item_view.cc
@@ -38,27 +38,18 @@
 #include "chrome/browser/enterprise/connectors/connectors_manager.h"
 #include "chrome/browser/icon_loader.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
-#include "chrome/browser/safe_browsing/download_protection/download_protection_service.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/themes/theme_properties.h"
 #include "chrome/browser/ui/tab_modal_confirm_dialog.h"
 #include "chrome/browser/ui/views/chrome_typography.h"
 #include "chrome/browser/ui/views/download/download_shelf_context_menu_view.h"
 #include "chrome/browser/ui/views/download/download_shelf_view.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
-#include "chrome/browser/ui/views/safe_browsing/deep_scanning_modal_dialog.h"
-#include "chrome/browser/ui/views/safe_browsing/prompt_for_scanning_modal_dialog.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
-#include "components/safe_browsing/core/features.h"
 #include "components/url_formatter/elide_url.h"
 #include "components/vector_icons/vector_icons.h"
 #include "content/public/browser/download_item_utils.h"
@@ -207,10 +198,6 @@ class TransparentButton : public views::Button {
 };
 
 int GetFilenameStyle(const views::StyledLabel& label) {
-#if !defined(OS_LINUX)
-  if (base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings))
-    return STYLE_EMPHASIZED;
-#endif
   return label.GetDefaultTextStyle();
 }
 
@@ -276,10 +263,6 @@ DownloadItemView::DownloadItemView(DownloadUIModel::DownloadUIModelPtr download,
   open_button_ = AddChildView(std::move(open_button));
 
   int file_name_style = views::style::STYLE_PRIMARY;
-#if !defined(OS_LINUX)
-  if (base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings))
-    file_name_style = STYLE_EMPHASIZED;
-#endif
   auto file_name_label = std::make_unique<views::Label>(
       ElidedFilename(), CONTEXT_DOWNLOAD_SHELF, file_name_style);
   file_name_label->SetHorizontalAlignment(gfx::ALIGN_LEFT);
@@ -479,24 +462,12 @@ void DownloadItemView::ButtonPressed(views::Button* sender,
     if (mode_ == Mode::kDeepScanning) {
       content::WebContents* current_web_contents =
           shelf_->browser()->tab_strip_model()->GetActiveWebContents();
-      open_now_modal_dialog_ = TabModalConfirmDialog::Create(
-          std::make_unique<safe_browsing::DeepScanningModalDialog>(
-              current_web_contents,
-              base::BindOnce(&DownloadItemView::OpenDownloadDuringAsyncScanning,
-                             weak_ptr_factory_.GetWeakPtr())),
-          current_web_contents);
       return;
     }
     if (model_->GetDangerType() ==
         download::DOWNLOAD_DANGER_TYPE_PROMPT_FOR_SCANNING) {
       content::WebContents* current_web_contents =
           shelf_->browser()->tab_strip_model()->GetActiveWebContents();
-      safe_browsing::PromptForScanningModalDialog::ShowForWebContents(
-          current_web_contents, ElidedFilename(),
-          base::BindOnce(&DownloadItemView::ConfirmDeepScanning,
-                         weak_ptr_factory_.GetWeakPtr()),
-          base::BindOnce(&DownloadItemView::BypassDeepScanning,
-                         weak_ptr_factory_.GetWeakPtr()));
       return;
     }
     if (has_warning_label(mode_))
@@ -728,8 +699,7 @@ int DownloadItemView::GetYForFilenameText() const {
 }
 
 void DownloadItemView::DrawIcon(gfx::Canvas* canvas) {
-  bool use_new_warnings =
-      base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings);
+  bool use_new_warnings = false;
   bool show_warning_icon = mode_ != Mode::kNormal;
   if (show_warning_icon && !use_new_warnings) {
     int icon_x =
@@ -1200,45 +1170,12 @@ void DownloadItemView::ClearDeepScanningDialog() {
 }
 
 void DownloadItemView::ShowDeepScanningDialog() {
-  DCHECK_EQ(mode_, Mode::kNormal);
-  SetMode(Mode::kDeepScanning);
-
-  const int id = (model_->download() &&
-                  safe_browsing::DeepScanningRequest::ShouldUploadBinary(
-                      model_->download()))
-                     ? IDS_PROMPT_DEEP_SCANNING_DOWNLOAD
-                     : IDS_PROMPT_DEEP_SCANNING_APP_DOWNLOAD;
-  const base::string16 filename = ElidedFilename();
-  size_t filename_offset;
-  auto deep_scanning_label = std::make_unique<views::StyledLabel>(
-      l10n_util::GetStringFUTF16(id, filename, &filename_offset),
-      /*listener=*/nullptr);
-  deep_scanning_label->SetTextContext(CONTEXT_DOWNLOAD_SHELF);
-  deep_scanning_label->SetHorizontalAlignment(gfx::ALIGN_LEFT);
-  deep_scanning_label->SetAutoColorReadabilityEnabled(false);
-  deep_scanning_label->set_can_process_events_within_subtree(false);
-  deep_scanning_label_ = AddChildView(std::move(deep_scanning_label));
-  StyleFilename(*deep_scanning_label_, filename_offset, filename.length());
-  deep_scanning_label_->SizeToFit(GetLabelWidth(*deep_scanning_label_));
-
-  if (enterprise_connectors::ConnectorsManager::GetInstance()
-          ->DelayUntilVerdict(
-              enterprise_connectors::AnalysisConnector::FILE_DOWNLOADED)) {
-    open_button_->SetEnabled(false);
-  } else {
-    auto open_now_button = views::MdTextButton::Create(
-        this, l10n_util::GetStringUTF16(IDS_OPEN_DOWNLOAD_NOW));
-    open_now_button_ = AddChildView(std::move(open_now_button));
-    open_button_->SetEnabled(true);
-  }
-
-  file_name_label_->SetVisible(false);
-  status_label_->SetVisible(false);
 }
 
 gfx::ImageSkia DownloadItemView::GetWarningIcon() {
   switch (model_->GetDangerType()) {
     case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT:
+#if BUILDFLAG(FULL_SAFE_BROWSING)
       if (safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
               model()->profile())
               ->IsUnderAdvancedProtection()) {
@@ -1247,6 +1184,7 @@ gfx::ImageSkia DownloadItemView::GetWarningIcon() {
             GetNativeTheme()->GetSystemColor(
                 ui::NativeTheme::kColorId_AlertSeverityMedium));
       }
+#endif
       FALLTHROUGH;
 
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
@@ -1553,7 +1491,6 @@ base::string16 DownloadItemView::ElidedFilename() {
 }
 
 void DownloadItemView::OpenDownloadDuringAsyncScanning() {
-  model_->CompleteSafeBrowsingScan();
   model_->SetOpenWhenComplete(true);
 }
 
@@ -1561,18 +1498,14 @@ void DownloadItemView::OpenDownloadDuringAsyncScanning() {
 int DownloadItemView::GetWarningIconSize() {
   // TODO(drubery): Replace this method with a constexpr variable when the new
   // UX is fully launched.
-  return base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings)
-             ? 20
-             : 24;
+  return 24;
 }
 
 // static
 int DownloadItemView::GetErrorIconSize() {
   // TODO(drubery): Replace this method with a constexpr variable when the new
   // UX is fully launched.
-  return base::FeatureList::IsEnabled(safe_browsing::kUseNewDownloadWarnings)
-             ? 20
-             : 27;
+  return 27;
 }
 
 void DownloadItemView::ConfirmDeepScanning() {
diff --git a/chrome/browser/ui/views/download/download_item_view.h b/chrome/browser/ui/views/download/download_item_view.h
index 0bfc2e08d39b..8ae474a994aa 100644
--- a/chrome/browser/ui/views/download/download_item_view.h
+++ b/chrome/browser/ui/views/download/download_item_view.h
@@ -382,9 +382,6 @@ class DownloadItemView : public views::View,
   // Deep scanning open now button.
   views::MdTextButton* open_now_button_ = nullptr;
 
-  // Deep scanning modal dialog confirming choice to "open now".
-  TabModalConfirmDialog* open_now_modal_dialog_;
-
   // Icon for the download.
   gfx::ImageSkia icon_;
 
diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index 32f6c89fa01a..650f3bf881b6 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -147,7 +147,6 @@
 #include "components/omnibox/browser/omnibox_view.h"
 #include "components/permissions/permission_request_manager.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/content/password_protection/metrics_util.h"
 #include "components/sessions/core/tab_restore_service.h"
 #include "components/translate/core/browser/language_state.h"
 #include "components/version_info/channel.h"
diff --git a/chrome/browser/ui/views/frame/browser_window_factory.cc b/chrome/browser/ui/views/frame/browser_window_factory.cc
index 9089e38b6a1a..6e541d135d52 100644
--- a/chrome/browser/ui/views/frame/browser_window_factory.cc
+++ b/chrome/browser/ui/views/frame/browser_window_factory.cc
@@ -11,7 +11,6 @@
 #endif
 #include "chrome/browser/ui/views/frame/native_browser_frame_factory.h"
 #include "chrome/grit/chromium_strings.h"
-#include "components/safe_browsing/content/password_protection/metrics_util.h"
 #if defined(USE_AURA)
 #include "ui/aura/client/aura_constants.h"
 #include "ui/aura/window.h"
diff --git a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
index 9f1a7684171e..4af54291c911 100644
--- a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
+++ b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.cc
@@ -121,7 +121,6 @@ PasswordReuseModalWarningDialog::PasswordReuseModalWarningDialog(
     OnWarningDone done_callback)
     : content::WebContentsObserver(web_contents),
       done_callback_(std::move(done_callback)),
-      service_(service),
       url_(web_contents->GetLastCommittedURL()),
       password_type_(password_type) {
   bool show_check_passwords = false;
@@ -162,34 +161,13 @@ PasswordReuseModalWarningDialog::PasswordReuseModalWarningDialog(
   SetCancelCallback(make_done_callback(WarningAction::IGNORE_WARNING));
   SetCloseCallback(make_done_callback(WarningAction::CLOSE));
 
-  // |service| maybe NULL in tests.
-  if (service_)
-    service_->AddObserver(this);
-
-  std::vector<size_t> placeholder_offsets;
-
-  if (password_type.account_type() ==
-      ReusedPasswordAccountType::SAVED_PASSWORD) {
-    const base::string16 message_body =
-        service_->GetWarningDetailText(password_type, &placeholder_offsets);
-
-    CreateSavedPasswordReuseModalWarningDialog(
-        message_body, service_->GetPlaceholdersForSavedPasswordWarningText(),
-        placeholder_offsets);
-  } else {
-    views::Label* message_body_label = CreateMessageBodyLabel(
-        service_
-            ? service_->GetWarningDetailText(password_type,
-                                             &placeholder_offsets)
-            : l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
-    CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
-  }
+  views::Label* message_body_label = CreateMessageBodyLabel(
+      l10n_util::GetStringUTF16(IDS_PAGE_INFO_CHANGE_PASSWORD_DETAILS));
+  CreateGaiaPasswordReuseModalWarningDialog(message_body_label);
   modal_construction_start_time_ = base::TimeTicks::Now();
 }
 
 PasswordReuseModalWarningDialog::~PasswordReuseModalWarningDialog() {
-  if (service_)
-    service_->RemoveObserver(this);
   LogModalWarningDialogLifetime(modal_construction_start_time_);
 }
 
diff --git a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
index 6d30a84c46d8..cd448f43ca17 100644
--- a/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
+++ b/chrome/browser/ui/views/safe_browsing/password_reuse_modal_warning_dialog.h
@@ -59,7 +59,6 @@ class PasswordReuseModalWarningDialog
 
  private:
   OnWarningDone done_callback_;
-  ChromePasswordProtectionService* service_;
   const GURL url_;
   const ReusedPasswordAccountType password_type_;
 
diff --git a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
index 60709ee12ab0..8fcda2c7b1c2 100644
--- a/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
+++ b/chrome/browser/ui/webui/chrome_web_ui_controller_factory.cc
@@ -87,8 +87,6 @@
 #include "components/nacl/common/buildflags.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/web_ui/constants.h"
 #include "components/security_interstitials/content/connection_help_ui.h"
 #include "components/security_interstitials/content/known_interception_disclosure_ui.h"
 #include "components/security_interstitials/content/urls.h"
@@ -478,8 +476,6 @@ WebUIFactoryFunction GetWebUIFactoryFunction(WebUI* web_ui,
     return &NewWebUI<PredictorsUI>;
   if (url.host_piece() == chrome::kChromeUIQuotaInternalsHost)
     return &NewWebUI<QuotaInternalsUI>;
-  if (url.host_piece() == safe_browsing::kChromeUISafeBrowsingHost)
-    return &NewWebUI<safe_browsing::SafeBrowsingUI>;
   if (url.host_piece() == chrome::kChromeUISignInInternalsHost)
     return &NewWebUI<SignInInternalsUI>;
   if (url.host_piece() == chrome::kChromeUISuggestionsHost)
diff --git a/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc b/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
index f3c630fd91c6..070b509b23ce 100644
--- a/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_dom_handler.cc
@@ -23,7 +23,6 @@
 #include "base/threading/thread.h"
 #include "base/values.h"
 #include "chrome/browser/browser_process.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/browser/download/download_history.h"
 #include "chrome/browser/download/download_item_model.h"
 #include "chrome/browser/download/download_prefs.h"
@@ -38,7 +37,6 @@
 #include "chrome/common/url_constants.h"
 #include "components/download/public/common/download_item.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/render_process_host.h"
@@ -168,9 +166,6 @@ void DownloadsDOMHandler::SaveDangerousRequiringGesture(const std::string& id) {
   }
 
   CountDownloadsDOMEvents(DOWNLOADS_DOM_EVENT_SAVE_DANGEROUS);
-  download::DownloadItem* file = GetDownloadByStringId(id);
-  if (file)
-    ShowDangerPrompt(file);
 }
 
 void DownloadsDOMHandler::DiscardDangerous(const std::string& id) {
@@ -317,12 +312,6 @@ void DownloadsDOMHandler::RemoveDownloads(const DownloadVector& to_remove) {
   IdSet ids;
 
   for (auto* download : to_remove) {
-    if (download->IsDangerous() || download->IsMixedContent()) {
-      // Don't allow users to revive dangerous downloads; just nuke 'em.
-      download->Remove();
-      continue;
-    }
-
     DownloadItemModel item_model(download);
     if (!item_model.ShouldShowInShelf() ||
         download->GetState() == download::DownloadItem::IN_PROGRESS) {
@@ -368,7 +357,6 @@ void DownloadsDOMHandler::OpenDuringScanningRequiringGesture(
   if (download) {
     DownloadItemModel model(download);
     model.SetOpenWhenComplete(true);
-    model.CompleteSafeBrowsingScan();
   }
 }
 
@@ -396,44 +384,6 @@ void DownloadsDOMHandler::FinalizeRemovals() {
   }
 }
 
-void DownloadsDOMHandler::ShowDangerPrompt(
-    download::DownloadItem* dangerous_item) {
-  DownloadDangerPrompt* danger_prompt = DownloadDangerPrompt::Create(
-      dangerous_item, GetWebUIWebContents(), false,
-      base::Bind(&DownloadsDOMHandler::DangerPromptDone,
-                 weak_ptr_factory_.GetWeakPtr(), dangerous_item->GetId()));
-  // danger_prompt will delete itself.
-  DCHECK(danger_prompt);
-}
-
-void DownloadsDOMHandler::DangerPromptDone(
-    int download_id,
-    DownloadDangerPrompt::Action action) {
-  if (action != DownloadDangerPrompt::ACCEPT)
-    return;
-  download::DownloadItem* item = NULL;
-  if (GetMainNotifierManager())
-    item = GetMainNotifierManager()->GetDownload(download_id);
-  if (!item && GetOriginalNotifierManager())
-    item = GetOriginalNotifierManager()->GetDownload(download_id);
-  if (!item || item->IsDone())
-    return;
-  CountDownloadsDOMEvents(DOWNLOADS_DOM_EVENT_SAVE_DANGEROUS);
-
-  // If a download is mixed content, validate that first. Is most cases, mixed
-  // content warnings will occur first, but in the worst case scenario, we show
-  // a dangerous warning twice. That's better than showing a mixed content
-  // warning, then dismissing the dangerous download warning. Since mixed
-  // content downloads triggering the UI are temporary and rare to begin with,
-  // this should very rarely occur.
-  if (item->IsMixedContent()) {
-    item->ValidateMixedContentDownload();
-    return;
-  }
-
-  item->ValidateDangerousDownload();
-}
-
 bool DownloadsDOMHandler::IsDeletingHistoryAllowed() {
   content::DownloadManager* manager = GetMainNotifierManager();
   return manager &&
diff --git a/chrome/browser/ui/webui/downloads/downloads_dom_handler.h b/chrome/browser/ui/webui/downloads/downloads_dom_handler.h
index b91eca13de4d..815e06b152b3 100644
--- a/chrome/browser/ui/webui/downloads/downloads_dom_handler.h
+++ b/chrome/browser/ui/webui/downloads/downloads_dom_handler.h
@@ -12,7 +12,6 @@
 
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/browser/ui/webui/downloads/downloads.mojom-forward.h"
 #include "chrome/browser/ui/webui/downloads/downloads_list_tracker.h"
 #include "content/public/browser/web_contents_observer.h"
@@ -89,18 +88,6 @@ class DownloadsDOMHandler : public content::WebContentsObserver,
   // null-checking |original_notifier_|.
   content::DownloadManager* GetOriginalNotifierManager() const;
 
-  // Displays a native prompt asking the user for confirmation after accepting
-  // the dangerous download specified by |dangerous|. The function returns
-  // immediately, and will invoke DangerPromptAccepted() asynchronously if the
-  // user accepts the dangerous download. The native prompt will observe
-  // |dangerous| until either the dialog is dismissed or |dangerous| is no
-  // longer an in-progress dangerous download.
-  virtual void ShowDangerPrompt(download::DownloadItem* dangerous);
-
-  // Conveys danger acceptance from the DownloadDangerPrompt to the
-  // DownloadItem.
-  void DangerPromptDone(int download_id, DownloadDangerPrompt::Action action);
-
   // Returns true if the records of any downloaded items are allowed (and able)
   // to be deleted.
   bool IsDeletingHistoryAllowed();
diff --git a/chrome/browser/ui/webui/downloads/downloads_ui.cc b/chrome/browser/ui/webui/downloads/downloads_ui.cc
index 0f976c11afb4..f7c9d4de8152 100644
--- a/chrome/browser/ui/webui/downloads/downloads_ui.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_ui.cc
@@ -15,8 +15,6 @@
 #include "base/values.h"
 #include "chrome/browser/defaults.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/browser/ui/webui/downloads/downloads.mojom.h"
 #include "chrome/browser/ui/webui/downloads/downloads_dom_handler.h"
 #include "chrome/browser/ui/webui/managed_ui_handler.h"
@@ -33,6 +31,7 @@
 #include "chrome/grit/generated_resources.h"
 #include "chrome/grit/theme_resources.h"
 #include "components/prefs/pref_service.h"
+#include "components/safe_browsing/buildflags.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/url_data_source.h"
 #include "content/public/browser/web_contents.h"
@@ -72,9 +71,13 @@ content::WebUIDataSource* CreateDownloadsUIHTMLSource(Profile* profile) {
 #endif
 
   bool requests_ap_verdicts =
+#if BUILDFLAG(FULL_SAFE_BROWSING)
       safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
           profile)
           ->IsUnderAdvancedProtection();
+#else
+      false;
+#endif
   source->AddBoolean("requestsApVerdicts", requests_ap_verdicts);
 
   static constexpr webui::LocalizedString kStrings[] = {
@@ -132,11 +135,8 @@ content::WebUIDataSource* CreateDownloadsUIHTMLSource(Profile* profile) {
 
   source->AddLocalizedString("dangerDownloadDesc",
                              IDS_BLOCK_REASON_DANGEROUS_DOWNLOAD);
-  source->AddLocalizedString(
-      "dangerUncommonDesc",
-      requests_ap_verdicts
-          ? IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD_IN_ADVANCED_PROTECTION
-          : IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
+  source->AddLocalizedString("dangerUncommonDesc",
+                             IDS_BLOCK_REASON_UNCOMMON_DOWNLOAD);
   source->AddLocalizedString("dangerSettingsDesc",
                              IDS_BLOCK_REASON_UNWANTED_DOWNLOAD);
   source->AddLocalizedString("mixedContentDownloadDesc",
diff --git a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
index f0f6eca30f7d..4d1cde2ce1aa 100644
--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -16,10 +16,6 @@
 #include "chrome/browser/lookalikes/lookalike_url_blocking_page.h"
 #include "chrome/browser/lookalikes/lookalike_url_controller_client.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_blocking_page.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
-#include "chrome/browser/safe_browsing/test_safe_browsing_blocking_page_quiet.h"
-#include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/browser/ssl/chrome_security_blocking_page_factory.h"
 #include "chrome/browser/ssl/insecure_form/insecure_form_controller_client.h"
 #include "chrome/common/buildflags.h"
@@ -27,7 +23,6 @@
 #include "components/captive_portal/core/buildflags.h"
 #include "components/grit/dev_ui_components_resources.h"
 #include "components/lookalikes/core/lookalike_url_util.h"
-#include "components/safe_browsing/core/db/database_manager.h"
 #include "components/security_interstitials/content/bad_clock_blocking_page.h"
 #include "components/security_interstitials/content/blocked_interception_blocking_page.h"
 #include "components/security_interstitials/content/insecure_form_blocking_page.h"
@@ -66,8 +61,6 @@
 #include "chrome/browser/supervised_user/supervised_user_interstitial.h"
 #endif
 
-using security_interstitials::TestSafeBrowsingBlockingPageQuiet;
-
 namespace {
 
 // NSS requires that serial numbers be unique even for the same issuer;
@@ -287,113 +280,6 @@ CreateInsecureFormPage(content::WebContents* web_contents) {
                                                      request_url));
 }
 
-std::unique_ptr<safe_browsing::SafeBrowsingBlockingPage>
-CreateSafeBrowsingBlockingPage(content::WebContents* web_contents) {
-  safe_browsing::SBThreatType threat_type =
-      safe_browsing::SB_THREAT_TYPE_URL_MALWARE;
-  GURL request_url("http://example.com");
-  std::string url_param;
-  if (net::GetValueForKeyInQuery(web_contents->GetURL(), "url", &url_param)) {
-    if (GURL(url_param).is_valid()) {
-      request_url = GURL(url_param);
-    }
-  }
-  GURL main_frame_url(request_url);
-  // TODO(mattm): add flag to change main_frame_url or add dedicated flag to
-  // test subresource interstitials.
-  std::string type_param;
-  if (net::GetValueForKeyInQuery(web_contents->GetURL(), "type", &type_param)) {
-    if (type_param == "malware") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_MALWARE;
-    } else if (type_param == "phishing") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_PHISHING;
-    } else if (type_param == "unwanted") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_UNWANTED;
-    } else if (type_param == "clientside_malware") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE;
-    } else if (type_param == "clientside_phishing") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING;
-    } else if (type_param == "billing") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_BILLING;
-    }
-  }
-  safe_browsing::SafeBrowsingBlockingPage::UnsafeResource resource;
-  resource.url = request_url;
-  resource.is_subresource = request_url != main_frame_url;
-  resource.is_subframe = false;
-  resource.threat_type = threat_type;
-  resource.web_contents_getter = security_interstitials::GetWebContentsGetter(
-      web_contents->GetMainFrame()->GetProcess()->GetID(),
-      web_contents->GetMainFrame()->GetRoutingID());
-  resource.threat_source = g_browser_process->safe_browsing_service()
-                               ->database_manager()
-                               ->GetThreatSource();
-
-  // Normally safebrowsing interstitial types which block the main page load
-  // (SB_THREAT_TYPE_URL_MALWARE, SB_THREAT_TYPE_URL_PHISHING, and
-  // SB_THREAT_TYPE_URL_UNWANTED on main-frame loads) would expect there to be a
-  // pending navigation when the SafeBrowsingBlockingPage is created. This demo
-  // creates a SafeBrowsingBlockingPage but does not actually show a real
-  // interstitial. Instead it extracts the html and displays it manually, so the
-  // parts which depend on the NavigationEntry are not hit.
-  return base::WrapUnique<safe_browsing::SafeBrowsingBlockingPage>(
-      safe_browsing::SafeBrowsingBlockingPage::CreateBlockingPage(
-          g_browser_process->safe_browsing_service()->ui_manager().get(),
-          web_contents, main_frame_url, resource, true));
-}
-
-std::unique_ptr<TestSafeBrowsingBlockingPageQuiet>
-CreateSafeBrowsingQuietBlockingPage(content::WebContents* web_contents) {
-  safe_browsing::SBThreatType threat_type =
-      safe_browsing::SB_THREAT_TYPE_URL_MALWARE;
-  GURL request_url("http://example.com");
-  std::string url_param;
-  if (net::GetValueForKeyInQuery(web_contents->GetURL(), "url", &url_param)) {
-    if (GURL(url_param).is_valid())
-      request_url = GURL(url_param);
-  }
-  GURL main_frame_url(request_url);
-  std::string type_param;
-  bool is_giant_webview = false;
-  if (net::GetValueForKeyInQuery(web_contents->GetURL(), "type", &type_param)) {
-    if (type_param == "malware") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_MALWARE;
-    } else if (type_param == "phishing") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_PHISHING;
-    } else if (type_param == "unwanted") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_UNWANTED;
-    } else if (type_param == "billing") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_BILLING;
-    } else if (type_param == "giant") {
-      threat_type = safe_browsing::SB_THREAT_TYPE_URL_MALWARE;
-      is_giant_webview = true;
-    }
-  }
-  safe_browsing::SafeBrowsingBlockingPage::UnsafeResource resource;
-  resource.url = request_url;
-  resource.is_subresource = request_url != main_frame_url;
-  resource.is_subframe = false;
-  resource.threat_type = threat_type;
-  resource.web_contents_getter = security_interstitials::GetWebContentsGetter(
-      web_contents->GetMainFrame()->GetProcess()->GetID(),
-      web_contents->GetMainFrame()->GetRoutingID());
-  resource.threat_source = g_browser_process->safe_browsing_service()
-                               ->database_manager()
-                               ->GetThreatSource();
-
-  // Normally safebrowsing interstitial types which block the main page load
-  // (SB_THREAT_TYPE_URL_MALWARE, SB_THREAT_TYPE_URL_PHISHING, and
-  // SB_THREAT_TYPE_URL_UNWANTED on main-frame loads) would expect there to be a
-  // pending navigation when the SafeBrowsingBlockingPage is created. This demo
-  // creates a SafeBrowsingBlockingPage but does not actually show a real
-  // interstitial. Instead it extracts the html and displays it manually, so the
-  // parts which depend on the NavigationEntry are not hit.
-  return base::WrapUnique<TestSafeBrowsingBlockingPageQuiet>(
-      TestSafeBrowsingBlockingPageQuiet::CreateBlockingPage(
-          g_browser_process->safe_browsing_service()->ui_manager().get(),
-          web_contents, main_frame_url, resource, is_giant_webview));
-}
-
 #if BUILDFLAG(ENABLE_CAPTIVE_PORTAL_DETECTION)
 std::unique_ptr<CaptivePortalBlockingPage> CreateCaptivePortalBlockingPage(
     content::WebContents* web_contents) {
@@ -510,8 +396,6 @@ void InterstitialHTMLSource::StartDataRequest(
     interstitial_delegate = CreateBlockedInterceptionBlockingPage(web_contents);
   } else if (path_without_query == "/legacy-tls") {
     interstitial_delegate = CreateLegacyTLSBlockingPage(web_contents);
-  } else if (path_without_query == "/safebrowsing") {
-    interstitial_delegate = CreateSafeBrowsingBlockingPage(web_contents);
   } else if (path_without_query == "/clock") {
     interstitial_delegate = CreateBadClockBlockingPage(web_contents);
   } else if (path_without_query == "/lookalike") {
@@ -526,16 +410,12 @@ void InterstitialHTMLSource::StartDataRequest(
     interstitial_delegate = CreateInsecureFormPage(web_contents);
   }
 
-  if (path_without_query == "/quietsafebrowsing") {
-    std::unique_ptr<TestSafeBrowsingBlockingPageQuiet> blocking_page =
-        CreateSafeBrowsingQuietBlockingPage(web_contents);
-    html = blocking_page->GetHTML();
-    interstitial_delegate = std::move(blocking_page);
 #if BUILDFLAG(ENABLE_SUPERVISED_USERS)
-  } else if (path_without_query == "/supervised_user") {
+  if (path_without_query == "/supervised_user") {
     html = GetSupervisedUserInterstitialHTML(path);
+  } else
 #endif
-  } else if (interstitial_delegate.get()) {
+  if (interstitial_delegate.get()) {
     html = interstitial_delegate.get()->GetHTMLContents();
   } else {
     html = ui::ResourceBundle::GetSharedInstance().LoadDataResourceString(
diff --git a/chrome/browser/ui/webui/management_ui.cc b/chrome/browser/ui/webui/management_ui.cc
index 17da74ee3902..36da83bea83b 100644
--- a/chrome/browser/ui/webui/management_ui.cc
+++ b/chrome/browser/ui/webui/management_ui.cc
@@ -16,7 +16,6 @@
 #include "chrome/grit/browser_resources.h"
 #include "chrome/grit/generated_resources.h"
 #include "chrome/grit/theme_resources.h"
-#include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/strings/grit/components_strings.h"
 #include "extensions/buildflags/buildflags.h"
 #include "ui/base/l10n/l10n_util.h"
@@ -116,10 +115,6 @@ content::WebUIDataSource* CreateManagementUIHtmlSource(Profile* profile) {
 
   AddLocalizedStringsBulk(source, kLocalizedStrings);
 
-  source->AddString(kManagementExtensionReportSafeBrowsingWarnings,
-                    l10n_util::GetStringFUTF16(
-                        IDS_MANAGEMENT_EXTENSION_REPORT_SAFE_BROWSING_WARNINGS,
-                        base::UTF8ToUTF16(safe_browsing::kSafeBrowsingUrl)));
 #if defined(OS_CHROMEOS)
   source->AddString("managementDeviceLearnMoreUrl",
                     chrome::kLearnMoreEnterpriseURL);
diff --git a/chrome/browser/ui/webui/management_ui_handler.cc b/chrome/browser/ui/webui/management_ui_handler.cc
index f5aeff7fa6be..340f92bfe75f 100644
--- a/chrome/browser/ui/webui/management_ui_handler.cc
+++ b/chrome/browser/ui/webui/management_ui_handler.cc
@@ -27,7 +27,6 @@
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 #include "content/public/browser/storage_partition.h"
 #include "content/public/browser/web_contents.h"
@@ -706,46 +705,6 @@ base::Value ManagementUIHandler::GetThreatProtectionInfo(
   const auto& chrome_policies = policy_service->GetPolicies(
       policy::PolicyNamespace(policy::POLICY_DOMAIN_CHROME, std::string()));
 
-  auto* on_file_attached =
-      chrome_policies.GetValue(policy::key::kOnFileAttachedEnterpriseConnector);
-  if (on_file_attached && on_file_attached->is_list() &&
-      !on_file_attached->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnFileAttachedEvent);
-    value.SetStringKey("permission", kManagementOnFileAttachedVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_file_downloaded = chrome_policies.GetValue(
-      policy::key::kOnFileDownloadedEnterpriseConnector);
-  if (on_file_downloaded && on_file_downloaded->is_list() &&
-      !on_file_downloaded->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnFileDownloadedEvent);
-    value.SetStringKey("permission", kManagementOnFileDownloadedVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_bulk_data_entry = chrome_policies.GetValue(
-      policy::key::kOnBulkDataEntryEnterpriseConnector);
-  if (on_bulk_data_entry && on_bulk_data_entry->is_list() &&
-      !on_bulk_data_entry->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementOnBulkDataEntryEvent);
-    value.SetStringKey("permission", kManagementOnBulkDataEntryVisibleData);
-    info.Append(std::move(value));
-  }
-
-  auto* on_security_event = chrome_policies.GetValue(
-      policy::key::kOnSecurityEventEnterpriseConnector);
-  if (on_security_event && on_security_event->is_list() &&
-      !on_security_event->GetList().empty()) {
-    base::Value value(base::Value::Type::DICTIONARY);
-    value.SetStringKey("title", kManagementEnterpriseReportingEvent);
-    value.SetStringKey("permission", kManagementEnterpriseReportingVisibleData);
-    info.Append(std::move(value));
-  }
-
 #if defined(OS_CHROMEOS)
   std::string management_domain = GetDeviceDomain();
   if (management_domain.empty())
diff --git a/chrome/browser/ui/webui/reset_password/reset_password_ui.cc b/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
index abb08f07c5a3..d0d0462bbff6 100644
--- a/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
+++ b/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
@@ -16,7 +16,6 @@
 #include "chrome/grit/browser_resources.h"
 #include "components/safe_browsing/content/password_protection/metrics_util.h"
 #include "components/safe_browsing/content/password_protection/password_protection_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/url_formatter/url_formatter.h"
diff --git a/chrome/browser/ui/webui/settings/safe_browsing_handler.cc b/chrome/browser/ui/webui/settings/safe_browsing_handler.cc
index 7403e565a5a5..aa918f310068 100644
--- a/chrome/browser/ui/webui/settings/safe_browsing_handler.cc
+++ b/chrome/browser/ui/webui/settings/safe_browsing_handler.cc
@@ -6,7 +6,6 @@
 
 #include "components/prefs/pref_change_registrar.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 
 namespace settings {
@@ -50,10 +49,6 @@ void SafeBrowsingHandler::HandleGetSafeBrowsingRadioManagedState(
 
 void SafeBrowsingHandler::HandleValidateSafeBrowsingEnhanced(
     const base::ListValue* args) {
-  // TODO(crbug.com/1074499) Remove this logic when Enhanced protection is
-  // considered stable.
-  if (!base::FeatureList::IsEnabled(safe_browsing::kEnhancedProtection))
-    profile_->GetPrefs()->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
 }
 
 SafeBrowsingRadioManagedState
@@ -61,69 +56,7 @@ SafeBrowsingHandler::GetSafeBrowsingRadioManagedState(Profile* profile) {
   // Create a default managed state that is updated based on preferences.
   SafeBrowsingRadioManagedState managed_state;
 
-  // Computing the effective Safe Browsing managed state requires inspecting
-  // three different preferences. It is possible that these may be in
-  // temporarily conflicting managed states. The enabled preference is always
-  // taken as the canonical source of management.
-  const PrefService::Preference* enabled_pref =
-      profile->GetPrefs()->FindPreference(prefs::kSafeBrowsingEnabled);
-  const bool enabled_enforced = !enabled_pref->IsUserModifiable();
-  const bool enabled_recommended =
-      (enabled_pref && enabled_pref->GetRecommendedValue());
-  const bool enabled_recommended_on =
-      enabled_recommended && enabled_pref->GetRecommendedValue()->GetBool();
-  const auto enabled_policy_indicator =
-      site_settings::GetPolicyIndicatorFromPref(enabled_pref);
-
-  // The enhanced preference may have a recommended setting. This only takes
-  // effect if the enabled preference also has a recommended setting.
-  const PrefService::Preference* enhanced_pref =
-      profile->GetPrefs()->FindPreference(prefs::kSafeBrowsingEnhanced);
-  const bool enhanced_recommended_on =
-      enhanced_pref->GetRecommendedValue() &&
-      enhanced_pref->GetRecommendedValue()->GetBool();
-
-  // A forcefully disabled reporting preference will disallow enhanced from
-  // being selected and thus it must also be considered.
-  const PrefService::Preference* reporting_pref =
-      profile->GetPrefs()->FindPreference(
-          prefs::kSafeBrowsingScoutReportingEnabled);
-  const bool reporting_on = reporting_pref->GetValue()->GetBool();
-  const bool reporting_enforced = !reporting_pref->IsUserModifiable();
-  const auto reporting_policy_indicator =
-      site_settings::GetPolicyIndicatorFromPref(reporting_pref);
-
-  if (!enabled_enforced && !enabled_recommended && !reporting_enforced) {
-    // No relevant policies are applied, return the default state.
-    return managed_state;
-  }
-  if (enabled_enforced) {
-    // All radio controls are managed.
-    managed_state.enhanced.disabled = true;
-    managed_state.enhanced.indicator = enabled_policy_indicator;
-    managed_state.standard.disabled = true;
-    managed_state.standard.indicator = enabled_policy_indicator;
-    managed_state.disabled.disabled = true;
-    managed_state.disabled.indicator = enabled_policy_indicator;
-    return managed_state;
-  }
-  if (enabled_recommended) {
-    if (enhanced_recommended_on) {
-      managed_state.enhanced.indicator = enabled_policy_indicator;
-    } else if (enabled_recommended_on) {
-      managed_state.standard.indicator = enabled_policy_indicator;
-    } else {
-      managed_state.disabled.indicator = enabled_policy_indicator;
-    }
-    return managed_state;
-  }
-  if (reporting_enforced && !reporting_on) {
-    // Disable enhanced protection when reporting has been enforced off.
-    managed_state.enhanced.disabled = true;
-    managed_state.enhanced.indicator = reporting_policy_indicator;
-    return managed_state;
-  }
-
+  // No relevant policies are applied, return the default state.
   return managed_state;
 }
 
diff --git a/chrome/browser/ui/webui/settings/safety_check_handler.cc b/chrome/browser/ui/webui/settings/safety_check_handler.cc
index 81877f13bcf5..898ae82521fc 100644
--- a/chrome/browser/ui/webui/settings/safety_check_handler.cc
+++ b/chrome/browser/ui/webui/settings/safety_check_handler.cc
@@ -20,7 +20,6 @@
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/version_info/version_info.h"
 #include "content/public/browser/browser_context.h"
diff --git a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
index ccb1ccca58c5..6bc21250080e 100644
--- a/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
+++ b/chrome/browser/ui/webui/settings/settings_localized_strings_provider.cc
@@ -59,7 +59,6 @@
 #include "components/password_manager/core/browser/leak_detection_dialog_utils.h"
 #include "components/password_manager/core/browser/manage_passwords_referrer.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/signin/public/base/signin_buildflags.h"
 #include "components/strings/grit/components_chromium_strings.h"
 #include "components/strings/grit/components_strings.h"
@@ -105,7 +104,6 @@
 #endif
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
 #include "device/fido/win/webauthn_api.h"
 
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
@@ -1256,42 +1254,6 @@ void AddPrivacyStrings(content::WebUIDataSource* html_source,
       {"clearBrowsingData", IDS_SETTINGS_CLEAR_BROWSING_DATA},
       {"clearBrowsingDataDescription", IDS_SETTINGS_CLEAR_DATA_DESCRIPTION},
       {"titleAndCount", IDS_SETTINGS_TITLE_AND_COUNT},
-      {"safeBrowsingEnableExtendedReporting",
-       IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING},
-      {"safeBrowsingEnableExtendedReportingDesc",
-       IDS_SETTINGS_SAFEBROWSING_ENABLE_REPORTING_DESC},
-      {"safeBrowsingEnhanced", IDS_SETTINGS_SAFEBROWSING_ENHANCED},
-      {"safeBrowsingEnhancedDesc", IDS_SETTINGS_SAFEBROWSING_ENHANCED_DESC},
-      {"safeBrowsingEnhancedBulOne",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_ONE},
-      {"safeBrowsingEnhancedBulTwo",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_TWO},
-      {"safeBrowsingEnhancedBulThree",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_THREE},
-      {"safeBrowsingEnhancedBulFour",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FOUR},
-      {"safeBrowsingEnhancedBulFive",
-       IDS_SETTINGS_SAFEBROWSING_ENHANCED_BULLET_FIVE},
-      {"safeBrowsingStandard", IDS_SETTINGS_SAFEBROWSING_STANDARD},
-      {"safeBrowsingStandardDesc", IDS_SETTINGS_SAFEBROWSING_STANDARD_DESC},
-      {"safeBrowsingStandardBulOne",
-       IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_ONE},
-      {"safeBrowsingStandardBulTwo",
-       IDS_SETTINGS_SAFEBROWSING_STANDARD_BULLET_TWO},
-      {"safeBrowsingStandardReportingLabel",
-       IDS_SETTINGS_SAFEBROWSING_STANDARD_HELP_IMPROVE},
-      {"safeBrowsingNone", IDS_SETTINGS_SAFEBROWSING_NONE},
-      {"safeBrowsingNoneDesc", IDS_SETTINGS_SAFEBROWSING_NONE_DESC},
-      {"safeBrowsingDisableDialog",
-       IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_TITLE},
-      {"safeBrowsingDisableDialogDesc",
-       IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_DESC},
-      {"safeBrowsingDisableDialogConfirm",
-       IDS_SETTINGS_SAFEBROWSING_DISABLE_DIALOG_CONFIRM},
-      {"safeBrowsingEnableProtection",
-       IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION},
-      {"safeBrowsingEnableProtectionDesc",
-       IDS_SETTINGS_SAFEBROWSING_ENABLEPROTECTION_DESC},
       {"safeBrowsingSectionLabel", IDS_SETTINGS_SAFEBROWSING_SECTION_LABEL},
       {"syncAndGoogleServicesPrivacyDescription",
        IDS_SETTINGS_SYNC_AND_GOOGLE_SERVICES_PRIVACY_DESC_UNIFIED_CONSENT},
@@ -1955,11 +1917,6 @@ void AddSiteSettingsStrings(content::WebUIDataSource* html_source,
   };
   AddLocalizedStringsBulk(html_source, kSensorsLocalizedStrings);
 
-  html_source->AddBoolean(
-      "enableSafeBrowsingSubresourceFilter",
-      base::FeatureList::IsEnabled(
-          subresource_filter::kSafeBrowsingSubresourceFilter));
-
   html_source->AddBoolean(
       "enableBlockAutoplayContentSetting",
       base::FeatureList::IsEnabled(media::kAutoplayDisableSettings));
diff --git a/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc b/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
index 39f070896a13..40ce59ac2593 100644
--- a/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
+++ b/chrome/browser/ui/webui/signin/inline_login_handler_impl.cc
@@ -258,9 +258,7 @@ void OnSyncSetupComplete(Profile* profile,
                                             ServiceAccessType::EXPLICIT_ACCESS);
     password_store->SaveGaiaPasswordHash(
         username, base::UTF8ToUTF16(password),
-        /*is_primary_account_=*/true,
-        password_manager::metrics_util::GaiaPasswordHashChange::
-            SAVED_ON_CHROME_SIGNIN);
+        /*is_primary_account_=*/true);
 
     if (profiles::IsLockAvailable(profile))
       LocalAuth::SetLocalAuthCredentials(profile, password);
@@ -374,9 +372,7 @@ void InlineSigninHelper::OnClientOAuthSuccessAndBrowserOpened(
                                             ServiceAccessType::EXPLICIT_ACCESS);
     if (password_store) {
       password_store->SaveGaiaPasswordHash(
-          primary_email, base::UTF8ToUTF16(password_), !primary_email.empty(),
-          password_manager::metrics_util::GaiaPasswordHashChange::
-              SAVED_ON_CHROME_SIGNIN);
+          primary_email, base::UTF8ToUTF16(password_), !primary_email.empty());
     }
   }
 #endif
diff --git a/chrome/browser/unified_consent/unified_consent_service_factory.cc b/chrome/browser/unified_consent/unified_consent_service_factory.cc
index cf51a900f44b..afe9c6d228d0 100644
--- a/chrome/browser/unified_consent/unified_consent_service_factory.cc
+++ b/chrome/browser/unified_consent/unified_consent_service_factory.cc
@@ -13,7 +13,6 @@
 #include "components/embedder_support/pref_names.h"
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
 #include "components/prefs/pref_registry_simple.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/spellcheck/browser/pref_names.h"
 #include "components/sync_preferences/pref_service_syncable.h"
 #include "components/unified_consent/unified_consent_metrics.h"
@@ -35,7 +34,6 @@ namespace {
 std::vector<std::string> GetSyncedServicePrefNames() {
   return {
     prefs::kSearchSuggestEnabled, embedder_support::kAlternateErrorPagesEnabled,
-        prefs::kSafeBrowsingEnabled, prefs::kSafeBrowsingScoutReportingEnabled,
         spellcheck::prefs::kSpellCheckUseSpellingService,
 #if defined(OS_ANDROID)
         prefs::kContextualSearchEnabled
diff --git a/chrome/browser/win/conflicts/BUILD.gn b/chrome/browser/win/conflicts/BUILD.gn
index 9e49b7be28bb..b7ce48c44fb6 100644
--- a/chrome/browser/win/conflicts/BUILD.gn
+++ b/chrome/browser/win/conflicts/BUILD.gn
@@ -29,7 +29,6 @@ source_set("module_info") {
 
   deps = [
     "//base:i18n",
-    "//chrome/common/safe_browsing:pe_image_reader",
   ]
 
   libs = [ "crypt32.lib" ]
diff --git a/chrome/browser/win/conflicts/module_info_util.cc b/chrome/browser/win/conflicts/module_info_util.cc
index e7e052443bdf..4a796bbc23eb 100644
--- a/chrome/browser/win/conflicts/module_info_util.cc
+++ b/chrome/browser/win/conflicts/module_info_util.cc
@@ -22,7 +22,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/win/scoped_handle.h"
 #include "base/win/wincrypt_shim.h"
-#include "chrome/common/safe_browsing/pe_image_reader_win.h"
 
 // This must be after wincrypt and wintrust.
 #include <mscat.h>
@@ -323,13 +322,6 @@ bool GetModuleImageSizeAndTimeDateStamp(const base::FilePath& path,
   if (bytes_read == -1)
     return false;
 
-  safe_browsing::PeImageReader pe_image_reader;
-  if (!pe_image_reader.Initialize(buffer.get(), bytes_read))
-    return false;
-
-  *size_of_image = pe_image_reader.GetSizeOfImage();
-  *time_date_stamp = pe_image_reader.GetCoffFileHeader()->TimeDateStamp;
-
   return true;
 }
 
diff --git a/chrome/chrome_cleaner/logging/dummy_api_keys.cc b/chrome/chrome_cleaner/logging/dummy_api_keys.cc
index c0ac308b7722..87b3fbc46095 100644
--- a/chrome/chrome_cleaner/logging/dummy_api_keys.cc
+++ b/chrome/chrome_cleaner/logging/dummy_api_keys.cc
@@ -7,11 +7,11 @@
 namespace chrome_cleaner {
 
 const char* kSafeBrowsingCleanerUrl =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/chrome-cct"
+    "https://no-thanks.invalid"
     "?key=DUMMY_KEY";
 
 const char* kSafeBrowsingReporterUrl =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/chrome-sw-reporter"
+    "https://no-thanks.invalid"
     "?key=DUMMY_KEY";
 
 }  // namespace chrome_cleaner
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index e6496ae6ef9f..9bb7fa216de7 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -219,7 +219,6 @@ static_library("common") {
     "//components/policy/core/common",
     "//components/prefs",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/core/web_ui:constants",
     "//components/services/heap_profiling/public/cpp",
     "//components/strings",
     "//components/translate/content/common",
@@ -424,7 +423,6 @@ static_library("common") {
   if (is_win) {
     deps += [
       "//chrome/chrome_elf:chrome_elf_main_include",
-      "//chrome/common/win:eventlog_messages",
       "//components/crash/core/app:crash_export_thunk_include",
     ]
 
@@ -485,10 +483,6 @@ static_library("common") {
     }
   }
 
-  if (safe_browsing_mode != 0) {
-    public_deps += [ "//chrome/common/safe_browsing" ]
-  }
-
   if (is_linux) {
     deps += [ "//sandbox/linux:sandbox_services" ]
   }
@@ -745,10 +739,6 @@ mojom("mojo_bindings") {
     public_deps += [ "//components/remote_cocoa/common:mojo" ]
   }
 
-  if (safe_browsing_mode == 1) {
-    public_deps += [ "//chrome/services/file_util/public/mojom" ]
-  }
-
   overridden_deps = [
     "//content/public/common:interfaces",
     "//third_party/blink/public/mojom:mojom_platform",
diff --git a/chrome/common/extensions/api/api_sources.gni b/chrome/common/extensions/api/api_sources.gni
index b8f3326d6998..bf0445a4d143 100644
--- a/chrome/common/extensions/api/api_sources.gni
+++ b/chrome/common/extensions/api/api_sources.gni
@@ -47,7 +47,6 @@ schema_sources_ = [
   "passwords_private.idl",
   "permissions.json",
   "resources_private.idl",
-  "safe_browsing_private.idl",
   "sessions.json",
   "settings_private.idl",
   "signed_in_devices.idl",
diff --git a/chrome/common/extensions/api/privacy.json b/chrome/common/extensions/api/privacy.json
index 3734130aea71..4fc2d997e119 100644
--- a/chrome/common/extensions/api/privacy.json
+++ b/chrome/common/extensions/api/privacy.json
@@ -75,16 +75,6 @@
             "value": ["passwordSavingEnabled", {"type":"boolean"}],
             "description": "If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to <code>true</code>."
           },
-          "safeBrowsingEnabled": {
-            "$ref": "types.ChromeSetting",
-            "value": ["safeBrowsingEnabled", {"type":"boolean"}],
-            "description": "If enabled, Chrome does its best to protect you from phishing and malware. This preference's value is a boolean, defaulting to <code>true</code>."
-          },
-          "safeBrowsingExtendedReportingEnabled": {
-            "$ref": "types.ChromeSetting",
-            "value": ["safeBrowsingExtendedReportingEnabled", {"type":"boolean"}],
-            "description": "If enabled, Chrome will send additional information to Google when SafeBrowsing blocks a page, such as the content of the blocked page. This preference's value is a boolean, defaulting to <code>false</code>."
-          },
           "searchSuggestEnabled": {
             "$ref": "types.ChromeSetting",
             "value": ["searchSuggestEnabled", {"type":"boolean"}],
diff --git a/chrome/common/features.gni b/chrome/common/features.gni
index 91d3c7c34e71..d03ea85115be 100644
--- a/chrome/common/features.gni
+++ b/chrome/common/features.gni
@@ -86,6 +86,5 @@ chrome_grit_defines = [
   "enable_supervised_users=$enable_supervised_users",
   "enable_vr=$enable_vr",
   "enable_webui_tab_strip=$enable_webui_tab_strip",
-  "safe_browsing_mode=$safe_browsing_mode",
   "optimize_webui=$optimize_webui",
 ]
diff --git a/chrome/common/logging_chrome.cc b/chrome/common/logging_chrome.cc
index 6e68b6294943..32650e735e98 100644
--- a/chrome/common/logging_chrome.cc
+++ b/chrome/common/logging_chrome.cc
@@ -62,7 +62,6 @@
 #include <initguid.h>
 #include "base/logging_win.h"
 #include "base/syslog_logging.h"
-#include "chrome/common/win/eventlog_messages.h"
 #include "chrome/install_static/install_details.h"
 #endif
 
diff --git a/chrome/common/safe_browsing/BUILD.gn b/chrome/common/safe_browsing/BUILD.gn
index 104216d8e7f6..6b44eb88c0c5 100644
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -98,21 +98,6 @@ if (safe_browsing_mode == 1) {
 
   source_set("binary_feature_extractor") {
     sources = [
-      "binary_feature_extractor.cc",
-      "binary_feature_extractor.h",
-      "binary_feature_extractor_mac.cc",
-      "binary_feature_extractor_win.cc",
-      "mach_o_image_reader_mac.cc",
-      "mach_o_image_reader_mac.h",
-    ]
-    if (is_posix) {
-      sources += [ "binary_feature_extractor_posix.cc" ]
-    }
-
-    public_deps = [
-      "//base",
-      "//components/safe_browsing/core:csd_proto",
-      "//crypto",
     ]
 
     if (is_win) {
diff --git a/chrome/common/webui_url_constants.cc b/chrome/common/webui_url_constants.cc
index 2ceb36f1940c..54ea5904425c 100644
--- a/chrome/common/webui_url_constants.cc
+++ b/chrome/common/webui_url_constants.cc
@@ -7,7 +7,6 @@
 #include "base/stl_util.h"
 #include "base/strings/string_piece.h"
 #include "components/nacl/common/buildflags.h"
-#include "components/safe_browsing/core/web_ui/constants.h"
 #include "extensions/buildflags/buildflags.h"
 
 namespace chrome {
@@ -448,7 +447,6 @@ const char* const kChromeHostURLs[] = {
     kChromeUISignInInternalsHost,
     kChromeUISiteEngagementHost,
     kChromeUINTPTilesInternalsHost,
-    safe_browsing::kChromeUISafeBrowsingHost,
     kChromeUISuggestionsHost,
     kChromeUISupervisedUserInternalsHost,
     kChromeUISyncInternalsHost,
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index 22e0426b61aa..23b07e0ae93c 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -158,8 +158,6 @@ static_library("renderer") {
     "//components/plugins/renderer",
     "//components/resources:components_resources",
     "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/renderer:throttles",
-    "//components/safe_browsing/core/common:interfaces",
     "//components/security_interstitials/content/renderer:security_interstitial_page_controller",
     "//components/security_interstitials/core:",
     "//components/security_interstitials/core/common/mojom:",
@@ -430,8 +428,6 @@ static_library("test_support") {
   sources = [
     "chrome_mock_render_thread.cc",
     "chrome_mock_render_thread.h",
-    "safe_browsing/test_utils.cc",
-    "safe_browsing/test_utils.h",
   ]
 
   deps = [
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 35542225d869..399ad6135360 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -92,7 +92,6 @@
 #include "components/pdf/renderer/pepper_pdf_host.h"
 #include "components/prerender/common/prerender_types.mojom.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/renderer/threat_dom_details.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "components/subresource_filter/content/renderer/subresource_filter_agent.h"
 #include "components/subresource_filter/content/renderer/unverified_ruleset_dealer.h"
diff --git a/chrome/renderer/url_loader_throttle_provider_impl.cc b/chrome/renderer/url_loader_throttle_provider_impl.cc
index 8a4536d5f7ca..3869bfd07af1 100644
--- a/chrome/renderer/url_loader_throttle_provider_impl.cc
+++ b/chrome/renderer/url_loader_throttle_provider_impl.cc
@@ -20,8 +20,6 @@
 #include "chrome/renderer/prerender/prerender_helper.h"
 #include "chrome/renderer/subresource_redirect/subresource_redirect_params.h"
 #include "chrome/renderer/subresource_redirect/subresource_redirect_url_loader_throttle.h"
-#include "components/safe_browsing/content/renderer/renderer_url_loader_throttle.h"
-#include "components/safe_browsing/core/features.h"
 #include "content/public/common/content_features.h"
 #include "content/public/renderer/render_frame.h"
 #include "content/public/renderer/render_thread.h"
@@ -95,7 +93,6 @@ URLLoaderThrottleProviderImpl::URLLoaderThrottleProviderImpl(
     : type_(type),
       chrome_content_renderer_client_(chrome_content_renderer_client) {
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 URLLoaderThrottleProviderImpl::~URLLoaderThrottleProviderImpl() {
@@ -107,18 +104,12 @@ URLLoaderThrottleProviderImpl::URLLoaderThrottleProviderImpl(
     : type_(other.type_),
       chrome_content_renderer_client_(other.chrome_content_renderer_client_) {
   DETACH_FROM_THREAD(thread_checker_);
-  if (other.safe_browsing_) {
-    other.safe_browsing_->Clone(
-        safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
-  }
   // An ad_delay_factory_ is created, rather than cloning the existing one.
 }
 
 std::unique_ptr<content::URLLoaderThrottleProvider>
 URLLoaderThrottleProviderImpl::Clone() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_));
   return base::WrapUnique(new URLLoaderThrottleProviderImpl(*this));
 }
 
@@ -141,14 +132,6 @@ URLLoaderThrottleProviderImpl::CreateThrottles(
   DCHECK(!is_frame_resource ||
          type_ == content::URLLoaderThrottleProviderType::kFrame);
 
-  if (!is_frame_resource) {
-    if (safe_browsing_remote_)
-      safe_browsing_.Bind(std::move(safe_browsing_remote_));
-    throttles.push_back(
-        std::make_unique<safe_browsing::RendererURLLoaderThrottle>(
-            safe_browsing_.get(), render_frame_id));
-  }
-
   if (type_ == content::URLLoaderThrottleProviderType::kFrame &&
       !is_frame_resource) {
     auto throttle =
diff --git a/chrome/renderer/url_loader_throttle_provider_impl.h b/chrome/renderer/url_loader_throttle_provider_impl.h
index 16743f4918dc..95898ce13482 100644
--- a/chrome/renderer/url_loader_throttle_provider_impl.h
+++ b/chrome/renderer/url_loader_throttle_provider_impl.h
@@ -9,7 +9,6 @@
 #include <vector>
 
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "content/public/renderer/url_loader_throttle_provider.h"
 #include "extensions/buildflags/buildflags.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
@@ -49,9 +48,6 @@ class URLLoaderThrottleProviderImpl
   content::URLLoaderThrottleProviderType type_;
   ChromeContentRendererClient* const chrome_content_renderer_client_;
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   std::unique_ptr<extensions::ExtensionThrottleManager>
       extension_throttle_manager_;
diff --git a/chrome/renderer/websocket_handshake_throttle_provider_impl.cc b/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
index 40cde97e0cf8..47e3860ca4e7 100644
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.cc
@@ -7,7 +7,6 @@
 #include <utility>
 
 #include "base/memory/ptr_util.h"
-#include "components/safe_browsing/content/renderer/websocket_sb_handshake_throttle.h"
 #include "content/public/common/service_names.mojom.h"
 #include "content/public/renderer/render_thread.h"
 #include "third_party/blink/public/platform/websocket_handshake_throttle.h"
@@ -15,7 +14,6 @@
 WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
     blink::ThreadSafeBrowserInterfaceBrokerProxy* broker) {
   DETACH_FROM_THREAD(thread_checker_);
-  broker->GetInterface(safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 WebSocketHandshakeThrottleProviderImpl::
@@ -26,18 +24,12 @@ WebSocketHandshakeThrottleProviderImpl::
 WebSocketHandshakeThrottleProviderImpl::WebSocketHandshakeThrottleProviderImpl(
     const WebSocketHandshakeThrottleProviderImpl& other) {
   DETACH_FROM_THREAD(thread_checker_);
-  DCHECK(other.safe_browsing_);
-  other.safe_browsing_->Clone(
-      safe_browsing_remote_.InitWithNewPipeAndPassReceiver());
 }
 
 std::unique_ptr<content::WebSocketHandshakeThrottleProvider>
 WebSocketHandshakeThrottleProviderImpl::Clone(
     scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
   return base::WrapUnique(new WebSocketHandshakeThrottleProviderImpl(*this));
 }
 
@@ -46,9 +38,5 @@ WebSocketHandshakeThrottleProviderImpl::CreateThrottle(
     int render_frame_id,
     scoped_refptr<base::SingleThreadTaskRunner> task_runner) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (safe_browsing_remote_)
-    safe_browsing_.Bind(std::move(safe_browsing_remote_),
-                        std::move(task_runner));
-  return std::make_unique<safe_browsing::WebSocketSBHandshakeThrottle>(
-      safe_browsing_.get(), render_frame_id);
+  return 0;
 }
diff --git a/chrome/renderer/websocket_handshake_throttle_provider_impl.h b/chrome/renderer/websocket_handshake_throttle_provider_impl.h
index 2c04ee4d4861..9b7e271f3ca6 100644
--- a/chrome/renderer/websocket_handshake_throttle_provider_impl.h
+++ b/chrome/renderer/websocket_handshake_throttle_provider_impl.h
@@ -9,7 +9,6 @@
 
 #include "base/macros.h"
 #include "base/threading/thread_checker.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "content/public/renderer/websocket_handshake_throttle_provider.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
@@ -37,9 +36,6 @@ class WebSocketHandshakeThrottleProviderImpl final
   WebSocketHandshakeThrottleProviderImpl(
       const WebSocketHandshakeThrottleProviderImpl& other);
 
-  mojo::PendingRemote<safe_browsing::mojom::SafeBrowsing> safe_browsing_remote_;
-  mojo::Remote<safe_browsing::mojom::SafeBrowsing> safe_browsing_;
-
   THREAD_CHECKER(thread_checker_);
 
   DISALLOW_ASSIGN(WebSocketHandshakeThrottleProviderImpl);
diff --git a/chrome/utility/BUILD.gn b/chrome/utility/BUILD.gn
index 3c3fb9771f95..d07a16c8f905 100644
--- a/chrome/utility/BUILD.gn
+++ b/chrome/utility/BUILD.gn
@@ -208,13 +208,6 @@ static_library("utility") {
     }
   }
 
-  if (safe_browsing_mode == 1) {
-    deps += [ "//chrome/services/file_util" ]
-    if (is_mac) {
-      deps += [ "//chrome/utility/safe_browsing/mac" ]
-    }
-  }
-
   if (is_android || enable_extensions) {
     deps += [ "//chrome/services/media_gallery_util:lib" ]
   }
diff --git a/components/blocked_content/BUILD.gn b/components/blocked_content/BUILD.gn
index 4f86ea0ffcf6..6b107d8e2432 100644
--- a/components/blocked_content/BUILD.gn
+++ b/components/blocked_content/BUILD.gn
@@ -17,8 +17,6 @@ source_set("blocked_content") {
     "popup_tracker.h",
     "pref_names.cc",
     "pref_names.h",
-    "safe_browsing_triggered_popup_blocker.cc",
-    "safe_browsing_triggered_popup_blocker.h",
     "url_list_manager.cc",
     "url_list_manager.h",
   ]
@@ -29,8 +27,6 @@ source_set("blocked_content") {
     "//components/embedder_support",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/content/triggers:ad_popup_trigger",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/browser",
     "//components/ukm/content",
     "//components/user_prefs",
diff --git a/components/blocked_content/popup_blocker.cc b/components/blocked_content/popup_blocker.cc
index 6b278ac2e497..dbe9eb544951 100644
--- a/components/blocked_content/popup_blocker.cc
+++ b/components/blocked_content/popup_blocker.cc
@@ -10,11 +10,9 @@
 #include "base/command_line.h"
 #include "components/blocked_content/popup_blocker_tab_helper.h"
 #include "components/blocked_content/popup_navigation_delegate.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings.h"
 #include "components/embedder_support/switches.h"
-#include "components/safe_browsing/content/triggers/ad_popup_trigger.h"
 #include "content/public/browser/page_navigator.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents.h"
@@ -58,12 +56,6 @@ PopupBlockType ShouldBlockPopup(content::WebContents* web_contents,
     return PopupBlockType::kNotBlocked;
   }
 
-  auto* safe_browsing_blocker =
-      SafeBrowsingTriggeredPopupBlocker::FromWebContents(web_contents);
-  if (safe_browsing_blocker &&
-      safe_browsing_blocker->ShouldApplyAbusivePopupBlocker()) {
-    return PopupBlockType::kAbusive;
-  }
   return PopupBlockType::kNotBlocked;
 }
 
@@ -127,10 +119,7 @@ std::unique_ptr<PopupNavigationDelegate> MaybeBlockPopup(
       GetSourceFrameForPopup(delegate.get(), open_url_params, web_contents);
   popup_blocker->AddBlockedPopup(std::move(delegate), window_features,
                                  block_type);
-  auto* trigger = safe_browsing::AdPopupTrigger::FromWebContents(web_contents);
-  if (trigger) {
-    trigger->PopupWasBlocked(source_frame);
-  }
+
   return nullptr;
 }
 
diff --git a/components/blocked_content/popup_blocker_tab_helper.cc b/components/blocked_content/popup_blocker_tab_helper.cc
index c3537d88c0e3..98da489d3177 100644
--- a/components/blocked_content/popup_blocker_tab_helper.cc
+++ b/components/blocked_content/popup_blocker_tab_helper.cc
@@ -12,7 +12,6 @@
 #include "components/blocked_content/list_item_position.h"
 #include "components/blocked_content/popup_navigation_delegate.h"
 #include "components/blocked_content/popup_tracker.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/browser/tab_specific_content_settings.h"
 #include "content/public/browser/back_forward_cache.h"
 #include "content/public/browser/navigation_controller.h"
@@ -41,7 +40,6 @@ struct PopupBlockerTabHelper::BlockedRequest {
 
 PopupBlockerTabHelper::PopupBlockerTabHelper(content::WebContents* web_contents)
     : content::WebContentsObserver(web_contents) {
-  blocked_content::SafeBrowsingTriggeredPopupBlocker::MaybeCreate(web_contents);
 }
 
 PopupBlockerTabHelper::~PopupBlockerTabHelper() = default;
diff --git a/components/components_strings.grd b/components/components_strings.grd
index fa091d4abf21..897e661b75f0 100644
--- a/components/components_strings.grd
+++ b/components/components_strings.grd
@@ -308,7 +308,6 @@
       <part file="print_media_strings.grdp" />
       <part file="printing_component_strings.grdp" />
       <part file="reset_password_strings.grdp" />
-      <part file="safe_browsing_strings.grdp" />
       <part file="security_interstitials_strings.grdp" />
       <part file="security_state_strings.grdp" />
       <part file="send_tab_to_self_strings.grdp" />
diff --git a/components/password_manager/content/browser/content_password_manager_driver.cc b/components/password_manager/content/browser/content_password_manager_driver.cc
index cfda4606ff58..e18a56664a54 100644
--- a/components/password_manager/content/browser/content_password_manager_driver.cc
+++ b/components/password_manager/content/browser/content_password_manager_driver.cc
@@ -319,7 +319,7 @@ void ContentPasswordManagerDriver::CheckSafeBrowsingReputation(
   if (client_->GetMetricsRecorder()) {
     client_->GetMetricsRecorder()->RecordUserFocusedPasswordField();
   }
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   client_->CheckSafeBrowsingReputation(form_action, frame_url);
 #endif
 }
diff --git a/components/password_manager/core/browser/BUILD.gn b/components/password_manager/core/browser/BUILD.gn
index f642161af5f8..ceaa84dd91ad 100644
--- a/components/password_manager/core/browser/BUILD.gn
+++ b/components/password_manager/core/browser/BUILD.gn
@@ -12,7 +12,7 @@ if (is_android) {
 
 # TODO(crbug.com/1006430): Fix password reuse detection not fully functional on
 # Android.
-password_reuse_detection_support = !is_ios
+password_reuse_detection_support = false
 password_reuse_warning_support = !is_ios
 password_on_focus_ping_support = !is_ios
 
@@ -191,6 +191,8 @@ jumbo_static_library("browser") {
     "password_store_default.h",
     "password_store_factory_util.cc",
     "password_store_factory_util.h",
+    "password_store_signin_notifier.cc",
+    "password_store_signin_notifier.h",
     "password_store_sync.cc",
     "password_store_sync.h",
     "password_sync_util.cc",
@@ -246,8 +248,6 @@ jumbo_static_library("browser") {
       "password_reuse_detector.h",
       "password_reuse_detector_consumer.cc",
       "password_reuse_detector_consumer.h",
-      "password_store_signin_notifier.cc",
-      "password_store_signin_notifier.h",
     ]
   }
 
@@ -279,8 +279,6 @@ jumbo_static_library("browser") {
     "//components/password_manager/core/common",
     "//components/pref_registry",
     "//components/prefs",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//components/security_state/core",
     "//components/signin/public/identity_manager",
     "//components/strings",
@@ -648,8 +646,6 @@ source_set("unit_tests") {
     "//components/password_manager/core/browser/leak_detection:unit_tests",
     "//components/password_manager/core/common",
     "//components/prefs:test_support",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
     "//components/security_state/core",
     "//components/signin/public/identity_manager:test_support",
     "//components/strings",
diff --git a/components/password_manager/core/browser/compromised_credentials_observer.cc b/components/password_manager/core/browser/compromised_credentials_observer.cc
index a43e8c621263..fa586fc5936b 100644
--- a/components/password_manager/core/browser/compromised_credentials_observer.cc
+++ b/components/password_manager/core/browser/compromised_credentials_observer.cc
@@ -9,17 +9,12 @@
 #include "base/metrics/histogram_macros.h"
 #include "components/password_manager/core/browser/compromised_credentials_table.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/safe_browsing/core/features.h"
 
 namespace password_manager {
 
 void ProcessLoginsChanged(const PasswordStoreChangeList& changes,
                           const RemoveCompromisedCallback& remove_callback) {
-  bool password_protection_show_domains_for_saved_password_is_on =
-      base::FeatureList::IsEnabled(
-          safe_browsing::kPasswordProtectionShowDomainsForSavedPasswords);
-  if (!password_protection_show_domains_for_saved_password_is_on &&
-      !base::FeatureList::IsEnabled(password_manager::features::kPasswordCheck))
+  if (!base::FeatureList::IsEnabled(password_manager::features::kPasswordCheck))
     return;
 
   for (const PasswordStoreChange& change : changes) {
diff --git a/components/password_manager/core/browser/compromised_credentials_table.cc b/components/password_manager/core/browser/compromised_credentials_table.cc
index f6e61529be9a..eafd224ccc98 100644
--- a/components/password_manager/core/browser/compromised_credentials_table.cc
+++ b/components/password_manager/core/browser/compromised_credentials_table.cc
@@ -9,7 +9,6 @@
 #include "base/metrics/histogram_functions.h"
 #include "components/password_manager/core/browser/sql_table_builder.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/safe_browsing/core/features.h"
 #include "sql/database.h"
 #include "sql/statement.h"
 
@@ -75,9 +74,7 @@ bool operator==(const CompromisedCredentials& lhs,
 }
 
 void CompromisedCredentialsTable::Init(sql::Database* db) {
-  bool password_protection_show_domains_for_saved_password_is_on =
-      base::FeatureList::IsEnabled(
-          safe_browsing::kPasswordProtectionShowDomainsForSavedPasswords);
+  bool password_protection_show_domains_for_saved_password_is_on = false;
   if (password_protection_show_domains_for_saved_password_is_on ||
       base::FeatureList::IsEnabled(password_manager::features::kPasswordCheck))
     db_ = db;
diff --git a/components/password_manager/core/browser/leak_detection_delegate.cc b/components/password_manager/core/browser/leak_detection_delegate.cc
index ef1e159f2950..7dad3e116447 100644
--- a/components/password_manager/core/browser/leak_detection_delegate.cc
+++ b/components/password_manager/core/browser/leak_detection_delegate.cc
@@ -22,7 +22,6 @@
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "services/network/public/cpp/shared_url_loader_factory.h"
 
 namespace password_manager {
@@ -163,28 +162,7 @@ void LeakDetectionDelegate::OnError(LeakDetectionError error) {
 
 bool CanStartLeakCheck(const PrefService& prefs,
                        const PasswordManagerClient* client) {
-  const bool is_leak_protection_on =
-      prefs.GetBoolean(password_manager::prefs::kPasswordLeakDetectionEnabled);
-
-  // Leak detection can only start if:
-  // 1. The user has not opted out and Safe Browsing is turned on, or
-  // 2. The user is an enhanced protection user
-  safe_browsing::SafeBrowsingState sb_state =
-      safe_browsing::GetSafeBrowsingState(prefs);
-  switch (sb_state) {
-    case safe_browsing::NO_SAFE_BROWSING:
-      LogString(client, Logger::STRING_LEAK_DETECTION_DISABLED_SAFE_BROWSING);
-      return false;
-    case safe_browsing::STANDARD_PROTECTION:
-      if (!is_leak_protection_on)
-        LogString(client, Logger::STRING_LEAK_DETECTION_DISABLED_FEATURE);
-      return is_leak_protection_on;
-    case safe_browsing::ENHANCED_PROTECTION:
-      // feature is on.
-      break;
-  }
-
-  return true;
+  return false;
 }
 
 }  // namespace password_manager
diff --git a/components/password_manager/core/browser/login_database.cc b/components/password_manager/core/browser/login_database.cc
index 73c22b24e1d5..edfb3be46c3b 100644
--- a/components/password_manager/core/browser/login_database.cc
+++ b/components/password_manager/core/browser/login_database.cc
@@ -40,7 +40,6 @@
 #include "components/password_manager/core/browser/psl_matching_helper.h"
 #include "components/password_manager/core/browser/sql_table_builder.h"
 #include "components/password_manager/core/common/password_manager_features.h"
-#include "components/safe_browsing/core/features.h"
 #include "components/sync/protocol/entity_metadata.pb.h"
 #include "components/sync/protocol/model_type_state.pb.h"
 #include "google_apis/gaia/gaia_auth_util.h"
@@ -757,9 +756,7 @@ bool LoginDatabase::Init() {
   }
 
   if (base::FeatureList::IsEnabled(
-          password_manager::features::kPasswordCheck) ||
-      base::FeatureList::IsEnabled(
-          safe_browsing::kPasswordProtectionShowDomainsForSavedPasswords)) {
+          password_manager::features::kPasswordCheck)) {
     if (!compromised_credentials_table_.CreateTableIfNecessary()) {
       LogDatabaseInitError(INIT_COMPROMISED_CREDENTIALS_ERROR);
       LOG(ERROR) << "Unable to create the compromised credentials table.";
diff --git a/components/password_manager/core/browser/password_manager_client.h b/components/password_manager/core/browser/password_manager_client.h
index 7892425a1d49..ec48b4489fa0 100644
--- a/components/password_manager/core/browser/password_manager_client.h
+++ b/components/password_manager/core/browser/password_manager_client.h
@@ -59,7 +59,7 @@ class Origin;
 
 class GURL;
 
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
 namespace safe_browsing {
 class PasswordProtectionService;
 }
@@ -327,14 +327,15 @@ class PasswordManagerClient {
   // Returns the current best guess as to the page's display language.
   virtual std::string GetPageLanguage() const;
 
-#if defined(ON_FOCUS_PING_ENABLED) || \
-    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#if (defined(ON_FOCUS_PING_ENABLED) || \
+    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)) && \
+    BUILDFLAG(FULL_SAFE_BROWSING)
   // Return the PasswordProtectionService associated with this instance.
   virtual safe_browsing::PasswordProtectionService*
   GetPasswordProtectionService() const = 0;
 #endif
 
-#if defined(ON_FOCUS_PING_ENABLED)
+#if defined(ON_FOCUS_PING_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   // Checks the safe browsing reputation of the webpage when the
   // user focuses on a username/password field. This is used for reporting
   // only, and won't trigger a warning.
@@ -342,7 +343,7 @@ class PasswordManagerClient {
                                            const GURL& frame_url) = 0;
 #endif
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED) && BUILDFLAG(FULL_SAFE_BROWSING)
   // Checks the safe browsing reputation of the webpage where password reuse
   // happens. This is called by the PasswordReuseDetectionManager when a
   // protected password is typed on the wrong domain. This may trigger a
diff --git a/components/password_manager/core/browser/password_reuse_detector.cc b/components/password_manager/core/browser/password_reuse_detector.cc
index 1e479a9c6ac5..e0638cc559de 100644
--- a/components/password_manager/core/browser/password_reuse_detector.cc
+++ b/components/password_manager/core/browser/password_reuse_detector.cc
@@ -169,15 +169,6 @@ PasswordReuseDetector::CheckNonGaiaEnterprisePasswordReuse(
     return base::nullopt;
   }
 
-  // Skips password reuse check if |domain| matches enterprise login URL or
-  // enterprise change password URL.
-  GURL page_url(domain);
-  if (enterprise_password_urls_.has_value() &&
-      safe_browsing::MatchesURLList(page_url,
-                                    enterprise_password_urls_.value())) {
-    return base::nullopt;
-  }
-
   return FindPasswordReuse(input, enterprise_password_hash_data_list_.value());
 }
 
diff --git a/components/password_manager/core/browser/password_store.cc b/components/password_manager/core/browser/password_store.cc
index 93d9670c59db..9ca325274751 100644
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -34,6 +34,7 @@
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_manager_util.h"
 #include "components/password_manager/core/browser/password_store_consumer.h"
+#include "components/password_manager/core/browser/password_store_signin_notifier.h"
 #include "components/password_manager/core/browser/statistics_table.h"
 #include "components/password_manager/core/browser/sync/password_sync_bridge.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
@@ -43,7 +44,6 @@
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 #include "base/strings/string16.h"
-#include "components/password_manager/core/browser/password_store_signin_notifier.h"
 #include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #endif
 
@@ -539,7 +539,7 @@ void PasswordStore::CheckReuse(const base::string16& input,
 }
 #endif
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
+// #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 void PasswordStore::PreparePasswordHashData(const std::string& sync_username,
                                             const bool is_signed_in) {
   SchedulePasswordHashUpdate(/*should_log_metrics=*/true,
@@ -549,30 +549,24 @@ void PasswordStore::PreparePasswordHashData(const std::string& sync_username,
 
 void PasswordStore::SaveGaiaPasswordHash(const std::string& username,
                                          const base::string16& password,
-                                         bool is_primary_account,
-                                         GaiaPasswordHashChange event) {
+                                         bool is_primary_account) {
   SaveProtectedPasswordHash(username, password, is_primary_account,
-                            /*is_gaia_password=*/true, event);
+                            /*is_gaia_password=*/true);
 }
 
 void PasswordStore::SaveEnterprisePasswordHash(const std::string& username,
                                                const base::string16& password) {
   SaveProtectedPasswordHash(
       username, password, /*is_primary_account=*/false,
-      /*is_gaia_password=*/false,
-      GaiaPasswordHashChange::NON_GAIA_ENTERPRISE_PASSWORD_CHANGE);
+      /*is_gaia_password=*/false);
 }
 
 void PasswordStore::SaveProtectedPasswordHash(const std::string& username,
                                               const base::string16& password,
                                               bool is_primary_account,
-                                              bool is_gaia_password,
-                                              GaiaPasswordHashChange event) {
+                                              bool is_gaia_password) {
   if (hash_password_manager_.SavePasswordHash(username, password,
                                               is_gaia_password)) {
-    if (is_gaia_password) {
-      metrics_util::LogGaiaPasswordHashChange(event, is_primary_account);
-    }
     // This method is not being called on startup so it shouldn't log metrics.
     // |is_signed_in| is only used when |should_log_metrics| is true so
     // it doesn't matter what the value is here.
@@ -582,11 +576,8 @@ void PasswordStore::SaveProtectedPasswordHash(const std::string& username,
 }
 
 void PasswordStore::SaveSyncPasswordHash(
-    const PasswordHashData& sync_password_data,
-    GaiaPasswordHashChange event) {
+    const PasswordHashData& sync_password_data) {
   if (hash_password_manager_.SavePasswordHash(sync_password_data)) {
-    metrics_util::LogGaiaPasswordHashChange(event,
-                                            /*is_sync_password=*/true);
     SchedulePasswordHashUpdate(/*should_log_metrics=*/false,
                                /*does_primary_account_exists=*/false,
                                /*is_signed_in=*/false);
@@ -643,18 +634,17 @@ void PasswordStore::SchedulePasswordHashUpdate(bool should_log_metrics,
 }
 
 void PasswordStore::ScheduleEnterprisePasswordURLUpdate() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   std::vector<GURL> enterprise_login_urls;
-  safe_browsing::GetPasswordProtectionLoginURLsPref(*prefs_,
-                                                    &enterprise_login_urls);
-  GURL enterprise_change_password_url =
-      safe_browsing::GetPasswordProtectionChangePasswordURLPref(*prefs_);
+  GURL enterprise_change_password_url = GURL();
 
   ScheduleTask(base::BindOnce(&PasswordStore::SaveEnterprisePasswordURLs, this,
                               std::move(enterprise_login_urls),
                               std::move(enterprise_change_password_url)));
+#endif
 }
 
-#endif
+// #endif
 
 PasswordStore::~PasswordStore() {
   DCHECK(shutdown_called_);
@@ -798,13 +788,14 @@ void PasswordStore::CheckReuseImpl(std::unique_ptr<CheckReuseRequest> request,
     reuse_detector_->CheckReuse(input, domain, request.get());
   }
 }
+#endif
 
 void PasswordStore::SaveProtectedPasswordHashImpl(
     PasswordHashDataList protected_password_data_list,
     bool should_log_metrics,
     bool does_primary_account_exists,
     bool is_signed_in) {
-  if (!reuse_detector_ || !protected_password_data_list.has_value())
+  if (/* !reuse_detector_ || */ !protected_password_data_list.has_value())
     return;
   TRACE_EVENT0("passwords", "PasswordStore::SaveProtectedPasswordHashImpl");
 
@@ -817,6 +808,7 @@ void PasswordStore::SaveProtectedPasswordHashImpl(
       enterprise_password_hash_list.push_back(std::move(password_hash));
   }
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   if (should_log_metrics) {
     metrics_util::LogProtectedPasswordHashCounts(
         gaia_password_hash_list.size(), enterprise_password_hash_list.size(),
@@ -825,44 +817,53 @@ void PasswordStore::SaveProtectedPasswordHashImpl(
   reuse_detector_->UseGaiaPasswordHash(std::move(gaia_password_hash_list));
   reuse_detector_->UseNonGaiaEnterprisePasswordHash(
       std::move(enterprise_password_hash_list));
+#endif
 }
 
 void PasswordStore::SaveEnterprisePasswordURLs(
     const std::vector<GURL>& enterprise_login_urls,
     const GURL& enterprise_change_password_url) {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   if (!reuse_detector_)
     return;
   TRACE_EVENT0("passwords", "PasswordStore::SaveEnterprisePasswordURLs");
   reuse_detector_->UseEnterprisePasswordURLs(std::move(enterprise_login_urls),
                                              enterprise_change_password_url);
+#endif
 }
 
 void PasswordStore::ClearGaiaPasswordHashImpl(const std::string& username) {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords", "PasswordStore::ClearGaiaPasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearGaiaPasswordHash(username);
+#endif
 }
 
 void PasswordStore::ClearAllGaiaPasswordHashImpl() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords", "PasswordStore::ClearAllGaiaPasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearAllGaiaPasswordHash();
+#endif
 }
 
 void PasswordStore::ClearAllEnterprisePasswordHashImpl() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords",
                "PasswordStore::ClearAllEnterprisePasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearAllEnterprisePasswordHash();
+#endif
 }
 
 void PasswordStore::ClearAllNonGmailPasswordHashImpl() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords", "PasswordStore::ClearAllNonGmailPasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearAllNonGmailPasswordHash();
-}
-
 #endif
+}
 
 void PasswordStore::OnInitCompleted(bool success) {
   DCHECK(main_task_runner_->RunsTasksInCurrentSequence());
diff --git a/components/password_manager/core/browser/password_store.h b/components/password_manager/core/browser/password_store.h
index 44a20a0d47c2..15c3cb6cedd3 100644
--- a/components/password_manager/core/browser/password_store.h
+++ b/components/password_manager/core/browser/password_store.h
@@ -23,11 +23,11 @@
 #include "build/build_config.h"
 #include "components/keyed_service/core/refcounted_keyed_service.h"
 #include "components/password_manager/core/browser/compromised_credentials_table.h"
+#include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/password_manager/core/browser/password_store_change.h"
 #include "components/password_manager/core/browser/password_store_sync.h"
 
 #if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-#include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_reuse_detector.h"
 #include "components/password_manager/core/browser/password_reuse_detector_consumer.h"
@@ -63,9 +63,7 @@ struct FieldInfo;
 struct InteractionsStats;
 struct CompromisedCredentials;
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 using PasswordHashDataList = base::Optional<std::vector<PasswordHashData>>;
-#endif
 
 // Interface for storing form passwords in a platform-specific secure way.
 // The login request/manipulation API is not threadsafe and must be used
@@ -353,12 +351,12 @@ class PasswordStore : protected PasswordStoreSync,
   void SetUnsyncedCredentialsDeletionNotifier(
       std::unique_ptr<UnsyncedCredentialsDeletionNotifier> deletion_notifier);
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // Immediately called after |Init()| to retrieve password hash data for
   // reuse detection.
   void PreparePasswordHashData(const std::string& sync_username,
                                bool is_signed_in);
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // Checks that some suffix of |input| equals to a password saved on another
   // registry controlled domain than |domain|.
   // If such suffix is found, |consumer|->OnReuseFound() is called on the same
@@ -367,6 +365,7 @@ class PasswordStore : protected PasswordStoreSync,
   virtual void CheckReuse(const base::string16& input,
                           const std::string& domain,
                           PasswordReuseDetectorConsumer* consumer);
+#endif
 
   // Saves |username| and a hash of |password| for GAIA password reuse checking.
   // |event| is used for metric logging and for distinguishing sync password
@@ -375,8 +374,7 @@ class PasswordStore : protected PasswordStoreSync,
   // primary account.
   virtual void SaveGaiaPasswordHash(const std::string& username,
                                     const base::string16& password,
-                                    bool is_primary_account,
-                                    GaiaPasswordHashChange event);
+                                    bool is_primary_account);
 
   // Saves |username| and a hash of |password| for enterprise password reuse
   // checking.
@@ -385,8 +383,7 @@ class PasswordStore : protected PasswordStoreSync,
 
   // Saves |sync_password_data| for sync password reuse checking.
   // |event| is used for metric logging.
-  virtual void SaveSyncPasswordHash(const PasswordHashData& sync_password_data,
-                                    GaiaPasswordHashChange event);
+  virtual void SaveSyncPasswordHash(const PasswordHashData& sync_password_data);
 
   // Clears the saved GAIA password hash for |username|.
   virtual void ClearGaiaPasswordHash(const std::string& username);
@@ -422,7 +419,6 @@ class PasswordStore : protected PasswordStoreSync,
   // These URLs are used in enterprise password reuse detection.
   void ScheduleEnterprisePasswordURLUpdate();
 
-#endif
 
  protected:
   friend class base::RefCountedThreadSafe<PasswordStore>;
@@ -589,7 +585,6 @@ class PasswordStore : protected PasswordStoreSync,
   void InvokeAndNotifyAboutCompromisedPasswordsChange(
       base::OnceCallback<bool()> callback);
 
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // Saves |username| and a hash of |password| for password reuse checking.
   // |is_gaia_password| indicates if it is a Gaia account. |event| is used for
   // metric logging. |is_primary_account| is whether account belong to the
@@ -597,13 +592,14 @@ class PasswordStore : protected PasswordStoreSync,
   void SaveProtectedPasswordHash(const std::string& username,
                                  const base::string16& password,
                                  bool is_primary_account,
-                                 bool is_gaia_password,
-                                 GaiaPasswordHashChange event);
+                                 bool is_gaia_password);
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // Synchronous implementation of CheckReuse().
   void CheckReuseImpl(std::unique_ptr<CheckReuseRequest> request,
                       const base::string16& input,
                       const std::string& domain);
+#endif
 
   // Synchronous implementation of SaveProtectedPasswordHash().
   // |should_log_metrics| indicates whether to log the counts of captured
@@ -632,7 +628,6 @@ class PasswordStore : protected PasswordStoreSync,
 
   // Synchronous implementation of ClearAllNonGmailPasswordHash().
   void ClearAllNonGmailPasswordHashImpl();
-#endif
 
   scoped_refptr<base::SequencedTaskRunner> main_task_runner() const {
     return main_task_runner_;
@@ -863,9 +858,10 @@ class PasswordStore : protected PasswordStoreSync,
   // can't be owned by PasswordStore because PasswordStore can be destroyed on
   // the UI thread and DestroyOnBackgroundThread isn't guaranteed to be called.
   PasswordReuseDetector* reuse_detector_ = nullptr;
+#endif
+
   std::unique_ptr<PasswordStoreSigninNotifier> notifier_;
   HashPasswordManager hash_password_manager_;
-#endif
 
   std::unique_ptr<UnsyncedCredentialsDeletionNotifier> deletion_notifier_;
 
diff --git a/components/password_manager/core/browser/password_store_signin_notifier.cc b/components/password_manager/core/browser/password_store_signin_notifier.cc
index 80300be5a345..3b1e50b8e350 100644
--- a/components/password_manager/core/browser/password_store_signin_notifier.cc
+++ b/components/password_manager/core/browser/password_store_signin_notifier.cc
@@ -4,7 +4,6 @@
 
 #include "components/password_manager/core/browser/password_store_signin_notifier.h"
 
-#include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_store.h"
 
 namespace password_manager {
@@ -19,14 +18,8 @@ void PasswordStoreSigninNotifier::NotifySignedOut(const std::string& username,
     return;
 
   if (primary_account) {
-    metrics_util::LogGaiaPasswordHashChange(
-        metrics_util::GaiaPasswordHashChange::CLEARED_ON_CHROME_SIGNOUT,
-        /*is_sync_password=*/true);
     store_->ClearAllGaiaPasswordHash();
   } else {
-    metrics_util::LogGaiaPasswordHashChange(
-        metrics_util::GaiaPasswordHashChange::CLEARED_ON_CHROME_SIGNOUT,
-        /*is_sync_password=*/false);
     store_->ClearGaiaPasswordHash(username);
   }
 }
diff --git a/components/password_manager/core/browser/stub_password_manager_client.cc b/components/password_manager/core/browser/stub_password_manager_client.cc
index 9faf43bf97eb..790057263c0b 100644
--- a/components/password_manager/core/browser/stub_password_manager_client.cc
+++ b/components/password_manager/core/browser/stub_password_manager_client.cc
@@ -103,32 +103,6 @@ StubPasswordManagerClient::GetPasswordFeatureManager() {
   return &password_feature_manager_;
 }
 
-#if defined(ON_FOCUS_PING_ENABLED) || \
-    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-safe_browsing::PasswordProtectionService*
-StubPasswordManagerClient::GetPasswordProtectionService() const {
-  return nullptr;
-}
-#endif
-
-#if defined(ON_FOCUS_PING_ENABLED)
-void StubPasswordManagerClient::CheckSafeBrowsingReputation(
-    const GURL& form_action,
-    const GURL& frame_url) {}
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-void StubPasswordManagerClient::CheckProtectedPasswordEntry(
-    metrics_util::PasswordType reused_password_type,
-    const std::string& username,
-    const std::vector<MatchingReusedCredential>& matching_reused_credentials,
-    bool password_field_exists) {}
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
-void StubPasswordManagerClient::LogPasswordReuseDetectedEvent() {}
-#endif
-
 ukm::SourceId StubPasswordManagerClient::GetUkmSourceId() {
   return ukm_source_id_;
 }
diff --git a/components/password_manager/core/browser/stub_password_manager_client.h b/components/password_manager/core/browser/stub_password_manager_client.h
index d6175706b5c6..72165732f842 100644
--- a/components/password_manager/core/browser/stub_password_manager_client.h
+++ b/components/password_manager/core/browser/stub_password_manager_client.h
@@ -66,29 +66,6 @@ class StubPasswordManagerClient : public PasswordManagerClient {
   const MockPasswordFeatureManager* GetPasswordFeatureManager() const override;
   MockPasswordFeatureManager* GetPasswordFeatureManager();
 
-#if defined(ON_FOCUS_PING_ENABLED) || \
-    defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-  safe_browsing::PasswordProtectionService* GetPasswordProtectionService()
-      const override;
-#endif
-
-#if defined(ON_FOCUS_PING_ENABLED)
-  void CheckSafeBrowsingReputation(const GURL& form_action,
-                                   const GURL& frame_url) override;
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
-  void CheckProtectedPasswordEntry(
-      metrics_util::PasswordType reused_password_type,
-      const std::string& username,
-      const std::vector<MatchingReusedCredential>& matching_reused_credentials,
-      bool password_field_exists) override;
-#endif
-
-#if defined(SYNC_PASSWORD_REUSE_WARNING_ENABLED)
-  void LogPasswordReuseDetectedEvent() override;
-#endif
-
   ukm::SourceId GetUkmSourceId() override;
   PasswordManagerMetricsRecorder* GetMetricsRecorder() override;
   signin::IdentityManager* GetIdentityManager() override;
diff --git a/components/safe_browsing/content/base_blocking_page.cc b/components/safe_browsing/content/base_blocking_page.cc
index bc7d4dc3c7dc..9f45f388f13a 100644
--- a/components/safe_browsing/content/base_blocking_page.cc
+++ b/components/safe_browsing/content/base_blocking_page.cc
@@ -12,7 +12,6 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
 #include "components/safe_browsing/content/safe_browsing_controller_client.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/unsafe_resource_util.h"
diff --git a/components/safe_browsing/content/browser/browser_url_loader_throttle.cc b/components/safe_browsing/content/browser/browser_url_loader_throttle.cc
index 2fa3d9cc4c9d..1ec155942335 100644
--- a/components/safe_browsing/content/browser/browser_url_loader_throttle.cc
+++ b/components/safe_browsing/content/browser/browser_url_loader_throttle.cc
@@ -7,7 +7,6 @@
 #include "base/bind.h"
 #include "base/check_op.h"
 #include "base/memory/ptr_util.h"
-#include "base/trace_event/trace_event.h"
 #include "components/safe_browsing/core/browser/safe_browsing_url_checker_impl.h"
 #include "components/safe_browsing/core/browser/url_checker_delegate.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
@@ -186,8 +185,6 @@ BrowserURLLoaderThrottle::BrowserURLLoaderThrottle(
 
 BrowserURLLoaderThrottle::~BrowserURLLoaderThrottle() {
   DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  if (deferred_)
-    TRACE_EVENT_ASYNC_END0("safe_browsing", "Deferred", this);
 
   DeleteCheckerOnIO();
 }
@@ -258,8 +255,6 @@ void BrowserURLLoaderThrottle::WillProcessResponse(
   deferred_ = true;
   defer_start_time_ = base::TimeTicks::Now();
   *defer = true;
-  TRACE_EVENT_ASYNC_BEGIN1("safe_browsing", "Deferred", this, "original_url",
-                           original_url_.spec());
 }
 
 void BrowserURLLoaderThrottle::OnCompleteCheck(bool slow_check,
@@ -288,7 +283,6 @@ void BrowserURLLoaderThrottle::OnCompleteCheck(bool slow_check,
 
     if (pending_checks_ == 0 && deferred_) {
       deferred_ = false;
-      TRACE_EVENT_ASYNC_END0("safe_browsing", "Deferred", this);
       delegate_->Resume();
     }
   } else {
diff --git a/components/safe_browsing/content/common/safe_browsing.mojom b/components/safe_browsing/content/common/safe_browsing.mojom
index 72c21819f36d..8cc3587bc82d 100644
--- a/components/safe_browsing/content/common/safe_browsing.mojom
+++ b/components/safe_browsing/content/common/safe_browsing.mojom
@@ -117,7 +117,6 @@ enum PhishingDetectorResult {
   INVALID_SCORE = 4,
 };
 
-[EnableIf=full_safe_browsing]
 // Interface for setting the CSD model and to start phishing classification.
 interface PhishingDetector {
   // A classification model for client-side phishing detection.
diff --git a/components/safe_browsing/content/password_protection/password_protection_service.cc b/components/safe_browsing/content/password_protection/password_protection_service.cc
index 6a180cb90ef0..27b0994a4fcd 100644
--- a/components/safe_browsing/content/password_protection/password_protection_service.cc
+++ b/components/safe_browsing/content/password_protection/password_protection_service.cc
@@ -49,7 +49,7 @@ namespace {
 // Keys for storing password protection verdict into a DictionaryValue.
 const int kRequestTimeoutMs = 10000;
 const char kPasswordProtectionRequestUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/login";
+    "https://no-thanks.invalid";
 
 }  // namespace
 
@@ -253,8 +253,7 @@ bool PasswordProtectionService::CanSendPing(
     LoginReputationClientRequest::TriggerType trigger_type,
     const GURL& main_frame_url,
     ReusedPasswordAccountType password_type) {
-  return IsPingingEnabled(trigger_type, password_type) &&
-         !IsURLWhitelistedForPasswordEntry(main_frame_url);
+  return false;
 }
 
 void PasswordProtectionService::RequestFinished(
@@ -441,8 +440,7 @@ PasswordProtectionService::MaybeCreateNavigationThrottle(
 
 bool PasswordProtectionService::IsWarningEnabled(
     ReusedPasswordAccountType password_type) {
-  return GetPasswordProtectionWarningTriggerPref(password_type) ==
-         PHISHING_REUSE;
+  return false;
 }
 
 // static
diff --git a/components/safe_browsing/content/password_protection/password_protection_service.h b/components/safe_browsing/content/password_protection/password_protection_service.h
index 1823146c4b4e..915865f236c4 100644
--- a/components/safe_browsing/content/password_protection/password_protection_service.h
+++ b/components/safe_browsing/content/password_protection/password_protection_service.h
@@ -23,10 +23,8 @@
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_reuse_detector.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/common/safe_browsing.mojom.h"
 #include "components/safe_browsing/content/password_protection/metrics_util.h"
 #include "components/safe_browsing/core/browser/referrer_chain_provider.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/sessions/core/session_id.h"
@@ -201,10 +199,6 @@ class PasswordProtectionService : public history::HistoryServiceObserver {
   // Returns if the warning UI is enabled.
   bool IsWarningEnabled(ReusedPasswordAccountType password_type);
 
-  // Returns the pref value of password protection warning trigger.
-  virtual PasswordProtectionTrigger GetPasswordProtectionWarningTriggerPref(
-      ReusedPasswordAccountType password_type) const = 0;
-
   // If |url| matches Safe Browsing whitelist domains, password protection
   // change password URL, or password protection login URLs in the enterprise
   // policy.
diff --git a/components/safe_browsing/content/web_ui/safe_browsing_ui.cc b/components/safe_browsing/content/web_ui/safe_browsing_ui.cc
index c04f24f05561..9ab45fd9638e 100644
--- a/components/safe_browsing/content/web_ui/safe_browsing_ui.cc
+++ b/components/safe_browsing/content/web_ui/safe_browsing_ui.cc
@@ -30,7 +30,6 @@
 #include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/core/browser/referrer_chain_provider.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/proto/csd.pb.h"
 #if BUILDFLAG(FULL_SAFE_BROWSING)
@@ -1698,9 +1697,7 @@ void SafeBrowsingUIHandler::GetPrefs(const base::ListValue* args) {
   AllowJavascript();
   std::string callback_id;
   args->GetString(0, &callback_id);
-  ResolveJavascriptCallback(base::Value(callback_id),
-                            safe_browsing::GetSafeBrowsingPreferencesList(
-                                user_prefs::UserPrefs::Get(browser_context_)));
+  ResolveJavascriptCallback(base::Value(callback_id), base::ListValue());
 }
 
 void SafeBrowsingUIHandler::GetCookie(const base::ListValue* args) {
diff --git a/components/safe_browsing/core/browser/safe_browsing_url_checker_impl.cc b/components/safe_browsing/core/browser/safe_browsing_url_checker_impl.cc
index 3c4861b3d9ea..3bdf2af53bc4 100644
--- a/components/safe_browsing/core/browser/safe_browsing_url_checker_impl.cc
+++ b/components/safe_browsing/core/browser/safe_browsing_url_checker_impl.cc
@@ -9,7 +9,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/metrics/histogram_macros_local.h"
 #include "base/task/post_task.h"
-#include "base/trace_event/trace_event.h"
 #include "components/safe_browsing/core/browser/url_checker_delegate.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
@@ -145,8 +144,6 @@ SafeBrowsingUrlCheckerImpl::~SafeBrowsingUrlCheckerImpl() {
       database_manager_->CancelCheck(this);
     }
     const GURL& url = urls_[next_index_].url;
-    TRACE_EVENT_ASYNC_END1("safe_browsing", "CheckUrl", this, "url",
-                           url.spec());
   }
 }
 
@@ -207,8 +204,6 @@ void SafeBrowsingUrlCheckerImpl::OnUrlResult(const GURL& url,
   timer_.Stop();
   RecordCheckUrlTimeout(/*timed_out=*/false);
 
-  TRACE_EVENT_ASYNC_END1("safe_browsing", "CheckUrl", this, "url", url.spec());
-
   const bool is_prefetch = (load_flags_ & net::LOAD_PREFETCH);
 
   // Handle main frame and subresources. We do this to catch resources flagged
@@ -346,8 +341,6 @@ void SafeBrowsingUrlCheckerImpl::ProcessUrls() {
     SBThreatType threat_type = CheckWebUIUrls(url);
     if (threat_type != safe_browsing::SB_THREAT_TYPE_SAFE) {
       state_ = STATE_CHECKING_URL;
-      TRACE_EVENT_ASYNC_BEGIN1("safe_browsing", "CheckUrl", this, "url",
-                               url.spec());
 
       base::PostTask(
           FROM_HERE, CreateTaskTraits(ThreadID::IO),
@@ -357,9 +350,6 @@ void SafeBrowsingUrlCheckerImpl::ProcessUrls() {
       break;
     }
 
-    TRACE_EVENT_ASYNC_BEGIN1("safe_browsing", "CheckUrl", this, "url",
-                             url.spec());
-
     // Start a timer to abort the check if it takes too long.
     timer_.Start(FROM_HERE,
                  base::TimeDelta::FromMilliseconds(kCheckUrlTimeoutMs), this,
@@ -418,9 +408,6 @@ void SafeBrowsingUrlCheckerImpl::ProcessUrls() {
       timer_.Stop();
       RecordCheckUrlTimeout(/*timed_out=*/false);
 
-      TRACE_EVENT_ASYNC_END1("safe_browsing", "CheckUrl", this, "url",
-                             url.spec());
-
       if (!RunNextCallback(true, false))
         return;
 
diff --git a/components/safe_browsing/core/common/BUILD.gn b/components/safe_browsing/core/common/BUILD.gn
index f3a82dcb673a..f063078ac31c 100644
--- a/components/safe_browsing/core/common/BUILD.gn
+++ b/components/safe_browsing/core/common/BUILD.gn
@@ -6,20 +6,8 @@ import("//build/config/features.gni")
 import("//components/safe_browsing/buildflags.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 
-static_library("safe_browsing_prefs") {
-  sources = [
-    "safe_browsing_prefs.cc",
-    "safe_browsing_prefs.h",
-  ]
-
-  deps = [
-    "//base:base",
-    "//components/pref_registry:pref_registry",
-    "//components/prefs",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:thread_utils",
-    "//net:net",
-  ]
+group("safe_browsing_prefs") {
+  # SafeBrowsing prefs are disabled
 }
 
 source_set("safe_browsing_policy_handler") {
diff --git a/components/safe_browsing/core/common/safe_browsing_policy_handler.cc b/components/safe_browsing/core/common/safe_browsing_policy_handler.cc
index 510fafd2540e..136df6dcf717 100644
--- a/components/safe_browsing/core/common/safe_browsing_policy_handler.cc
+++ b/components/safe_browsing/core/common/safe_browsing_policy_handler.cc
@@ -12,7 +12,6 @@
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_value_map.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/strings/grit/components_strings.h"
 
 namespace safe_browsing {
@@ -172,34 +171,14 @@ void SafeBrowsingPolicyHandler::ApplyPolicySettings(
 
   if (!value.has_value())
     return;
-
-  switch (value.value()) {
-    case ProtectionLevel::kNoProtection:
-      prefs->SetBoolean(prefs::kSafeBrowsingEnabled, false);
-      prefs->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
-      return;
-    case ProtectionLevel::kStandardProtection:
-      prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-      prefs->SetBoolean(prefs::kSafeBrowsingEnhanced, false);
-      return;
-    case ProtectionLevel::kEnhancedProtection:
-      // |kSafeBrowsingEnhanced| is enabled, but so is
-      // |kSafeBrowsingEnabled| because the extensions API should see Safe
-      // Browsing as enabled. See https://crbug.com/1064722 for more background.
-      prefs->SetBoolean(prefs::kSafeBrowsingEnabled, true);
-      prefs->SetBoolean(prefs::kSafeBrowsingEnhanced, true);
-      return;
-  }
 }
 
 // static
 SafeBrowsingPolicyHandler::ProtectionLevel
 SafeBrowsingPolicyHandler::GetSafeBrowsingProtectionLevel(
     const PrefService* pref_sevice) {
-  bool safe_browsing_enhanced =
-      pref_sevice->GetBoolean(prefs::kSafeBrowsingEnhanced);
-  bool safe_browsing_enabled =
-      pref_sevice->GetBoolean(prefs::kSafeBrowsingEnabled);
+  bool safe_browsing_enhanced = false;
+  bool safe_browsing_enabled = false;
 
   if (safe_browsing_enhanced)
     return ProtectionLevel::kEnhancedProtection;
@@ -213,10 +192,8 @@ SafeBrowsingPolicyHandler::GetSafeBrowsingProtectionLevel(
 // static
 bool SafeBrowsingPolicyHandler::IsSafeBrowsingProtectionLevelSetByPolicy(
     const PrefService* pref_service) {
-  bool is_safe_browsing_enabled_managed =
-      pref_service->IsManagedPreference(prefs::kSafeBrowsingEnabled);
-  bool is_safe_browsing_enhanced_managed =
-      pref_service->IsManagedPreference(prefs::kSafeBrowsingEnhanced);
+  bool is_safe_browsing_enabled_managed = false;
+  bool is_safe_browsing_enhanced_managed = false;
   DCHECK_EQ(is_safe_browsing_enabled_managed,
             is_safe_browsing_enhanced_managed);
   return is_safe_browsing_enabled_managed && is_safe_browsing_enhanced_managed;
diff --git a/components/safe_browsing/core/common/safebrowsing_constants.cc b/components/safe_browsing/core/common/safebrowsing_constants.cc
index e48428e786f5..85f2411e3944 100644
--- a/components/safe_browsing/core/common/safebrowsing_constants.cc
+++ b/components/safe_browsing/core/common/safebrowsing_constants.cc
@@ -15,7 +15,7 @@ const base::FilePath::CharType kSafeBrowsingBaseFilename[] =
 const base::FilePath::CharType kCookiesFile[] = FILE_PATH_LITERAL(" Cookies");
 
 // The URL for the Safe Browsing page.
-const char kSafeBrowsingUrl[] = "https://safebrowsing.google.com/";
+const char kSafeBrowsingUrl[] = "https://no-thanks.invalid/";
 
 const char kCustomCancelReasonForURLLoader[] = "SafeBrowsing";
 
diff --git a/components/safe_browsing/core/db/hit_report.h b/components/safe_browsing/core/db/hit_report.h
index 8bc0796c277d..6edf5bb77eb7 100644
--- a/components/safe_browsing/core/db/hit_report.h
+++ b/components/safe_browsing/core/db/hit_report.h
@@ -7,7 +7,6 @@
 #ifndef COMPONENTS_SAFE_BROWSING_CORE_DB_HIT_REPORT_H_
 #define COMPONENTS_SAFE_BROWSING_CORE_DB_HIT_REPORT_H_
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "url/gurl.h"
 
@@ -44,7 +43,6 @@ struct HitReport {
   // NOTE(vakh): Unused at the moment, but may be used later.
   std::string population_id;
 
-  ExtendedReportingLevel extended_reporting_level;
   bool is_enhanced_protection = false;
   bool is_metrics_reporting_active;
 
diff --git a/components/safe_browsing/core/db/util.h b/components/safe_browsing/core/db/util.h
index 60439acd2e90..2bb3824ce17d 100644
--- a/components/safe_browsing/core/db/util.h
+++ b/components/safe_browsing/core/db/util.h
@@ -18,7 +18,6 @@
 #include "base/strings/string_piece.h"
 #include "base/time/time.h"
 #include "base/trace_event/traced_value.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 
 namespace safe_browsing {
diff --git a/components/safe_browsing/core/db/v4_get_hash_protocol_manager.cc b/components/safe_browsing/core/db/v4_get_hash_protocol_manager.cc
index cbcb0a6f0a92..125b44335520 100644
--- a/components/safe_browsing/core/db/v4_get_hash_protocol_manager.cc
+++ b/components/safe_browsing/core/db/v4_get_hash_protocol_manager.cc
@@ -14,8 +14,6 @@
 #include "base/stl_util.h"
 #include "base/strings/string_split.h"
 #include "base/timer/timer.h"
-#include "base/trace_event/trace_event.h"
-#include "base/trace_event/traced_value.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
 #include "net/base/load_flags.h"
 #include "net/http/http_response_headers.h"
@@ -607,9 +605,6 @@ bool V4GetHashProtocolManager::ParseHashResponse(
     FullHashInfo full_hash_info(match.threat().hash(), list_id,
                                 positive_expiry);
     ParseMetadata(match, &full_hash_info.metadata);
-    TRACE_EVENT2("safe_browsing", "V4GetHashProtocolManager::ParseHashResponse",
-                 "threat_type", full_hash_info.list_id.threat_type(),
-                 "metadata", full_hash_info.metadata.ToTracedValue());
     full_hash_infos->push_back(full_hash_info);
   }
   return true;
diff --git a/components/safe_browsing/core/db/v4_local_database_manager.cc b/components/safe_browsing/core/db/v4_local_database_manager.cc
index 94b469c5a2f9..9708ac035109 100644
--- a/components/safe_browsing/core/db/v4_local_database_manager.cc
+++ b/components/safe_browsing/core/db/v4_local_database_manager.cc
@@ -250,10 +250,9 @@ const V4LocalDatabaseManager*
 
 // static
 scoped_refptr<V4LocalDatabaseManager> V4LocalDatabaseManager::Create(
-    const base::FilePath& base_path,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    const base::FilePath& base_path) {
   return base::WrapRefCounted(new V4LocalDatabaseManager(
-      base_path, extended_reporting_level_callback, nullptr));
+      base_path, nullptr));
 }
 
 void V4LocalDatabaseManager::CollectDatabaseManagerInfo(
@@ -275,10 +274,8 @@ void V4LocalDatabaseManager::CollectDatabaseManagerInfo(
 
 V4LocalDatabaseManager::V4LocalDatabaseManager(
     const base::FilePath& base_path,
-    ExtendedReportingLevelCallback extended_reporting_level_callback,
     scoped_refptr<base::SequencedTaskRunner> task_runner_for_tests)
     : base_path_(base_path),
-      extended_reporting_level_callback_(extended_reporting_level_callback),
       list_infos_(GetListInfos()),
       task_runner_(task_runner_for_tests
                        ? task_runner_for_tests
@@ -1024,8 +1021,7 @@ void V4LocalDatabaseManager::SetupUpdateProtocolManager(
                           weak_factory_.GetWeakPtr());
 
   v4_update_protocol_manager_ = V4UpdateProtocolManager::Create(
-      url_loader_factory, config, update_callback,
-      extended_reporting_level_callback_);
+      url_loader_factory, config, update_callback);
 }
 
 void V4LocalDatabaseManager::UpdateRequestCompleted(
diff --git a/components/safe_browsing/core/db/v4_local_database_manager.h b/components/safe_browsing/core/db/v4_local_database_manager.h
index 0a37f20b1aab..590fb9a5f033 100644
--- a/components/safe_browsing/core/db/v4_local_database_manager.h
+++ b/components/safe_browsing/core/db/v4_local_database_manager.h
@@ -33,8 +33,7 @@ class V4LocalDatabaseManager : public SafeBrowsingDatabaseManager {
   // Create and return an instance of V4LocalDatabaseManager, if Finch trial
   // allows it; nullptr otherwise.
   static scoped_refptr<V4LocalDatabaseManager> Create(
-      const base::FilePath& base_path,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      const base::FilePath& base_path);
 
   // Populates the protobuf with the database data.
   void CollectDatabaseManagerInfo(
@@ -100,7 +99,6 @@ class V4LocalDatabaseManager : public SafeBrowsingDatabaseManager {
   // Must be initialized by calling StartOnIOThread() before using.
   V4LocalDatabaseManager(
       const base::FilePath& base_path,
-      ExtendedReportingLevelCallback extended_reporting_level_callback,
       scoped_refptr<base::SequencedTaskRunner> task_runner_for_tests);
 
   ~V4LocalDatabaseManager() override;
@@ -346,10 +344,6 @@ class V4LocalDatabaseManager : public SafeBrowsingDatabaseManager {
   // ready to process next update.
   DatabaseUpdatedCallback db_updated_callback_;
 
-  // Callback to get the current extended reporting level. Needed by the update
-  // manager.
-  ExtendedReportingLevelCallback extended_reporting_level_callback_;
-
   // The client_state of each list currently being synced. This is updated each
   // time a database update completes, and used to send list client_state
   // information in the full hash request.
diff --git a/components/safe_browsing/core/db/v4_protocol_manager_util.cc b/components/safe_browsing/core/db/v4_protocol_manager_util.cc
index c7f7915a745f..536e38216a07 100644
--- a/components/safe_browsing/core/db/v4_protocol_manager_util.cc
+++ b/components/safe_browsing/core/db/v4_protocol_manager_util.cc
@@ -29,7 +29,7 @@ namespace safe_browsing {
 // Can be overriden by tests.
 const char* g_sbv4_url_prefix_for_testing = nullptr;
 
-const char kSbV4UrlPrefix[] = "https://safebrowsing.googleapis.com/v4";
+const char kSbV4UrlPrefix[] = "https://no-thanks.invalid";
 
 const base::FilePath::CharType kStoreSuffix[] = FILE_PATH_LITERAL(".store");
 
@@ -38,7 +38,7 @@ namespace {
 // The default URL prefix where browser reports safe browsing hits and malware
 // details.
 const char kSbReportsURLPrefix[] =
-    "https://safebrowsing.google.com/safebrowsing";
+    "http://no-thanks.invalid";
 
 std::string Unescape(const std::string& url) {
   std::string unescaped_str(url);
@@ -89,7 +89,6 @@ void SetSbV4UrlPrefixForTesting(const char* url_prefix) {
 
 std::string GetReportUrl(const V4ProtocolConfig& config,
                          const std::string& method,
-                         const ExtendedReportingLevel* reporting_level,
                          const bool is_enhanced_protection) {
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=4.0", kSbReportsURLPrefix, method.c_str(),
@@ -99,8 +98,6 @@ std::string GetReportUrl(const V4ProtocolConfig& config,
     base::StringAppendF(&url, "&key=%s",
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
-  if (reporting_level)
-    url.append(base::StringPrintf("&ext=%d", *reporting_level));
   if (is_enhanced_protection)
     url.append(base::StringPrintf("&enh=%d", is_enhanced_protection));
   return url;
diff --git a/components/safe_browsing/core/db/v4_protocol_manager_util.h b/components/safe_browsing/core/db/v4_protocol_manager_util.h
index b81ab05594b3..30271bc2d8e0 100644
--- a/components/safe_browsing/core/db/v4_protocol_manager_util.h
+++ b/components/safe_browsing/core/db/v4_protocol_manager_util.h
@@ -18,9 +18,10 @@
 #include <vector>
 
 #include "base/containers/flat_set.h"
+#include "base/files/file_path.h"
 #include "base/gtest_prod_util.h"
 #include "base/strings/string_piece.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
+#include "base/time/time.h"
 #include "components/safe_browsing/core/db/safebrowsing.pb.h"
 #include "url/gurl.h"
 
@@ -89,7 +90,6 @@ V4ProtocolConfig GetV4ProtocolConfig(const std::string& client_name,
 std::string GetReportUrl(
     const V4ProtocolConfig& config,
     const std::string& method,
-    const ExtendedReportingLevel* reporting_level = nullptr,
     const bool is_enhanced_protection = false);
 
 // Different types of threats that SafeBrowsing protects against. This is the
diff --git a/components/safe_browsing/core/db/v4_update_protocol_manager.cc b/components/safe_browsing/core/db/v4_update_protocol_manager.cc
index 4eeb85f7ea4e..1e7637bdf395 100644
--- a/components/safe_browsing/core/db/v4_update_protocol_manager.cc
+++ b/components/safe_browsing/core/db/v4_update_protocol_manager.cc
@@ -75,19 +75,8 @@ static const int kV4TimerStartIntervalSecMax = 300;
 // Maximum time, in seconds, to wait for a response to an update request.
 static const int kV4TimerUpdateWaitSecMax = 15 * 60;  // 15 minutes
 
-ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue(
-    ExtendedReportingLevel reporting_level) {
-  switch (reporting_level) {
-    case SBER_LEVEL_OFF:
-      return ChromeClientInfo::OPT_OUT;
-    case SBER_LEVEL_LEGACY:
-      return ChromeClientInfo::EXTENDED;
-    case SBER_LEVEL_SCOUT:
-      return ChromeClientInfo::SCOUT;
-    default:
-      NOTREACHED() << "Unexpected reporting_level!";
-      return ChromeClientInfo::UNSPECIFIED;
-  }
+ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue() {
+  return ChromeClientInfo::OPT_OUT;
 }
 
 // The default V4UpdateProtocolManagerFactory.
@@ -99,12 +88,10 @@ class V4UpdateProtocolManagerFactoryImpl
   std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback)
+      V4UpdateCallback update_callback)
       override {
     return base::WrapUnique(
-        new V4UpdateProtocolManager(url_loader_factory, config, update_callback,
-                                    extended_reporting_level_callback));
+        new V4UpdateProtocolManager(url_loader_factory, config, update_callback));
   }
 
  private:
@@ -120,14 +107,12 @@ V4UpdateProtocolManagerFactory* V4UpdateProtocolManager::factory_ = nullptr;
 std::unique_ptr<V4UpdateProtocolManager> V4UpdateProtocolManager::Create(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    V4UpdateCallback update_callback) {
   if (!factory_) {
     factory_ = new V4UpdateProtocolManagerFactoryImpl();
   }
   return factory_->CreateProtocolManager(url_loader_factory, config,
-                                         update_callback,
-                                         extended_reporting_level_callback);
+                                         update_callback);
 }
 
 void V4UpdateProtocolManager::ResetUpdateErrors() {
@@ -138,8 +123,7 @@ void V4UpdateProtocolManager::ResetUpdateErrors() {
 V4UpdateProtocolManager::V4UpdateProtocolManager(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback)
+    V4UpdateCallback update_callback)
     : update_error_count_(0),
       update_back_off_mult_(1),
       next_update_interval_(base::TimeDelta::FromSeconds(
@@ -147,8 +131,7 @@ V4UpdateProtocolManager::V4UpdateProtocolManager(
                         kV4TimerStartIntervalSecMax))),
       config_(config),
       url_loader_factory_(url_loader_factory),
-      update_callback_(update_callback),
-      extended_reporting_level_callback_(extended_reporting_level_callback) {
+      update_callback_(update_callback) {
   // Do not auto-schedule updates. Let the owner (V4LocalDatabaseManager) do it
   // when it is ready to process updates.
 }
@@ -243,11 +226,6 @@ std::string V4UpdateProtocolManager::GetBase64SerializedUpdateRequestProto() {
         RICE);
   }
 
-  if (!extended_reporting_level_callback_.is_null()) {
-    request.mutable_chrome_client_info()->set_reporting_population(
-        GetReportingLevelProtoValue(extended_reporting_level_callback_.Run()));
-  }
-
   V4ProtocolManagerUtil::SetClientInfoFromConfig(request.mutable_client(),
                                                  config_);
 
diff --git a/components/safe_browsing/core/db/v4_update_protocol_manager.h b/components/safe_browsing/core/db/v4_update_protocol_manager.h
index 79c39d0996ee..6eb69e722c6c 100644
--- a/components/safe_browsing/core/db/v4_update_protocol_manager.h
+++ b/components/safe_browsing/core/db/v4_update_protocol_manager.h
@@ -22,7 +22,6 @@
 #include "base/sequence_checker.h"
 #include "base/time/time.h"
 #include "base/timer/timer.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/db/safebrowsing.pb.h"
 #include "components/safe_browsing/core/db/util.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
@@ -46,9 +45,6 @@ class V4UpdateProtocolManagerFactory;
 using V4UpdateCallback =
     base::RepeatingCallback<void(std::unique_ptr<ParsedServerResponse>)>;
 
-using ExtendedReportingLevelCallback =
-    base::RepeatingCallback<ExtendedReportingLevel()>;
-
 class V4UpdateProtocolManager {
  public:
   ~V4UpdateProtocolManager();
@@ -63,8 +59,7 @@ class V4UpdateProtocolManager {
   static std::unique_ptr<V4UpdateProtocolManager> Create(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      V4UpdateCallback update_callback);
 
   void OnURLLoaderComplete(std::unique_ptr<std::string> response_body);
 
@@ -86,8 +81,7 @@ class V4UpdateProtocolManager {
   V4UpdateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback);
+      V4UpdateCallback update_callback);
 
  private:
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
@@ -102,8 +96,6 @@ class V4UpdateProtocolManager {
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest, TestDisableAutoUpdates);
   FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
                            TestGetUpdatesHasTimeout);
-  FRIEND_TEST_ALL_PREFIXES(V4UpdateProtocolManagerTest,
-                           TestExtendedReportingLevelIncluded);
   friend class V4UpdateProtocolManagerFactoryImpl;
 
   void OnURLLoaderCompleteInternal(int net_error,
@@ -205,8 +197,6 @@ class V4UpdateProtocolManager {
   // complete.
   base::OneShotTimer timeout_timer_;
 
-  ExtendedReportingLevelCallback extended_reporting_level_callback_;
-
   SEQUENCE_CHECKER(sequence_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(V4UpdateProtocolManager);
@@ -220,8 +210,7 @@ class V4UpdateProtocolManagerFactory {
   virtual std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback) = 0;
+      V4UpdateCallback update_callback) = 0;
 
  private:
   DISALLOW_COPY_AND_ASSIGN(V4UpdateProtocolManagerFactory);
diff --git a/components/safe_browsing/core/file_type_policies.h b/components/safe_browsing/core/file_type_policies.h
index 45f0c0922604..14d7209ac48a 100644
--- a/components/safe_browsing/core/file_type_policies.h
+++ b/components/safe_browsing/core/file_type_policies.h
@@ -11,7 +11,6 @@
 #include "base/files/file_path.h"
 #include "base/gtest_prod_util.h"
 #include "base/synchronization/lock.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 
 namespace safe_browsing {
 
@@ -64,20 +63,8 @@ class FileTypePolicies {
   // True if the user can select this file type to be opened automatically.
   bool IsAllowedToOpenAutomatically(const base::FilePath& file) const;
 
-  // Return the danger level of this file type.
-  DownloadFileType::DangerLevel GetFileDangerLevel(
-      const base::FilePath& file) const;
-
-  // Return the type of ping we should send for this file
-  DownloadFileType::PingSetting PingSettingForFile(
-      const base::FilePath& file) const;
-
   float SampledPingProbability() const;
 
-  DownloadFileType PolicyForFile(const base::FilePath& file) const;
-  DownloadFileType::PlatformSettings SettingsForFile(
-      const base::FilePath& file) const;
-
   // Return max size for which unpacking and/or binary feature extration is
   // supported for the given file extension.
   uint64_t GetMaxFileSizeToAnalyze(const std::string& ascii_ext) const;
@@ -115,32 +102,12 @@ class FileTypePolicies {
   // Return the ASCII lowercase extension w/o leading dot, or empty.
   static std::string CanonicalizedExtension(const base::FilePath& file);
 
-  // Look up the policy for a given ASCII ext.
-  virtual const DownloadFileType& PolicyForExtension(
-      const std::string& ext) const;
-
  private:
-  // Swap in a different config. This will rebuild file_type_by_ext_ index.
-  void SwapConfig(std::unique_ptr<DownloadFileTypeConfig>& new_config);
-  void SwapConfigLocked(std::unique_ptr<DownloadFileTypeConfig>& new_config);
-
   // Read data from the main ResourceBundle. This updates the internal list
   // only if the data passes integrity checks. This is normally called once
   // after construction.
   void PopulateFromResourceBundle();
 
-  // The latest config we've committed. Starts out null.
-  // Protected by lock_.
-  std::unique_ptr<DownloadFileTypeConfig> config_;
-
-  // This references entries in config_.
-  // Protected by lock_.
-  std::map<std::string, const DownloadFileType*> file_type_by_ext_;
-
-  // Type used if we can't load from disk.
-  // Written only in the constructor.
-  DownloadFileType last_resort_default_;
-
   mutable base::Lock lock_;
 
   FRIEND_TEST_ALL_PREFIXES(FileTypePoliciesTest, UnpackResourceBundle);
diff --git a/components/safe_browsing/core/ping_manager.cc b/components/safe_browsing/core/ping_manager.cc
index c2e610045a99..7399b80acd2a 100644
--- a/components/safe_browsing/core/ping_manager.cc
+++ b/components/safe_browsing/core/ping_manager.cc
@@ -141,7 +141,7 @@ GURL PingManager::SafeBrowsingHitUrl(
          hit_report.threat_type == SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING ||
          hit_report.threat_type == SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE);
   std::string url =
-      GetReportUrl(config_, "report", &hit_report.extended_reporting_level,
+      GetReportUrl(config_, "report",
                    hit_report.is_enhanced_protection);
   std::string threat_list = "none";
   switch (hit_report.threat_type) {
diff --git a/components/safe_browsing/core/realtime/policy_engine.cc b/components/safe_browsing/core/realtime/policy_engine.cc
index 1b5e90cc6257..0231a35bd6ae 100644
--- a/components/safe_browsing/core/realtime/policy_engine.cc
+++ b/components/safe_browsing/core/realtime/policy_engine.cc
@@ -9,7 +9,6 @@
 #include "base/stl_util.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/signin/public/identity_manager/account_info.h"
@@ -90,7 +89,7 @@ bool RealTimePolicyEngine::IsUserMbbOptedIn(PrefService* pref_service) {
 
 // static
 bool RealTimePolicyEngine::IsUserEpOptedIn(PrefService* pref_service) {
-  return IsEnhancedProtectionEnabled(*pref_service);
+  return false;
 }
 
 // static
diff --git a/components/safe_browsing/core/realtime/url_lookup_service.cc b/components/safe_browsing/core/realtime/url_lookup_service.cc
index 439439b00420..ec121cccbff5 100644
--- a/components/safe_browsing/core/realtime/url_lookup_service.cc
+++ b/components/safe_browsing/core/realtime/url_lookup_service.cc
@@ -14,7 +14,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/buildflags.h"
 #include "components/safe_browsing/core/browser/safe_browsing_token_fetcher.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
 #include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "components/safe_browsing/core/realtime/policy_engine.h"
@@ -64,32 +63,6 @@ void RealTimeUrlLookupService::StartLookup(
     const GURL& url,
     RTLookupRequestCallback request_callback,
     RTLookupResponseCallback response_callback) {
-  DCHECK(CurrentlyOnThread(ThreadID::UI));
-  DCHECK(url.is_valid());
-
-  // Check cache.
-  std::unique_ptr<RTLookupResponse> cache_response =
-      GetCachedRealTimeUrlVerdict(url);
-  if (cache_response) {
-    base::PostTask(FROM_HERE, CreateTaskTraits(ThreadID::IO),
-                   base::BindOnce(std::move(response_callback),
-                                  /* is_rt_lookup_successful */ true,
-                                  std::move(cache_response)));
-    return;
-  }
-
-  if (CanPerformFullURLLookupWithToken()) {
-    token_fetcher_->Start(
-        signin::ConsentLevel::kNotRequired,
-        base::BindOnce(&RealTimeUrlLookupService::OnGetAccessToken,
-                       weak_factory_.GetWeakPtr(), url,
-                       std::move(request_callback),
-                       std::move(response_callback), base::TimeTicks::Now()));
-  } else {
-    std::unique_ptr<RTLookupRequest> request = FillRequestProto(url);
-    SendRequest(url, /* access_token_info */ base::nullopt, std::move(request),
-                std::move(request_callback), std::move(response_callback));
-  }
 }
 
 void RealTimeUrlLookupService::OnGetAccessToken(
@@ -98,13 +71,6 @@ void RealTimeUrlLookupService::OnGetAccessToken(
     RTLookupResponseCallback response_callback,
     base::TimeTicks get_token_start_time,
     base::Optional<signin::AccessTokenInfo> access_token_info) {
-  std::unique_ptr<RTLookupRequest> request = FillRequestProto(url);
-  base::UmaHistogramTimes("SafeBrowsing.RT.GetToken.Time",
-                          base::TimeTicks::Now() - get_token_start_time);
-  base::UmaHistogramBoolean("SafeBrowsing.RT.HasTokenFromFetcher",
-                            access_token_info.has_value());
-  SendRequest(url, access_token_info, std::move(request),
-              std::move(request_callback), std::move(response_callback));
 }
 
 void RealTimeUrlLookupService::SendRequest(
@@ -113,30 +79,6 @@ void RealTimeUrlLookupService::SendRequest(
     std::unique_ptr<RTLookupRequest> request,
     RTLookupRequestCallback request_callback,
     RTLookupResponseCallback response_callback) {
-  DCHECK(CurrentlyOnThread(ThreadID::UI));
-  UMA_HISTOGRAM_ENUMERATION("SafeBrowsing.RT.Request.UserPopulation",
-                            request->population().user_population(),
-                            ChromeUserPopulation::UserPopulation_MAX + 1);
-  std::string req_data;
-  request->SerializeToString(&req_data);
-
-  auto resource_request = GetResourceRequest();
-  if (access_token_info.has_value()) {
-    resource_request->headers.SetHeader(
-        net::HttpRequestHeaders::kAuthorization,
-        base::StrCat({kAuthHeaderBearer, access_token_info.value().token}));
-  }
-  base::UmaHistogramBoolean("SafeBrowsing.RT.HasTokenInRequest",
-                            access_token_info.has_value());
-
-  SendRequestInternal(std::move(resource_request), req_data, url,
-                      std::move(response_callback));
-
-  base::PostTask(FROM_HERE, CreateTaskTraits(ThreadID::IO),
-                 base::BindOnce(std::move(request_callback), std::move(request),
-                                access_token_info.has_value()
-                                    ? access_token_info.value().token
-                                    : ""));
 }
 
 RealTimeUrlLookupService::~RealTimeUrlLookupService() {}
@@ -149,11 +91,7 @@ std::unique_ptr<RTLookupRequest> RealTimeUrlLookupService::FillRequestProto(
 
   ChromeUserPopulation* user_population = request->mutable_population();
   user_population->set_user_population(
-      IsEnhancedProtectionEnabled(*pref_service_)
-          ? ChromeUserPopulation::ENHANCED_PROTECTION
-          : IsExtendedReportingEnabled(*pref_service_)
-                ? ChromeUserPopulation::EXTENDED_REPORTING
-                : ChromeUserPopulation::SAFE_BROWSING);
+      ChromeUserPopulation::UNKNOWN_USER_POPULATION);
 
   user_population->set_profile_management_status(profile_management_status_);
   user_population->set_is_history_sync_enabled(IsHistorySyncEnabled());
@@ -168,25 +106,19 @@ std::unique_ptr<RTLookupRequest> RealTimeUrlLookupService::FillRequestProto(
 // TODO(bdea): Refactor this method into a util class as multiple SB classes
 // have this method.
 bool RealTimeUrlLookupService::IsHistorySyncEnabled() {
-  return sync_service_ && sync_service_->IsSyncFeatureActive() &&
-         !sync_service_->IsLocalSyncEnabled() &&
-         sync_service_->GetActiveDataTypes().Has(
-             syncer::HISTORY_DELETE_DIRECTIVES);
+  return false;
 }
 
 bool RealTimeUrlLookupService::CanPerformFullURLLookup() const {
-  return RealTimePolicyEngine::CanPerformFullURLLookup(
-      pref_service_, is_off_the_record_, variations_);
+  return false;
 }
 
 bool RealTimeUrlLookupService::CanPerformFullURLLookupWithToken() const {
-  return RealTimePolicyEngine::CanPerformFullURLLookupWithToken(
-      pref_service_, is_off_the_record_, sync_service_, identity_manager_,
-      variations_);
+  return false;
 }
 
 bool RealTimeUrlLookupService::CanCheckSubresourceURL() const {
-  return IsEnhancedProtectionEnabled(*pref_service_);
+  return false;
 }
 
 bool RealTimeUrlLookupService::CanCheckSafeBrowsingDb() const {
@@ -233,7 +165,7 @@ RealTimeUrlLookupService::GetTrafficAnnotationTag() const {
 
 GURL RealTimeUrlLookupService::GetRealTimeLookupUrl() const {
   return GURL(
-      "https://safebrowsing.google.com/safebrowsing/clientreport/realtime");
+      "https://no-thanks.invalid");
 }
 
 }  // namespace safe_browsing
diff --git a/components/safe_browsing/core/triggers/trigger_manager.cc b/components/safe_browsing/core/triggers/trigger_manager.cc
index 84e9ac284b3f..89af870467aa 100644
--- a/components/safe_browsing/core/triggers/trigger_manager.cc
+++ b/components/safe_browsing/core/triggers/trigger_manager.cc
@@ -10,7 +10,6 @@
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/base_ui_manager.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/thread_utils.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/security_interstitials/core/unsafe_resource.h"
@@ -83,11 +82,11 @@ SBErrorOptions TriggerManager::GetSBErrorDisplayOptions(
     const PrefService& pref_service,
     content::WebContents* web_contents) {
   return SBErrorOptions(/*is_main_frame_load_blocked=*/false,
-                        IsExtendedReportingOptInAllowed(pref_service),
+                        /*IsExtendedReportingOptInAllowed(pref_service)*/false,
                         web_contents->GetBrowserContext()->IsOffTheRecord(),
-                        IsExtendedReportingEnabled(pref_service),
-                        IsExtendedReportingPolicyManaged(pref_service),
-                        IsEnhancedProtectionEnabled(pref_service),
+                        /*IsExtendedReportingEnabled(pref_service)*/false,
+                        /*IsExtendedReportingPolicyManaged(pref_service)*/false,
+                        /*IsEnhancedProtectionEnabled(pref_service)*/false,
                         /*is_proceed_anyway_disabled=*/false,
                         /*should_open_links_in_new_tab=*/false,
                         /*show_back_to_safety_button=*/true,
diff --git a/components/safe_browsing/core/triggers/trigger_throttler.cc b/components/safe_browsing/core/triggers/trigger_throttler.cc
index 4cc49ab9a66f..21eeeaceac0c 100644
--- a/components/safe_browsing/core/triggers/trigger_throttler.cc
+++ b/components/safe_browsing/core/triggers/trigger_throttler.cc
@@ -11,7 +11,6 @@
 #include "base/time/default_clock.h"
 #include "base/time/time.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/features.h"
 
 namespace safe_browsing {
@@ -217,28 +216,6 @@ void TriggerThrottler::LoadTriggerEventsFromPref() {
   trigger_events_.clear();
   if (!local_state_prefs_)
     return;
-
-  const base::DictionaryValue* event_dict = local_state_prefs_->GetDictionary(
-      prefs::kSafeBrowsingTriggerEventTimestamps);
-  for (const auto& trigger_pair : event_dict->DictItems()) {
-    // Check that the first item in the pair is convertible to a trigger type
-    // and that the second item is a list.
-    int trigger_type_int;
-    if (!base::StringToInt(trigger_pair.first, &trigger_type_int) ||
-        trigger_type_int < static_cast<int>(TriggerType::kMinTriggerType) ||
-        trigger_type_int > static_cast<int>(TriggerType::kMaxTriggerType)) {
-      continue;
-    }
-    if (!trigger_pair.second.is_list())
-      continue;
-
-    const TriggerType trigger_type = static_cast<TriggerType>(trigger_type_int);
-    for (const auto& timestamp : trigger_pair.second.GetList()) {
-      if (timestamp.is_double())
-        trigger_events_[trigger_type].push_back(
-            base::Time::FromDoubleT(timestamp.GetDouble()));
-    }
-  }
 }
 
 void TriggerThrottler::WriteTriggerEventsToPref() {
@@ -254,9 +231,6 @@ void TriggerThrottler::WriteTriggerEventsToPref() {
       pref_timestamps->Append(base::Value(timestamp.ToDoubleT()));
     }
   }
-
-  local_state_prefs_->Set(prefs::kSafeBrowsingTriggerEventTimestamps,
-                          trigger_dict);
 }
 
 size_t TriggerThrottler::GetDailyQuotaForTrigger(
diff --git a/components/safety_check/safety_check.cc b/components/safety_check/safety_check.cc
index e9539b25edc9..73ce2cd8a049 100644
--- a/components/safety_check/safety_check.cc
+++ b/components/safety_check/safety_check.cc
@@ -4,8 +4,6 @@
 
 #include "components/safety_check/safety_check.h"
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
-
 namespace safety_check {
 
 SafetyCheck::SafetyCheck(SafetyCheckHandlerInterface* handler)
@@ -16,22 +14,7 @@ SafetyCheck::SafetyCheck(SafetyCheckHandlerInterface* handler)
 SafetyCheck::~SafetyCheck() = default;
 
 void SafetyCheck::CheckSafeBrowsing(PrefService* pref_service) {
-  const PrefService::Preference* enabled_pref =
-      pref_service->FindPreference(prefs::kSafeBrowsingEnabled);
-  bool enabled = pref_service->GetBoolean(prefs::kSafeBrowsingEnabled);
-  SafeBrowsingStatus status;
-  if (enabled && pref_service->GetBoolean(prefs::kSafeBrowsingEnhanced)) {
-    status = SafeBrowsingStatus::kEnabledEnhanced;
-  } else if (enabled) {
-    status = SafeBrowsingStatus::kEnabledStandard;
-  } else if (enabled_pref->IsManaged()) {
-    status = SafeBrowsingStatus::kDisabledByAdmin;
-  } else if (enabled_pref->IsExtensionControlled()) {
-    status = SafeBrowsingStatus::kDisabledByExtension;
-  } else {
-    status = SafeBrowsingStatus::kDisabled;
-  }
-  handler_->OnSafeBrowsingCheckResult(status);
+  handler_->OnSafeBrowsingCheckResult(SafeBrowsingStatus::kDisabled);
 }
 
 }  // namespace safety_check
diff --git a/components/security_interstitials/content/bad_clock_blocking_page.cc b/components/security_interstitials/content/bad_clock_blocking_page.cc
index 98a2b89989e9..17ae228f56ed 100644
--- a/components/security_interstitials/content/bad_clock_blocking_page.cc
+++ b/components/security_interstitials/content/bad_clock_blocking_page.cc
@@ -7,7 +7,6 @@
 #include <utility>
 
 #include "base/strings/string_number_conversions.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_page.h"
diff --git a/components/security_interstitials/content/captive_portal_blocking_page.cc b/components/security_interstitials/content/captive_portal_blocking_page.cc
index f53cd6b7ea95..bb469da0622b 100644
--- a/components/security_interstitials/content/captive_portal_blocking_page.cc
+++ b/components/security_interstitials/content/captive_portal_blocking_page.cc
@@ -15,7 +15,6 @@
 #include "build/build_config.h"
 #include "components/captive_portal/core/captive_portal_detector.h"
 #include "components/captive_portal/core/captive_portal_metrics.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
diff --git a/components/security_interstitials/content/cert_report_helper.cc b/components/security_interstitials/content/cert_report_helper.cc
index f8d655b1078b..4ebb016a151c 100644
--- a/components/security_interstitials/content/cert_report_helper.cc
+++ b/components/security_interstitials/content/cert_report_helper.cc
@@ -15,7 +15,6 @@
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/controller_client.h"
 #include "components/security_interstitials/core/metrics_helper.h"
@@ -83,8 +82,7 @@ void CertReportHelper::PopulateExtendedReportingOption(
     return;
 
   load_time_data->SetBoolean(
-      security_interstitials::kBoxChecked,
-      safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)));
+      security_interstitials::kBoxChecked, false);
 
   load_time_data->SetString(
       security_interstitials::kOptInLink,
@@ -101,14 +99,8 @@ void CertReportHelper::HandleReportingCommands(
     PrefService* pref_service) {
   switch (command) {
     case security_interstitials::CMD_DO_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, true, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_DONT_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, false, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_PROCEED:
       user_action_ = CertificateErrorReport::USER_PROCEEDED;
@@ -126,7 +118,7 @@ void CertReportHelper::FinishCertCollection() {
   if (!ShouldShowCertificateReporterCheckbox())
     return;
 
-  if (!safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)))
+  if (true)
     return;
 
   if (metrics_helper_) {
@@ -154,7 +146,6 @@ void CertReportHelper::FinishCertCollection() {
     return;
   }
 
-  ssl_cert_reporter_->ReportInvalidCertificateChain(serialized_report);
 }
 
 bool CertReportHelper::ShouldShowCertificateReporterCheckbox() {
@@ -163,9 +154,7 @@ bool CertReportHelper::ShouldShowCertificateReporterCheckbox() {
   const bool in_incognito =
       web_contents_->GetBrowserContext()->IsOffTheRecord();
   const PrefService* pref_service = GetPrefs(web_contents_);
-  bool can_show_checkbox =
-      safe_browsing::IsExtendedReportingOptInAllowed(*pref_service) &&
-      !safe_browsing::IsExtendedReportingPolicyManaged(*pref_service);
+  bool can_show_checkbox = false;
 
   return base::FieldTrialList::FindFullName(kFinchExperimentName) ==
              kFinchGroupShowPossiblySend &&
diff --git a/components/security_interstitials/content/mitm_software_blocking_page.cc b/components/security_interstitials/content/mitm_software_blocking_page.cc
index bf0f4876d6ad..ab2ea2b88164 100644
--- a/components/security_interstitials/content/mitm_software_blocking_page.cc
+++ b/components/security_interstitials/content/mitm_software_blocking_page.cc
@@ -6,7 +6,6 @@
 
 #include <utility>
 
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_page.h"
diff --git a/components/security_interstitials/content/security_interstitial_controller_client.cc b/components/security_interstitials/content/security_interstitial_controller_client.cc
index d8c2710bd209..d06ab0d86469 100644
--- a/components/security_interstitials/content/security_interstitial_controller_client.cc
+++ b/components/security_interstitials/content/security_interstitial_controller_client.cc
@@ -7,7 +7,6 @@
 #include <utility>
 
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/core/metrics_helper.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/referrer.h"
@@ -91,11 +90,6 @@ SecurityInterstitialControllerClient::GetPrefService() {
   return prefs_;
 }
 
-const std::string
-SecurityInterstitialControllerClient::GetExtendedReportingPrefName() const {
-  return prefs::kSafeBrowsingScoutReportingEnabled;
-}
-
 bool SecurityInterstitialControllerClient::CanLaunchDateAndTimeSettings() {
   NOTREACHED();
   return false;
diff --git a/components/security_interstitials/content/security_interstitial_controller_client.h b/components/security_interstitials/content/security_interstitial_controller_client.h
index 392262945f0e..598dc549c379 100644
--- a/components/security_interstitials/content/security_interstitial_controller_client.h
+++ b/components/security_interstitials/content/security_interstitial_controller_client.h
@@ -46,8 +46,6 @@ class SecurityInterstitialControllerClient
   bool CanGoBackBeforeNavigation() override;
 
  protected:
-  // security_interstitials::ControllerClient overrides.
-  const std::string GetExtendedReportingPrefName() const override;
   content::WebContents* web_contents_;
 
  private:
diff --git a/components/security_interstitials/content/security_interstitial_page.cc b/components/security_interstitials/content/security_interstitial_page.cc
index 2cdcfd57d93e..e703a8f58dbb 100644
--- a/components/security_interstitials/content/security_interstitial_page.cc
+++ b/components/security_interstitials/content/security_interstitial_page.cc
@@ -11,7 +11,6 @@
 #include "base/values.h"
 #include "components/grit/components_resources.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/core/common_string_util.h"
 #include "content/public/browser/page_navigator.h"
@@ -32,14 +31,6 @@ SecurityInterstitialPage::SecurityInterstitialPage(
       on_show_extended_reporting_pref_exists_(false),
       on_show_extended_reporting_pref_value_(false),
       controller_(std::move(controller)) {
-  // Determine if any prefs need to be updated prior to showing the security
-  // interstitial. Note that some content embedders (such as Android WebView)
-  // uses security interstitials without a prefservice.
-  if (controller_->GetPrefService()) {
-    safe_browsing::UpdatePrefsBeforeSecurityInterstitial(
-        controller_->GetPrefService());
-  }
-  SetUpMetrics();
 }
 
 SecurityInterstitialPage::~SecurityInterstitialPage() {
@@ -50,7 +41,7 @@ content::WebContents* SecurityInterstitialPage::web_contents() const {
 }
 
 GURL SecurityInterstitialPage::request_url() const {
-  return request_url_;
+  return GURL();
 }
 
 void SecurityInterstitialPage::DontCreateViewForTesting() {
@@ -86,15 +77,6 @@ SecurityInterstitialControllerClient* SecurityInterstitialPage::controller()
 }
 
 void SecurityInterstitialPage::SetUpMetrics() {
-  // Remember the initial state of the extended reporting pref, to be compared
-  // to the same data when the interstitial is closed.
-  PrefService* prefs = controller_->GetPrefService();
-  if (prefs) {
-    on_show_extended_reporting_pref_exists_ =
-        safe_browsing::ExtendedReportingPrefExists(*prefs);
-    on_show_extended_reporting_pref_value_ =
-        safe_browsing::IsExtendedReportingEnabled(*prefs);
-  }
 }
 
 base::string16 SecurityInterstitialPage::GetFormattedHostName() const {
diff --git a/components/security_interstitials/content/ssl_blocking_page.cc b/components/security_interstitials/content/ssl_blocking_page.cc
index fede14f0142c..365cafe5f40f 100644
--- a/components/security_interstitials/content/ssl_blocking_page.cc
+++ b/components/security_interstitials/content/ssl_blocking_page.cc
@@ -12,7 +12,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/cert_report_helper.h"
 #include "components/security_interstitials/content/security_interstitial_controller_client.h"
 #include "components/security_interstitials/content/security_interstitial_page.h"
diff --git a/components/security_interstitials/core/controller_client.cc b/components/security_interstitials/core/controller_client.cc
index 83da30b0bb88..e42c851c907b 100644
--- a/components/security_interstitials/core/controller_client.cc
+++ b/components/security_interstitials/core/controller_client.cc
@@ -33,7 +33,6 @@ MetricsHelper* ControllerClient::metrics_helper() const {
 
 void ControllerClient::SetReportingPreference(bool report) {
   DCHECK(GetPrefService());
-  GetPrefService()->SetBoolean(GetExtendedReportingPrefName(), report);
   metrics_helper_->RecordUserInteraction(
       report ? MetricsHelper::SET_EXTENDED_REPORTING_ENABLED
              : MetricsHelper::SET_EXTENDED_REPORTING_DISABLED);
diff --git a/components/security_interstitials/core/controller_client.h b/components/security_interstitials/core/controller_client.h
index f060ec7f2832..72e97646a3f0 100644
--- a/components/security_interstitials/core/controller_client.h
+++ b/components/security_interstitials/core/controller_client.h
@@ -112,9 +112,6 @@ class ControllerClient {
 
   void SetBaseHelpCenterUrlForTesting(const GURL& test_url);
 
- protected:
-  virtual const std::string GetExtendedReportingPrefName() const = 0;
-
  private:
   std::unique_ptr<MetricsHelper> metrics_helper_;
   // Link to the help center.
diff --git a/components/security_interstitials/core/safe_browsing_loud_error_ui.cc b/components/security_interstitials/core/safe_browsing_loud_error_ui.cc
index a375f46bc920..185acc8a23b8 100644
--- a/components/security_interstitials/core/safe_browsing_loud_error_ui.cc
+++ b/components/security_interstitials/core/safe_browsing_loud_error_ui.cc
@@ -23,11 +23,11 @@ namespace {
 // For malware interstitial pages, we link the problematic URL to Google's
 // diagnostic page.
 const char kSbDiagnosticUrl[] =
-    "https://transparencyreport.google.com/safe-browsing/search?url=%s";
+    "https://no-thanks.invalid/?=%s";
 
 // Constants for the V4 phishing string upgrades.
 const char kReportPhishingErrorUrl[] =
-    "https://safebrowsing.google.com/safebrowsing/report_error/?url=%s";
+    "https://no-thanks.invalid/?=%s";
 
 void RecordExtendedReportingPrefChanged(bool report) {
   UMA_HISTOGRAM_BOOLEAN(
diff --git a/components/signin/public/identity_manager/identity_manager.cc b/components/signin/public/identity_manager/identity_manager.cc
index d82036005b58..6323aaa5b547 100644
--- a/components/signin/public/identity_manager/identity_manager.cc
+++ b/components/signin/public/identity_manager/identity_manager.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <iostream>
+
 #include "components/signin/public/identity_manager/identity_manager.h"
 
 #include <string>
@@ -101,6 +103,7 @@ IdentityManager::~IdentityManager() {
     Java_IdentityManager_destroy(base::android::AttachCurrentThread(),
                                  java_identity_manager_);
 #endif
+  observer_list_.Clear();
 }
 
 void IdentityManager::AddObserver(Observer* observer) {
diff --git a/components/subresource_filter/content/browser/BUILD.gn b/components/subresource_filter/content/browser/BUILD.gn
index 1f751190d8af..c17f7169277c 100644
--- a/components/subresource_filter/content/browser/BUILD.gn
+++ b/components/subresource_filter/content/browser/BUILD.gn
@@ -29,20 +29,12 @@ static_library("browser") {
     "subresource_filter_observer.h",
     "subresource_filter_observer_manager.cc",
     "subresource_filter_observer_manager.h",
-    "subresource_filter_safe_browsing_activation_throttle.cc",
-    "subresource_filter_safe_browsing_activation_throttle.h",
-    "subresource_filter_safe_browsing_client.cc",
-    "subresource_filter_safe_browsing_client.h",
-    "subresource_filter_safe_browsing_client_request.cc",
-    "subresource_filter_safe_browsing_client_request.h",
     "verified_ruleset_dealer.cc",
     "verified_ruleset_dealer.h",
   ]
   deps = [
     "//base",
     "//components/prefs:prefs",
-    "//components/safe_browsing/core/db:database_manager",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/common",
@@ -65,8 +57,6 @@ static_library("test_support") {
   sources = [
     "async_document_subresource_filter_test_utils.cc",
     "async_document_subresource_filter_test_utils.h",
-    "fake_safe_browsing_database_manager.cc",
-    "fake_safe_browsing_database_manager.h",
     "subframe_navigation_test_utils.cc",
     "subframe_navigation_test_utils.h",
     "subresource_filter_observer_test_utils.cc",
@@ -83,8 +73,6 @@ static_library("test_support") {
     "//url",
   ]
   public_deps = [
-    "//components/safe_browsing/core/db:test_database_manager",
-    "//components/safe_browsing/core/db:util",
   ]
 }
 
@@ -99,7 +87,6 @@ source_set("unit_tests") {
     "ruleset_publisher_impl_unittest.cc",
     "ruleset_service_unittest.cc",
     "subframe_navigation_filtering_throttle_unittest.cc",
-    "subresource_filter_safe_browsing_activation_throttle_unittest.cc",
     "verified_ruleset_dealer_unittest.cc",
   ]
   deps = [
@@ -107,7 +94,6 @@ source_set("unit_tests") {
     ":test_support",
     "//base/test:test_support",
     "//components/prefs:test_support",
-    "//components/safe_browsing/core/db:util",
     "//components/subresource_filter/content/common",
     "//components/subresource_filter/core/browser",
     "//components/subresource_filter/core/browser:test_support",
diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index 1ebd6a50636c..7c6590001f1d 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -1283,6 +1283,8 @@ jumbo_source_set("browser") {
     "net/browser_online_state_observer.cc",
     "net/browser_online_state_observer.h",
     "net/cookie_store_factory.cc",
+    "net/cross_origin_embedder_policy_reporter.cc",
+    "net/cross_origin_embedder_policy_reporter.h",
     "net/network_errors_listing_ui.cc",
     "net/network_errors_listing_ui.h",
     "net/network_quality_observer_impl.cc",
@@ -2710,8 +2712,6 @@ jumbo_source_set("browser") {
 
   if (enable_reporting) {
     sources += [
-      "net/cross_origin_embedder_policy_reporter.cc",
-      "net/cross_origin_embedder_policy_reporter.h",
       "net/cross_origin_opener_policy_reporter.cc",
       "net/cross_origin_opener_policy_reporter.h",
       "net/reporting_service_proxy.cc",
diff --git a/content/browser/frame_host/navigation_request.cc b/content/browser/frame_host/navigation_request.cc
index 5757ad84edbb..0875a85532fd 100644
--- a/content/browser/frame_host/navigation_request.cc
+++ b/content/browser/frame_host/navigation_request.cc
@@ -89,6 +89,7 @@
 #include "content/public/common/url_constants.h"
 #include "content/public/common/url_utils.h"
 #include "content/public/common/web_preferences.h"
+#include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/system/data_pipe.h"
 #include "net/base/filename_util.h"
 #include "net/base/ip_endpoint.h"
@@ -1016,7 +1017,6 @@ std::unique_ptr<NavigationRequest> NavigationRequest::CreateForCommit(
   navigation_request->web_bundle_navigation_info_ =
       std::move(web_bundle_navigation_info);
   navigation_request->render_frame_host_ = render_frame_host;
-  navigation_request->coep_reporter_ = std::move(coep_reporter);
   navigation_request->StartNavigation(true);
   DCHECK(navigation_request->IsNavigationStarted());
 
@@ -1639,50 +1639,6 @@ NavigationRequest::TakeClientSecurityState() {
   return std::move(client_security_state_);
 }
 
-void NavigationRequest::CreateCoepReporter(
-    StoragePartition* storage_partition) {
-  const auto& coep = client_security_state_->cross_origin_embedder_policy;
-  coep_reporter_ = std::make_unique<CrossOriginEmbedderPolicyReporter>(
-      storage_partition, common_params_->url, coep.reporting_endpoint,
-      coep.report_only_reporting_endpoint);
-}
-
-std::unique_ptr<CrossOriginEmbedderPolicyReporter>
-NavigationRequest::TakeCoepReporter() {
-  return std::move(coep_reporter_);
-}
-
-void NavigationRequest::CreateCoopReporter(
-    StoragePartition* storage_partition) {
-  // If the flag for reporting is off, we simply don't create anything.
-  // Since this is the only place we create COOP reporters this ensure reporting
-  // is completely off.
-  // Note that "popup inheritance" also instantiate a reporter, but only if we
-  // created one here first.
-  if (!base::FeatureList::IsEnabled(
-          network::features::kCrossOriginOpenerPolicyReporting)) {
-    return;
-  }
-
-  // If the page does not have any reporting endpoints, skip creating a
-  // reporter.
-  if (!render_frame_host_->cross_origin_opener_policy().reporting_endpoint &&
-      !render_frame_host_->cross_origin_opener_policy()
-           .report_only_reporting_endpoint) {
-    return;
-  }
-
-  coop_reporter_ = std::make_unique<CrossOriginOpenerPolicyReporter>(
-      storage_partition, frame_tree_node_->current_frame_host(),
-      common_params_->url, render_frame_host_->cross_origin_opener_policy(),
-      render_frame_host_->cross_origin_embedder_policy());
-}
-
-std::unique_ptr<CrossOriginOpenerPolicyReporter>
-NavigationRequest::TakeCoopReporter() {
-  return std::move(coop_reporter_);
-}
-
 ukm::SourceId NavigationRequest::GetPreviousPageUkmSourceId() {
   return previous_page_load_ukm_source_id_;
 }
@@ -2240,19 +2196,8 @@ void NavigationRequest::OnResponseStarted(
           cross_origin_embedder_policy.value = kRequireCorp;
         }
 
-        auto* const coep_reporter = parent->coep_reporter();
-        if (parent_coep.report_only_value == kRequireCorp &&
-            !has_allowed_scheme &&
-            cross_origin_embedder_policy.value == kNone && coep_reporter) {
-          coep_reporter->QueueNavigationReport(redirect_chain_[0],
-                                               /*report_only=*/true);
-        }
         if (parent_coep.value == kRequireCorp &&
             cross_origin_embedder_policy.value == kNone) {
-          if (coep_reporter) {
-            coep_reporter->QueueNavigationReport(redirect_chain_[0],
-                                                 /*report_only=*/false);
-          }
           OnRequestFailedInternal(network::URLLoaderCompletionStatus(
                                       network::mojom::BlockedByResponseReason::
                                           kCoepFrameResourceNeedsCoepHeader),
@@ -2274,16 +2219,6 @@ void NavigationRequest::OnResponseStarted(
     UpdateCoopStatus(
         response_head_->parsed_headers->cross_origin_opener_policy.value,
         response_head_->parsed_headers->cross_origin_embedder_policy.value);
-
-    RenderFrameHostImpl* current_rfh = frame_tree_node_->current_frame_host();
-    if (coop_status_.require_browsing_instance_swap &&
-        coop_status_.had_opener_before_browsing_instance_swap &&
-        current_rfh->coop_reporter()) {
-      current_rfh->coop_reporter()->QueueOpenerBreakageReport(
-          current_rfh->coop_reporter()->GetNextDocumentUrlForReporting(
-              GetRedirectChain(), GetInitiatorRoutingId()),
-          true /* is_reported_from_document */, false /* is_report_only */);
-    }
   }
 
   // Select an appropriate renderer to commit the navigation.
@@ -3121,23 +3056,17 @@ void NavigationRequest::CommitNavigation() {
   }
 
   sandbox_flags_to_commit_ = ComputeSandboxFlagsToCommit();
-  CreateCoepReporter(render_frame_host_->GetProcess()->GetStoragePartition());
-  CreateCoopReporter(render_frame_host_->GetProcess()->GetStoragePartition());
 
   blink::mojom::ServiceWorkerContainerInfoForClientPtr
       service_worker_container_info;
   if (service_worker_handle_) {
-    DCHECK(coep_reporter());
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        reporter_remote;
-    coep_reporter()->Clone(reporter_remote.InitWithNewPipeAndPassReceiver());
     // Notify the service worker navigation handle that navigation commit is
     // about to go.
     service_worker_handle_->OnBeginNavigationCommit(
         render_frame_host_->GetProcess()->GetID(),
         render_frame_host_->GetRoutingID(),
         render_frame_host_->cross_origin_embedder_policy(),
-        std::move(reporter_remote), &service_worker_container_info);
+        mojo::NullRemote(), &service_worker_container_info);
   }
 
   if (web_bundle_handle_) {
diff --git a/content/browser/frame_host/navigation_request.h b/content/browser/frame_host/navigation_request.h
index 15e241680e74..f09c8e45f9b8 100644
--- a/content/browser/frame_host/navigation_request.h
+++ b/content/browser/frame_host/navigation_request.h
@@ -622,15 +622,12 @@ class CONTENT_EXPORT NavigationRequest
   bool ua_change_requires_reload() const { return ua_change_requires_reload_; }
 
   CrossOriginEmbedderPolicyReporter* coep_reporter() {
-    return coep_reporter_.get();
+    return nullptr;
   }
   CrossOriginOpenerPolicyReporter* coop_reporter() {
-    return coop_reporter_.get();
+    return nullptr;
   }
 
-  std::unique_ptr<CrossOriginEmbedderPolicyReporter> TakeCoepReporter();
-  std::unique_ptr<CrossOriginOpenerPolicyReporter> TakeCoopReporter();
-
   // Returns UKM SourceId for the page we are navigating away from.
   // Equal to GetRenderFrameHost()->GetPageUkmSourceId() for subframe
   // and same-document navigations and to
@@ -982,9 +979,6 @@ class CONTENT_EXPORT NavigationRequest
 
   void ForceEnableOriginTrials(const std::vector<std::string>& trials) override;
 
-  void CreateCoepReporter(StoragePartition* storage_partition);
-  void CreateCoopReporter(StoragePartition* storage_partition);
-
   base::Optional<network::mojom::BlockedByResponseReason> IsBlockedByResponse();
 
   bool IsOverridingUserAgent() const {
@@ -1347,9 +1341,6 @@ class CONTENT_EXPORT NavigationRequest
   // at the network request level.
   network::mojom::ClientSecurityStatePtr client_security_state_;
 
-  std::unique_ptr<CrossOriginEmbedderPolicyReporter> coep_reporter_;
-  std::unique_ptr<CrossOriginOpenerPolicyReporter> coop_reporter_;
-
   std::unique_ptr<PeakGpuMemoryTracker> loading_mem_tracker_ = nullptr;
 
   // Structure tracking the effects of the CrossOriginOpenerPolicy on this
diff --git a/content/browser/frame_host/render_frame_host_impl.cc b/content/browser/frame_host/render_frame_host_impl.cc
index 0e54861c260e..e838202725ed 100644
--- a/content/browser/frame_host/render_frame_host_impl.cc
+++ b/content/browser/frame_host/render_frame_host_impl.cc
@@ -181,6 +181,7 @@
 #include "media/mojo/mojom/remoting.mojom.h"
 #include "media/mojo/services/video_decode_perf_history.h"
 #include "mojo/public/cpp/bindings/message.h"
+#include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "mojo/public/cpp/system/data_pipe.h"
 #include "net/base/registry_controlled_domains/registry_controlled_domain.h"
@@ -1488,12 +1489,6 @@ void RenderFrameHostImpl::ExecuteMediaPlayerActionAtLocation(
 bool RenderFrameHostImpl::CreateNetworkServiceDefaultFactory(
     mojo::PendingReceiver<network::mojom::URLLoaderFactory>
         default_factory_receiver) {
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter_remote;
-  if (coep_reporter_) {
-    coep_reporter_->Clone(
-        coep_reporter_remote.InitWithNewPipeAndPassReceiver());
-  }
 
   // We use the last committed Origin and ClientSecurityState. If the caller
   // wanted a factory associated to a navigation about to commit, the params
@@ -1503,7 +1498,7 @@ bool RenderFrameHostImpl::CreateNetworkServiceDefaultFactory(
       CreateURLLoaderFactoryParamsForMainWorld(
           last_committed_origin_,
           mojo::Clone(last_committed_client_security_state_),
-          std::move(coep_reporter_remote),
+          mojo::NullRemote(),
           DetermineAfterCommitWhetherToForbidTrustTokenRedemption(this)),
       std::move(default_factory_receiver));
 }
@@ -3682,17 +3677,11 @@ void RenderFrameHostImpl::UpdateSubresourceLoaderFactories() {
   mojo::PendingRemote<network::mojom::URLLoaderFactory> default_factory_remote;
   bool bypass_redirect_checks = false;
   if (recreate_default_url_loader_factory_after_network_service_crash_) {
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter_remote;
-    if (coep_reporter_) {
-      coep_reporter_->Clone(
-          coep_reporter_remote.InitWithNewPipeAndPassReceiver());
-    }
     bypass_redirect_checks = CreateNetworkServiceDefaultFactoryAndObserve(
         CreateURLLoaderFactoryParamsForMainWorld(
             last_committed_origin_,
             mojo::Clone(last_committed_client_security_state_),
-            std::move(coep_reporter_remote),
+            mojo::NullRemote(),
             DetermineAfterCommitWhetherToForbidTrustTokenRedemption(this)),
         default_factory_remote.InitWithNewPipeAndPassReceiver());
   }
@@ -4941,16 +4930,6 @@ void RenderFrameHostImpl::CreateNewWindow(
   main_frame->cross_origin_opener_policy_ = popup_coop;
   main_frame->cross_origin_embedder_policy_ = popup_coep;
 
-  // If inheriting coop (checking this via |opener_suppressed|) and the original
-  // coop page has a reporter we make sure the the newly created popup also has
-  // a reporter.
-  if (!params->opener_suppressed && GetMainFrame()->coop_reporter()) {
-    main_frame->set_coop_reporter(
-        std::make_unique<CrossOriginOpenerPolicyReporter>(
-            GetProcess()->GetStoragePartition(), this, GetLastCommittedURL(),
-            popup_coop, popup_coep));
-  }
-
   if (main_frame->waiting_for_init_) {
     // Need to check |waiting_for_init_| as some paths inside CreateNewWindow
     // call above (eg if WebContentsDelegate::IsWebContentsCreationOverridden()
@@ -6046,21 +6025,13 @@ void RenderFrameHostImpl::CommitNavigation(
       // when all interstitials are committed and we are guaranteed to have a
       // NavigationRequest in this function.
       recreate_default_url_loader_factory_after_network_service_crash_ = true;
-      CrossOriginEmbedderPolicyReporter* const coep_reporter =
-          navigation_request->coep_reporter();
-      mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-          coep_reporter_remote;
-      if (coep_reporter) {
-        coep_reporter->Clone(
-            coep_reporter_remote.InitWithNewPipeAndPassReceiver());
-      }
 
       bool bypass_redirect_checks =
           CreateNetworkServiceDefaultFactoryAndObserve(
               CreateURLLoaderFactoryParamsForMainWorld(
                   main_world_origin_for_url_loader_factory,
                   mojo::Clone(navigation_request->client_security_state()),
-                  std::move(coep_reporter_remote),
+                  mojo::NullRemote(),
                   DetermineWhetherToForbidTrustTokenRedemption(
                       GetParent(), *commit_params,
                       main_world_origin_for_url_loader_factory)),
@@ -7380,12 +7351,6 @@ void RenderFrameHostImpl::CreateDedicatedWorkerHostFactory(
   // Allocate the worker in the same process as the creator.
   int worker_process_id = process_->GetID();
 
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter;
-  auto coep_reporter_endpoint = coep_reporter.InitWithNewPipeAndPassReceiver();
-  if (coep_reporter_)
-    coep_reporter_->Clone(std::move(coep_reporter_endpoint));
-
   // When a dedicated worker is created from the frame script, the frame is both
   // the creator and the ancestor.
   mojo::MakeSelfOwnedReceiver(
@@ -7394,7 +7359,7 @@ void RenderFrameHostImpl::CreateDedicatedWorkerHostFactory(
           /*creator_render_frame_host_id=*/GetGlobalFrameRoutingId(),
           /*ancestor_render_frame_host_id=*/GetGlobalFrameRoutingId(),
           last_committed_origin_, cross_origin_embedder_policy_,
-          std::move(coep_reporter)),
+          mojo::NullRemote()),
       std::move(receiver));
 }
 
@@ -7488,14 +7453,8 @@ void RenderFrameHostImpl::GetSensorProvider(
 
 void RenderFrameHostImpl::BindCacheStorage(
     mojo::PendingReceiver<blink::mojom::CacheStorage> receiver) {
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter_remote;
-  if (coep_reporter_) {
-    coep_reporter_->Clone(
-        coep_reporter_remote.InitWithNewPipeAndPassReceiver());
-  }
   GetProcess()->BindCacheStorage(cross_origin_embedder_policy_,
-                                 std::move(coep_reporter_remote),
+                                 mojo::NullRemote(),
                                  GetLastCommittedOrigin(), std::move(receiver));
 }
 
@@ -8198,35 +8157,6 @@ bool RenderFrameHostImpl::DidCommitNavigationInternal(
 
   network::mojom::ClientSecurityStatePtr client_security_state =
       navigation_request->TakeClientSecurityState();
-  std::unique_ptr<CrossOriginEmbedderPolicyReporter> coep_reporter =
-      navigation_request->TakeCoepReporter();
-  if (coep_reporter) {
-    mojo::PendingRemote<blink::mojom::ReportingObserver> remote;
-    mojo::PendingReceiver<blink::mojom::ReportingObserver> receiver =
-        remote.InitWithNewPipeAndPassReceiver();
-    coep_reporter->BindObserver(std::move(remote));
-    // As some tests overrides the associated frame after commit, do not
-    // call GetAssociatedLocalFrame now.
-    base::ThreadTaskRunnerHandle::Get()->PostTask(
-        FROM_HERE,
-        base::BindOnce(&RenderFrameHostImpl::BindReportingObserver,
-                       weak_ptr_factory_.GetWeakPtr(), std::move(receiver)));
-  }
-
-  std::unique_ptr<CrossOriginOpenerPolicyReporter> coop_reporter =
-      navigation_request->TakeCoopReporter();
-
-  // If this navigation had a COOP BrowsingInstance swap that severed an opener,
-  // and we have a reporter on the page we're going to, report it here.
-  if (navigation_request->coop_status()
-          .had_opener_before_browsing_instance_swap &&
-      coop_reporter) {
-    coop_reporter->QueueOpenerBreakageReport(
-        coop_reporter->GetPreviousDocumentUrlForReporting(
-            navigation_request->GetRedirectChain(),
-            navigation_request->common_params().referrer->url),
-        false /* is_reported_from_document */, false /* is_report_only */);
-  }
 
   frame_tree_node()->navigator().DidNavigate(this, *params,
                                              std::move(navigation_request),
@@ -8245,8 +8175,6 @@ bool RenderFrameHostImpl::DidCommitNavigationInternal(
     renderer_reported_scheduler_tracked_features_ = 0;
     browser_reported_scheduler_tracked_features_ = 0;
     last_committed_client_security_state_ = std::move(client_security_state);
-    coep_reporter_ = std::move(coep_reporter);
-    coop_reporter_ = std::move(coop_reporter);
   }
 
   RecordCrossOriginIsolationMetrics(this);
diff --git a/content/browser/frame_host/render_frame_host_impl.h b/content/browser/frame_host/render_frame_host_impl.h
index 4b784ff684c5..3e898acefe8c 100644
--- a/content/browser/frame_host/render_frame_host_impl.h
+++ b/content/browser/frame_host/render_frame_host_impl.h
@@ -1408,11 +1408,10 @@ class CONTENT_EXPORT RenderFrameHostImpl
     cross_origin_embedder_policy_ = policy;
   }
   CrossOriginEmbedderPolicyReporter* coep_reporter() {
-    return coep_reporter_.get();
+    return nullptr;
   }
   void set_coop_reporter(
       std::unique_ptr<CrossOriginOpenerPolicyReporter>&& reporter) {
-    coop_reporter_ = std::move(reporter);
   }
 
   // Semi-formal definition of COOP:
@@ -1423,9 +1422,6 @@ class CONTENT_EXPORT RenderFrameHostImpl
   void set_cross_origin_opener_policy(network::CrossOriginOpenerPolicy policy) {
     cross_origin_opener_policy_ = policy;
   }
-  CrossOriginOpenerPolicyReporter* coop_reporter() {
-    return coop_reporter_.get();
-  }
 
   const network::mojom::ClientSecurityStatePtr&
   last_committed_client_security_state() const {
@@ -3019,9 +3015,6 @@ class CONTENT_EXPORT RenderFrameHostImpl
   // This time is used to record the last WebXR DOM Overlay setup request.
   base::TimeTicks last_xr_overlay_setup_time_;
 
-  std::unique_ptr<CrossOriginEmbedderPolicyReporter> coep_reporter_;
-  std::unique_ptr<CrossOriginOpenerPolicyReporter> coop_reporter_;
-
   // Navigation ID for the last committed cross-document non-bfcached navigation
   // in this RenderFrameHost.
   // TODO(crbug.com/936696): Make this const after we have RenderDocument.
diff --git a/content/browser/native_file_system/native_file_system_file_writer_impl.cc b/content/browser/native_file_system/native_file_system_file_writer_impl.cc
index d7ce4e05b9e5..f6a8b7e4cf22 100644
--- a/content/browser/native_file_system/native_file_system_file_writer_impl.cc
+++ b/content/browser/native_file_system/native_file_system_file_writer_impl.cc
@@ -94,8 +94,7 @@ NativeFileSystemFileWriterImpl::NativeFileSystemFileWriterImpl(
                                  url,
                                  handle_state,
                                  /*is_directory=*/false),
-      swap_url_(swap_url),
-      has_transient_user_activation_(has_transient_user_activation) {
+      swap_url_(swap_url) {
   DCHECK_EQ(swap_url.type(), url.type());
 }
 
@@ -302,50 +301,7 @@ void NativeFileSystemFileWriterImpl::CloseImpl(CloseCallback callback) {
   // If the after write check fails, the callback for that will clean up the
   // swap file even if the writer was destroyed at that point.
   state_ = State::kClosePending;
-
-  if (!RequireAfterWriteCheck() || !manager()->permission_context()) {
-    DidPassAfterWriteCheck(std::move(callback));
-    return;
-  }
-
-  ComputeHashForSwapFile(base::BindOnce(
-      &NativeFileSystemFileWriterImpl::DoAfterWriteCheck,
-      weak_factory_.GetWeakPtr(), swap_url().path(), std::move(callback)));
-}
-
-// static
-void NativeFileSystemFileWriterImpl::DoAfterWriteCheck(
-    base::WeakPtr<NativeFileSystemFileWriterImpl> file_writer,
-    const base::FilePath& swap_path,
-    NativeFileSystemFileWriterImpl::CloseCallback callback,
-    base::File::Error hash_result,
-    const std::string& hash,
-    int64_t size) {
-  if (!file_writer || hash_result != base::File::FILE_OK) {
-    // If writer was deleted, or calculating the hash failed try deleting the
-    // swap file and invoke the callback.
-    base::ThreadPool::PostTask(
-        FROM_HERE, {base::MayBlock()},
-        base::BindOnce(base::GetDeleteFileCallback(), swap_path));
-    std::move(callback).Run(native_file_system_error::FromStatus(
-        NativeFileSystemStatus::kOperationAborted,
-        "Failed to perform Safe Browsing check."));
-    return;
-  }
-
-  DCHECK_CALLED_ON_VALID_SEQUENCE(file_writer->sequence_checker_);
-
-  auto item = std::make_unique<NativeFileSystemWriteItem>();
-  item->target_file_path = file_writer->url().path();
-  item->full_path = file_writer->swap_url().path();
-  item->sha256_hash = hash;
-  item->size = size;
-  item->frame_url = file_writer->context().url;
-  item->has_user_gesture = file_writer->has_transient_user_activation_;
-  file_writer->manager()->permission_context()->PerformAfterWriteChecks(
-      std::move(item), file_writer->context().frame_id,
-      base::BindOnce(&NativeFileSystemFileWriterImpl::DidAfterWriteCheck,
-                     file_writer, swap_path, std::move(callback)));
+  DidPassAfterWriteCheck(std::move(callback));
 }
 
 // static
diff --git a/content/browser/native_file_system/native_file_system_file_writer_impl.h b/content/browser/native_file_system/native_file_system_file_writer_impl.h
index 3975cecf5d09..12b8e66604dd 100644
--- a/content/browser/native_file_system/native_file_system_file_writer_impl.h
+++ b/content/browser/native_file_system/native_file_system_file_writer_impl.h
@@ -82,13 +82,6 @@ class CONTENT_EXPORT NativeFileSystemFileWriterImpl
   void CloseImpl(CloseCallback callback);
   // The following two methods are static, because they need to be invoked to
   // perform cleanup even if the writer was deleted before they were invoked.
-  static void DoAfterWriteCheck(
-      base::WeakPtr<NativeFileSystemFileWriterImpl> file_writer,
-      const base::FilePath& swap_path,
-      NativeFileSystemFileWriterImpl::CloseCallback callback,
-      base::File::Error hash_result,
-      const std::string& hash,
-      int64_t size);
   static void DidAfterWriteCheck(
       base::WeakPtr<NativeFileSystemFileWriterImpl> file_writer,
       const base::FilePath& swap_path,
@@ -102,9 +95,7 @@ class CONTENT_EXPORT NativeFileSystemFileWriterImpl
   // After write checks apply to native local paths, file system provider paths,
   // and platform app native paths.
   bool RequireAfterWriteCheck() const {
-    return url().type() == storage::kFileSystemTypeNativeLocal ||
-           url().type() == storage::kFileSystemTypeProvided ||
-           url().type() == storage::kFileSystemTypeNativeForPlatformApp;
+    return false;
   }
 
   // Quarantine checks apply to native local paths, file system provider paths,
@@ -149,10 +140,6 @@ class CONTENT_EXPORT NativeFileSystemFileWriterImpl
 
   bool skip_quarantine_check_for_testing_ = false;
 
-  // Keeps track of user activation state at creation time for after write
-  // checks.
-  bool has_transient_user_activation_ = false;
-
   base::WeakPtr<NativeFileSystemHandleBase> AsWeakPtr() override;
 
   base::WeakPtrFactory<NativeFileSystemFileWriterImpl> weak_factory_{this};
diff --git a/content/public/browser/native_file_system_permission_context.h b/content/public/browser/native_file_system_permission_context.h
index ebad6b1d994f..724d9a03edf1 100644
--- a/content/public/browser/native_file_system_permission_context.h
+++ b/content/public/browser/native_file_system_permission_context.h
@@ -85,12 +85,6 @@ class NativeFileSystemPermissionContext {
       base::OnceCallback<void(SensitiveDirectoryResult)> callback) = 0;
 
   enum class AfterWriteCheckResult { kAllow, kBlock };
-  // Runs a recently finished write operation through checks such as malware
-  // or other security checks to determine if the write should be allowed.
-  virtual void PerformAfterWriteChecks(
-      std::unique_ptr<NativeFileSystemWriteItem> item,
-      GlobalFrameRoutingId frame_id,
-      base::OnceCallback<void(AfterWriteCheckResult)> callback) = 0;
 
   // Returns whether the give |origin| already allows write permission, or it is
   // possible to request one. This is used to block save file dialogs from being
diff --git a/tools/ipc_fuzzer/message_lib/BUILD.gn b/tools/ipc_fuzzer/message_lib/BUILD.gn
index 6aca6ebff7bd..40a40ed86890 100644
--- a/tools/ipc_fuzzer/message_lib/BUILD.gn
+++ b/tools/ipc_fuzzer/message_lib/BUILD.gn
@@ -11,10 +11,8 @@ static_library("ipc_message_lib") {
   public_deps = [
     "//base",
     "//chrome/common",
-    "//chrome/common/safe_browsing:proto",
     "//components/guest_view/common",
     "//components/nacl/common:buildflags",
-    "//components/safe_browsing/core/common",
     "//components/spellcheck/common",
     "//components/subresource_filter/content/common",
     "//content/child",
diff --git a/chrome/browser/extensions/BUILD.gn b/chrome/browser/extensions/BUILD.gn
index a1f5e2a7e0e4..c4985c5739e1 100644
--- a/chrome/browser/extensions/BUILD.gn
+++ b/chrome/browser/extensions/BUILD.gn
@@ -311,14 +311,6 @@ static_library("extensions") {
     "api/resources_private/resources_private_api.h",
     "api/runtime/chrome_runtime_api_delegate.cc",
     "api/runtime/chrome_runtime_api_delegate.h",
-    "api/safe_browsing_private/safe_browsing_private_api.cc",
-    "api/safe_browsing_private/safe_browsing_private_api.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router.h",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.cc",
-    "api/safe_browsing_private/safe_browsing_private_event_router_factory.h",
-    "api/safe_browsing_private/safe_browsing_util.cc",
-    "api/safe_browsing_private/safe_browsing_util.h",
     "api/sessions/session_id.cc",
     "api/sessions/session_id.h",
     "api/sessions/sessions_api.cc",
@@ -757,9 +749,6 @@ static_library("extensions") {
 
     # TODO(crbug.com/1065748): Remove this circular dependency.
     "//chrome/browser/web_applications/extensions",
-
-    # TODO(crbug/925153): Remove this circular dependency.
-    "//chrome/browser/safe_browsing",
   ]
 
   # Since browser and browser_extensions actually depend on each other,
@@ -771,9 +760,6 @@ static_library("extensions") {
     "//chrome/browser/extensions/api:api_registration",
     "//chrome/common",
     "//chrome/common/extensions/api",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core:webprotect_proto",
-    "//components/safe_browsing/core/db:util",
     "//components/signin/core/browser",
     "//content/public/browser",
     "//mojo/public/cpp/bindings",
@@ -799,14 +785,12 @@ static_library("extensions") {
     "//chrome/browser/media/router/discovery",
     "//chrome/browser/resource_coordinator:intervention_policy_database_proto",
     "//chrome/browser/resource_coordinator:mojo_bindings",
-    "//chrome/browser/safe_browsing",
     "//chrome/browser/web_applications",
     "//chrome/browser/web_applications/components",
 
     # TODO(crbug.com/1065748): Remove this dependency:
     "//chrome/browser/web_applications/extensions",
     "//chrome/common/extensions/api:extensions_features",
-    "//chrome/common/safe_browsing:proto",
     "//chrome/services/removable_storage_writer/public/mojom",
     "//components/autofill/content/browser",
     "//components/bookmarks/browser",
@@ -852,12 +836,6 @@ static_library("extensions") {
     "//components/proxy_config",
     "//components/rappor",
     "//components/resources",
-    "//components/safe_browsing:buildflags",
-    "//components/safe_browsing/content/web_ui:web_ui",
-    "//components/safe_browsing/core:csd_proto",
-    "//components/safe_browsing/core:features",
-    "//components/safe_browsing/core/common:safe_browsing_prefs",
-    "//components/safe_browsing/core/db:database_manager",
     "//components/search_engines",
     "//components/services/app_service/public/mojom",
     "//components/services/patch/content",
diff --git a/chrome/browser/permissions/contextual_notification_permission_ui_selector.cc b/chrome/browser/permissions/contextual_notification_permission_ui_selector.cc
index 91f08cb7f335..259e88391ec4 100644
--- a/chrome/browser/permissions/contextual_notification_permission_ui_selector.cc
+++ b/chrome/browser/permissions/contextual_notification_permission_ui_selector.cc
@@ -19,12 +19,10 @@
 #include "chrome/browser/permissions/quiet_notification_permission_ui_config.h"
 #include "chrome/browser/permissions/quiet_notification_permission_ui_state.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/common/chrome_features.h"
 #include "chrome/common/pref_names.h"
 #include "components/permissions/permission_request.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/db/database_manager.h"
 
 namespace {
 
@@ -155,9 +153,6 @@ void ContextualNotificationPermissionUiSelector::SelectUiToUse(
 }
 
 void ContextualNotificationPermissionUiSelector::Cancel() {
-  // The computation either finishes synchronously above, or is waiting on the
-  // Safe Browsing check.
-  safe_browsing_request_.reset();
 }
 
 ContextualNotificationPermissionUiSelector::
@@ -168,45 +163,13 @@ void ContextualNotificationPermissionUiSelector::EvaluatePerSiteTriggers(
   base::Optional<Decision> decision = GetDecisionBasedOnSiteReputation(
       CrowdDenyPreloadData::GetInstance()->GetReputationDataForSite(origin));
 
-  // If the PreloadData suggests this is an unacceptable site, ping Safe
-  // Browsing to verify; but do not ping if it is not warranted.
+  // If the PreloadData suggests this is an unacceptable site, assume it is
+  // correct, since we can't access safe browsing.
   if (!decision || (!decision->quiet_ui_reason && !decision->warning_reason)) {
     OnPerSiteTriggersEvaluated(Decision::UseNormalUiAndShowNoWarning());
-    return;
-  }
-
-  DCHECK(!safe_browsing_request_);
-  DCHECK(g_browser_process->safe_browsing_service());
-
-  // It is fine to use base::Unretained() here, as |safe_browsing_request_|
-  // guarantees not to fire the callback after its destruction.
-  safe_browsing_request_.emplace(
-      g_browser_process->safe_browsing_service()->database_manager(),
-      base::DefaultClock::GetInstance(), origin,
-      base::BindOnce(&ContextualNotificationPermissionUiSelector::
-                         OnSafeBrowsingVerdictReceived,
-                     base::Unretained(this), *decision));
-}
-
-void ContextualNotificationPermissionUiSelector::OnSafeBrowsingVerdictReceived(
-    Decision candidate_decision,
-    CrowdDenySafeBrowsingRequest::Verdict verdict) {
-  DCHECK(safe_browsing_request_);
-  DCHECK(callback_);
-
-  safe_browsing_request_.reset();
-
-  switch (verdict) {
-    case CrowdDenySafeBrowsingRequest::Verdict::kAcceptable:
-      OnPerSiteTriggersEvaluated(Decision::UseNormalUiAndShowNoWarning());
-      break;
-    case CrowdDenySafeBrowsingRequest::Verdict::kUnacceptable:
-      if (candidate_decision.quiet_ui_reason &&
-          ShouldHoldBackQuietUI(*(candidate_decision.quiet_ui_reason))) {
-        candidate_decision.quiet_ui_reason.reset();
-      }
-      OnPerSiteTriggersEvaluated(candidate_decision);
-      break;
+  } else {
+    // decision has a value, unwrap with .value()
+    OnPerSiteTriggersEvaluated(decision.value());
   }
 }
 
diff --git a/chrome/browser/permissions/contextual_notification_permission_ui_selector.h b/chrome/browser/permissions/contextual_notification_permission_ui_selector.h
index 77c295a1a10e..cbbc755c533b 100644
--- a/chrome/browser/permissions/contextual_notification_permission_ui_selector.h
+++ b/chrome/browser/permissions/contextual_notification_permission_ui_selector.h
@@ -7,7 +7,6 @@
 
 #include "base/callback.h"
 #include "base/optional.h"
-#include "chrome/browser/permissions/crowd_deny_safe_browsing_request.h"
 #include "components/permissions/notification_permission_ui_selector.h"
 
 class Profile;
@@ -51,15 +50,11 @@ class ContextualNotificationPermissionUiSelector
       const ContextualNotificationPermissionUiSelector&) = delete;
 
   void EvaluatePerSiteTriggers(const url::Origin& origin);
-  void OnSafeBrowsingVerdictReceived(
-      Decision candidate_decision,
-      CrowdDenySafeBrowsingRequest::Verdict verdict);
   void OnPerSiteTriggersEvaluated(Decision decision);
   void Notify(const Decision& decision);
 
   Profile* profile_;
 
-  base::Optional<CrowdDenySafeBrowsingRequest> safe_browsing_request_;
   DecisionMadeCallback callback_;
 };
 
diff --git a/chrome/browser/reputation/safety_tips_config.cc b/chrome/browser/reputation/safety_tips_config.cc
index 1ff18e544af9..2defa30c5077 100644
--- a/chrome/browser/reputation/safety_tips_config.cc
+++ b/chrome/browser/reputation/safety_tips_config.cc
@@ -5,13 +5,11 @@
 #include "chrome/browser/reputation/safety_tips_config.h"
 
 #include "base/no_destructor.h"
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "third_party/re2/src/re2/re2.h"
 #include "url/gurl.h"
 
 using chrome_browser_safety_tips::FlaggedPage;
 using chrome_browser_safety_tips::UrlPattern;
-using safe_browsing::V4ProtocolManagerUtil;
 
 namespace {
 
@@ -45,19 +43,14 @@ void UrlToSafetyTipPatterns(const GURL& url,
   std::string canon_host;
   std::string canon_path;
   std::string canon_query;
-  V4ProtocolManagerUtil::CanonicalizeUrl(url, &canon_host, &canon_path,
-                                         &canon_query);
 
   std::vector<std::string> hosts;
   if (url.HostIsIPAddress()) {
     hosts.push_back(url.host());
   } else {
-    V4ProtocolManagerUtil::GenerateHostVariantsToCheck(canon_host, &hosts);
   }
 
   std::vector<std::string> paths;
-  V4ProtocolManagerUtil::GeneratePathVariantsToCheck(canon_path, canon_query,
-                                                     &paths);
 
   for (const std::string& host : hosts) {
     for (const std::string& path : paths) {
@@ -69,16 +62,6 @@ void UrlToSafetyTipPatterns(const GURL& url,
 
 security_state::SafetyTipStatus FlagTypeToSafetyTipStatus(
     FlaggedPage::FlagType type) {
-  switch (type) {
-    case FlaggedPage::FlagType::FlaggedPage_FlagType_UNKNOWN:
-    case FlaggedPage::FlagType::FlaggedPage_FlagType_YOUNG_DOMAIN:
-      // Reached if component includes these flags, which might happen to
-      // support newer Chrome releases.
-      return security_state::SafetyTipStatus::kNone;
-    case FlaggedPage::FlagType::FlaggedPage_FlagType_BAD_REP:
-      return security_state::SafetyTipStatus::kBadReputation;
-  }
-  NOTREACHED();
   return security_state::SafetyTipStatus::kNone;
 }
 
diff --git a/chrome/browser/resources/settings/basic_page/basic_page.js b/chrome/browser/resources/settings/basic_page/basic_page.js
index 617134ef289e..66f2888fae7f 100644
--- a/chrome/browser/resources/settings/basic_page/basic_page.js
+++ b/chrome/browser/resources/settings/basic_page/basic_page.js
@@ -13,7 +13,6 @@ import 'chrome://resources/cr_elements/shared_vars_css.m.js';
 import 'chrome://resources/polymer/v3_0/iron-flex-layout/iron-flex-layout-classes.js';
 import '../appearance_page/appearance_page.js';
 import '../privacy_page/privacy_page.js';
-import '../safety_check_page/safety_check_page.js';
 import '../autofill_page/autofill_page.js';
 import '../controls/settings_idle_load.m.js';
 import '../on_startup_page/on_startup_page.js';
@@ -198,16 +197,6 @@ Polymer({
     return visibility !== false;
   },
 
-  /**
-   * @param {boolean|undefined} visibility
-   * @return {boolean}
-   * @private
-   */
-  showSafetyCheckPage_: function(visibility) {
-    return loadTimeData.getBoolean('privacySettingsRedesignEnabled') &&
-        this.showPage_(visibility);
-  },
-
   /**
    * Queues a task to search the basic sections, then another for the advanced
    * sections.
diff --git a/chrome/browser/resources/settings/lazy_load.js b/chrome/browser/resources/settings/lazy_load.js
index 5eba5f730d97..e94395a7b6f7 100644
--- a/chrome/browser/resources/settings/lazy_load.js
+++ b/chrome/browser/resources/settings/lazy_load.js
@@ -74,7 +74,6 @@ export {kMenuCloseDelay} from './languages_page/languages_page.js';
 export {ImportDataBrowserProxyImpl, ImportDataStatus} from './people_page/import_data_browser_proxy.js';
 export {ManageProfileBrowserProxyImpl, ProfileShortcutStatus} from './people_page/manage_profile_browser_proxy.js';
 // </if>
-export {SafeBrowsingBrowserProxy, SafeBrowsingBrowserProxyImpl, SafeBrowsingRadioManagedState} from './privacy_page/safe_browsing_browser_proxy.js';
 export {BioEnrollDialogPage} from './privacy_page/security_keys_bio_enroll_dialog.js';
 export {Ctap2Status, SampleStatus, SecurityKeysBioEnrollProxyImpl, SecurityKeysCredentialBrowserProxyImpl, SecurityKeysPINBrowserProxyImpl, SecurityKeysResetBrowserProxyImpl} from './privacy_page/security_keys_browser_proxy.js';
 export {CredentialManagementDialogPage} from './privacy_page/security_keys_credential_management_dialog.js';
diff --git a/chrome/browser/resources/settings/settings.js b/chrome/browser/resources/settings/settings.js
index 7de9664f61b6..a9c5ccf773f7 100644
--- a/chrome/browser/resources/settings/settings.js
+++ b/chrome/browser/resources/settings/settings.js
@@ -16,7 +16,7 @@ export {DefaultBrowserBrowserProxyImpl} from './default_browser_page/default_bro
 export {ExtensionControlBrowserProxyImpl} from './extension_control_browser_proxy.m.js';
 export {HatsBrowserProxy, HatsBrowserProxyImpl} from './hats_browser_proxy.js';
 export {LifetimeBrowserProxy, LifetimeBrowserProxyImpl} from './lifetime_browser_proxy.m.js';
-export {MetricsBrowserProxy, MetricsBrowserProxyImpl, PrivacyElementInteractions, SafetyCheckInteractions} from './metrics_browser_proxy.js';
+export {MetricsBrowserProxy, MetricsBrowserProxyImpl, PrivacyElementInteractions} from './metrics_browser_proxy.js';
 export {OnStartupBrowserProxy, OnStartupBrowserProxyImpl} from './on_startup_page/on_startup_browser_proxy.js';
 export {EDIT_STARTUP_URL_EVENT} from './on_startup_page/startup_url_entry.js';
 export {StartupUrlsPageBrowserProxy, StartupUrlsPageBrowserProxyImpl} from './on_startup_page/startup_urls_page_browser_proxy.js';
@@ -34,7 +34,5 @@ export {MetricsReporting, PrivacyPageBrowserProxy, PrivacyPageBrowserProxyImpl,
 export {ResetBrowserProxyImpl} from './reset_page/reset_browser_proxy.js';
 export {buildRouter, routes} from './route.js';
 export {Route, Router} from './router.m.js';
-export {SafetyCheckBrowserProxy, SafetyCheckBrowserProxyImpl, SafetyCheckCallbackConstants, SafetyCheckChromeCleanerStatus, SafetyCheckExtensionsStatus, SafetyCheckParentStatus, SafetyCheckPasswordsStatus, SafetyCheckSafeBrowsingStatus, SafetyCheckUpdatesStatus} from './safety_check_page/safety_check_browser_proxy.js';
-export {SafetyCheckIconStatus} from './safety_check_page/safety_check_child.js';
 export {SearchEngine, SearchEnginesBrowserProxy, SearchEnginesBrowserProxyImpl, SearchEnginesInfo} from './search_engines_page/search_engines_browser_proxy.m.js';
 export {getSearchManager, SearchRequest, setSearchManagerForTesting} from './search_settings.m.js';
diff --git a/chrome/browser/ui/javascript_dialogs/javascript_tab_modal_dialog_manager_delegate_desktop.cc b/chrome/browser/ui/javascript_dialogs/javascript_tab_modal_dialog_manager_delegate_desktop.cc
index 6a125964fc7f..4bcbc1c6ca8f 100644
--- a/chrome/browser/ui/javascript_dialogs/javascript_tab_modal_dialog_manager_delegate_desktop.cc
+++ b/chrome/browser/ui/javascript_dialogs/javascript_tab_modal_dialog_manager_delegate_desktop.cc
@@ -6,7 +6,6 @@
 
 #include <utility>
 
-#include "chrome/browser/safe_browsing/user_interaction_observer.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/browser_list.h"
@@ -40,12 +39,6 @@ void JavaScriptTabModalDialogManagerDelegateDesktop::WillRunDialog() {
   // warnings until user interaction. If the current page has a delayed warning,
   // it'll have a user interaction observer attached. Show the warning
   // immediately in that case.
-  safe_browsing::SafeBrowsingUserInteractionObserver* observer =
-      safe_browsing::SafeBrowsingUserInteractionObserver::FromWebContents(
-          web_contents_);
-  if (observer) {
-    observer->OnJavaScriptDialog();
-  }
 }
 
 void JavaScriptTabModalDialogManagerDelegateDesktop::DidCloseDialog() {
diff --git a/chrome/browser/ui/page_info/chrome_page_info_delegate.cc b/chrome/browser/ui/page_info/chrome_page_info_delegate.cc
index 82cd90d54787..b69a2c552d25 100644
--- a/chrome/browser/ui/page_info/chrome_page_info_delegate.cc
+++ b/chrome/browser/ui/page_info/chrome_page_info_delegate.cc
@@ -13,7 +13,6 @@
 #include "chrome/browser/permissions/permission_decision_auto_blocker_factory.h"
 #include "chrome/browser/permissions/permission_manager_factory.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
 #include "chrome/browser/ssl/security_state_tab_helper.h"
 #include "chrome/browser/ssl/stateful_ssl_host_state_delegate_factory.h"
 #include "chrome/browser/usb/usb_chooser_context.h"
diff --git a/chrome/browser/ui/webui/settings/settings_ui.cc b/chrome/browser/ui/webui/settings/settings_ui.cc
index 9e29823de468..fc9371dc5966 100644
--- a/chrome/browser/ui/webui/settings/settings_ui.cc
+++ b/chrome/browser/ui/webui/settings/settings_ui.cc
@@ -43,8 +43,6 @@
 #include "chrome/browser/ui/webui/settings/profile_info_handler.h"
 #include "chrome/browser/ui/webui/settings/protocol_handlers_handler.h"
 #include "chrome/browser/ui/webui/settings/reset_settings_handler.h"
-#include "chrome/browser/ui/webui/settings/safe_browsing_handler.h"
-#include "chrome/browser/ui/webui/settings/safety_check_handler.h"
 #include "chrome/browser/ui/webui/settings/search_engines_handler.h"
 #include "chrome/browser/ui/webui/settings/settings_clear_browsing_data_handler.h"
 #include "chrome/browser/ui/webui/settings/settings_cookies_view_handler.h"
@@ -81,9 +79,6 @@
 #include "ui/resources/grit/webui_resources.h"
 
 #if defined(OS_WIN)
-#include "chrome/browser/safe_browsing/chrome_cleaner/chrome_cleaner_controller_win.h"
-#include "chrome/browser/safe_browsing/chrome_cleaner/srt_field_trial_win.h"
-#include "chrome/browser/ui/webui/settings/chrome_cleanup_handler_win.h"
 #if BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #include "chrome/browser/ui/webui/settings/incompatible_applications_handler_win.h"
 #include "chrome/browser/win/conflicts/incompatible_applications_updater.h"
@@ -181,7 +176,6 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
   AddSettingsPageUIHandler(std::make_unique<BrowserLifetimeHandler>());
   AddSettingsPageUIHandler(
       std::make_unique<ClearBrowsingDataHandler>(web_ui, profile));
-  AddSettingsPageUIHandler(std::make_unique<SafetyCheckHandler>());
   AddSettingsPageUIHandler(std::make_unique<CookiesViewHandler>());
   AddSettingsPageUIHandler(std::make_unique<DownloadsHandler>(profile));
   AddSettingsPageUIHandler(std::make_unique<ExtensionControlHandler>());
@@ -205,7 +199,6 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
   AddSettingsPageUIHandler(std::make_unique<PeopleHandler>(profile));
   AddSettingsPageUIHandler(std::make_unique<ProfileInfoHandler>(profile));
   AddSettingsPageUIHandler(std::make_unique<ProtocolHandlersHandler>());
-  AddSettingsPageUIHandler(std::make_unique<SafeBrowsingHandler>(profile));
   AddSettingsPageUIHandler(std::make_unique<SearchEnginesHandler>(profile));
   AddSettingsPageUIHandler(std::make_unique<SecureDnsHandler>());
   AddSettingsPageUIHandler(std::make_unique<SiteSettingsHandler>(
@@ -233,10 +226,6 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
   AddSettingsPageUIHandler(std::make_unique<PrintingHandler>());
 #endif
 
-#if defined(OS_WIN)
-  AddSettingsPageUIHandler(std::make_unique<ChromeCleanupHandler>(profile));
-#endif  // defined(OS_WIN)
-
 #if defined(OS_WIN) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   bool has_incompatible_applications =
       IncompatibleApplicationsUpdater::HasCachedApplications();
@@ -260,10 +249,6 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
       "privacySettingsRedesignEnabled",
       base::FeatureList::IsEnabled(features::kPrivacySettingsRedesign));
 
-  html_source->AddBoolean(
-      "safeBrowsingEnhancedEnabled",
-      base::FeatureList::IsEnabled(safe_browsing::kEnhancedProtection));
-
   html_source->AddBoolean(
       "navigateToGooglePasswordManager",
       ShouldManagePasswordsinGooglePasswordManager(profile));
@@ -285,12 +270,6 @@ SettingsUI::SettingsUI(content::WebUI* web_ui)
       "syncSetupFriendlySettings",
       base::FeatureList::IsEnabled(features::kSyncSetupFriendlySettings));
 
-#if defined(OS_WIN)
-  html_source->AddBoolean(
-      "safetyCheckChromeCleanerChildEnabled",
-      base::FeatureList::IsEnabled(features::kSafetyCheckChromeCleanerChild));
-#endif
-
 #if defined(OS_CHROMEOS)
   html_source->AddBoolean("splitSettingsSyncEnabled",
                           chromeos::features::IsSplitSettingsSyncEnabled());
diff --git a/components/blocked_content/popup_tracker.cc b/components/blocked_content/popup_tracker.cc
index 2735f516abe6..23587df22921 100644
--- a/components/blocked_content/popup_tracker.cc
+++ b/components/blocked_content/popup_tracker.cc
@@ -150,19 +150,9 @@ void PopupTracker::DidGetUserInteraction(
 // in that case don't issue any requests, therefore we don't get any
 // safe browsing callbacks. See the comment above for the mitigation.
 void PopupTracker::OnSafeBrowsingChecksComplete(
-    content::NavigationHandle* navigation_handle,
-    const subresource_filter::SubresourceFilterSafeBrowsingClient::CheckResult&
-        result) {
+    content::NavigationHandle* navigation_handle) {
   DCHECK(navigation_handle->IsInMainFrame());
   safe_browsing_status_ = PopupSafeBrowsingStatus::kSafe;
-  if (result.threat_type ==
-          safe_browsing::SBThreatType::SB_THREAT_TYPE_URL_PHISHING ||
-      result.threat_type == safe_browsing::SBThreatType::
-                                SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING ||
-      result.threat_type ==
-          safe_browsing::SBThreatType::SB_THREAT_TYPE_SUBRESOURCE_FILTER) {
-    safe_browsing_status_ = PopupSafeBrowsingStatus::kUnsafe;
-  }
 }
 
 void PopupTracker::OnSubresourceFilterGoingAway() {
diff --git a/components/blocked_content/popup_tracker.h b/components/blocked_content/popup_tracker.h
index 8366782de618..2580bc9d286a 100644
--- a/components/blocked_content/popup_tracker.h
+++ b/components/blocked_content/popup_tracker.h
@@ -63,9 +63,7 @@ class PopupTracker : public content::WebContentsObserver,
 
   // subresource_filter::SubresourceFilterObserver:
   void OnSafeBrowsingChecksComplete(
-      content::NavigationHandle* navigation_handle,
-      const subresource_filter::SubresourceFilterSafeBrowsingClient::
-          CheckResult& result) override;
+      content::NavigationHandle* navigation_handle) override;
   void OnSubresourceFilterGoingAway() override;
 
   ScopedObserver<subresource_filter::SubresourceFilterObserverManager,
diff --git a/components/page_info/page_info.cc b/components/page_info/page_info.cc
index 60441eb91e12..04e66cfbf816 100644
--- a/components/page_info/page_info.cc
+++ b/components/page_info/page_info.cc
@@ -45,9 +45,6 @@
 #include "components/resources/android/theme_resources.h"
 #endif
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/password_protection/metrics_util.h"
-#include "components/safe_browsing/content/password_protection/password_protection_service.h"
-#include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/security_state/core/features.h"
 #include "components/signin/public/identity_manager/account_info.h"
@@ -77,8 +74,6 @@ using base::ASCIIToUTF16;
 using base::UTF16ToUTF8;
 using base::UTF8ToUTF16;
 using content::BrowserThread;
-using safe_browsing::LoginReputationClientResponse;
-using safe_browsing::RequestOutcome;
 
 namespace {
 
diff --git a/components/security_interstitials/core/unsafe_resource.cc b/components/security_interstitials/core/unsafe_resource.cc
index 683b6c829721..2b0a8c5162c3 100644
--- a/components/security_interstitials/core/unsafe_resource.cc
+++ b/components/security_interstitials/core/unsafe_resource.cc
@@ -4,16 +4,11 @@
 
 #include "components/security_interstitials/core/unsafe_resource.h"
 
-#include "components/safe_browsing/core/db/util.h"
-
 namespace security_interstitials {
 
 UnsafeResource::UnsafeResource()
     : is_subresource(false),
       is_subframe(false),
-      threat_type(safe_browsing::SB_THREAT_TYPE_SAFE),
-      resource_type(safe_browsing::ResourceType::kMainFrame),
-      threat_source(safe_browsing::ThreatSource::UNKNOWN),
       is_delayed_warning(false) {}
 
 UnsafeResource::UnsafeResource(const UnsafeResource& other) = default;
@@ -21,41 +16,7 @@ UnsafeResource::UnsafeResource(const UnsafeResource& other) = default;
 UnsafeResource::~UnsafeResource() = default;
 
 bool UnsafeResource::IsMainPageLoadBlocked() const {
-  // Subresource hits cannot happen until after main page load is committed.
-  if (is_subresource)
     return false;
-
-  switch (threat_type) {
-    // Client-side phishing/malware detection interstitials never block the main
-    // frame load, since they happen after the page is finished loading.
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_PHISHING:
-    case safe_browsing::SB_THREAT_TYPE_URL_CLIENT_SIDE_MALWARE:
-    // Malicious ad activity reporting happens in the background.
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_POPUP:
-    case safe_browsing::SB_THREAT_TYPE_BLOCKED_AD_REDIRECT:
-    // Ad sampling happens in the background.
-    case safe_browsing::SB_THREAT_TYPE_AD_SAMPLE:
-    // Chrome SAVED password reuse warning happens after the page is finished
-    // loading.
-    case safe_browsing::SB_THREAT_TYPE_SAVED_PASSWORD_REUSE:
-    // Chrome GAIA signed in and syncing password reuse warning happens after
-    // the page is finished loading.
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_SYNC_PASSWORD_REUSE:
-    // Chrome GAIA signed in and non-syncing password reuse warning happens
-    // after the page is finished loading.
-    case safe_browsing::SB_THREAT_TYPE_SIGNED_IN_NON_SYNC_PASSWORD_REUSE:
-    // Enterprise password reuse warning happens after the page is finished
-    // loading.
-    case safe_browsing::SB_THREAT_TYPE_ENTERPRISE_PASSWORD_REUSE:
-    // Suspicious site collection happens in the background
-    case safe_browsing::SB_THREAT_TYPE_SUSPICIOUS_SITE:
-      return false;
-
-    default:
-      break;
-  }
-
-  return true;
 }
 
 }  // namespace security_interstitials
diff --git a/components/security_interstitials/core/unsafe_resource.h b/components/security_interstitials/core/unsafe_resource.h
index a582672f68ef..b006b39fc21f 100644
--- a/components/security_interstitials/core/unsafe_resource.h
+++ b/components/security_interstitials/core/unsafe_resource.h
@@ -10,8 +10,6 @@
 #include "base/callback.h"
 #include "base/memory/ref_counted.h"
 #include "base/single_thread_task_runner.h"
-#include "components/safe_browsing/core/common/safebrowsing_constants.h"
-#include "components/safe_browsing/core/db/hit_report.h"
 #include "url/gurl.h"
 
 namespace content {
@@ -55,9 +53,6 @@ struct UnsafeResource {
   std::vector<GURL> redirect_urls;
   bool is_subresource;
   bool is_subframe;
-  safe_browsing::SBThreatType threat_type;
-  safe_browsing::ThreatMetadata threat_metadata;
-  safe_browsing::ResourceType resource_type;
   UrlCheckCallback callback;  // This is called back on |callback_thread|.
   scoped_refptr<base::SingleThreadTaskRunner> callback_thread;
   // TODO(crbug.com/1073315): |web_state_getter| is only used on iOS, and
@@ -66,7 +61,6 @@ struct UnsafeResource {
   // platforms.
   base::RepeatingCallback<content::WebContents*(void)> web_contents_getter;
   base::RepeatingCallback<web::WebState*(void)> web_state_getter;
-  safe_browsing::ThreatSource threat_source;
   // |token| field is only set if |threat_type| is
   // SB_THREAT_TYPE_*_PASSWORD_REUSE.
   std::string token;
diff --git a/components/subresource_filter/content/browser/content_activation_list_utils.cc b/components/subresource_filter/content/browser/content_activation_list_utils.cc
index f33848befa15..d69d6fca755e 100644
--- a/components/subresource_filter/content/browser/content_activation_list_utils.cc
+++ b/components/subresource_filter/content/browser/content_activation_list_utils.cc
@@ -7,71 +7,8 @@
 
 namespace subresource_filter {
 
-namespace {
-
-ActivationList GetSubresourceFilterMatch(
-    const safe_browsing::ThreatMetadata& threat_type_metadata,
-    bool* warning) {
-  auto better_ads_it = threat_type_metadata.subresource_filter_match.find(
-      safe_browsing::SubresourceFilterType::BETTER_ADS);
-  bool has_better_ads =
-      better_ads_it != threat_type_metadata.subresource_filter_match.end();
-  auto abusive_it = threat_type_metadata.subresource_filter_match.find(
-      safe_browsing::SubresourceFilterType::ABUSIVE);
-  bool has_abusive =
-      abusive_it != threat_type_metadata.subresource_filter_match.end() &&
-      base::FeatureList::IsEnabled(kFilterAdsOnAbusiveSites);
-
-  // If both |BETTER_ADS| and |ABUSIVE| are in the map, the one with |ENFORCE|
-  // level is chosen. If it's a tie, we arbitrarily give |BETTER_ADS| a higher
-  // priority over |ABUSIVE|.
-  if (has_better_ads && has_abusive) {
-    if (better_ads_it->second == safe_browsing::SubresourceFilterLevel::ENFORCE)
-      return ActivationList::BETTER_ADS;
-    if (abusive_it->second == safe_browsing::SubresourceFilterLevel::ENFORCE)
-      return ActivationList::ABUSIVE;
-    *warning = true;
-    return ActivationList::BETTER_ADS;
-  }
-  if (has_better_ads) {
-    *warning =
-        better_ads_it->second == safe_browsing::SubresourceFilterLevel::WARN;
-    return ActivationList::BETTER_ADS;
-  }
-  if (has_abusive) {
-    *warning =
-        abusive_it->second == safe_browsing::SubresourceFilterLevel::WARN;
-    return ActivationList::ABUSIVE;
-  }
-
-  // Keep a generic subresource_filter list without warning implemented, for
-  // subresource filter matches with no metadata.
-  if (threat_type_metadata.subresource_filter_match.empty())
-    return ActivationList::SUBRESOURCE_FILTER;
-
-  return ActivationList::NONE;
-}
-
-}  // namespace
-
 ActivationList GetListForThreatTypeAndMetadata(
-    safe_browsing::SBThreatType threat_type,
-    const safe_browsing::ThreatMetadata& threat_type_metadata,
     bool* warning) {
-  DCHECK(warning);
-  bool is_phishing_interstitial =
-      (threat_type == safe_browsing::SB_THREAT_TYPE_URL_PHISHING);
-  bool is_soc_engineering_ads_interstitial =
-      threat_type_metadata.threat_pattern_type ==
-      safe_browsing::ThreatPatternType::SOCIAL_ENGINEERING_ADS;
-  if (is_phishing_interstitial) {
-    if (is_soc_engineering_ads_interstitial) {
-      return ActivationList::SOCIAL_ENG_ADS_INTERSTITIAL;
-    }
-    return ActivationList::PHISHING_INTERSTITIAL;
-  } else if (threat_type == safe_browsing::SB_THREAT_TYPE_SUBRESOURCE_FILTER) {
-    return GetSubresourceFilterMatch(threat_type_metadata, warning);
-  }
   return ActivationList::NONE;
 }
 
diff --git a/components/subresource_filter/content/browser/content_activation_list_utils.h b/components/subresource_filter/content/browser/content_activation_list_utils.h
index 41a7e4590268..791e6e5cc237 100644
--- a/components/subresource_filter/content/browser/content_activation_list_utils.h
+++ b/components/subresource_filter/content/browser/content_activation_list_utils.h
@@ -5,14 +5,11 @@
 #ifndef COMPONENTS_SUBRESOURCE_FILTER_CONTENT_BROWSER_CONTENT_ACTIVATION_LIST_UTILS_H_
 #define COMPONENTS_SUBRESOURCE_FILTER_CONTENT_BROWSER_CONTENT_ACTIVATION_LIST_UTILS_H_
 
-#include "components/safe_browsing/core/db/util.h"
 #include "components/subresource_filter/core/common/activation_list.h"
 
 namespace subresource_filter {
 
 ActivationList GetListForThreatTypeAndMetadata(
-    safe_browsing::SBThreatType threat_type,
-    const safe_browsing::ThreatMetadata& threat_type_metadata,
     bool* warning);
 
 }  // namespace subresource_filter
diff --git a/components/subresource_filter/content/browser/subresource_filter_observer.h b/components/subresource_filter/content/browser/subresource_filter_observer.h
index 109673801c6a..808183df4b20 100644
--- a/components/subresource_filter/content/browser/subresource_filter_observer.h
+++ b/components/subresource_filter/content/browser/subresource_filter_observer.h
@@ -5,8 +5,6 @@
 #ifndef COMPONENTS_SUBRESOURCE_FILTER_CONTENT_BROWSER_SUBRESOURCE_FILTER_OBSERVER_H_
 #define COMPONENTS_SUBRESOURCE_FILTER_CONTENT_BROWSER_SUBRESOURCE_FILTER_OBSERVER_H_
 
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
-#include "components/subresource_filter/content/browser/subresource_filter_safe_browsing_client.h"
 #include "components/subresource_filter/core/common/activation_decision.h"
 #include "components/subresource_filter/core/common/load_policy.h"
 
@@ -31,17 +29,12 @@ class SubresourceFilterObserver {
   // themselves by this point.
   virtual void OnSubresourceFilterGoingAway() {}
 
-  // The results from a set of safe browsing checks, stored as a vector.
-  using SafeBrowsingCheckResults =
-      std::vector<SubresourceFilterSafeBrowsingClient::CheckResult>;
-
   // Called when the SubresourceFilter Safe Browsing checks are available for
   // this main frame navigation. Will be called at WillProcessResponse time at
   // the latest. Right now it will only include phishing and subresource filter
   // threat types.
   virtual void OnSafeBrowsingChecksComplete(
-      content::NavigationHandle* navigation_handle,
-      const SubresourceFilterSafeBrowsingClient::CheckResult& result) {}
+      content::NavigationHandle* navigation_handle) {}
 
   // Called at most once per navigation when page activation is computed. This
   // will be called before ReadyToCommitNavigation.
diff --git a/components/subresource_filter/content/browser/subresource_filter_observer_manager.cc b/components/subresource_filter/content/browser/subresource_filter_observer_manager.cc
index bd7a16fa87aa..10685a98cf02 100644
--- a/components/subresource_filter/content/browser/subresource_filter_observer_manager.cc
+++ b/components/subresource_filter/content/browser/subresource_filter_observer_manager.cc
@@ -27,10 +27,9 @@ void SubresourceFilterObserverManager::RemoveObserver(
 }
 
 void SubresourceFilterObserverManager::NotifySafeBrowsingChecksComplete(
-    content::NavigationHandle* navigation_handle,
-    const SubresourceFilterSafeBrowsingClient::CheckResult& result) {
+    content::NavigationHandle* navigation_handle) {
   for (auto& observer : observers_) {
-    observer.OnSafeBrowsingChecksComplete(navigation_handle, result);
+    observer.OnSafeBrowsingChecksComplete(navigation_handle);
   }
 }
 
diff --git a/components/subresource_filter/content/browser/subresource_filter_observer_manager.h b/components/subresource_filter/content/browser/subresource_filter_observer_manager.h
index 77e2b54e7db5..53aa2f23ee86 100644
--- a/components/subresource_filter/content/browser/subresource_filter_observer_manager.h
+++ b/components/subresource_filter/content/browser/subresource_filter_observer_manager.h
@@ -40,8 +40,7 @@ class SubresourceFilterObserverManager
   // the latest. Right now it will only include phishing and subresource filter
   // threat types.
   virtual void NotifySafeBrowsingChecksComplete(
-      content::NavigationHandle* navigation_handle,
-      const SubresourceFilterSafeBrowsingClient::CheckResult& result);
+      content::NavigationHandle* navigation_handle);
 
   // Will be called at the latest in the WillProcessResponse stage from a
   // NavigationThrottle that was registered before the throttle manager's
diff --git a/chrome/browser/resources/settings/settings_menu/settings_menu.html b/chrome/browser/resources/settings/settings_menu/settings_menu.html
index ab5889c71186..cb8bb7e740b2 100644
--- a/chrome/browser/resources/settings/settings_menu/settings_menu.html
+++ b/chrome/browser/resources/settings/settings_menu/settings_menu.html
@@ -107,13 +107,6 @@
         <iron-icon icon="settings:assignment"></iron-icon>
         $i18n{autofillPageTitle}
       </a>
-      <template is="dom-if" if="[[privacySettingsRedesignEnabled_]]" restamp>
-        <a href="/safetyCheck" hidden="[[!pageVisibility.safetyCheck]]"
-            id="safetyCheck">
-          <iron-icon icon="settings20:safety-check"></iron-icon>
-          $i18n{safetyCheckSectionTitle}
-        </a>
-      </template>
       <a href="/privacy" hidden="[[!pageVisibility.privacy]]">
         <iron-icon icon="cr:security"></iron-icon>
         $i18n{privacyPageTitle}
diff --git a/content/browser/worker_host/dedicated_worker_host_factory_impl.cc b/content/browser/worker_host/dedicated_worker_host_factory_impl.cc
index 4094b5192e23..ac1c7925ea3c 100644
--- a/content/browser/worker_host/dedicated_worker_host_factory_impl.cc
+++ b/content/browser/worker_host/dedicated_worker_host_factory_impl.cc
@@ -13,6 +13,7 @@
 #include "content/browser/worker_host/dedicated_worker_service_impl.h"
 #include "content/public/browser/render_process_host.h"
 #include "mojo/public/cpp/bindings/message.h"
+#include "mojo/public/cpp/bindings/pending_remote.h"
 #include "third_party/blink/public/common/features.h"
 
 namespace content {
@@ -63,14 +64,10 @@ void DedicatedWorkerHostFactoryImpl::CreateWorkerHost(
   DedicatedWorkerServiceImpl* service =
       storage_partition->GetDedicatedWorkerService();
 
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter;
-  coep_reporter_->Clone(coep_reporter.InitWithNewPipeAndPassReceiver());
-
   auto* host = new DedicatedWorkerHost(
       service, service->GenerateNextDedicatedWorkerId(), worker_process_host,
       creator_render_frame_host_id_, ancestor_render_frame_host_id_,
-      creator_origin_, cross_origin_embedder_policy_, std::move(coep_reporter));
+      creator_origin_, cross_origin_embedder_policy_, mojo::NullRemote());
   host->BindBrowserInterfaceBrokerReceiver(std::move(broker_receiver));
 }
 
@@ -107,14 +104,10 @@ void DedicatedWorkerHostFactoryImpl::CreateWorkerHostAndStartScriptLoad(
   DedicatedWorkerServiceImpl* service =
       storage_partition->GetDedicatedWorkerService();
 
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter;
-  coep_reporter_->Clone(coep_reporter.InitWithNewPipeAndPassReceiver());
-
   auto* host = new DedicatedWorkerHost(
       service, service->GenerateNextDedicatedWorkerId(), worker_process_host,
       creator_render_frame_host_id_, ancestor_render_frame_host_id_,
-      creator_origin_, cross_origin_embedder_policy_, std::move(coep_reporter));
+      creator_origin_, cross_origin_embedder_policy_, mojo::NullRemote());
   mojo::PendingRemote<blink::mojom::BrowserInterfaceBroker> broker;
   host->BindBrowserInterfaceBrokerReceiver(
       broker.InitWithNewPipeAndPassReceiver());
diff --git a/content/browser/worker_host/dedicated_worker_host.cc b/content/browser/worker_host/dedicated_worker_host.cc
index 6b151083a6b9..9b0fd90ee8f5 100644
--- a/content/browser/worker_host/dedicated_worker_host.cc
+++ b/content/browser/worker_host/dedicated_worker_host.cc
@@ -26,6 +26,7 @@
 #include "content/public/common/content_client.h"
 #include "content/public/common/network_service_util.h"
 #include "mojo/public/cpp/bindings/pending_associated_remote.h"
+#include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "mojo/public/cpp/system/message_pipe.h"
 #include "net/base/isolation_info.h"
@@ -59,7 +60,6 @@ DedicatedWorkerHost::DedicatedWorkerHost(
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(worker_process_host_);
   DCHECK(worker_process_host_->IsInitializedAndNotDead());
-  DCHECK(coep_reporter_);
 
   scoped_process_host_observer_.Add(worker_process_host_);
 
@@ -281,17 +281,13 @@ DedicatedWorkerHost::CreateNetworkFactoryForSubresources(
   mojo::PendingReceiver<network::mojom::URLLoaderFactory>
       default_factory_receiver =
           pending_default_factory.InitWithNewPipeAndPassReceiver();
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter;
-  DCHECK(coep_reporter_);
-  coep_reporter_->Clone(coep_reporter.InitWithNewPipeAndPassReceiver());
 
   network::mojom::URLLoaderFactoryParamsPtr factory_params =
       URLLoaderFactoryParamsHelper::CreateForFrame(
           ancestor_render_frame_host, worker_origin_,
           mojo::Clone(ancestor_render_frame_host
                           ->last_committed_client_security_state()),
-          std::move(coep_reporter), worker_process_host_,
+          mojo::NullRemote(), worker_process_host_,
           ancestor_render_frame_host->IsFeatureEnabled(
               blink::mojom::FeaturePolicyFeature::kTrustTokenRedemption)
               ? network::mojom::TrustTokenRedemptionPolicy::kPotentiallyPermit
@@ -378,20 +374,14 @@ void DedicatedWorkerHost::CreateWakeLockService(
 void DedicatedWorkerHost::BindCacheStorage(
     mojo::PendingReceiver<blink::mojom::CacheStorage> receiver) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter;
-  coep_reporter_->Clone(coep_reporter.InitWithNewPipeAndPassReceiver());
   worker_process_host_->BindCacheStorage(cross_origin_embedder_policy_,
-                                         std::move(coep_reporter),
+                                         mojo::NullRemote(),
                                          worker_origin_, std::move(receiver));
 }
 
 void DedicatedWorkerHost::CreateNestedDedicatedWorker(
     mojo::PendingReceiver<blink::mojom::DedicatedWorkerHostFactory> receiver) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter;
-  coep_reporter_->Clone(coep_reporter.InitWithNewPipeAndPassReceiver());
   // There is no creator frame when the worker is nested.
 
   mojo::MakeSelfOwnedReceiver(
@@ -399,7 +389,7 @@ void DedicatedWorkerHost::CreateNestedDedicatedWorker(
           worker_process_host_->GetID(),
           /*creator_render_frame_host_id_=*/base::nullopt,
           ancestor_render_frame_host_id_, worker_origin_,
-          cross_origin_embedder_policy_, std::move(coep_reporter)),
+          cross_origin_embedder_policy_, mojo::NullRemote()),
       std::move(receiver));
 }
 
diff --git a/content/browser/service_worker/service_worker_container_host.cc b/content/browser/service_worker/service_worker_container_host.cc
index a50259cc413a..a4fe33d290e8 100644
--- a/content/browser/service_worker/service_worker_container_host.cc
+++ b/content/browser/service_worker/service_worker_container_host.cc
@@ -24,6 +24,7 @@
 #include "content/public/common/content_client.h"
 #include "content/public/common/origin_util.h"
 #include "mojo/public/cpp/bindings/callback_helpers.h"
+#include "mojo/public/cpp/bindings/pending_remote.h"
 #include "third_party/blink/public/common/features.h"
 
 namespace content {
@@ -742,16 +743,12 @@ void ServiceWorkerContainerHost::OnBeginNavigationCommit(
   DCHECK(!cross_origin_embedder_policy_.has_value());
   cross_origin_embedder_policy_ = cross_origin_embedder_policy;
 
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter_to_be_passed;
-  auto _ = coep_reporter_to_be_passed.InitWithNewPipeAndPassReceiver();
-
   if (controller_ && controller_->fetch_handler_existence() ==
                          ServiceWorkerVersion::FetchHandlerExistence::EXISTS) {
     DCHECK(pending_controller_receiver_);
     controller_->controller()->Clone(std::move(pending_controller_receiver_),
                                      cross_origin_embedder_policy_.value(),
-                                     std::move(coep_reporter_to_be_passed));
+                                     mojo::NullRemote());
   }
 
   if (IsBackForwardCacheEnabled()) {
@@ -902,22 +899,14 @@ ServiceWorkerContainerHost::GetRemoteControllerServiceWorker() {
     pending_controller_receiver_ =
         remote_controller.BindNewPipeAndPassReceiver();
   } else {
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter_to_be_passed;
-    if (coep_reporter_) {
-      DCHECK(IsContainerForWindowClient());
-      coep_reporter_->Clone(
-          coep_reporter_to_be_passed.InitWithNewPipeAndPassReceiver());
-    } else {
       // TODO(https://crbug.com/999049): Implement DedicatedWorker and
       // SharedWorker cases.
       DCHECK(IsContainerForWorkerClient());
-    }
 
     controller_->controller()->Clone(
         remote_controller.BindNewPipeAndPassReceiver(),
         cross_origin_embedder_policy_.value(),
-        std::move(coep_reporter_to_be_passed));
+        mojo::NullRemote());
   }
   return remote_controller;
 }
@@ -1291,21 +1280,13 @@ void ServiceWorkerContainerHost::StartControllerComplete(
   if (status == blink::ServiceWorkerStatusCode::kOk) {
     DCHECK(is_response_committed());
 
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter_to_be_passed;
-    if (coep_reporter_) {
-      DCHECK(IsContainerForWindowClient());
-      coep_reporter_->Clone(
-          coep_reporter_to_be_passed.InitWithNewPipeAndPassReceiver());
-    } else {
       // TODO(https://crbug.com/999049): Implement DedicatedWorker and
       // SharedWorker cases.
       DCHECK(IsContainerForWorkerClient());
-    }
 
     controller_->controller()->Clone(std::move(receiver),
                                      cross_origin_embedder_policy_.value(),
-                                     std::move(coep_reporter_to_be_passed));
+                                     mojo::NullRemote());
   }
 }
 
