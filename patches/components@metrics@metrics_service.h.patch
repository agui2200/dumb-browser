diff --git a/components/metrics/metrics_service.h b/components/metrics/metrics_service.h
index 7fbcf1a486f72..e226f8c939d93 100644
--- a/components/metrics/metrics_service.h
+++ b/components/metrics/metrics_service.h
@@ -19,18 +19,10 @@
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
 #include "base/metrics/field_trial.h"
-#include "base/metrics/histogram_flattener.h"
-#include "base/metrics/histogram_snapshot_manager.h"
-#include "base/metrics/user_metrics.h"
 #include "base/sequence_checker.h"
 #include "base/time/time.h"
 #include "build/build_config.h"
 #include "components/metrics/delegating_provider.h"
-#include "components/metrics/metrics_log.h"
-#include "components/metrics/metrics_log_manager.h"
-#include "components/metrics/metrics_log_store.h"
-#include "components/metrics/metrics_provider.h"
-#include "components/metrics/metrics_reporting_service.h"
 #include "components/variations/synthetic_trial_registry.h"
 
 class PrefService;
@@ -41,18 +33,16 @@ FORWARD_DECLARE_TEST(IOSChromeMetricsServiceClientTest,
                      TestRegisterMetricsServiceProviders);
 
 namespace base {
-class HistogramSamples;
 class PrefService;
 }
 
 namespace metrics {
 
-class MetricsRotationScheduler;
 class MetricsServiceClient;
 class MetricsStateManager;
 
 // See metrics_service.cc for a detailed description.
-class MetricsService : public base::HistogramFlattener {
+class MetricsService {
  public:
   // Creates the MetricsService with the given |state_manager|, |client|, and
   // |local_state|.  Does not take ownership of the paramaters; instead stores
@@ -61,7 +51,7 @@ class MetricsService : public base::HistogramFlattener {
   MetricsService(MetricsStateManager* state_manager,
                  MetricsServiceClient* client,
                  PrefService* local_state);
-  ~MetricsService() override;
+  ~MetricsService();
 
   // Initializes metrics recording state. Updates various bookkeeping values in
   // prefs and sets up the scheduler. This is a separate function rather than
@@ -74,6 +64,7 @@ class MetricsService : public base::HistogramFlattener {
   // are turned on.
   void Start();
 
+#if 0
   // Starts the metrics system in a special test-only mode. Metrics won't ever
   // be uploaded or persisted in this mode, but metrics will be recorded in
   // memory.
@@ -81,17 +72,20 @@ class MetricsService : public base::HistogramFlattener {
 
   // Starts updating the "last live" browser timestamp.
   void StartUpdatingLastLiveTimestamp();
+#endif
 
   // Shuts down the metrics system. Should be called at shutdown, or if metrics
   // are turned off.
   void Stop();
 
+#if 0
   // Enable/disable transmission of accumulated logs and crash reports (dumps).
   // Calling Start() automatically enables reporting, but sending is
   // asyncronous so this can be called immediately after Start() to prevent
   // any uploading.
   void EnableReporting();
   void DisableReporting();
+#endif
 
   // Returns the client ID for this client, or the empty string if metrics
   // recording is not currently running.
@@ -100,9 +94,11 @@ class MetricsService : public base::HistogramFlattener {
   // Returns the install date of the application, in seconds since the epoch.
   int64_t GetInstallDate();
 
+#if 0
   // Returns the date at which the current metrics client ID was created as
   // an int64_t containing seconds since the epoch.
   int64_t GetMetricsReportingEnabledDate();
+#endif
 
   // Returns true if the last session exited cleanly.
   bool WasLastShutdownClean() const;
@@ -110,6 +106,7 @@ class MetricsService : public base::HistogramFlattener {
   // Registers local state prefs used by this class.
   static void RegisterPrefs(PrefRegistrySimple* registry);
 
+#if 0
   // HistogramFlattener:
   void RecordDelta(const base::HistogramBase& histogram,
                    const base::HistogramSamples& snapshot) override;
@@ -147,12 +144,14 @@ class MetricsService : public base::HistogramFlattener {
   // Register the specified |provider| to provide additional metrics into the
   // UMA log. Should be called during MetricsService initialization only.
   void RegisterMetricsProvider(std::unique_ptr<MetricsProvider> provider);
+#endif
 
   // Check if this install was cloned or imaged from another machine. If a
   // clone is detected, reset the client id and low entropy source. This
   // should not be called more than once.
   void CheckForClonedInstall();
 
+#if 0
   // Checks if the cloned install detector says that client ids should be reset.
   bool ShouldResetClientIdsOnClonedInstall();
 
@@ -176,9 +175,11 @@ class MetricsService : public base::HistogramFlattener {
 
 #if defined(OS_ANDROID) || defined(OS_IOS)
   bool IsInForegroundForTesting() const { return is_in_foreground_; }
+#endif
 #endif
 
  protected:
+#if 0
   // Sets the persistent system profile. Virtual for tests.
   virtual void SetPersistentSystemProfile(const std::string& serialized_proto,
                                           bool complete);
@@ -190,6 +191,7 @@ class MetricsService : public base::HistogramFlattener {
       MetricsLog* log,
       PrefService* local_state,
       DelegatingProvider* delegating_provider);
+#endif
 
   // The MetricsService has a lifecycle that is stored as a state.
   // See metrics_service.cc for description of this lifecycle.
@@ -213,6 +215,7 @@ class MetricsService : public base::HistogramFlattener {
     UNSET
   };
 
+#if 0
   // Gets the LogStore for UMA logs.
   MetricsLogStore* log_store() {
     return reporting_service_.metrics_log_store();
@@ -333,6 +336,7 @@ class MetricsService : public base::HistogramFlattener {
 
   // |histogram_snapshot_manager_| prepares histogram deltas for transmission.
   base::HistogramSnapshotManager histogram_snapshot_manager_;
+#endif
 
   // Used to manage various metrics reporting state prefs, such as client id,
   // low entropy source and whether metrics reporting is enabled. Weak pointer.
@@ -347,13 +351,6 @@ class MetricsService : public base::HistogramFlattener {
 
   PrefService* local_state_;
 
-  base::ActionCallback action_callback_;
-
-  // Indicate whether recording and reporting are currently happening.
-  // These should not be set directly, but by calling SetRecording and
-  // SetReporting.
-  RecordingState recording_state_;
-
   // Indicate whether test mode is enabled, where the initial log should never
   // be cut, and logs are neither persisted nor uploaded.
   bool test_mode_active_;
@@ -362,10 +359,12 @@ class MetricsService : public base::HistogramFlattener {
   // state.
   State state_;
 
+#if 0
   // The initial metrics log, used to record startup metrics (histograms and
   // profiler data). Note that if a crash occurred in the previous session, an
   // initial stability log may be sent before this.
   std::unique_ptr<MetricsLog> initial_metrics_log_;
+#endif
 
   // Whether the MetricsService object has received any notifications since
   // the last time a transmission was sent.
@@ -374,9 +373,6 @@ class MetricsService : public base::HistogramFlattener {
   // A number that identifies the how many times the app has been launched.
   int session_id_;
 
-  // The scheduler for determining when log rotations should happen.
-  std::unique_ptr<MetricsRotationScheduler> rotation_scheduler_;
-
   // Stores the time of the first call to |GetUptimes()|.
   base::TimeTicks first_updated_time_;
 
