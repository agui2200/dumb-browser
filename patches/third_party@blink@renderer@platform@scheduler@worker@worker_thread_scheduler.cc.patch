diff --git a/third_party/blink/renderer/platform/scheduler/worker/worker_thread_scheduler.cc b/third_party/blink/renderer/platform/scheduler/worker/worker_thread_scheduler.cc
index ae9b778f4b64..1701bd863cb8 100644
--- a/third_party/blink/renderer/platform/scheduler/worker/worker_thread_scheduler.cc
+++ b/third_party/blink/renderer/platform/scheduler/worker/worker_thread_scheduler.cc
@@ -17,8 +17,6 @@
 #include "base/trace_event/trace_event.h"
 #include "base/trace_event/traced_value.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
-#include "services/metrics/public/cpp/mojo_ukm_recorder.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
 #include "third_party/blink/public/common/thread_safe_browser_interface_broker_proxy.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/platform/scheduler/common/features.h"
@@ -103,15 +101,7 @@ WorkerThreadScheduler::WorkerThreadScheduler(
                              : SchedulingLifecycleState::kNotThrottled),
       worker_metrics_helper_(thread_type, helper()->HasCPUTimingForEachTask()),
       initial_frame_status_(proxy ? proxy->initial_frame_status()
-                                  : FrameStatus::kNone),
-      ukm_source_id_(proxy ? proxy->ukm_source_id() : ukm::kInvalidSourceId) {
-  if (base::SequencedTaskRunnerHandle::IsSet()) {
-    mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> recorder;
-    Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(
-        recorder.InitWithNewPipeAndPassReceiver());
-    ukm_recorder_ = std::make_unique<ukm::MojoUkmRecorder>(std::move(recorder));
-  }
-
+                                  : FrameStatus::kNone) {
   if (proxy && proxy->parent_frame_type())
     worker_metrics_helper_.SetParentFrameType(*proxy->parent_frame_type());
 
@@ -213,8 +203,6 @@ void WorkerThreadScheduler::OnTaskCompleted(
     task_queue_throttler_->OnTaskRunTimeReported(
         task_queue, task_timing->start_time(), task_timing->end_time());
   }
-
-  RecordTaskUkm(task_queue, task, *task_timing);
 }
 
 SchedulerHelper* WorkerThreadScheduler::GetSchedulerHelperForTesting() {
@@ -275,38 +263,6 @@ void WorkerThreadScheduler::CreateTaskQueueThrottler() {
   cpu_time_budget_pool_->SetMaxThrottlingDelay(now, GetMaxThrottlingDelay());
 }
 
-void WorkerThreadScheduler::RecordTaskUkm(
-    NonMainThreadTaskQueue* worker_task_queue,
-    const base::sequence_manager::Task& task,
-    const base::sequence_manager::TaskQueue::TaskTiming& task_timing) {
-  if (!helper()->ShouldRecordTaskUkm(task_timing.has_thread_time()))
-    return;
-  ukm::builders::RendererSchedulerTask builder(ukm_source_id_);
-
-  builder.SetVersion(kUkmMetricVersion);
-  builder.SetThreadType(static_cast<int>(thread_type_));
-
-  builder.SetRendererBackgrounded(
-      internal::ProcessState::Get()->is_process_backgrounded);
-  builder.SetTaskType(task.task_type);
-  builder.SetFrameStatus(static_cast<int>(initial_frame_status_));
-  builder.SetTaskDuration(task_timing.wall_duration().InMicroseconds());
-
-  if (task_timing.has_thread_time())
-    builder.SetTaskCPUDuration(task_timing.thread_duration().InMicroseconds());
-
-  builder.Record(ukm_recorder_.get());
-}
-
-void WorkerThreadScheduler::SetUkmRecorderForTest(
-    std::unique_ptr<ukm::UkmRecorder> ukm_recorder) {
-  ukm_recorder_ = std::move(ukm_recorder);
-}
-
-void WorkerThreadScheduler::SetUkmTaskSamplingRateForTest(double rate) {
-  helper()->SetUkmTaskSamplingRateForTest(rate);
-}
-
 void WorkerThreadScheduler::SetCPUTimeBudgetPoolForTesting(
     CPUTimeBudgetPool* cpu_time_budget_pool) {
   cpu_time_budget_pool_ = cpu_time_budget_pool;
