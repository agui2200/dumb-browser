diff --git a/components/assist_ranker/base_predictor.h b/components/assist_ranker/base_predictor.h
index b4ba028ab46be..e2d4a2c792316 100644
--- a/components/assist_ranker/base_predictor.h
+++ b/components/assist_ranker/base_predictor.h
@@ -11,14 +11,9 @@
 #include "base/memory/weak_ptr.h"
 #include "components/assist_ranker/predictor_config.h"
 #include "components/assist_ranker/ranker_model_loader.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 
 class GURL;
 
-namespace ukm {
-class UkmEntryBuilder;
-}
-
 namespace assist_ranker {
 
 // Value to use for when no prediction threshold replacement should be applied.
@@ -47,9 +42,6 @@ class BasePredictor : public base::SupportsWeakPtr<BasePredictor> {
   // Returns true if the base::Feature associated with this model is enabled.
   bool is_query_enabled() const { return is_query_enabled_; }
 
-  // Logs the features of |example| to UKM using the given source_id.
-  void LogExampleToUkm(const RankerExample& example, ukm::SourceId source_id);
-
   // Returns the model URL.
   GURL GetModelUrl() const;
   // Returns the threshold to use for prediction, or
@@ -76,10 +68,6 @@ class BasePredictor : public base::SupportsWeakPtr<BasePredictor> {
   std::unique_ptr<RankerModel> ranker_model_;
 
  private:
-  void LogFeatureToUkm(const std::string& feature_name,
-                       const Feature& feature,
-                       ukm::UkmEntryBuilder* ukm_builder);
-
   bool is_ready_ = false;
   bool is_query_enabled_ = false;
   PredictorConfig config_;
