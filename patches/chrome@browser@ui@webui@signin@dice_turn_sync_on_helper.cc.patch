diff --git a/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc b/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
index 964ad7e3728a..8dedd28b1cd9 100644
--- a/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
+++ b/chrome/browser/ui/webui/signin/dice_turn_sync_on_helper.cc
@@ -20,7 +20,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/supports_user_data.h"
 #include "base/threading/sequenced_task_runner_handle.h"
-#include "chrome/browser/enterprise/browser_management/browser_management_service.h"
 #include "chrome/browser/policy/chrome_policy_conversions_client.h"
 #include "chrome/browser/policy/cloud/user_policy_signin_service.h"
 #include "chrome/browser/policy/cloud/user_policy_signin_service_factory.h"
@@ -498,40 +497,6 @@ void DiceTurnSyncOnHelper::SigninAndShowSyncConfirmationUI() {
     // TODO(https://crbug.com/811211): Remove this handle.
     sync_blocker_ = sync_service->GetSetupInProgressHandle();
     sync_service->GetUserSettings()->SetSyncRequested(true);
-
-    // For managed users and users on enterprise machines that might have cloud
-    // policies, it is important to wait until sync is initialized so that the
-    // confirmation UI can be aware of startup errors. Since all users can be
-    // subjected to cloud policies through device or browser management (CBCM),
-    // this is needed to make sure that all cloud policies are loaded before any
-    // dialog is shown to check whether sync was disabled by admin. Only wait
-    // for cloud policies because local policies are instantly available. See
-    // http://crbug.com/812546
-    auto management_authorities =
-        policy::BrowserManagementService(profile_).GetManagementAuthorities();
-    auto platform_management_authorities =
-        policy::PlatformManagementService().GetManagementAuthorities();
-    management_authorities.insert(platform_management_authorities.begin(),
-                                  platform_management_authorities.end());
-    bool is_enterprise_user =
-        !policy::BrowserPolicyConnector::IsNonEnterpriseUser(
-            account_info_.email);
-    bool may_have_cloud_policies =
-        is_enterprise_user ||
-        management_authorities.find(
-            policy::EnterpriseManagementAuthority::CLOUD) !=
-            management_authorities.end() ||
-        management_authorities.find(
-            policy::EnterpriseManagementAuthority::CLOUD_DOMAIN) !=
-            management_authorities.end();
-
-    if (may_have_cloud_policies &&
-        SyncStartupTracker::GetSyncServiceState(sync_service) ==
-            SyncStartupTracker::SYNC_STARTUP_PENDING) {
-      sync_startup_tracker_ =
-          std::make_unique<SyncStartupTracker>(sync_service, this);
-      return;
-    }
   }
   ShowSyncConfirmationUI();
 }
