diff --git a/components/metrics/metrics_service.cc b/components/metrics/metrics_service.cc
index d6fee1d197a6c..65c827d4a2c21 100644
--- a/components/metrics/metrics_service.cc
+++ b/components/metrics/metrics_service.cc
@@ -130,12 +130,6 @@
 #include "base/bind.h"
 #include "base/callback.h"
 #include "base/location.h"
-#include "base/metrics/histogram_base.h"
-#include "base/metrics/histogram_functions.h"
-#include "base/metrics/histogram_macros.h"
-#include "base/metrics/histogram_samples.h"
-#include "base/metrics/persistent_histogram_allocator.h"
-#include "base/metrics/statistics_recorder.h"
 #include "base/single_thread_task_runner.h"
 #include "base/strings/string_piece.h"
 #include "base/threading/sequenced_task_runner_handle.h"
@@ -144,22 +138,16 @@
 #include "components/metrics/clean_exit_beacon.h"
 #include "components/metrics/environment_recorder.h"
 #include "components/metrics/field_trials_provider.h"
-#include "components/metrics/metrics_log.h"
-#include "components/metrics/metrics_log_manager.h"
-#include "components/metrics/metrics_log_uploader.h"
 #include "components/metrics/metrics_pref_names.h"
-#include "components/metrics/metrics_rotation_scheduler.h"
 #include "components/metrics/metrics_service_client.h"
 #include "components/metrics/metrics_state_manager.h"
-#include "components/metrics/persistent_system_profile.h"
-#include "components/metrics/stability_metrics_provider.h"
-#include "components/metrics/url_constants.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/variations/entropy_provider.h"
 
 namespace metrics {
 
+#if 0
 namespace {
 
 // The delay, in seconds, after starting recording before doing expensive
@@ -178,14 +166,11 @@ const int kInitializationDelaySeconds = 30;
 const int kUpdateAliveTimestampSeconds = 15 * 60;
 
 }  // namespace
+#endif
 
 // static
 void MetricsService::RegisterPrefs(PrefRegistrySimple* registry) {
-  CleanExitBeacon::RegisterPrefs(registry);
   MetricsStateManager::RegisterPrefs(registry);
-  MetricsLog::RegisterPrefs(registry);
-  StabilityMetricsProvider::RegisterPrefs(registry);
-  MetricsReportingService::RegisterPrefs(registry);
 
   registry->RegisterIntegerPref(prefs::kMetricsSessionID, -1);
 }
@@ -193,33 +178,33 @@ void MetricsService::RegisterPrefs(PrefRegistrySimple* registry) {
 MetricsService::MetricsService(MetricsStateManager* state_manager,
                                MetricsServiceClient* client,
                                PrefService* local_state)
+#if 0
     : reporting_service_(client, local_state),
       histogram_snapshot_manager_(this),
-      state_manager_(state_manager),
+#endif
+      : state_manager_(state_manager),
       client_(client),
       local_state_(local_state),
-      recording_state_(UNSET),
       test_mode_active_(false),
       state_(CONSTRUCTED),
       idle_since_last_transmission_(false),
-      session_id_(-1),
-      synthetic_trial_registry_(
-          client->IsExternalExperimentAllowlistEnabled()) {
+      session_id_(-1) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  DCHECK(state_manager_);
   DCHECK(client_);
   DCHECK(local_state_);
 
+#if 0
   RegisterMetricsProvider(
       std::make_unique<StabilityMetricsProvider>(local_state_));
 
   RegisterMetricsProvider(state_manager_->GetProvider());
+#endif
 }
 
 MetricsService::~MetricsService() {
-  DisableRecording();
 }
 
+#if 0
 void MetricsService::InitializeMetricsRecordingState() {
   // TODO(crbug.com/1176977): Downgrade to a DCHECK once bug is fixed.
   CHECK_EQ(CONSTRUCTED, state_);
@@ -249,13 +234,17 @@ void MetricsService::InitializeMetricsRecordingState() {
 
   state_ = INITIALIZED;
 }
+#endif
 
 void MetricsService::Start() {
+#if 0
   HandleIdleSinceLastTransmission(false);
   EnableRecording();
   EnableReporting();
+#endif
 }
 
+#if 0
 void MetricsService::StartRecordingForTests() {
   test_mode_active_ = true;
   EnableRecording();
@@ -269,13 +258,17 @@ void MetricsService::StartUpdatingLastLiveTimestamp() {
                      self_ptr_factory_.GetWeakPtr()),
       base::TimeDelta::FromSeconds(kUpdateAliveTimestampSeconds));
 }
+#endif
 
 void MetricsService::Stop() {
+#if 0
   HandleIdleSinceLastTransmission(false);
   DisableReporting();
   DisableRecording();
+#endif
 }
 
+#if 0
 void MetricsService::EnableReporting() {
   if (reporting_service_.reporting_active())
     return;
@@ -286,9 +279,10 @@ void MetricsService::EnableReporting() {
 void MetricsService::DisableReporting() {
   reporting_service_.DisableReporting();
 }
+#endif
 
 std::string MetricsService::GetClientId() const {
-  return state_manager_->client_id();
+  return std::string();
 }
 
 int64_t MetricsService::GetInstallDate() {
@@ -296,9 +290,10 @@ int64_t MetricsService::GetInstallDate() {
 }
 
 bool MetricsService::WasLastShutdownClean() const {
-  return state_manager_->clean_exit_beacon()->exited_cleanly();
+  return true;
 }
 
+#if 0
 void MetricsService::EnableRecording() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
@@ -642,10 +637,12 @@ void MetricsService::PushPendingLogsToPersistentStorage() {
   CloseCurrentLog();
   log_store()->TrimAndPersistUnsentLogs();
 }
+#endif
 
 //------------------------------------------------------------------------------
 // Transmission of logs methods
 
+#if 0
 void MetricsService::StartSchedulerIfNecessary() {
   // Never schedule cutting or uploading of logs in test mode.
   if (test_mode_active_)
@@ -797,11 +794,13 @@ void MetricsService::RegisterMetricsProvider(
   DCHECK_EQ(CONSTRUCTED, state_);
   delegating_provider_.RegisterMetricsProvider(std::move(provider));
 }
+#endif
 
 void MetricsService::CheckForClonedInstall() {
   state_manager_->CheckForClonedInstall();
 }
 
+#if 0
 bool MetricsService::ShouldResetClientIdsOnClonedInstall() {
   return state_manager_->ShouldResetClientIdsOnClonedInstall();
 }
@@ -945,5 +944,6 @@ void MetricsService::UpdateLastLiveTimestampTask() {
   // Schecule the next update.
   StartUpdatingLastLiveTimestamp();
 }
+#endif
 
 }  // namespace metrics
