diff --git a/components/metrics/metrics_service.cc b/components/metrics/metrics_service.cc
index 7ca198daa65e..a777134405df 100644
--- a/components/metrics/metrics_service.cc
+++ b/components/metrics/metrics_service.cc
@@ -226,51 +226,23 @@ MetricsService::MetricsService(MetricsStateManager* state_manager,
   DCHECK(state_manager_);
   DCHECK(client_);
   DCHECK(local_state_);
-
-  RegisterMetricsProvider(
-      std::make_unique<StabilityMetricsProvider>(local_state_));
-
-  RegisterMetricsProvider(state_manager_->GetProvider());
 }
 
 MetricsService::~MetricsService() {
   DisableRecording();
 }
 
-void MetricsService::InitializeMetricsRecordingState() {
-  // The FieldTrialsProvider should be registered last. This ensures that
-  // studies whose features are checked when providers add their information to
-  // the log appear in the active field trials.
-  RegisterMetricsProvider(std::make_unique<variations::FieldTrialsProvider>(
-      &synthetic_trial_registry_, base::StringPiece()));
-
-  reporting_service_.Initialize();
-  InitializeMetricsState();
-
-  base::RepeatingClosure upload_callback = base::BindRepeating(
-      &MetricsService::StartScheduledUpload, self_ptr_factory_.GetWeakPtr());
-
-  rotation_scheduler_.reset(new MetricsRotationScheduler(
-      upload_callback,
-      // MetricsServiceClient outlives MetricsService, and
-      // MetricsRotationScheduler is tied to the lifetime of |this|.
-      base::BindRepeating(&MetricsServiceClient::GetUploadInterval,
-                          base::Unretained(client_)),
-      client_->ShouldStartUpFastForTesting()));
-
-  // Init() has to be called after LogCrash() in order for LogCrash() to work.
-  delegating_provider_.Init();
-}
+void MetricsService::InitializeMetricsRecordingState() {}
 
 void MetricsService::Start() {
   HandleIdleSinceLastTransmission(false);
-  EnableRecording();
-  EnableReporting();
+  DisableRecording();
+  DisableReporting();
 }
 
 void MetricsService::StartRecordingForTests() {
   test_mode_active_ = true;
-  EnableRecording();
+  DisableRecording();
   DisableReporting();
 }
 
@@ -288,12 +260,7 @@ void MetricsService::Stop() {
   DisableRecording();
 }
 
-void MetricsService::EnableReporting() {
-  if (reporting_service_.reporting_active())
-    return;
-  reporting_service_.EnableReporting();
-  StartSchedulerIfNecessary();
-}
+void MetricsService::EnableReporting() {}
 
 void MetricsService::DisableReporting() {
   reporting_service_.DisableReporting();
@@ -311,32 +278,7 @@ bool MetricsService::WasLastShutdownClean() const {
   return state_manager_->clean_exit_beacon()->exited_cleanly();
 }
 
-void MetricsService::EnableRecording() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-
-  if (recording_state_ == ACTIVE)
-    return;
-  recording_state_ = ACTIVE;
-
-  state_manager_->ForceClientIdCreation();
-  client_->SetMetricsClientId(state_manager_->client_id());
-
-  if (!log_manager_.current_log())
-    OpenNewLog();
-
-  delegating_provider_.OnRecordingEnabled();
-
-  // Fill in the system profile in the log and persist it (to prefs, .pma and
-  // crashpad). This includes running the providers so that information like
-  // field trials and hardware info is provided. If Chrome crashes before this
-  // log is completed, the .pma file will have this system profile.
-  RecordCurrentEnvironment(log_manager_.current_log(), /*complete=*/false);
-
-  base::RemoveActionCallback(action_callback_);
-  action_callback_ = base::BindRepeating(&MetricsService::OnUserAction,
-                                         base::Unretained(this));
-  base::AddActionCallback(action_callback_);
-}
+void MetricsService::EnableRecording() {}
 
 void MetricsService::DisableRecording() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
