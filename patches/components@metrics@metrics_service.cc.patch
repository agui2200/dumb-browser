diff --git a/components/metrics/metrics_service.cc b/components/metrics/metrics_service.cc
index a63c847d5deb..15aa0ed00a72 100644
--- a/components/metrics/metrics_service.cc
+++ b/components/metrics/metrics_service.cc
@@ -222,6 +222,7 @@ MetricsService::MetricsService(MetricsStateManager* state_manager,
       session_id_(-1),
       synthetic_trial_registry_(
           client->IsExternalExperimentAllowlistEnabled()) {
+  return;
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK(state_manager_);
   DCHECK(client_);
@@ -238,6 +239,7 @@ MetricsService::~MetricsService() {
 }
 
 void MetricsService::InitializeMetricsRecordingState() {
+#if 0
   // The FieldTrialsProvider should be registered last. This ensures that
   // studies whose features are checked when providers add their information to
   // the log appear in the active field trials.
@@ -260,17 +262,18 @@ void MetricsService::InitializeMetricsRecordingState() {
 
   // Init() has to be called after LogCrash() in order for LogCrash() to work.
   delegating_provider_.Init();
+#endif
 }
 
 void MetricsService::Start() {
   HandleIdleSinceLastTransmission(false);
-  EnableRecording();
-  EnableReporting();
+  DisableRecording();
+  DisableReporting();
 }
 
 void MetricsService::StartRecordingForTests() {
   test_mode_active_ = true;
-  EnableRecording();
+  DisableRecording();
   DisableReporting();
 }
 
@@ -289,10 +292,12 @@ void MetricsService::Stop() {
 }
 
 void MetricsService::EnableReporting() {
+#if 0
   if (reporting_service_.reporting_active())
     return;
   reporting_service_.EnableReporting();
   StartSchedulerIfNecessary();
+#endif
 }
 
 void MetricsService::DisableReporting() {
@@ -312,6 +317,7 @@ bool MetricsService::WasLastShutdownClean() const {
 }
 
 void MetricsService::EnableRecording() {
+  return;
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
   if (recording_state_ == ACTIVE)
