diff --git a/third_party/blink/renderer/core/loader/previews_resource_loading_hints.cc b/third_party/blink/renderer/core/loader/previews_resource_loading_hints.cc
index dadf221af29f..e7f545d58955 100644
--- a/third_party/blink/renderer/core/loader/previews_resource_loading_hints.cc
+++ b/third_party/blink/renderer/core/loader/previews_resource_loading_hints.cc
@@ -6,8 +6,6 @@
 
 #include "base/metrics/field_trial_params.h"
 #include "base/metrics/histogram_macros.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "third_party/blink/public/common/features.h"
 #include "third_party/blink/public/mojom/devtools/console_message.mojom-blink.h"
 #include "third_party/blink/renderer/core/execution_context/execution_context.h"
@@ -35,10 +33,9 @@ String GetConsoleLogStringForBlockedLoad(const KURL& url) {
 // static
 PreviewsResourceLoadingHints* PreviewsResourceLoadingHints::Create(
     ExecutionContext& execution_context,
-    int64_t ukm_source_id,
     const WebVector<WebString>& subresource_patterns_to_block) {
   return MakeGarbageCollected<PreviewsResourceLoadingHints>(
-      &execution_context, ukm_source_id, subresource_patterns_to_block);
+      &execution_context, subresource_patterns_to_block);
 }
 
 // static
@@ -54,18 +51,15 @@ PreviewsResourceLoadingHints::CreateFromLoadingHintsProvider(
   }
 
   return MakeGarbageCollected<PreviewsResourceLoadingHints>(
-      &execution_context, loading_hints_provider->ukm_source_id,
+      &execution_context,
       subresource_patterns_to_block);
 }
 
 PreviewsResourceLoadingHints::PreviewsResourceLoadingHints(
     ExecutionContext* execution_context,
-    int64_t ukm_source_id,
     const WebVector<WebString>& subresource_patterns_to_block)
     : execution_context_(execution_context),
-      ukm_source_id_(ukm_source_id),
       subresource_patterns_to_block_(subresource_patterns_to_block) {
-  DCHECK_NE(ukm::kInvalidSourceId, ukm_source_id_);
 
   subresource_patterns_to_block_usage_.Fill(
       false,
@@ -159,36 +153,4 @@ void PreviewsResourceLoadingHints::Trace(Visitor* visitor) const {
   visitor->Trace(execution_context_);
 }
 
-void PreviewsResourceLoadingHints::RecordUKM(
-    ukm::UkmRecorder* ukm_recorder) const {
-  DCHECK(ukm_recorder);
-
-  size_t patterns_to_block_used_count = 0;
-  for (bool pattern_used : subresource_patterns_to_block_usage_) {
-    if (pattern_used) {
-      patterns_to_block_used_count++;
-    }
-  }
-
-  ukm::builders::PreviewsResourceLoadingHints(ukm_source_id_)
-      .Setpatterns_to_block_total(subresource_patterns_to_block_.size())
-      .Setpatterns_to_block_used(patterns_to_block_used_count)
-      .Setblocked_very_low_priority(
-          blocked_resource_load_priority_counts_[static_cast<int>(
-              ResourceLoadPriority::kVeryLow)])
-      .Setblocked_low_priority(
-          blocked_resource_load_priority_counts_[static_cast<int>(
-              ResourceLoadPriority::kLow)])
-      .Setblocked_medium_priority(
-          blocked_resource_load_priority_counts_[static_cast<int>(
-              ResourceLoadPriority::kMedium)])
-      .Setblocked_high_priority(
-          blocked_resource_load_priority_counts_[static_cast<int>(
-              ResourceLoadPriority::kHigh)])
-      .Setblocked_very_high_priority(
-          blocked_resource_load_priority_counts_[static_cast<int>(
-              ResourceLoadPriority::kVeryHigh)])
-      .Record(ukm_recorder);
-}
-
 }  // namespace blink
