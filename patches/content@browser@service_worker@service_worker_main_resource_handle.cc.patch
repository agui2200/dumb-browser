diff --git a/content/browser/service_worker/service_worker_main_resource_handle.cc b/content/browser/service_worker/service_worker_main_resource_handle.cc
index aef9b87c622b..43565c71451a 100644
--- a/content/browser/service_worker/service_worker_main_resource_handle.cc
+++ b/content/browser/service_worker/service_worker_main_resource_handle.cc
@@ -49,8 +49,7 @@ void ServiceWorkerMainResourceHandle::OnBeginNavigationCommit(
     const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
     mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
         coep_reporter,
-    blink::mojom::ServiceWorkerContainerInfoForClientPtr* out_container_info,
-    ukm::SourceId document_ukm_source_id) {
+    blink::mojom::ServiceWorkerContainerInfoForClientPtr* out_container_info) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   // We may have failed to pre-create the container host.
   if (!container_info_)
@@ -60,8 +59,7 @@ void ServiceWorkerMainResourceHandle::OnBeginNavigationCommit(
       base::BindOnce(
           &ServiceWorkerMainResourceHandleCore::OnBeginNavigationCommit,
           base::Unretained(core_), render_process_id, render_frame_id,
-          cross_origin_embedder_policy, std::move(coep_reporter),
-          document_ukm_source_id));
+          cross_origin_embedder_policy, std::move(coep_reporter)));
   *out_container_info = std::move(container_info_);
 }
 
@@ -75,14 +73,12 @@ void ServiceWorkerMainResourceHandle::OnEndNavigationCommit() {
 }
 
 void ServiceWorkerMainResourceHandle::OnBeginWorkerCommit(
-    const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
-    ukm::SourceId worker_ukm_source_id) {
+    const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   ServiceWorkerContextWrapper::RunOrPostTaskOnCoreThread(
       FROM_HERE,
       base::BindOnce(&ServiceWorkerMainResourceHandleCore::OnBeginWorkerCommit,
-                     base::Unretained(core_), cross_origin_embedder_policy,
-                     worker_ukm_source_id));
+                     base::Unretained(core_), cross_origin_embedder_policy));
 }
 
 }  // namespace content
