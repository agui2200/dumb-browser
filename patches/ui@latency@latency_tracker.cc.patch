diff --git a/ui/latency/latency_tracker.cc b/ui/latency/latency_tracker.cc
index 7f059ff7672f..b821ceb26454 100644
--- a/ui/latency/latency_tracker.cc
+++ b/ui/latency/latency_tracker.cc
@@ -11,8 +11,6 @@
 #include "base/rand_util.h"
 #include "base/strings/strcat.h"
 #include "base/trace_event/trace_event.h"
-#include "services/metrics/public/cpp/ukm_entry_builder.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "ui/latency/latency_histogram_macros.h"
 
 // Impose some restrictions for tests etc, but also be lenient since some of the
@@ -115,51 +113,6 @@ void LatencyTracker::OnGpuSwapBuffersCompleted(
   }
 }
 
-void LatencyTracker::ReportUkmScrollLatency(
-    const InputMetricEvent& metric_event,
-    base::TimeTicks start_timestamp,
-    base::TimeTicks time_to_scroll_update_swap_begin_timestamp,
-    base::TimeTicks time_to_handled_timestamp,
-    bool is_main_thread,
-    const ukm::SourceId ukm_source_id) {
-  CONFIRM_EVENT_TIMES_EXIST(start_timestamp,
-                            time_to_scroll_update_swap_begin_timestamp)
-  CONFIRM_EVENT_TIMES_EXIST(start_timestamp, time_to_handled_timestamp)
-
-  ukm::UkmRecorder* ukm_recorder = ukm::UkmRecorder::Get();
-  if (ukm_source_id == ukm::kInvalidSourceId || !ukm_recorder)
-    return;
-
-  std::string event_name = "";
-  switch (metric_event) {
-    case InputMetricEvent::SCROLL_BEGIN_TOUCH:
-      event_name = "Event.ScrollBegin.Touch";
-      break;
-    case InputMetricEvent::SCROLL_UPDATE_TOUCH:
-      event_name = "Event.ScrollUpdate.Touch";
-      break;
-    case InputMetricEvent::SCROLL_BEGIN_WHEEL:
-      event_name = "Event.ScrollBegin.Wheel";
-      break;
-    case InputMetricEvent::SCROLL_UPDATE_WHEEL:
-      event_name = "Event.ScrollUpdate.Wheel";
-      break;
-  }
-
-  ukm::UkmEntryBuilder builder(ukm_source_id, event_name.c_str());
-  builder.SetMetric(
-      "TimeToScrollUpdateSwapBegin",
-      std::max(static_cast<int64_t>(0),
-               (time_to_scroll_update_swap_begin_timestamp - start_timestamp)
-                   .InMicroseconds()));
-  builder.SetMetric(
-      "TimeToHandled",
-      std::max(static_cast<int64_t>(0),
-               (time_to_handled_timestamp - start_timestamp).InMicroseconds()));
-  builder.SetMetric("IsMainThread", is_main_thread);
-  builder.Record(ukm_recorder);
-}
-
 void LatencyTracker::ComputeEndToEndLatencyHistograms(
     base::TimeTicks gpu_swap_begin_timestamp,
     base::TimeTicks gpu_swap_end_timestamp,
@@ -322,10 +275,6 @@ void LatencyTracker::ComputeEndToEndLatencyHistograms(
                                ? InputMetricEvent::SCROLL_UPDATE_TOUCH
                                : InputMetricEvent::SCROLL_UPDATE_WHEEL;
     }
-    ReportUkmScrollLatency(
-        input_metric_event, original_timestamp, gpu_swap_begin_timestamp,
-        rendering_scheduled_timestamp, rendering_scheduled_on_main,
-        latency.ukm_source_id());
   }
 
   const std::string thread_name = rendering_scheduled_on_main ? "Main" : "Impl";
