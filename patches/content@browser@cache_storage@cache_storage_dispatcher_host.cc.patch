diff --git a/content/browser/cache_storage/cache_storage_dispatcher_host.cc b/content/browser/cache_storage/cache_storage_dispatcher_host.cc
index 7c7d29794e9d..29f05d27fa2a 100644
--- a/content/browser/cache_storage/cache_storage_dispatcher_host.cc
+++ b/content/browser/cache_storage/cache_storage_dispatcher_host.cc
@@ -122,9 +122,7 @@ blink::mojom::MatchResultPtr EagerlyReadResponseBody(
 bool ResponseBlockedByCrossOriginResourcePolicy(
     const blink::mojom::FetchAPIResponse* response,
     const url::Origin& document_origin,
-    const CrossOriginEmbedderPolicy& document_coep,
-    const mojo::Remote<network::mojom::CrossOriginEmbedderPolicyReporter>&
-        coep_reporter) {
+    const CrossOriginEmbedderPolicy& document_coep) {
   // optional short-circuit to avoid parsing CORP again and again when no COEP
   // policy is defined.
   if (document_coep.value ==
@@ -150,7 +148,7 @@ bool ResponseBlockedByCrossOriginResourcePolicy(
              response->url_list.back(), response->url_list.front(),
              document_origin, corp_header_value, RequestMode::kNoCors,
              document_origin, network::mojom::RequestDestination::kEmpty,
-             document_coep, coep_reporter ? coep_reporter.get() : nullptr)
+             document_coep)
       .has_value();
 }
 
@@ -168,14 +166,11 @@ class CacheStorageDispatcherHost::CacheImpl
       CacheStorageCacheHandle cache_handle,
       const url::Origin& origin,
       const CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
-      mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-          coep_reporter,
       storage::mojom::CacheStorageOwner owner)
       : host_(host),
         cache_handle_(std::move(cache_handle)),
         origin_(origin),
         cross_origin_embedder_policy_(cross_origin_embedder_policy),
-        coep_reporter_(std::move(coep_reporter)),
         owner_(owner) {
     DCHECK(host_);
   }
@@ -248,7 +243,7 @@ class CacheStorageDispatcherHost::CacheImpl
           // Cross-Origin-Embedder-Policy (COEP).
           if (ResponseBlockedByCrossOriginResourcePolicy(
                   response.get(), self->origin_,
-                  self->cross_origin_embedder_policy_, self->coep_reporter_)) {
+                  self->cross_origin_embedder_policy_)) {
             std::move(callback).Run(blink::mojom::MatchResult::NewStatus(
                 CacheStorageError::kErrorCrossOriginResourcePolicy));
             return;
@@ -332,8 +327,7 @@ class CacheStorageDispatcherHost::CacheImpl
           for (const auto& response : responses) {
             if (ResponseBlockedByCrossOriginResourcePolicy(
                     response.get(), self->origin_,
-                    self->cross_origin_embedder_policy_,
-                    self->coep_reporter_)) {
+                    self->cross_origin_embedder_policy_)) {
               std::move(callback).Run(blink::mojom::MatchAllResult::NewStatus(
                   CacheStorageError::kErrorCrossOriginResourcePolicy));
               return;
@@ -413,8 +407,7 @@ class CacheStorageDispatcherHost::CacheImpl
           for (const auto& entry : entries) {
             if (ResponseBlockedByCrossOriginResourcePolicy(
                     entry->response.get(), self->origin_,
-                    self->cross_origin_embedder_policy_,
-                    self->coep_reporter_)) {
+                    self->cross_origin_embedder_policy_)) {
               std::move(callback).Run(
                   blink::mojom::GetAllMatchedEntriesResult::NewStatus(
                       CacheStorageError::kErrorCrossOriginResourcePolicy));
@@ -605,8 +598,6 @@ class CacheStorageDispatcherHost::CacheImpl
   CacheStorageCacheHandle cache_handle_;
   const url::Origin origin_;
   const CrossOriginEmbedderPolicy cross_origin_embedder_policy_;
-  mojo::Remote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter_;
   const storage::mojom::CacheStorageOwner owner_;
   SEQUENCE_CHECKER(sequence_checker_);
 
@@ -626,13 +617,10 @@ class CacheStorageDispatcherHost::CacheStorageImpl final
       const url::Origin& origin,
       bool incognito,
       const CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
-      mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-          coep_reporter,
       storage::mojom::CacheStorageOwner owner)
       : host_(host),
         origin_(origin),
         cross_origin_embedder_policy_(cross_origin_embedder_policy),
-        coep_reporter_(std::move(coep_reporter)),
         owner_(owner) {
     // Eagerly initialize the backend when the mojo connection is bound.
     //
@@ -823,7 +811,7 @@ class CacheStorageDispatcherHost::CacheStorageImpl final
           // Cross-Origin-Embedder-Policy (COEP).
           if (ResponseBlockedByCrossOriginResourcePolicy(
                   response.get(), self->origin_,
-                  self->cross_origin_embedder_policy_, self->coep_reporter_)) {
+                  self->cross_origin_embedder_policy_)) {
             std::move(callback).Run(blink::mojom::MatchResult::NewStatus(
                 CacheStorageError::kErrorCrossOriginResourcePolicy));
             return;
@@ -901,15 +889,10 @@ class CacheStorageDispatcherHost::CacheStorageImpl final
 
           mojo::PendingAssociatedRemote<blink::mojom::CacheStorageCache>
               pending_remote;
-          mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-              coep_reporter;
-          if (self->coep_reporter_) {
-            self->coep_reporter_->Clone(
-                coep_reporter.InitWithNewPipeAndPassReceiver());
-          }
+
           auto cache_impl = std::make_unique<CacheImpl>(
               self->host_, std::move(cache_handle), self->origin_,
-              self->cross_origin_embedder_policy_, std::move(coep_reporter),
+              self->cross_origin_embedder_policy_,
               self->owner_);
           self->host_->AddCacheReceiver(
               std::move(cache_impl),
@@ -948,8 +931,6 @@ class CacheStorageDispatcherHost::CacheStorageImpl final
 
   const url::Origin origin_;
   const CrossOriginEmbedderPolicy cross_origin_embedder_policy_;
-  mojo::Remote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter_;
   const storage::mojom::CacheStorageOwner owner_;
   CacheStorageHandle cache_storage_handle_;
 
@@ -971,8 +952,6 @@ void CacheStorageDispatcherHost::Init(CacheStorageContextImpl* context) {
 
 void CacheStorageDispatcherHost::AddReceiver(
     const CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter,
     const url::Origin& origin,
     storage::mojom::CacheStorageOwner owner,
     mojo::PendingReceiver<blink::mojom::CacheStorage> receiver) {
@@ -980,7 +959,7 @@ void CacheStorageDispatcherHost::AddReceiver(
   bool incognito = context_ ? context_->is_incognito() : false;
   auto impl = std::make_unique<CacheStorageImpl>(
       this, origin, incognito, cross_origin_embedder_policy,
-      std::move(coep_reporter), owner);
+      owner);
   receivers_.Add(std::move(impl), std::move(receiver));
 }
 
