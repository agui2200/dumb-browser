diff --git a/services/network/public/cpp/cross_origin_resource_policy.cc b/services/network/public/cpp/cross_origin_resource_policy.cc
index 74a96f33f3c2..5e6966a1e10c 100644
--- a/services/network/public/cpp/cross_origin_resource_policy.cc
+++ b/services/network/public/cpp/cross_origin_resource_policy.cc
@@ -216,26 +216,7 @@ base::Optional<mojom::BlockedByResponseReason> IsBlockedInternalWithReporting(
     mojom::RequestMode request_mode,
     base::Optional<url::Origin> request_initiator_origin_lock,
     mojom::RequestDestination request_destination,
-    const CrossOriginEmbedderPolicy& embedder_policy,
-    mojom::CrossOriginEmbedderPolicyReporter* reporter) {
-  constexpr auto kBlockedDueToCoep = mojom::BlockedByResponseReason::
-      kCorpNotSameOriginAfterDefaultedToSameOriginByCoep;
-  if (embedder_policy.report_only_value ==
-          mojom::CrossOriginEmbedderPolicyValue::kRequireCorp &&
-      reporter) {
-    const auto result = IsBlockedInternal(
-        policy, request_url, request_initiator, request_mode,
-        request_initiator_origin_lock, embedder_policy.report_only_value);
-    UMA_HISTOGRAM_ENUMERATION(
-        "NetworkService.CrossOriginResourcePolicy.ReportOnlyResult",
-        ToCorpResult(result));
-    if (result == kBlockedDueToCoep ||
-        (result.has_value() && request_mode == mojom::RequestMode::kNavigate)) {
-      reporter->QueueCorpViolationReport(original_url, request_destination,
-                                         /*report_only=*/true);
-    }
-  }
-
+    const CrossOriginEmbedderPolicy& embedder_policy) {
   if (request_mode == mojom::RequestMode::kNavigate &&
       embedder_policy.value == mojom::CrossOriginEmbedderPolicyValue::kNone) {
     return base::nullopt;
@@ -246,12 +227,7 @@ base::Optional<mojom::BlockedByResponseReason> IsBlockedInternalWithReporting(
                         request_initiator_origin_lock, embedder_policy.value);
   UMA_HISTOGRAM_ENUMERATION("NetworkService.CrossOriginResourcePolicy.Result",
                             ToCorpResult(result));
-  if (reporter &&
-      (result == kBlockedDueToCoep ||
-       (result.has_value() && request_mode == mojom::RequestMode::kNavigate))) {
-    reporter->QueueCorpViolationReport(original_url, request_destination,
-                                       /*report_only=*/false);
-  }
+
   return result;
 }
 
@@ -271,8 +247,7 @@ CrossOriginResourcePolicy::IsBlocked(
     mojom::RequestMode request_mode,
     base::Optional<url::Origin> request_initiator_origin_lock,
     mojom::RequestDestination request_destination,
-    const CrossOriginEmbedderPolicy& embedder_policy,
-    mojom::CrossOriginEmbedderPolicyReporter* reporter) {
+    const CrossOriginEmbedderPolicy& embedder_policy) {
   // From https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header:
   // > 1. If request’s mode is not "no-cors", then return allowed.
   if (request_mode != mojom::RequestMode::kNoCors)
@@ -290,8 +265,7 @@ CrossOriginResourcePolicy::IsBlocked(
 
   return IsBlockedInternalWithReporting(
       policy, request_url, original_url, request_initiator, request_mode,
-      request_initiator_origin_lock, request_destination, embedder_policy,
-      reporter);
+      request_initiator_origin_lock, request_destination, embedder_policy);
 }
 
 // static
@@ -304,8 +278,7 @@ CrossOriginResourcePolicy::IsBlockedByHeaderValue(
     mojom::RequestMode request_mode,
     base::Optional<url::Origin> request_initiator_origin_lock,
     mojom::RequestDestination request_destination,
-    const CrossOriginEmbedderPolicy& embedder_policy,
-    mojom::CrossOriginEmbedderPolicyReporter* reporter) {
+    const CrossOriginEmbedderPolicy& embedder_policy) {
   // From https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header:
   // > 1. If request’s mode is not "no-cors", then return allowed.
   if (request_mode != mojom::RequestMode::kNoCors)
@@ -315,8 +288,7 @@ CrossOriginResourcePolicy::IsBlockedByHeaderValue(
 
   return IsBlockedInternalWithReporting(
       policy, request_url, original_url, request_initiator, request_mode,
-      request_initiator_origin_lock, request_destination, embedder_policy,
-      reporter);
+      request_initiator_origin_lock, request_destination, embedder_policy);
 }
 
 // static
@@ -328,15 +300,14 @@ CrossOriginResourcePolicy::IsNavigationBlocked(
     const network::mojom::URLResponseHead& response,
     base::Optional<url::Origin> request_initiator_origin_lock,
     mojom::RequestDestination request_destination,
-    const CrossOriginEmbedderPolicy& embedder_policy,
-    mojom::CrossOriginEmbedderPolicyReporter* reporter) {
+    const CrossOriginEmbedderPolicy& embedder_policy) {
   ParsedHeader policy =
       ParseHeaderByHttpResponseHeaders(response.headers.get());
 
   return IsBlockedInternalWithReporting(
       policy, request_url, original_url, request_initiator,
       mojom::RequestMode::kNavigate, request_initiator_origin_lock,
-      request_destination, embedder_policy, reporter);
+      request_destination, embedder_policy);
 }
 
 // static
