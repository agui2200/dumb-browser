diff --git a/components/password_manager/core/browser/password_form_filling.cc b/components/password_manager/core/browser/password_form_filling.cc
index a3237754374b..69caf756cfe7 100644
--- a/components/password_manager/core/browser/password_form_filling.cc
+++ b/components/password_manager/core/browser/password_form_filling.cc
@@ -115,8 +115,6 @@ void Autofill(PasswordManagerClient* client,
   UMA_HISTOGRAM_BOOLEAN(
       "PasswordManager.FillSuggestionsIncludeAndroidAppCredentials",
       ContainsAndroidCredentials(fill_data));
-  metrics_util::LogFilledCredentialIsFromAndroidApp(
-      PreferredRealmIsFromAndroid(fill_data));
   driver->FillPasswordForm(fill_data);
 
   client->PasswordWasAutofilled(best_matches,
@@ -133,8 +131,7 @@ LikelyFormFilling SendFillInformationToRenderer(
     const std::vector<const PasswordForm*>& best_matches,
     const std::vector<const PasswordForm*>& federated_matches,
     const PasswordForm* preferred_match,
-    bool blocked_by_user,
-    PasswordFormMetricsRecorder* metrics_recorder) {
+    bool blocked_by_user) {
   DCHECK(driver);
   DCHECK_EQ(PasswordForm::Scheme::kHtml, observed_form.scheme);
 
@@ -159,8 +156,6 @@ LikelyFormFilling SendFillInformationToRenderer(
              client->GetLastCommittedURL()));
 
     driver->InformNoSavedCredentials(should_show_popup_without_passwords);
-    metrics_recorder->RecordFillEvent(
-        PasswordFormMetricsRecorder::kManagerFillEventNoCredential);
     return LikelyFormFilling::kNoFilling;
   }
   DCHECK(preferred_match);
@@ -206,29 +201,9 @@ LikelyFormFilling SendFillInformationToRenderer(
     wait_for_username_reason = WaitForUsernameReason::kFoasFeature;
   }
 
-  // Record no "FirstWaitForUsernameReason" metrics for a form that is not meant
-  // for filling. The renderer won't record a "FirstFillingResult" either.
-  if (!no_sign_in_form) {
-    metrics_recorder->RecordFirstWaitForUsernameReason(
-        wait_for_username_reason);
-  }
-
   bool wait_for_username =
       wait_for_username_reason != WaitForUsernameReason::kDontWait;
 
-  if (wait_for_username) {
-    metrics_recorder->SetManagerAction(
-        PasswordFormMetricsRecorder::kManagerActionNone);
-    metrics_recorder->RecordFillEvent(
-        PasswordFormMetricsRecorder::kManagerFillEventBlockedOnInteraction);
-  } else {
-    metrics_recorder->SetManagerAction(
-        PasswordFormMetricsRecorder::kManagerActionAutofilled);
-    metrics_recorder->RecordFillEvent(
-        PasswordFormMetricsRecorder::kManagerFillEventAutofilled);
-    base::RecordAction(base::UserMetricsAction("PasswordManager_Autofilled"));
-  }
-
   // Continue with autofilling any password forms as traditionally has been
   // done.
   Autofill(client, driver, observed_form, best_matches, federated_matches,
