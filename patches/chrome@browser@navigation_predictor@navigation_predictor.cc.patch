diff --git a/chrome/browser/navigation_predictor/navigation_predictor.cc b/chrome/browser/navigation_predictor/navigation_predictor.cc
index 1c23d85c79554..ee126d9327b66 100644
--- a/chrome/browser/navigation_predictor/navigation_predictor.cc
+++ b/chrome/browser/navigation_predictor/navigation_predictor.cc
@@ -25,19 +25,19 @@
 #include "mojo/public/cpp/bindings/message.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "services/metrics/public/cpp/metrics_utils.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/blink/public/common/features.h"
 #include "url/gurl.h"
 #include "url/url_canon.h"
 
+#if 0
 namespace {
 
 // The maximum number of clicks to track in a single navigation.
 size_t kMaxClicksTracked = 10;
 
 }  // namespace
+#endif
 
 NavigationPredictor::NavigationPredictor(
     content::RenderFrameHost* render_frame_host,
@@ -46,9 +46,6 @@ NavigationPredictor::NavigationPredictor(
           render_frame_host,
           std::move(receiver)) {
   DETACH_FROM_SEQUENCE(sequence_checker_);
-
-  ukm_recorder_ = ukm::UkmRecorder::Get();
-  ukm_source_id_ = render_frame_host->GetMainFrame()->GetPageUkmSourceId();
 }
 
 NavigationPredictor::~NavigationPredictor() {
@@ -93,6 +90,7 @@ int NavigationPredictor::GetLinearBucketForRatioArea(int value) const {
 
 void NavigationPredictor::ReportNewAnchorElements(
     std::vector<blink::mojom::AnchorElementMetricsPtr> elements) {
+#if 0
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK(base::FeatureList::IsEnabled(blink::features::kNavigationPredictor));
 
@@ -158,10 +156,12 @@ void NavigationPredictor::ReportNewAnchorElements(
             kAnchorElementsParsedFromWebPage,
         new_predictions);
   }
+#endif
 }
 
 void NavigationPredictor::ReportAnchorElementClick(
     blink::mojom::AnchorElementClickPtr click) {
+#if 0
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK(base::FeatureList::IsEnabled(blink::features::kNavigationPredictor));
 
@@ -188,10 +188,12 @@ void NavigationPredictor::ReportAnchorElementClick(
     builder.SetHrefUnchanged(it->second->target_url == click->target_url);
   }
   builder.Record(ukm_recorder_);
+#endif
 }
 
 void NavigationPredictor::ReportAnchorElementsEnteredViewport(
     std::vector<blink::mojom::AnchorElementEnteredViewportPtr> elements) {
+#if 0
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK(base::FeatureList::IsEnabled(blink::features::kNavigationPredictor));
 
@@ -281,4 +283,5 @@ void NavigationPredictor::ReportAnchorElementsEnteredViewport(
 
     anchor_element_builder.Record(ukm_recorder_);
   }
+#endif
 }
