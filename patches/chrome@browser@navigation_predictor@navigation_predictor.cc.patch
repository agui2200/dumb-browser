diff --git a/chrome/browser/navigation_predictor/navigation_predictor.cc b/chrome/browser/navigation_predictor/navigation_predictor.cc
index becdb8a28c05..78ba4a3f77f8 100644
--- a/chrome/browser/navigation_predictor/navigation_predictor.cc
+++ b/chrome/browser/navigation_predictor/navigation_predictor.cc
@@ -28,8 +28,6 @@
 #include "mojo/public/cpp/bindings/message.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "services/metrics/public/cpp/metrics_utils.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "third_party/blink/public/common/features.h"
 #include "url/gurl.h"
 #include "url/url_canon.h"
@@ -206,10 +204,7 @@ NavigationPredictor::NavigationPredictor(content::WebContents* web_contents)
   if (browser_context_->IsOffTheRecord())
     return;
 
-  ukm_recorder_ = ukm::UkmRecorder::Get();
-
   current_visibility_ = web_contents->GetVisibility();
-  ukm_source_id_ = web_contents->GetMainFrame()->GetPageUkmSourceId();
   Observe(web_contents);
 }
 
@@ -405,65 +400,6 @@ void NavigationPredictor::RecordAction(Action log_action) {
   base::UmaHistogramEnumeration(action_histogram_name, log_action);
 }
 
-void NavigationPredictor::MaybeSendMetricsToUkm() const {
-  if (!ukm_recorder_) {
-    return;
-  }
-
-  ukm::builders::NavigationPredictorPageLinkMetrics page_link_builder(
-      ukm_source_id_);
-
-  page_link_builder.SetNumberOfAnchors_Total(
-      GetBucketMinForPageMetrics(number_of_anchors_));
-  page_link_builder.SetNumberOfAnchors_SameHost(
-      GetBucketMinForPageMetrics(number_of_anchors_same_host_));
-  page_link_builder.SetNumberOfAnchors_ContainsImage(
-      GetBucketMinForPageMetrics(number_of_anchors_contains_image_));
-  page_link_builder.SetNumberOfAnchors_InIframe(
-      GetBucketMinForPageMetrics(number_of_anchors_in_iframe_));
-  page_link_builder.SetNumberOfAnchors_URLIncremented(
-      GetBucketMinForPageMetrics(number_of_anchors_url_incremented_));
-  page_link_builder.SetTotalClickableSpace(
-      GetBucketMinForPageMetrics(static_cast<int>(total_clickable_space_)));
-  page_link_builder.SetMedianLinkLocation(
-      GetLinearBucketForLinkLocation(median_link_location_));
-  page_link_builder.SetViewport_Height(
-      GetBucketMinForPageMetrics(viewport_size_.height()));
-  page_link_builder.SetViewport_Width(
-      GetBucketMinForPageMetrics(viewport_size_.width()));
-
-  page_link_builder.Record(ukm_recorder_);
-
-  for (const auto& navigation_score_tuple : navigation_scores_map_) {
-    const auto& navigation_score = navigation_score_tuple.second;
-    ukm::builders::NavigationPredictorAnchorElementMetrics
-        anchor_element_builder(ukm_source_id_);
-
-    // Offset index to be 1-based indexing.
-    anchor_element_builder.SetAnchorIndex(navigation_score->index);
-    anchor_element_builder.SetIsInIframe(navigation_score->is_in_iframe);
-    anchor_element_builder.SetIsURLIncrementedByOne(
-        navigation_score->is_url_incremented_by_one);
-    anchor_element_builder.SetContainsImage(navigation_score->contains_image);
-    anchor_element_builder.SetSameOrigin(
-        url::Origin::Create(navigation_score->url) ==
-        url::Origin::Create(document_url_));
-
-    // Convert the ratio area and ratio distance from [0,1] to [0,100].
-    int percent_ratio_area =
-        static_cast<int>(navigation_score->ratio_area * 100);
-    int percent_ratio_distance_root_top =
-        static_cast<int>(navigation_score->ratio_distance_root_top * 100);
-
-    anchor_element_builder.SetPercentClickableArea(
-        GetLinearBucketForRatioArea(percent_ratio_area));
-    anchor_element_builder.SetPercentVerticalDistance(
-        GetLinearBucketForLinkLocation(percent_ratio_distance_root_top));
-
-    anchor_element_builder.Record(ukm_recorder_);
-  }
-}
-
 int NavigationPredictor::GetBucketMinForPageMetrics(int value) const {
   return ukm::GetExponentialBucketMin(value, 1.3);
 }
@@ -476,26 +412,6 @@ int NavigationPredictor::GetLinearBucketForRatioArea(int value) const {
   return ukm::GetLinearBucketMin(static_cast<int64_t>(value), 5);
 }
 
-void NavigationPredictor::MaybeSendClickMetricsToUkm(
-    const std::string& clicked_url) const {
-  if (!ukm_recorder_) {
-    return;
-  }
-
-  if (clicked_count_ > 10)
-    return;
-
-  auto nav_score = navigation_scores_map_.find(clicked_url);
-
-  int anchor_element_index = (nav_score == navigation_scores_map_.end())
-                                 ? 0
-                                 : nav_score->second->index;
-
-  ukm::builders::NavigationPredictorPageLinkClick builder(ukm_source_id_);
-  builder.SetAnchorElementIndex(anchor_element_index);
-  builder.Record(ukm_recorder_);
-}
-
 TemplateURLService* NavigationPredictor::GetTemplateURLService() const {
   return TemplateURLServiceFactory::GetForProfile(
       Profile::FromBrowserContext(browser_context_));
@@ -528,7 +444,6 @@ void NavigationPredictor::ReportAnchorElementMetricsOnClick(
   document_url_ = metrics->source_url;
 
   RecordActionAccuracyOnClick(metrics->target_url);
-  MaybeSendClickMetricsToUkm(metrics->target_url.spec());
 
   // Look up the clicked URL in |navigation_scores_map_|. Record if we find it.
   auto iter = navigation_scores_map_.find(metrics->target_url.spec());
@@ -766,8 +681,6 @@ void NavigationPredictor::ReportAnchorElementMetricsOnLoad(
     std::string url_spec = navigation_scores[i]->url.spec();
     navigation_scores_map_[url_spec] = std::move(navigation_scores[i]);
   }
-
-  MaybeSendMetricsToUkm();
 }
 
 double NavigationPredictor::CalculateAnchorNavigationScore(
@@ -1020,4 +933,3 @@ std::deque<GURL> NavigationPredictor::GetUrlsToPrefetch(
 
   return urls_to_prefetch;
 }
-
