diff --git a/chrome/browser/resource_coordinator/tab_manager_stats_collector.cc b/chrome/browser/resource_coordinator/tab_manager_stats_collector.cc
index ae110bf0eb35..8daec9fe05e7 100644
--- a/chrome/browser/resource_coordinator/tab_manager_stats_collector.cc
+++ b/chrome/browser/resource_coordinator/tab_manager_stats_collector.cc
@@ -30,8 +30,6 @@
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/navigation_entry.h"
 #include "content/public/browser/swap_metrics_driver.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 
 namespace resource_coordinator {
 
@@ -42,16 +40,6 @@ using LoadingState = TabLoadTracker::LoadingState;
 const char* const kSessionTypeName[] = {"SessionRestore",
                                         "BackgroundTabOpening"};
 
-ukm::SourceId GetUkmSourceId(content::WebContents* contents) {
-  resource_coordinator::ResourceCoordinatorTabHelper* observer =
-      resource_coordinator::ResourceCoordinatorTabHelper::FromWebContents(
-          contents);
-  if (!observer)
-    return ukm::kInvalidSourceId;
-
-  return observer->ukm_source_id();
-}
-
 }  // namespace
 
 void TabManagerStatsCollector::BackgroundTabCountStats::Reset() {
@@ -262,46 +250,14 @@ void TabManagerStatsCollector::OnTabIsLoaded(content::WebContents* contents) {
 
   base::TimeDelta switch_load_time =
       NowTicks() - foreground_contents_switched_to_times_[contents];
-  ukm::SourceId ukm_source_id = GetUkmSourceId(contents);
+
   if (is_session_restore_loading_tabs_ && !IsInOverlappedSession()) {
     UMA_HISTOGRAM_MEDIUM_TIMES(kHistogramSessionRestoreTabSwitchLoadTime,
                                switch_load_time);
-
-    if (ukm_source_id != ukm::kInvalidSourceId) {
-      ukm::builders::
-          TabManager_Experimental_SessionRestore_TabSwitchLoadStopped(
-              ukm_source_id)
-              .SetSequenceId(sequence_++)
-              .SetSessionRestoreSessionId(session_id_)
-              .SetSessionRestoreTabCount(
-                  g_browser_process->GetTabManager()->restored_tab_count())
-              .SetSystemTabCount(
-                  g_browser_process->GetTabManager()->GetTabCount())
-              .SetTabSwitchLoadTime(switch_load_time.InMilliseconds())
-              .Record(ukm::UkmRecorder::Get());
-    }
   }
   if (is_in_background_tab_opening_session_ && !IsInOverlappedSession()) {
     UMA_HISTOGRAM_MEDIUM_TIMES(kHistogramBackgroundTabOpeningTabSwitchLoadTime,
                                switch_load_time);
-
-    if (ukm_source_id != ukm::kInvalidSourceId) {
-      ukm::builders::
-          TabManager_Experimental_BackgroundTabOpening_TabSwitchLoadStopped(
-              ukm_source_id)
-              .SetBackgroundTabLoadingCount(
-                  g_browser_process->GetTabManager()
-                      ->GetBackgroundTabLoadingCount())
-              .SetBackgroundTabOpeningSessionId(session_id_)
-              .SetBackgroundTabPendingCount(
-                  g_browser_process->GetTabManager()
-                      ->GetBackgroundTabPendingCount())
-              .SetSequenceId(sequence_++)
-              .SetSystemTabCount(
-                  g_browser_process->GetTabManager()->GetTabCount())
-              .SetTabSwitchLoadTime(switch_load_time.InMilliseconds())
-              .Record(ukm::UkmRecorder::Get());
-    }
   }
 
   foreground_contents_switched_to_times_.erase(contents);
@@ -338,66 +294,6 @@ void TabManagerStatsCollector::UpdateSessionAndSequence() {
   sequence_ = 0;
 }
 
-// static
-void TabManagerStatsCollector::RecordDecisionDetails(
-    LifecycleUnit* lifecycle_unit,
-    const DecisionDetails& decision_details,
-    LifecycleUnitState target_state) {
-  ukm::SourceId ukm_source_id = lifecycle_unit->GetUkmSourceId();
-  if (ukm_source_id == ukm::kInvalidSourceId)
-    return;
-
-  // Don't log anything for invalid decision details (trivial reasons: crashed
-  // tabs, navigations not yet committed, etc).
-  if (decision_details.reasons().empty())
-    return;
-
-  ukm::builders::TabManager_LifecycleStateChange builder(ukm_source_id);
-
-  builder.SetOldLifecycleState(
-      static_cast<int64_t>(lifecycle_unit->GetState()));
-  builder.SetNewLifecycleState(static_cast<int64_t>(target_state));
-  // No LifecycleStateChangeReason is set right now, indicating that this is a
-  // theoretical state change rather than an actual one. This differentiates
-  // sampled lifecycle transitions from actual ones.
-
-  // We only currently report transitions for tabs, so this lookup should never
-  // fail. It will start failing once we add ARC processes as LifecycleUnits.
-  // TODO(chrisha): This should be time since the navigation was committed (the
-  // load started), but that information is currently only persisted inside the
-  // CU-graph. Using time since navigation finished is a cheap approximation for
-  // the time being.
-  auto* tab = lifecycle_unit->AsTabLifecycleUnitExternal();
-  auto* contents = tab->GetWebContents();
-  auto* nav_entry = contents->GetController().GetLastCommittedEntry();
-  if (nav_entry) {
-    auto timestamp = nav_entry->GetTimestamp();
-    if (!timestamp.is_null()) {
-      auto elapsed = base::Time::Now() - timestamp;
-      builder.SetTimeSinceNavigationMs(elapsed.InMilliseconds());
-    }
-  }
-
-  // Set visibility related data.
-  // |time_since_visible| is:
-  // - Zero if the LifecycleUnit is currently visible.
-  // - Time since creation if the LifecycleUnit was never visible.
-  // - Time since visible if the LifecycleUnit was visible in the past.
-  auto visibility = lifecycle_unit->GetVisibility();
-  base::TimeDelta time_since_visible;  // Zero.
-  if (visibility != content::Visibility::VISIBLE)
-    time_since_visible = NowTicks() - lifecycle_unit->GetWallTimeWhenHidden();
-  builder.SetTimeSinceVisibilityStateChangeMs(
-      time_since_visible.InMilliseconds());
-  builder.SetVisibilityState(static_cast<int64_t>(visibility));
-
-  // This populates all of the relevant Success/Failure fields, as well as
-  // Outcome.
-  decision_details.Populate(&builder);
-
-  builder.Record(ukm::UkmRecorder::Get());
-}
-
 // static
 const char TabManagerStatsCollector::kHistogramSessionRestoreSwitchToTab[] =
     "TabManager.SessionRestore.SwitchToTab";
