diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index c4d99326bacf..b767b476df06 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -105,7 +105,6 @@
 #include "chrome/browser/ui/views/frame/web_footer_experiment_view.h"
 #include "chrome/browser/ui/views/fullscreen_control/fullscreen_control_host.h"
 #include "chrome/browser/ui/views/global_media_controls/media_toolbar_button_view.h"
-#include "chrome/browser/ui/views/hats/hats_bubble_view.h"
 #include "chrome/browser/ui/views/infobars/infobar_container_view.h"
 #include "chrome/browser/ui/views/location_bar/intent_picker_view.h"
 #include "chrome/browser/ui/views/location_bar/location_bar_view.h"
@@ -156,7 +155,6 @@
 #include "components/omnibox/browser/omnibox_view.h"
 #include "components/permissions/permission_request_manager.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/password_protection/metrics_util.h"
 #include "components/sessions/core/tab_restore_service.h"
 #include "components/translate/core/browser/language_state.h"
 #include "components/translate/core/browser/translate_manager.h"
@@ -2922,12 +2920,6 @@ void BrowserView::AddedToWidget() {
 
 void BrowserView::PaintChildren(const views::PaintInfo& paint_info) {
   views::ClientView::PaintChildren(paint_info);
-  // Don't reset the instance before it had a chance to get compositor callback.
-  if (!histogram_helper_) {
-    histogram_helper_ = BrowserWindowHistogramHelper::
-        MaybeRecordValueAndCreateInstanceOnBrowserPaint(
-            GetWidget()->GetCompositor());
-  }
 }
 
 void BrowserView::GetAccessibleNodeData(ui::AXNodeData* node_data) {
@@ -3357,63 +3349,6 @@ int BrowserView::GetCommandIDForAppCommandID(int app_command_id) const {
 
 void BrowserView::UpdateAcceleratorMetrics(const ui::Accelerator& accelerator,
                                            int command_id) {
-  const ui::KeyboardCode key_code = accelerator.key_code();
-  if (command_id == IDC_HELP_PAGE_VIA_KEYBOARD && key_code == ui::VKEY_F1)
-    base::RecordAction(UserMetricsAction("ShowHelpTabViaF1"));
-
-  if (command_id == IDC_BOOKMARK_THIS_TAB) {
-    UMA_HISTOGRAM_ENUMERATION("Bookmarks.EntryPoint",
-                              BOOKMARK_ENTRY_POINT_ACCELERATOR,
-                              BOOKMARK_ENTRY_POINT_LIMIT);
-  }
-  if (command_id == IDC_NEW_TAB &&
-      browser_->SupportsWindowFeature(Browser::FEATURE_TABSTRIP)) {
-    TabStripModel* const model = browser_->tab_strip_model();
-    const auto group_id = model->GetTabGroupForTab(model->active_index());
-    if (group_id.has_value())
-      base::RecordAction(base::UserMetricsAction("Accel_NewTabInGroup"));
-  }
-
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  // Collect information about the relative popularity of various accelerators
-  // on Chrome OS.
-  switch (command_id) {
-    case IDC_BACK:
-      if (key_code == ui::VKEY_BROWSER_BACK)
-        base::RecordAction(UserMetricsAction("Accel_Back_F1"));
-      else if (key_code == ui::VKEY_LEFT)
-        base::RecordAction(UserMetricsAction("Accel_Back_Left"));
-      break;
-    case IDC_FORWARD:
-      if (key_code == ui::VKEY_BROWSER_FORWARD)
-        base::RecordAction(UserMetricsAction("Accel_Forward_F2"));
-      else if (key_code == ui::VKEY_RIGHT)
-        base::RecordAction(UserMetricsAction("Accel_Forward_Right"));
-      break;
-    case IDC_RELOAD:
-    case IDC_RELOAD_BYPASSING_CACHE:
-      if (key_code == ui::VKEY_R)
-        base::RecordAction(UserMetricsAction("Accel_Reload_R"));
-      else if (key_code == ui::VKEY_BROWSER_REFRESH)
-        base::RecordAction(UserMetricsAction("Accel_Reload_F3"));
-      break;
-    case IDC_FOCUS_LOCATION:
-      if (key_code == ui::VKEY_D)
-        base::RecordAction(UserMetricsAction("Accel_FocusLocation_D"));
-      else if (key_code == ui::VKEY_L)
-        base::RecordAction(UserMetricsAction("Accel_FocusLocation_L"));
-      break;
-    case IDC_FOCUS_SEARCH:
-      if (key_code == ui::VKEY_E)
-        base::RecordAction(UserMetricsAction("Accel_FocusSearch_E"));
-      else if (key_code == ui::VKEY_K)
-        base::RecordAction(UserMetricsAction("Accel_FocusSearch_K"));
-      break;
-    default:
-      // Do nothing.
-      break;
-  }
-#endif
 }
 
 void BrowserView::ShowAvatarBubbleFromAvatarButton(
@@ -3440,14 +3375,6 @@ void BrowserView::ShowAvatarBubbleFromAvatarButton(
                                   focus_first_profile_button);
 }
 
-void BrowserView::ShowHatsBubble(const std::string& site_id,
-                                 base::OnceClosure success_callback,
-                                 base::OnceClosure failure_callback) {
-  HatsBubbleView::ShowOnContentReady(browser(), site_id,
-                                     std::move(success_callback),
-                                     std::move(failure_callback));
-}
-
 ExclusiveAccessContext* BrowserView::GetExclusiveAccessContext() {
   return this;
 }
