diff --git a/chrome/browser/download/download_item_model.cc b/chrome/browser/download/download_item_model.cc
index ae6e5b168807f..6bc82b4e861ee 100644
--- a/chrome/browser/download/download_item_model.cc
+++ b/chrome/browser/download/download_item_model.cc
@@ -25,20 +25,13 @@
 #include "chrome/browser/download/download_prefs.h"
 #include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/download/offline_item_utils.h"
-#include "chrome/browser/enterprise/connectors/common.h"
-#include "chrome/browser/enterprise/connectors/connectors_manager.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/download_protection/deep_scanning_request.h"
-#include "chrome/browser/safe_browsing/download_protection/download_feedback_service.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_interrupt_reasons.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/web_ui/safe_browsing_ui.h"
-#include "components/safe_browsing/core/file_type_policies.h"
-#include "components/safe_browsing/core/proto/download_file_types.pb.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_item_utils.h"
@@ -53,7 +46,6 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using MixedContentStatus = download::DownloadItem::MixedContentStatus;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -83,10 +75,6 @@ class DownloadItemModelData : public base::SupportsUserData::Data {
   // for the file type.
   bool should_prefer_opening_in_browser_;
 
-  // Danger level of the file determined based on the file type and whether
-  // there was a user action associated with the download.
-  DownloadFileType::DangerLevel danger_level_;
-
   // Whether the download is currently being revived.
   bool is_being_revived_;
 
@@ -122,7 +110,6 @@ DownloadItemModelData::DownloadItemModelData()
     : should_show_in_shelf_(true),
       was_ui_notified_(false),
       should_prefer_opening_in_browser_(false),
-      danger_level_(DownloadFileType::NOT_DANGEROUS),
       is_being_revived_(false) {}
 
 }  // namespace
@@ -272,14 +259,7 @@ bool DownloadItemModel::IsMixedContent() const {
 }
 
 bool DownloadItemModel::ShouldAllowDownloadFeedback() const {
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-  if (!IsDangerous())
-    return false;
-  return safe_browsing::DownloadFeedbackService::IsEnabledForDownload(
-      *download_);
-#else
   return false;
-#endif
 }
 
 bool DownloadItemModel::ShouldRemoveFromShelfWhenComplete() const {
@@ -376,17 +356,6 @@ void DownloadItemModel::SetShouldPreferOpeningInBrowser(bool preference) {
   data->should_prefer_opening_in_browser_ = preference;
 }
 
-DownloadFileType::DangerLevel DownloadItemModel::GetDangerLevel() const {
-  const DownloadItemModelData* data = DownloadItemModelData::Get(download_);
-  return data ? data->danger_level_ : DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadItemModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {
-  DownloadItemModelData* data = DownloadItemModelData::GetOrCreate(download_);
-  data->danger_level_ = danger_level;
-}
-
 download::DownloadItem::MixedContentStatus
 DownloadItemModel::GetMixedContentStatus() const {
   return download_->GetMixedContentStatus();
@@ -526,7 +495,6 @@ void DownloadItemModel::OpenUsingPlatformHandler() {
   if (!delegate)
     return;
   delegate->OpenDownloadUsingPlatformHandler(download_);
-  RecordDownloadOpenMethod(DOWNLOAD_OPEN_METHOD_USER_PLATFORM);
 }
 
 #if !defined(OS_ANDROID)
@@ -547,9 +515,6 @@ bool DownloadItemModel::IsCommandEnabled(
       // filename. Don't base an "Always open" decision based on it. Also
       // exclude extensions.
       return download_->CanOpenDownload() &&
-             safe_browsing::FileTypePolicies::GetInstance()
-                 ->IsAllowedToOpenAutomatically(
-                     download_->GetTargetFilePath()) &&
              !download_crx_util::IsExtensionDownload(*download_);
     case DownloadCommands::PAUSE:
       return !download_->IsSavePackageDownload() &&
@@ -722,31 +687,6 @@ void DownloadItemModel::ExecuteCommand(DownloadCommands* download_commands,
       DownloadUIModel::ExecuteCommand(download_commands, command);
       break;
     case DownloadCommands::DEEP_SCAN:
-      safe_browsing::SafeBrowsingService* sb_service =
-          g_browser_process->safe_browsing_service();
-      if (!sb_service)
-        break;
-      safe_browsing::DownloadProtectionService* protection_service =
-          sb_service->download_protection_service();
-      if (!protection_service)
-        break;
-      DownloadCoreService* download_core_service =
-          DownloadCoreServiceFactory::GetForBrowserContext(
-              content::DownloadItemUtils::GetBrowserContext(download_));
-      DCHECK(download_core_service);
-      ChromeDownloadManagerDelegate* delegate =
-          download_core_service->GetDownloadManagerDelegate();
-      DCHECK(delegate);
-      enterprise_connectors::AnalysisSettings settings;
-      settings.tags = {"malware"};
-      protection_service->UploadForDeepScanning(
-          download_,
-          base::BindRepeating(
-              &ChromeDownloadManagerDelegate::CheckClientDownloadDone,
-              delegate->GetWeakPtr(), download_->GetId()),
-          safe_browsing::DeepScanningRequest::DeepScanTrigger::
-              TRIGGER_APP_PROMPT,
-          std::move(settings));
       break;
   }
 }
