diff --git a/components/blocked_content/popup_blocker.cc b/components/blocked_content/popup_blocker.cc
index fd67c3ed1142..e99465a20195 100644
--- a/components/blocked_content/popup_blocker.cc
+++ b/components/blocked_content/popup_blocker.cc
@@ -10,11 +10,9 @@
 #include "base/command_line.h"
 #include "components/blocked_content/popup_blocker_tab_helper.h"
 #include "components/blocked_content/popup_navigation_delegate.h"
-#include "components/blocked_content/safe_browsing_triggered_popup_blocker.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings.h"
 #include "components/embedder_support/switches.h"
-#include "components/safe_browsing/content/triggers/ad_popup_trigger.h"
 #include "content/public/browser/page_navigator.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents.h"
@@ -64,37 +62,9 @@ PopupBlockType ShouldBlockPopup(content::WebContents* web_contents,
     return PopupBlockType::kNotBlocked;
   }
 
-  auto* safe_browsing_blocker =
-      SafeBrowsingTriggeredPopupBlocker::FromWebContents(web_contents);
-  if (safe_browsing_blocker &&
-      safe_browsing_blocker->ShouldApplyAbusivePopupBlocker()) {
-    return PopupBlockType::kAbusive;
-  }
   return PopupBlockType::kNotBlocked;
 }
 
-// Tries to get the opener from either the |params| or |open_url_params|,
-// otherwise uses the focused frame from |web_contents| as a proxy.
-content::RenderFrameHost* GetSourceFrameForPopup(
-    PopupNavigationDelegate* params,
-    const content::OpenURLParams* open_url_params,
-    content::WebContents* web_contents) {
-  if (params->GetOpener())
-    return params->GetOpener();
-  // Make sure the source render frame host is alive before we attempt to
-  // retrieve it from |open_url_params|.
-  if (open_url_params) {
-    content::RenderFrameHost* source = content::RenderFrameHost::FromID(
-        open_url_params->source_render_frame_id,
-        open_url_params->source_render_process_id);
-    if (source)
-      return source;
-  }
-  // The focused frame is not always the frame initiating the popup navigation
-  // and is used as a fallback in case opener information is not available.
-  return web_contents->GetFocusedFrame();
-}
-
 }  // namespace
 
 bool ConsiderForPopupBlocking(WindowOpenDisposition disposition) {
@@ -129,14 +99,8 @@ std::unique_ptr<PopupNavigationDelegate> MaybeBlockPopup(
 
   // AddBlockedPopup() takes ownership of the delegate, so grab the source frame
   // first.
-  content::RenderFrameHost* source_frame =
-      GetSourceFrameForPopup(delegate.get(), open_url_params, web_contents);
   popup_blocker->AddBlockedPopup(std::move(delegate), window_features,
                                  block_type);
-  auto* trigger = safe_browsing::AdPopupTrigger::FromWebContents(web_contents);
-  if (trigger) {
-    trigger->PopupWasBlocked(source_frame);
-  }
   return nullptr;
 }
 
