diff --git a/chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_tab_helper.cc b/chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_tab_helper.cc
index 41117398f2b75..e8ed1994548c7 100644
--- a/chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_tab_helper.cc
+++ b/chrome/browser/prefetch/prefetch_proxy/prefetch_proxy_tab_helper.cc
@@ -36,8 +36,6 @@
 #include "components/google/core/common/google_util.h"
 #include "components/language/core/browser/pref_names.h"
 #include "components/no_state_prefetch/browser/no_state_prefetch_manager.h"
-#include "components/page_load_metrics/browser/metrics_web_contents_observer.h"
-#include "components/page_load_metrics/browser/page_load_metrics_event.h"
 #include "components/prefs/pref_service.h"
 #include "components/search_engines/template_url_service.h"
 #include "components/version_info/version_info.h"
@@ -98,17 +96,6 @@ base::Optional<base::TimeDelta> GetPrefetchConnectTime(
   return end - start;
 }
 
-void InformPLMOfLikelyPrefetching(content::WebContents* web_contents) {
-  page_load_metrics::MetricsWebContentsObserver* metrics_web_contents_observer =
-      page_load_metrics::MetricsWebContentsObserver::FromWebContents(
-          web_contents);
-  if (!metrics_web_contents_observer)
-    return;
-
-  metrics_web_contents_observer->BroadcastEventToObservers(
-      page_load_metrics::PageLoadMetricsEvent::PREFETCH_LIKELY);
-}
-
 void OnGotCookieList(
     const GURL& url,
     PrefetchProxyTabHelper::OnEligibilityResultCallback result_callback,
@@ -322,11 +309,13 @@ bool PrefetchProxyTabHelper::IsProfileEligible(Profile* profile) {
     return false;
   }
 
+#if 0
   if (PrefetchProxyOnlyForLiteMode()) {
     return data_reduction_proxy::DataReductionProxySettings::
         IsDataSaverEnabledByUser(profile->IsOffTheRecord(),
                                  profile->GetPrefs());
   }
+#endif
   return true;
 }
 
@@ -397,11 +386,6 @@ void PrefetchProxyTabHelper::NotifyPrefetchProbeLatency(
 void PrefetchProxyTabHelper::ReportProbeResult(
     const GURL& url,
     PrefetchProxyProbeResult result) {
-  if (!page_->prefetch_metrics_collector_) {
-    return;
-  }
-  page_->prefetch_metrics_collector_->OnMainframeNavigationProbeResult(url,
-                                                                       result);
 }
 
 void PrefetchProxyTabHelper::OnPrefetchStatusUpdate(
@@ -609,8 +593,6 @@ void PrefetchProxyTabHelper::DidFinishNavigation(
       std::make_unique<CurrentPageLoad>(navigation_handle);
 
   if (page_->srp_metrics_->predicted_urls_count_ > 0) {
-    page_->prefetch_metrics_collector_->OnMainframeNavigatedTo(url);
-
     // If the previous page load was a Google SRP, the AfterSRPMetrics class
     // needs to be created now from the SRP's |page_| and then set on the new
     // one when we set it at the end of this method.
@@ -875,10 +857,6 @@ void PrefetchProxyTabHelper::OnPrefetchComplete(
 
   if (page_->decoy_urls_.find(url) != page_->decoy_urls_.end()) {
     if (loader->CompletionStatus()) {
-      page_->prefetch_metrics_collector_->OnDecoyPrefetchComplete(
-          url, page_->original_prediction_ordering_.find(url)->second,
-          loader->ResponseInfo() ? loader->ResponseInfo()->Clone() : nullptr,
-          loader->CompletionStatus().value());
     }
 
     for (auto& observer : observer_list_) {
@@ -892,13 +870,6 @@ void PrefetchProxyTabHelper::OnPrefetchComplete(
   base::UmaHistogramSparse("PrefetchProxy.Prefetch.Mainframe.NetError",
                            std::abs(loader->NetError()));
 
-  if (loader->CompletionStatus()) {
-    page_->prefetch_metrics_collector_->OnMainframeResourcePrefetched(
-        url, page_->original_prediction_ordering_.find(url)->second,
-        loader->ResponseInfo() ? loader->ResponseInfo()->Clone() : nullptr,
-        loader->CompletionStatus().value());
-  }
-
   if (loader->NetError() != net::OK) {
     OnPrefetchStatusUpdate(
         url, PrefetchProxyPrefetchStatus::kPrefetchFailedNetError);
@@ -1064,8 +1035,6 @@ void PrefetchProxyTabHelper::DoNoStatePrefetch() {
       service->OnAboutToNoStatePrefetch(url, CopyPrefetchResponseForNSP(url));
   DCHECK_EQ(manager, service->GetSubresourceManagerForURL(url));
 
-  manager->SetPrefetchMetricsCollector(page_->prefetch_metrics_collector_);
-
   manager->SetCreateIsolatedLoaderFactoryCallback(
       base::BindRepeating(&PrefetchProxyTabHelper::CreateNewURLLoaderFactory,
                           weak_factory_.GetWeakPtr()));
@@ -1227,6 +1196,7 @@ void PrefetchProxyTabHelper::PrefetchUrls(
     return;
   }
 
+#if 0
   if (!page_->prefetch_metrics_collector_) {
     page_->prefetch_metrics_collector_ =
         base::MakeRefCounted<PrefetchProxyPrefetchMetricsCollector>(
@@ -1237,6 +1207,7 @@ void PrefetchProxyTabHelper::PrefetchUrls(
   // It's very likely we'll prefetch something at this point, so inform PLM to
   // start tracking metrics.
   InformPLMOfLikelyPrefetching(web_contents());
+#endif
 
   page_->srp_metrics_->predicted_urls_count_ += prefetch_targets.size();
 
@@ -1395,11 +1366,6 @@ void PrefetchProxyTabHelper::OnGotEligibilityResult(
   if (!eligible) {
     if (status) {
       OnPrefetchStatusUpdate(url, *status);
-      if (page_->prefetch_metrics_collector_) {
-        page_->prefetch_metrics_collector_->OnMainframeResourceNotEligible(
-            url, page_->original_prediction_ordering_.find(url)->second,
-            *status);
-      }
 
       // Consider whether to send a decoy request to mask any user state (i.e.:
       // cookies), and if so randomly decide whether to send a decoy request.
@@ -1596,7 +1562,6 @@ void PrefetchProxyTabHelper::CreateIsolatedURLLoaderFactory() {
   // leak.
   context_params->enable_certificate_reporting = false;
   context_params->enable_expect_ct_reporting = false;
-  context_params->enable_domain_reliability = false;
 
   content::GetNetworkService()->CreateNetworkContext(
       page_->isolated_network_context_.BindNewPipeAndPassReceiver(),
