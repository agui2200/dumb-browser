diff --git a/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc b/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc
index 585d9c7657b4..847fa5f15ff4 100644
--- a/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc
+++ b/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc
@@ -150,7 +150,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
     ToBlobFunctionType function_type,
     base::TimeTicks start_time,
     ExecutionContext* context,
-    base::Optional<UkmParameters> ukm_params,
     ScriptPromiseResolver* resolver)
     : CanvasAsyncBlobCreator(image,
                              options,
@@ -158,7 +157,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
                              nullptr,
                              start_time,
                              context,
-                             ukm_params,
                              resolver) {}
 
 CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
@@ -168,7 +166,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
     V8BlobCallback* callback,
     base::TimeTicks start_time,
     ExecutionContext* context,
-    base::Optional<UkmParameters> ukm_params,
     ScriptPromiseResolver* resolver)
     : fail_encoder_initialization_for_test_(false),
       enforce_idle_encoding_for_test_(false),
@@ -476,8 +473,6 @@ void CanvasAsyncBlobCreator::CreateBlobAndReturnResult() {
                              WrapPersistent(result_blob)));
   }
 
-  RecordIdentifiabilityMetric();
-
   RecordScaledDurationHistogram(mime_type_,
                                 base::TimeTicks::Now() - start_time_,
                                 image_->width(), image_->height());
@@ -485,36 +480,6 @@ void CanvasAsyncBlobCreator::CreateBlobAndReturnResult() {
   Dispose();
 }
 
-void CanvasAsyncBlobCreator::RecordIdentifiabilityMetric() {
-  if (!ukm_params_.has_value() || !IsUserInIdentifiabilityStudy())
-    return;
-  // Creating this ImageDataBuffer has some overhead, namely getting the SkImage
-  // and computing the pixmap.
-  // We need the StaticBitmapImage to be deleted on the same thread on which it
-  // was created, so we use the same TaskType here in order to get the same
-  // TaskRunner.
-  context_->GetTaskRunner(TaskType::kCanvasBlobSerialization)
-      ->PostTask(
-          FROM_HERE,
-          WTF::Bind(
-              [](scoped_refptr<StaticBitmapImage> image,
-                 UkmParameters ukm_params) {
-                std::unique_ptr<ImageDataBuffer> data_buffer =
-                    ImageDataBuffer::Create(image);
-                if (!data_buffer)
-                  return;
-                blink::IdentifiabilityMetricBuilder(ukm_params.source_id)
-                    .Set(blink::IdentifiableSurface::FromTypeAndInput(
-                             blink::IdentifiableSurface::Type::kCanvasReadback,
-                             0),
-                         blink::IdentifiabilityDigestOfBytes(
-                             base::make_span(data_buffer->Pixels(),
-                                             data_buffer->ComputeByteSize())))
-                    .Record(ukm_params.ukm_recorder);
-              },
-              image_, ukm_params_.value()));
-}
-
 void CanvasAsyncBlobCreator::CreateNullAndReturnResult() {
   RecordIdleTaskStatusHistogram(idle_task_status_);
   if (function_type_ == kHTMLCanvasToBlobCallback) {
