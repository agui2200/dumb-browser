diff --git a/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc b/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc
index aae43a337bc0a..3d55e5500fade 100644
--- a/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc
+++ b/third_party/blink/renderer/core/html/canvas/canvas_async_blob_creator.cc
@@ -8,9 +8,6 @@
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
 #include "build/build_config.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_metrics.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/public/platform/task_type.h"
 #include "third_party/blink/renderer/core/dom/document.h"
@@ -106,32 +103,6 @@ void RecordCompleteEncodingTimeHistogram(ImageEncodingMimeType mime_type,
   }
 }
 
-void RecordScaledDurationHistogram(ImageEncodingMimeType mime_type,
-                                   base::TimeDelta elapsed_time,
-                                   float width,
-                                   float height) {
-  float sqrt_pixels = std::sqrt(width) * std::sqrt(height);
-  float scaled_time_float =
-      elapsed_time.InMicrosecondsF() / (sqrt_pixels == 0 ? 1.0f : sqrt_pixels);
-
-  // If scaled_time_float overflows as integer, CheckedNumeric will store it
-  // as invalid, then ValueOrDefault will return the maximum int.
-  base::CheckedNumeric<int> checked_scaled_time = scaled_time_float;
-  int scaled_time_int =
-      checked_scaled_time.ValueOrDefault(std::numeric_limits<int>::max());
-
-  if (mime_type == kMimeTypePng) {
-    UMA_HISTOGRAM_COUNTS_100000("Blink.Canvas.ToBlob.ScaledDuration.PNG",
-                                scaled_time_int);
-  } else if (mime_type == kMimeTypeJpeg) {
-    UMA_HISTOGRAM_COUNTS_100000("Blink.Canvas.ToBlob.ScaledDuration.JPEG",
-                                scaled_time_int);
-  } else if (mime_type == kMimeTypeWebp) {
-    UMA_HISTOGRAM_COUNTS_100000("Blink.Canvas.ToBlob.ScaledDuration.WEBP",
-                                scaled_time_int);
-  }
-}
-
 SkColorType GetColorTypeForConversion(SkColorType color_type) {
   if (color_type == kRGBA_8888_SkColorType ||
       color_type == kBGRA_8888_SkColorType) {
@@ -149,7 +120,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
     ToBlobFunctionType function_type,
     base::TimeTicks start_time,
     ExecutionContext* context,
-    const IdentifiableToken& input_digest,
     ScriptPromiseResolver* resolver)
     : CanvasAsyncBlobCreator(image,
                              options,
@@ -157,7 +127,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
                              nullptr,
                              start_time,
                              context,
-                             input_digest,
                              resolver) {}
 
 CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
@@ -167,7 +136,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
     V8BlobCallback* callback,
     base::TimeTicks start_time,
     ExecutionContext* context,
-    const IdentifiableToken& input_digest,
     ScriptPromiseResolver* resolver)
     : fail_encoder_initialization_for_test_(false),
       enforce_idle_encoding_for_test_(false),
@@ -177,7 +145,6 @@ CanvasAsyncBlobCreator::CanvasAsyncBlobCreator(
       function_type_(function_type),
       start_time_(start_time),
       static_bitmap_image_loaded_(false),
-      input_digest_(input_digest),
       callback_(callback),
       script_promise_resolver_(resolver) {
   DCHECK(image);
@@ -479,46 +446,10 @@ void CanvasAsyncBlobCreator::CreateBlobAndReturnResult() {
                              WrapPersistent(result_blob)));
   }
 
-  RecordScaledDurationHistogram(mime_type_,
-                                base::TimeTicks::Now() - start_time_,
-                                image_->width(), image_->height());
-
-  if (IdentifiabilityStudySettings::Get()->IsTypeAllowed(
-          blink::IdentifiableSurface::Type::kCanvasReadback)) {
-    // Creating this ImageDataBuffer has some overhead, namely getting the
-    // SkImage and computing the pixmap. We need the StaticBitmapImage to be
-    // deleted on the same thread on which it was created, so we use the same
-    // TaskType here in order to get the same TaskRunner.
-
-    // TODO(crbug.com/1143737) WrapPersistent(this) stores more data than is
-    // needed by the function. It would be good to find a way to wrap only the
-    // objects needed (image_, ukm_source_id_, input_digest_, context_)
-    context_->GetTaskRunner(TaskType::kCanvasBlobSerialization)
-        ->PostTask(
-            FROM_HERE,
-            WTF::Bind(&CanvasAsyncBlobCreator::RecordIdentifiabilityMetric,
-                      WrapPersistent(this)));
-  } else {
-    // RecordIdentifiabilityMetric needs a reference to image_, and will run
-    // dispose itself. So here we only call dispose if not recording the metric.
-    Dispose();
-  }
+  Dispose();
 }
 
 void CanvasAsyncBlobCreator::RecordIdentifiabilityMetric() {
-  std::unique_ptr<ImageDataBuffer> data_buffer =
-      ImageDataBuffer::Create(image_);
-
-  if (data_buffer) {
-    blink::IdentifiabilityMetricBuilder(context_->UkmSourceID())
-        .Set(blink::IdentifiableSurface::FromTypeAndToken(
-                 blink::IdentifiableSurface::Type::kCanvasReadback,
-                 input_digest_),
-             blink::IdentifiabilityDigestOfBytes(base::make_span(
-                 data_buffer->Pixels(), data_buffer->ComputeByteSize())))
-        .Record(context_->UkmRecorder());
-  }
-
   // Avoid unwanted retention, see dispose().
   Dispose();
 }
