diff --git a/chrome/browser/enterprise/connectors/connectors_manager.cc b/chrome/browser/enterprise/connectors/connectors_manager.cc
index 3be304adbaef..db72a6c92cea 100644
--- a/chrome/browser/enterprise/connectors/connectors_manager.cc
+++ b/chrome/browser/enterprise/connectors/connectors_manager.cc
@@ -6,6 +6,7 @@
 
 #include <memory>
 
+#include "base/bind.h"
 #include "base/feature_list.h"
 #include "base/no_destructor.h"
 #include "base/optional.h"
@@ -14,7 +15,6 @@
 #include "chrome/browser/enterprise/connectors/connectors_prefs.h"
 #include "components/policy/core/browser/url_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/url_matcher/url_matcher.h"
 #include "url/gurl.h"
 
@@ -32,7 +32,7 @@ const char kServiceProviderConfig[] = R"({
       "version": {
         "1": {
           "analysis": {
-            "url": "https://safebrowsing.google.com/safebrowsing/uploads/scan",
+            "url": "https://no-thanks.invalid",
             "supported_tags": [
               {
                 "name": "malware",
@@ -85,7 +85,7 @@ const char kServiceProviderConfig[] = R"({
             ]
           },
           "reporting": {
-            "url": "https://chromereporting-pa.googleapis.com/v1/events"
+            "url": "https://no-thanks.invalid"
           }
         }
       }
@@ -93,39 +93,6 @@ const char kServiceProviderConfig[] = R"({
   ]
 })";
 
-namespace {
-
-base::ListValue AllPatterns() {
-  auto v = std::vector<base::Value>();
-  v.emplace_back("*");
-  return base::ListValue(std::move(v));
-}
-
-bool MatchURLAgainstPatterns(const GURL& url,
-                             const base::ListValue* patterns_to_scan,
-                             const base::ListValue* patterns_to_exempt) {
-  url_matcher::URLMatcher matcher;
-  url_matcher::URLMatcherConditionSet::ID id(0);
-
-  policy::url_util::AddFilters(&matcher, true, &id, patterns_to_scan);
-
-  url_matcher::URLMatcherConditionSet::ID last_allowed_id = id;
-
-  policy::url_util::AddFilters(&matcher, false, &id, patterns_to_exempt);
-
-  auto matches = matcher.MatchURL(url);
-  bool has_scan_match = false;
-  for (const auto& match_id : matches) {
-    if (match_id <= last_allowed_id)
-      has_scan_match = true;
-    else
-      return false;
-  }
-  return has_scan_match;
-}
-
-}  // namespace
-
 // ConnectorsManager implementation---------------------------------------------
 ConnectorsManager::ConnectorsManager() {
   StartObservingPrefs();
@@ -286,90 +253,30 @@ ConnectorsManager::GetAnalysisSettingsFromLegacyPolicies(
 
 BlockUntilVerdict ConnectorsManager::LegacyBlockUntilVerdict(
     bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kDelayDeliveryUntilVerdict);
-  if (pref == safe_browsing::DELAY_NONE)
-    return BlockUntilVerdict::NO_BLOCK;
-  if (pref == safe_browsing::DELAY_UPLOADS_AND_DOWNLOADS)
-    return BlockUntilVerdict::BLOCK;
-  return ((upload && pref == safe_browsing::DELAY_UPLOADS) ||
-          (!upload && pref == safe_browsing::DELAY_DOWNLOADS))
-             ? BlockUntilVerdict::BLOCK
-             : BlockUntilVerdict::NO_BLOCK;
+  return BlockUntilVerdict::NO_BLOCK;
 }
 
 bool ConnectorsManager::LegacyBlockPasswordProtectedFiles(bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kAllowPasswordProtectedFiles);
-  if (pref == safe_browsing::ALLOW_NONE)
-    return true;
-  if (pref == safe_browsing::ALLOW_UPLOADS_AND_DOWNLOADS)
-    return false;
-  return upload ? pref != safe_browsing::ALLOW_UPLOADS
-                : pref != safe_browsing::ALLOW_DOWNLOADS;
+  return false;
 }
 
 bool ConnectorsManager::LegacyBlockLargeFiles(bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kBlockLargeFileTransfer);
-  if (pref == safe_browsing::BLOCK_NONE)
-    return false;
-  if (pref == safe_browsing::BLOCK_LARGE_UPLOADS_AND_DOWNLOADS)
-    return true;
-  return upload ? pref == safe_browsing::BLOCK_LARGE_UPLOADS
-                : pref == safe_browsing::BLOCK_LARGE_DOWNLOADS;
+  return false;
 }
 
 bool ConnectorsManager::LegacyBlockUnsupportedFileTypes(bool upload) const {
-  int pref = g_browser_process->local_state()->GetInteger(
-      prefs::kBlockUnsupportedFiletypes);
-  if (pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_NONE)
-    return false;
-  if (pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_UPLOADS_AND_DOWNLOADS)
-    return true;
-  return upload ? pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_UPLOADS
-                : pref == safe_browsing::BLOCK_UNSUPPORTED_FILETYPES_DOWNLOADS;
+  return false;
 }
 
 bool ConnectorsManager::MatchURLAgainstLegacyDlpPolicies(const GURL& url,
                                                          bool upload) const {
-  const base::ListValue all_patterns = AllPatterns();
-  const base::ListValue no_patterns = base::ListValue();
-
-  const base::ListValue* patterns_to_scan;
-  const base::ListValue* patterns_to_exempt;
-  if (upload) {
-    patterns_to_scan = &all_patterns;
-    patterns_to_exempt = g_browser_process->local_state()->GetList(
-        prefs::kURLsToNotCheckComplianceOfUploadedContent);
-  } else {
-    patterns_to_scan = g_browser_process->local_state()->GetList(
-        prefs::kURLsToCheckComplianceOfDownloadedContent);
-    patterns_to_exempt = &no_patterns;
-  }
-
-  return MatchURLAgainstPatterns(url, patterns_to_scan, patterns_to_exempt);
+  return false;
 }
 
 bool ConnectorsManager::MatchURLAgainstLegacyMalwarePolicies(
     const GURL& url,
     bool upload) const {
-  const base::ListValue all_patterns = AllPatterns();
-  const base::ListValue no_patterns = base::ListValue();
-
-  const base::ListValue* patterns_to_scan;
-  const base::ListValue* patterns_to_exempt;
-  if (upload) {
-    patterns_to_scan = g_browser_process->local_state()->GetList(
-        prefs::kURLsToCheckForMalwareOfUploadedContent);
-    patterns_to_exempt = &no_patterns;
-  } else {
-    patterns_to_scan = &all_patterns;
-    patterns_to_exempt = g_browser_process->local_state()->GetList(
-        prefs::kURLsToNotCheckForMalwareOfDownloadedContent);
-  }
-
-  return MatchURLAgainstPatterns(url, patterns_to_scan, patterns_to_exempt);
+  return false;
 }
 
 std::set<std::string> ConnectorsManager::MatchURLAgainstLegacyPolicies(
