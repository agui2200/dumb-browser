diff --git a/chrome/browser/notifications/persistent_notification_handler.cc b/chrome/browser/notifications/persistent_notification_handler.cc
index 93cfd94b6799a..f4df5aa9e64a0 100644
--- a/chrome/browser/notifications/persistent_notification_handler.cc
+++ b/chrome/browser/notifications/persistent_notification_handler.cc
@@ -8,8 +8,6 @@
 #include "base/callback.h"
 #include "base/check_op.h"
 #include "base/metrics/histogram_macros.h"
-#include "chrome/browser/notifications/metrics/notification_metrics_logger.h"
-#include "chrome/browser/notifications/metrics/notification_metrics_logger_factory.h"
 #include "chrome/browser/notifications/notification_common.h"
 #include "chrome/browser/notifications/notification_permission_context.h"
 #include "chrome/browser/notifications/platform_notification_service_factory.h"
@@ -56,13 +54,6 @@ void PersistentNotificationHandler::OnClose(
     return;
   }
 
-  NotificationMetricsLogger* metrics_logger =
-      NotificationMetricsLoggerFactory::GetForBrowserContext(profile);
-  if (by_user)
-    metrics_logger->LogPersistentNotificationClosedByUser();
-  else
-    metrics_logger->LogPersistentNotificationClosedProgrammatically();
-
   content::NotificationEventDispatcher::GetInstance()
       ->DispatchNotificationCloseEvent(
           profile, notification_id, origin, by_user,
@@ -90,9 +81,6 @@ void PersistentNotificationHandler::OnClick(
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(origin.is_valid());
 
-  NotificationMetricsLogger* metrics_logger =
-      NotificationMetricsLoggerFactory::GetForBrowserContext(profile);
-
 #if BUILDFLAG(ENABLE_BACKGROUND_MODE)
   // Ensure the browser and Profile stay alive while the event is processed. The
   // keep alives will be reset when all click events have been acknowledged.
@@ -115,18 +103,11 @@ void PersistentNotificationHandler::OnClick(
   // Don't process click events when the |origin| doesn't have permission. This
   // can't be a DCHECK because of potential races with native notifications.
   if (permission_status != blink::mojom::PermissionStatus::GRANTED) {
-    metrics_logger->LogPersistentNotificationClickWithoutPermission();
-
     OnClickCompleted(profile, notification_id, std::move(completed_closure),
                      content::PersistentNotificationStatus::kPermissionMissing);
     return;
   }
 
-  if (action_index.has_value())
-    metrics_logger->LogPersistentNotificationActionButtonClick();
-  else
-    metrics_logger->LogPersistentNotificationClick();
-
   // Notification clicks are considered a form of engagement with the |origin|,
   // thus we log the interaction with the Site Engagement service.
   site_engagement::SiteEngagementService::Get(profile)
@@ -180,10 +161,6 @@ void PersistentNotificationHandler::OnClickCompleted(
 
 void PersistentNotificationHandler::DisableNotifications(Profile* profile,
                                                          const GURL& origin) {
-  permissions::PermissionUmaUtil::ScopedRevocationReporter
-      scoped_revocation_reporter(
-          profile, origin, origin, ContentSettingsType::NOTIFICATIONS,
-          permissions::PermissionSourceUI::INLINE_SETTINGS);
   NotificationPermissionContext::UpdatePermission(profile, origin,
                                                   CONTENT_SETTING_BLOCK);
 }
