diff --git a/third_party/blink/renderer/modules/mediastream/navigator_media_stream.cc b/third_party/blink/renderer/modules/mediastream/navigator_media_stream.cc
index 9edebfbbf4c9..2a836fd43802 100644
--- a/third_party/blink/renderer/modules/mediastream/navigator_media_stream.cc
+++ b/third_party/blink/renderer/modules/mediastream/navigator_media_stream.cc
@@ -23,9 +23,6 @@
 
 #include "third_party/blink/renderer/modules/mediastream/navigator_media_stream.h"
 
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_surface.h"
 #include "third_party/blink/renderer/bindings/core/v8/dictionary.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_media_stream_constraints.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_navigator_user_media_error_callback.h"
@@ -62,17 +59,10 @@ void NavigatorMediaStream::getUserMedia(
 
   UserMediaController* user_media =
       UserMediaController::From(navigator.DomWindow());
-  IdentifiableSurface surface;
-  constexpr IdentifiableSurface::Type surface_type =
-      IdentifiableSurface::Type::kNavigator_GetUserMedia;
-  if (IdentifiabilityStudySettings::Get()->IsTypeAllowed(surface_type)) {
-    surface = IdentifiableSurface::FromTypeAndToken(
-        surface_type, TokenFromConstraints(options));
-  }
   MediaErrorState error_state;
   UserMediaRequest* request = UserMediaRequest::Create(
       navigator.DomWindow(), user_media, options, success_callback,
-      error_callback, error_state, surface);
+      error_callback, error_state);
   if (!request) {
     DCHECK(error_state.HadException());
     if (error_state.CanGenerateException()) {
@@ -81,18 +71,12 @@ void NavigatorMediaStream::getUserMedia(
       error_callback->InvokeAndReportException(nullptr,
                                                error_state.CreateError());
     }
-    RecordIdentifiabilityMetric(
-        surface, navigator.GetExecutionContext(),
-        IdentifiabilityBenignStringToken(error_state.GetErrorMessage()));
     return;
   }
 
   String error_message;
   if (!request->IsSecureContextUse(error_message)) {
     request->Fail(UserMediaRequest::Error::kSecurityError, error_message);
-    RecordIdentifiabilityMetric(
-        surface, navigator.GetExecutionContext(),
-        IdentifiabilityBenignStringToken(error_message));
     return;
   }
 
