diff --git a/components/password_manager/core/browser/password_save_manager_impl.cc b/components/password_manager/core/browser/password_save_manager_impl.cc
index e92d3315c920..8179a2ec74b6 100644
--- a/components/password_manager/core/browser/password_save_manager_impl.cc
+++ b/components/password_manager/core/browser/password_save_manager_impl.cc
@@ -4,8 +4,6 @@
 
 #include "components/password_manager/core/browser/password_save_manager_impl.h"
 
-#include "base/metrics/histogram_macros.h"
-#include "base/metrics/user_metrics.h"
 #include "build/build_config.h"
 #include "components/autofill/core/browser/form_structure.h"
 #include "components/autofill/core/browser/validation.h"
@@ -14,7 +12,6 @@
 #include "components/password_manager/core/browser/form_saver_impl.h"
 #include "components/password_manager/core/browser/multi_store_password_save_manager.h"
 #include "components/password_manager/core/browser/password_feature_manager.h"
-#include "components/password_manager/core/browser/password_form_metrics_recorder.h"
 #include "components/password_manager/core/browser/password_generation_manager.h"
 #include "components/password_manager/core/browser/password_manager_util.h"
 #include "components/password_manager/core/browser/votes_uploader.h"
@@ -147,11 +144,9 @@ FormSaver* PasswordSaveManagerImpl::GetFormSaver() const {
 void PasswordSaveManagerImpl::Init(
     PasswordManagerClient* client,
     const FormFetcher* form_fetcher,
-    scoped_refptr<PasswordFormMetricsRecorder> metrics_recorder,
     VotesUploader* votes_uploader) {
   client_ = client;
   form_fetcher_ = form_fetcher;
-  metrics_recorder_ = metrics_recorder;
   votes_uploader_ = votes_uploader;
 }
 
@@ -184,19 +179,6 @@ void PasswordSaveManagerImpl::SetVotesAndRecordMetricsForPendingCredentials(
   votes_uploader_->set_password_overridden(false);
   switch (pending_credentials_state_) {
     case PendingCredentialsState::NEW_LOGIN: {
-      // Generate username correction votes.
-      bool username_correction_found =
-          votes_uploader_->FindCorrectedUsernameElement(
-              form_fetcher_->GetAllRelevantMatches(),
-              parsed_submitted_form.username_value,
-              parsed_submitted_form.password_value);
-      UMA_HISTOGRAM_BOOLEAN("PasswordManager.UsernameCorrectionFound",
-                            username_correction_found);
-      if (username_correction_found) {
-        metrics_recorder_->RecordDetailedUserAction(
-            password_manager::PasswordFormMetricsRecorder::DetailedUserAction::
-                kCorrectedUsernameInForm);
-      }
       break;
     }
     case PendingCredentialsState::UPDATE:
@@ -220,8 +202,6 @@ void PasswordSaveManagerImpl::Save(const FormData* observed_form,
   if (IsPasswordUpdate() &&
       pending_credentials_.type == PasswordForm::Type::kGenerated &&
       !HasGeneratedPassword()) {
-    metrics_util::LogPasswordGenerationSubmissionEvent(
-        metrics_util::PASSWORD_OVERRIDDEN);
     pending_credentials_.type = PasswordForm::Type::kManual;
   }
 
@@ -231,13 +211,6 @@ void PasswordSaveManagerImpl::Save(const FormData* observed_form,
   }
 
   SavePendingToStore(observed_form, parsed_submitted_form);
-
-  if (pending_credentials_.times_used == 1 &&
-      pending_credentials_.type == PasswordForm::Type::kGenerated) {
-    // This also includes PSL matched credentials.
-    metrics_util::LogPasswordGenerationSubmissionEvent(
-        metrics_util::PASSWORD_USED);
-  }
 }
 
 void PasswordSaveManagerImpl::Update(
@@ -272,9 +245,6 @@ void PasswordSaveManagerImpl::PresaveGeneratedPassword(
   if (!HasGeneratedPassword()) {
     generation_manager_ = std::make_unique<PasswordGenerationManager>(client_);
     votes_uploader_->set_generated_password_changed(false);
-    metrics_recorder_->SetGeneratedPasswordStatus(
-        PasswordFormMetricsRecorder::GeneratedPasswordStatus::
-            kPasswordAccepted);
   } else {
     // If the password is already generated and a new value to presave differs
     // from the presaved one, then mark that the generated password was
@@ -283,9 +253,6 @@ void PasswordSaveManagerImpl::PresaveGeneratedPassword(
     if (generation_manager_->generated_password() !=
         parsed_form.password_value) {
       votes_uploader_->set_generated_password_changed(true);
-      metrics_recorder_->SetGeneratedPasswordStatus(
-          PasswordFormMetricsRecorder::GeneratedPasswordStatus::
-              kPasswordEdited);
     }
   }
   votes_uploader_->set_has_generated_password(true);
@@ -314,8 +281,6 @@ void PasswordSaveManagerImpl::PasswordNoLongerGenerated() {
 
   votes_uploader_->set_has_generated_password(false);
   votes_uploader_->set_generated_password_changed(false);
-  metrics_recorder_->SetGeneratedPasswordStatus(
-      PasswordFormMetricsRecorder::GeneratedPasswordStatus::kPasswordDeleted);
 }
 
 void PasswordSaveManagerImpl::MoveCredentialsToAccountStore(
@@ -498,10 +463,6 @@ void PasswordSaveManagerImpl::UploadVotesAndMetrics(
     const FormData* observed_form,
     const PasswordForm& parsed_submitted_form) {
   if (IsNewLogin()) {
-    metrics_util::LogNewlySavedPasswordIsGenerated(
-        pending_credentials_.type == PasswordForm::Type::kGenerated,
-        client_->GetPasswordFeatureManager()
-            ->ComputePasswordAccountStorageUsageLevel());
     // Don't send votes if there was no observed form.
     if (observed_form) {
       votes_uploader_->SendVotesOnSave(*observed_form, parsed_submitted_form,
@@ -521,9 +482,6 @@ void PasswordSaveManagerImpl::UploadVotesAndMetrics(
 
   password_manager_util::UpdateMetadataForUsage(&pending_credentials_);
 
-  base::RecordAction(
-      base::UserMetricsAction("PasswordManager_LoginFollowingAutofill"));
-
   // Check to see if this form is a candidate for password generation.
   // Do not send votes if there was no observed form. Furthermore, don't send
   // votes on change password forms, since they were already sent in Update()
