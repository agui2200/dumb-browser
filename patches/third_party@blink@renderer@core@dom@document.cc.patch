diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
index 20688b7ab11e..106c4a8ec6ec 100644
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -48,10 +48,6 @@
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "mojo/public/mojom/base/text_direction.mojom-blink.h"
-#include "services/metrics/public/cpp/metrics_utils.h"
-#include "services/metrics/public/cpp/mojo_ukm_recorder.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "services/network/public/mojom/ip_address_space.mojom-blink.h"
 #include "services/network/public/mojom/trust_tokens.mojom-blink.h"
 #include "services/network/public/mojom/web_sandbox_flags.mojom-blink.h"
@@ -59,8 +55,6 @@
 #include "third_party/blink/public/common/css/preferred_color_scheme.h"
 #include "third_party/blink/public/common/feature_policy/document_policy_features.h"
 #include "third_party/blink/public/common/features.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_sample_collector.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
 #include "third_party/blink/public/common/thread_safe_browser_interface_broker_proxy.h"
 #include "third_party/blink/public/mojom/input/focus_type.mojom-blink.h"
 #include "third_party/blink/public/mojom/insecure_input/insecure_input_service.mojom-blink.h"
@@ -306,7 +300,6 @@
 #include "third_party/blink/renderer/platform/bindings/script_forbidden_scope.h"
 #include "third_party/blink/renderer/platform/bindings/v8_dom_wrapper.h"
 #include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"
-#include "third_party/blink/renderer/platform/fonts/font_matching_metrics.h"
 #include "third_party/blink/renderer/platform/geometry/length_functions.h"
 #include "third_party/blink/renderer/platform/heap/heap.h"
 #include "third_party/blink/renderer/platform/instrumentation/histogram.h"
@@ -438,11 +431,6 @@ class DocumentOutliveTimeReporter : public BlinkGCObserver {
       else
         NOTREACHED();
     }
-
-    if (outlive_time_count == 5 || outlive_time_count == 10 ||
-        outlive_time_count == 20 || outlive_time_count == 50) {
-      document_->RecordUkmOutliveTimeAfterShutdown(outlive_time_count);
-    }
   }
 
  private:
@@ -783,16 +771,6 @@ Document::Document(const DocumentInit& initializer,
               : kAllowAsynchronousParsing),
       node_count_(0),
       logged_field_edit_(false),
-      // Use the source id from the document initializer if it is available.
-      // Otherwise, generate a new source id to cover any cases that don't
-      // receive a valid source id, this for example includes but is not limited
-      // to SVGImage which does not have an associated RenderFrameHost. No URLs
-      // will be associated to this source id. No DocumentCreated events will be
-      // created either.
-      ukm_source_id_(initializer.UkmSourceId() == ukm::kInvalidSourceId
-                         ? ukm::UkmRecorder::GetNewSourceID()
-                         : initializer.UkmSourceId()),
-      needs_to_record_ukm_outlive_time_(false),
       viewport_data_(MakeGarbageCollected<ViewportData>(*this)),
       is_for_external_handler_(initializer.IsForExternalHandler()),
       fragment_directive_(MakeGarbageCollected<FragmentDirective>()),
@@ -2726,12 +2704,6 @@ void Document::MarkHasFindInPageRequest() {
   if (had_find_in_page_request_ || !IsInMainFrame())
     return;
 
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  ukm::builders::Blink_FindInPage(UkmSourceID())
-      .SetDidSearch(true)
-      .Record(recorder);
   had_find_in_page_request_ = true;
 }
 
@@ -2742,13 +2714,6 @@ void Document::MarkHasFindInPageContentVisibilityActiveMatch() {
   if (had_find_in_page_render_subtree_active_match_ || !IsInMainFrame())
     return;
 
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  // TODO(vmpstr): Rename UKM values if possible.
-  ukm::builders::Blink_FindInPage(UkmSourceID())
-      .SetDidHaveRenderSubtreeMatch(true)
-      .Record(recorder);
   had_find_in_page_render_subtree_active_match_ = true;
 }
 
@@ -2760,12 +2725,6 @@ void Document::MarkHasFindInPageBeforematchExpandedHiddenMatchable() {
       !IsInMainFrame())
     return;
 
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  ukm::builders::Blink_FindInPage(UkmSourceID())
-      .SetBeforematchExpandedHiddenMatchable(true)
-      .Record(recorder);
   had_find_in_page_beforematch_expanded_hidden_matchable_ = true;
 }
 
@@ -3103,8 +3062,6 @@ void Document::Shutdown() {
   if (num_canvases_ > 0)
     UMA_HISTOGRAM_COUNTS_100("Blink.Canvas.NumCanvasesPerPage", num_canvases_);
 
-  GetFontMatchingMetrics()->PublishAllMetrics();
-
   GetViewportData().Shutdown();
 
   View()->Dispose();
@@ -3215,18 +3172,6 @@ void Document::Shutdown() {
   lifecycle_.AdvanceTo(DocumentLifecycle::kStopped);
   DCHECK(!View()->IsAttached());
 
-  needs_to_record_ukm_outlive_time_ = IsInMainFrame();
-  if (needs_to_record_ukm_outlive_time_) {
-    // Ensure |ukm_recorder_| and |ukm_source_id_|.
-    UkmRecorder();
-  }
-
-  // Don't create a |ukm_recorder_| and |ukm_source_id_| unless necessary.
-  if (IdentifiabilityStudySettings::Get()->IsActive()) {
-    IdentifiabilitySampleCollector::Get()->FlushSource(UkmRecorder(),
-                                                       UkmSourceID());
-  }
-
   mime_handler_view_before_unload_event_listener_ = nullptr;
 
   resource_coordinator_.reset();
@@ -3951,15 +3896,6 @@ bool Document::CheckCompletedInternal() {
 
     AnchorElementMetrics::NotifyOnLoad(*this);
     DetectJavascriptFrameworksOnLoad(*this);
-
-    // If this is a document associated with a resource loading hints based
-    // preview, then record the resource loading hints UKM now that the load is
-    // finished.
-    PreviewsResourceLoadingHints* hints =
-        Loader()->GetPreviewsResourceLoadingHints();
-    if (hints) {
-      hints->RecordUKM(UkmRecorder());
-    }
   }
 
   if (auto* view = View()) {
@@ -6853,14 +6789,6 @@ void Document::RecordAsyncScriptCount() {
   // Only record async script count for mainframe documents, as per UKM policy.
   if (!IsInMainFrame())
     return;
-
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  ukm::builders::Blink_Script_AsyncScripts(UkmSourceID())
-      .SetAsyncScriptCount(
-          ukm::GetExponentialBucketMin(async_script_count_, 1.3))
-      .Record(recorder);
 }
 
 void Document::MaybeExecuteDelayedAsyncScripts() {
@@ -7211,31 +7139,6 @@ bool Document::AllowedToUseDynamicMarkUpInsertion(
   return false;
 }
 
-ukm::UkmRecorder* Document::UkmRecorder() {
-  if (ukm_recorder_)
-    return ukm_recorder_.get();
-
-  mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> recorder;
-  Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(
-      recorder.InitWithNewPipeAndPassReceiver());
-  ukm_recorder_ = std::make_unique<ukm::MojoUkmRecorder>(std::move(recorder));
-
-  return ukm_recorder_.get();
-}
-
-ukm::SourceId Document::UkmSourceID() const {
-  return ukm_source_id_;
-}
-
-FontMatchingMetrics* Document::GetFontMatchingMetrics() {
-  if (font_matching_metrics_)
-    return font_matching_metrics_.get();
-  font_matching_metrics_ = std::make_unique<FontMatchingMetrics>(
-      IsInMainFrame(), UkmRecorder(), UkmSourceID(),
-      GetTaskRunner(TaskType::kInternalDefault));
-  return font_matching_metrics_.get();
-}
-
 bool Document::AllowInlineEventHandler(Node* node,
                                        EventListener* listener,
                                        const String& context_url,
@@ -8273,18 +8176,6 @@ void Document::Trace(Visitor* visitor) const {
   ContainerNode::Trace(visitor);
 }
 
-void Document::RecordUkmOutliveTimeAfterShutdown(int outlive_time_count) {
-  if (!needs_to_record_ukm_outlive_time_)
-    return;
-
-  DCHECK(ukm_recorder_);
-  DCHECK(ukm_source_id_ != ukm::kInvalidSourceId);
-
-  ukm::builders::Document_OutliveTimeAfterShutdown(ukm_source_id_)
-      .SetGCCount(outlive_time_count)
-      .Record(ukm_recorder_.get());
-}
-
 bool Document::CurrentFrameHadRAF() const {
   return scripted_animation_controller_->CurrentFrameHadRAF();
 }
