diff --git a/third_party/blink/renderer/core/dom/document.cc b/third_party/blink/renderer/core/dom/document.cc
index 4eebb1d70cafc..45341445cec58 100644
--- a/third_party/blink/renderer/core/dom/document.cc
+++ b/third_party/blink/renderer/core/dom/document.cc
@@ -43,15 +43,13 @@
 #include "base/debug/dump_without_crashing.h"
 #include "base/macros.h"
 #include "base/metrics/histogram_functions.h"
+#include "base/rand_util.h"
 #include "base/time/time.h"
 #include "cc/input/overscroll_behavior.h"
 #include "cc/input/scroll_snap_data.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "mojo/public/mojom/base/text_direction.mojom-blink.h"
-#include "services/metrics/public/cpp/metrics_utils.h"
-#include "services/metrics/public/cpp/mojo_ukm_recorder.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
 #include "services/metrics/public/cpp/ukm_source_id.h"
 #include "services/network/public/cpp/web_sandbox_flags.h"
 #include "services/network/public/mojom/ip_address_space.mojom-blink.h"
@@ -61,8 +59,6 @@
 #include "third_party/blink/public/common/browser_interface_broker_proxy.h"
 #include "third_party/blink/public/common/features.h"
 #include "third_party/blink/public/common/permissions_policy/document_policy_features.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_sample_collector.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
 #include "third_party/blink/public/common/thread_safe_browser_interface_broker_proxy.h"
 #include "third_party/blink/public/mojom/css/preferred_color_scheme.mojom-blink-forward.h"
 #include "third_party/blink/public/mojom/input/focus_type.mojom-blink.h"
@@ -82,7 +78,6 @@
 #include "third_party/blink/renderer/bindings/core/v8/string_or_element_creation_options.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_element_creation_options.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_element_registration_options.h"
-#include "third_party/blink/renderer/bindings/core/v8/v8_interest_cohort.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_throw_dom_exception.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_union_elementcreationoptions_string.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_union_htmlscriptelement_svgscriptelement.h"
@@ -311,7 +306,6 @@
 #include "third_party/blink/renderer/platform/bindings/script_forbidden_scope.h"
 #include "third_party/blink/renderer/platform/bindings/v8_dom_wrapper.h"
 #include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"
-#include "third_party/blink/renderer/platform/fonts/font_matching_metrics.h"
 #include "third_party/blink/renderer/platform/geometry/length_functions.h"
 #include "third_party/blink/renderer/platform/heap/heap.h"
 #include "third_party/blink/renderer/platform/instrumentation/histogram.h"
@@ -750,9 +744,7 @@ Document::Document(const DocumentInit& initializer,
       // to SVGImage which does not have an associated RenderFrameHost. No URLs
       // will be associated to this source id. No DocumentCreated events will be
       // created either.
-      ukm_source_id_(initializer.UkmSourceId() == ukm::kInvalidSourceId
-                         ? ukm::UkmRecorder::GetNewSourceID()
-                         : initializer.UkmSourceId()),
+      ukm_source_id_(ukm::kInvalidSourceId),
       viewport_data_(MakeGarbageCollected<ViewportData>(*this)),
       is_for_external_handler_(initializer.IsForExternalHandler()),
       fragment_directive_(MakeGarbageCollected<FragmentDirective>()),
@@ -2157,6 +2149,16 @@ void Document::UpdateStyleAndLayoutTreeForThisDocument() {
 #if DCHECK_IS_ON()
   AssertLayoutTreeUpdated(*this);
 #endif
+
+  if (RuntimeEnabledFeatures::FingerprintingClientRectsNoiseEnabled()) {
+    // Precompute -0.0003% to 0.0003% noise factor for get*ClientRect*()
+    // fingerprinting.
+    noise_factor_x_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
+    noise_factor_y_ = 1 + (base::RandDouble() - 0.5) * 0.000003;
+  } else {
+    noise_factor_x_ = 1;
+    noise_factor_y_ = 1;
+  }
 }
 
 void Document::InvalidateStyleAndLayoutForFontUpdates() {
@@ -2391,12 +2393,6 @@ void Document::MarkHasFindInPageRequest() {
   if (had_find_in_page_request_)
     return;
 
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  ukm::builders::Blink_FindInPage(UkmSourceID())
-      .SetDidSearch(true)
-      .Record(recorder);
   had_find_in_page_request_ = true;
 }
 
@@ -2405,13 +2401,6 @@ void Document::MarkHasFindInPageContentVisibilityActiveMatch() {
   if (had_find_in_page_render_subtree_active_match_)
     return;
 
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  // TODO(vmpstr): Rename UKM values if possible.
-  ukm::builders::Blink_FindInPage(UkmSourceID())
-      .SetDidHaveRenderSubtreeMatch(true)
-      .Record(recorder);
   had_find_in_page_render_subtree_active_match_ = true;
 }
 
@@ -2420,12 +2409,6 @@ void Document::MarkHasFindInPageBeforematchExpandedHiddenMatchable() {
   if (had_find_in_page_beforematch_expanded_hidden_matchable_)
     return;
 
-  auto* recorder = UkmRecorder();
-  DCHECK(recorder);
-  DCHECK(UkmSourceID() != ukm::kInvalidSourceId);
-  ukm::builders::Blink_FindInPage(UkmSourceID())
-      .SetBeforematchExpandedHiddenMatchable(true)
-      .Record(recorder);
   had_find_in_page_beforematch_expanded_hidden_matchable_ = true;
 }
 
@@ -2747,8 +2730,6 @@ void Document::Shutdown() {
   if (num_canvases_ > 0)
     UMA_HISTOGRAM_COUNTS_100("Blink.Canvas.NumCanvasesPerPage", num_canvases_);
 
-  GetFontMatchingMetrics()->PublishAllMetrics();
-
   GetViewportData().Shutdown();
 
   View()->Dispose();
@@ -2849,12 +2830,6 @@ void Document::Shutdown() {
   lifecycle_.AdvanceTo(DocumentLifecycle::kStopped);
   DCHECK(!View()->IsAttached());
 
-  // Don't create a |ukm_recorder_| and |ukm_source_id_| unless necessary.
-  if (IdentifiabilityStudySettings::Get()->IsActive()) {
-    IdentifiabilitySampleCollector::Get()->FlushSource(UkmRecorder(),
-                                                       UkmSourceID());
-  }
-
   mime_handler_view_before_unload_event_listener_ = nullptr;
 
   resource_coordinator_.reset();
@@ -5965,16 +5940,7 @@ ScriptPromise Document::hasTrustToken(ScriptState* script_state,
   return promise;
 }
 
-mojom::blink::FlocService* Document::GetFlocService(
-    ExecutionContext* execution_context) {
-  if (!data_->floc_service_.is_bound()) {
-    execution_context->GetBrowserInterfaceBroker().GetInterface(
-        data_->floc_service_.BindNewPipeAndPassReceiver(
-            execution_context->GetTaskRunner(TaskType::kMiscPlatformAPI)));
-  }
-  return data_->floc_service_.get();
-}
-
+#if 0
 ScriptPromise Document::interestCohort(ScriptState* script_state,
                                        ExceptionState& exception_state) {
   if (!GetFrame()) {
@@ -6026,6 +5992,7 @@ ScriptPromise Document::interestCohort(ScriptState* script_state,
 
   return promise;
 }
+#endif
 
 void Document::HasTrustTokensAnswererConnectionError() {
   data_->has_trust_tokens_answerer_.reset();
@@ -6514,6 +6481,7 @@ DOMWindow* Document::defaultView() const {
 }
 
 void Document::RecordAsyncScriptCount() {
+#if 0
   UMA_HISTOGRAM_COUNTS_100("Blink.Script.AsyncScriptCount",
                            async_script_count_);
 
@@ -6528,6 +6496,7 @@ void Document::RecordAsyncScriptCount() {
       .SetAsyncScriptCount(
           ukm::GetExponentialBucketMin(async_script_count_, 1.3))
       .Record(recorder);
+#endif
 }
 
 void Document::MaybeExecuteDelayedAsyncScripts() {
@@ -6895,6 +6864,7 @@ bool Document::AllowedToUseDynamicMarkUpInsertion(
   return false;
 }
 
+#if 0
 ukm::UkmRecorder* Document::UkmRecorder() {
   if (ukm_recorder_)
     return ukm_recorder_.get();
@@ -6906,20 +6876,12 @@ ukm::UkmRecorder* Document::UkmRecorder() {
 
   return ukm_recorder_.get();
 }
+#endif
 
 ukm::SourceId Document::UkmSourceID() const {
   return ukm_source_id_;
 }
 
-FontMatchingMetrics* Document::GetFontMatchingMetrics() {
-  if (font_matching_metrics_)
-    return font_matching_metrics_.get();
-  font_matching_metrics_ = std::make_unique<FontMatchingMetrics>(
-      IsInMainFrame(), UkmRecorder(), UkmSourceID(),
-      GetTaskRunner(TaskType::kInternalDefault));
-  return font_matching_metrics_.get();
-}
-
 bool Document::AllowInlineEventHandler(Node* node,
                                        EventListener* listener,
                                        const String& context_url,
@@ -8257,6 +8219,14 @@ Document::PendingJavascriptUrl::~PendingJavascriptUrl() = default;
 
 template class CORE_TEMPLATE_EXPORT Supplement<Document>;
 
+double Document::GetNoiseFactorX() {
+  return noise_factor_x_;
+}
+
+double Document::GetNoiseFactorY() {
+  return noise_factor_y_;
+}
+
 }  // namespace blink
 #ifndef NDEBUG
 static WeakDocumentSet& liveDocumentSet() {
