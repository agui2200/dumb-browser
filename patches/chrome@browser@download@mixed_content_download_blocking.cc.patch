diff --git a/chrome/browser/download/mixed_content_download_blocking.cc b/chrome/browser/download/mixed_content_download_blocking.cc
index f7f78bee8784..b3b412aa4b35 100644
--- a/chrome/browser/download/mixed_content_download_blocking.cc
+++ b/chrome/browser/download/mixed_content_download_blocking.cc
@@ -17,7 +17,6 @@
 #include "chrome/common/chrome_features.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/content_settings.h"
-#include "components/download/public/common/download_stats.h"
 #include "content/public/browser/download_item_utils.h"
 #include "content/public/browser/web_contents.h"
 #include "third_party/blink/public/common/loader/network_utils.h"
@@ -25,7 +24,6 @@
 #include "url/gurl.h"
 #include "url/origin.h"
 
-using download::DownloadSource;
 using MixedContentStatus = download::DownloadItem::MixedContentStatus;
 
 namespace {
@@ -232,20 +230,14 @@ struct MixedContentDownloadData {
     // TODO(1029062): INTERNAL_API is also used for background fetch. That
     // probably isn't the correct behavior, since INTERNAL_API is otherwise used
     // for Chrome stuff. Background fetch should probably be HTTPS-only.
-    auto download_source = item->GetDownloadSource();
     auto transition_type = item->GetTransitionType();
-    if (download_source == DownloadSource::RETRY ||
-        (transition_type & ui::PAGE_TRANSITION_RELOAD) ||
+    if ((transition_type & ui::PAGE_TRANSITION_RELOAD) ||
         (transition_type & ui::PAGE_TRANSITION_TYPED) ||
         (transition_type & ui::PAGE_TRANSITION_FROM_ADDRESS_BAR) ||
         (transition_type & ui::PAGE_TRANSITION_FORWARD_BACK) ||
         (transition_type & ui::PAGE_TRANSITION_AUTO_TOPLEVEL) ||
         (transition_type & ui::PAGE_TRANSITION_AUTO_BOOKMARK) ||
-        (transition_type & ui::PAGE_TRANSITION_FROM_API) ||
-        download_source == DownloadSource::OFFLINE_PAGE ||
-        download_source == DownloadSource::INTERNAL_API ||
-        download_source == DownloadSource::EXTENSION_API ||
-        download_source == DownloadSource::EXTENSION_INSTALLER) {
+        (transition_type & ui::PAGE_TRANSITION_FROM_API)) {
       base::UmaHistogramEnumeration(
           kInsecureDownloadHistogramName,
           InsecureDownloadSecurityStatus::kDownloadIgnored);
@@ -259,11 +251,6 @@ struct MixedContentDownloadData {
           GetExtensionEnumFromString(extension_));
       base::UmaHistogramEnumeration(kInsecureDownloadHistogramName,
                                     security_status);
-      download::RecordDownloadValidationMetrics(
-          download::DownloadMetricsCallsite::kMixContentDownloadBlocking,
-          download::CheckDownloadConnectionSecurity(item->GetURL(),
-                                                    item->GetUrlChain()),
-          download::DownloadContentFromMimeType(item->GetMimeType(), false));
 
       is_mixed_content_ =
           (initiator_.has_value() &&
@@ -383,15 +370,7 @@ MixedContentStatus GetMixedContentStatusForDownload(
                         kTreatSilentBlockListAsAllowlist, data.extension_)) {
     PrintConsoleMessage(data, true);
 
-    // Only permit silent blocking when not initiated by an explicit user
-    // action.  Otherwise, fall back to visible blocking.
-    auto download_source = data.item_->GetDownloadSource();
-    if (download_source == DownloadSource::CONTEXT_MENU ||
-        download_source == DownloadSource::WEB_CONTENTS_API) {
-      return MixedContentStatus::BLOCK;
-    }
-
-    return MixedContentStatus::SILENT_BLOCK;
+    return MixedContentStatus::BLOCK;
   }
 
   if (ContainsExtension(kBlockExtensionList, kTreatBlockListAsAllowlist,
