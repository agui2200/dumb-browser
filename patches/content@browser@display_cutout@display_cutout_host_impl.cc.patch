diff --git a/content/browser/display_cutout/display_cutout_host_impl.cc b/content/browser/display_cutout/display_cutout_host_impl.cc
index 1640ec834899..69da8f4f4a32 100644
--- a/content/browser/display_cutout/display_cutout_host_impl.cc
+++ b/content/browser/display_cutout/display_cutout_host_impl.cc
@@ -8,7 +8,6 @@
 #include "content/browser/web_contents/web_contents_impl.h"
 #include "content/public/browser/navigation_handle.h"
 #include "mojo/public/cpp/bindings/associated_remote.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
 #include "third_party/blink/public/common/associated_interfaces/associated_interface_provider.h"
 
 namespace content {
@@ -35,8 +34,6 @@ void DisplayCutoutHostImpl::ViewportFitChangedForFrame(
   // WebContentsObservers about the new value.
   if (current_rfh_ == rfh)
     web_contents_impl_->NotifyViewportFitChanged(value);
-
-  MaybeQueueUKMEvent(rfh);
 }
 
 void DisplayCutoutHostImpl::DidAcquireFullscreen(RenderFrameHost* rfh) {
@@ -56,8 +53,6 @@ void DisplayCutoutHostImpl::DidFinishNavigation(
     return;
   }
 
-  RecordPendingUKMEvents();
-
   // If we finish a main frame navigation and the |WebDisplayMode| is
   // fullscreen then we should make the main frame the current
   // |RenderFrameHost|.
@@ -79,8 +74,6 @@ void DisplayCutoutHostImpl::RenderFrameCreated(RenderFrameHost* rfh) {
 }
 
 void DisplayCutoutHostImpl::WebContentsDestroyed() {
-  // Record any pending UKM events that we are waiting to record.
-  RecordPendingUKMEvents();
 }
 
 void DisplayCutoutHostImpl::SetDisplayCutoutSafeArea(gfx::Insets insets) {
@@ -88,15 +81,6 @@ void DisplayCutoutHostImpl::SetDisplayCutoutSafeArea(gfx::Insets insets) {
 
   if (current_rfh_)
     SendSafeAreaToFrame(current_rfh_, insets);
-
-  // If we have a pending UKM event on the top of the stack that is |kAllowed|
-  // and we have a |current_rfh_| then we should update that UKM event as it
-  // was recorded before we received the safe area.
-  if (!pending_ukm_events_.empty() && current_rfh_) {
-    PendingUKMEvent& last_entry = pending_ukm_events_.back();
-    if (last_entry.ignored_reason == DisplayCutoutIgnoredReason::kAllowed)
-      last_entry.safe_areas_present = GetSafeAreasPresentUKMValue();
-  }
 }
 
 void DisplayCutoutHostImpl::SetCurrentRenderFrameHost(RenderFrameHost* rfh) {
@@ -118,9 +102,6 @@ void DisplayCutoutHostImpl::SetCurrentRenderFrameHost(RenderFrameHost* rfh) {
     return;
   }
 
-  // Record a UKM event for the new frame.
-  MaybeQueueUKMEvent(current_rfh_);
-
   // Send the current safe area to the new frame.
   SendSafeAreaToFrame(rfh, insets_);
 
@@ -149,60 +130,4 @@ blink::mojom::ViewportFit DisplayCutoutHostImpl::GetValueOrDefault(
   return blink::mojom::ViewportFit::kAuto;
 }
 
-void DisplayCutoutHostImpl::MaybeQueueUKMEvent(RenderFrameHost* frame) {
-  if (!frame)
-    return;
-
-  // Get the current applied ViewportFit and the ViewportFit value supplied by
-  // |frame|. If the |supplied_value| is kAuto then we will not record the
-  // event since it is the default.
-  blink::mojom::ViewportFit supplied_value = GetValueOrDefault(frame);
-  if (supplied_value == blink::mojom::ViewportFit::kAuto)
-    return;
-  blink::mojom::ViewportFit applied_value = GetValueOrDefault(current_rfh_);
-
-  // Set the reason why this frame is not the current frame.
-  int ignored_reason = DisplayCutoutIgnoredReason::kAllowed;
-  if (current_rfh_ != frame) {
-    ignored_reason =
-        current_rfh_ == nullptr
-            ? DisplayCutoutIgnoredReason::kWebContentsNotFullscreen
-            : DisplayCutoutIgnoredReason::kFrameNotCurrentFullscreen;
-  }
-
-  // Adds the UKM event to the list of pending events.
-  PendingUKMEvent pending_event;
-  pending_event.source_id = frame->GetPageUkmSourceId();
-  pending_event.is_main_frame = !frame->GetParent();
-  pending_event.applied_value = applied_value;
-  pending_event.supplied_value = supplied_value;
-  pending_event.ignored_reason = ignored_reason;
-  if (ignored_reason == DisplayCutoutIgnoredReason::kAllowed)
-    pending_event.safe_areas_present = GetSafeAreasPresentUKMValue();
-  pending_ukm_events_.push_back(pending_event);
-}
-
-void DisplayCutoutHostImpl::RecordPendingUKMEvents() {
-  for (const auto& event : pending_ukm_events_) {
-    ukm::builders::Layout_DisplayCutout_StateChanged builder(event.source_id);
-    builder.SetIsMainFrame(event.is_main_frame);
-    builder.SetViewportFit_Applied(static_cast<int>(event.applied_value));
-    builder.SetViewportFit_Supplied(static_cast<int>(event.supplied_value));
-    builder.SetViewportFit_IgnoredReason(event.ignored_reason);
-    builder.SetSafeAreasPresent(event.safe_areas_present);
-    builder.Record(ukm::UkmRecorder::Get());
-  }
-
-  pending_ukm_events_.clear();
-}
-
-int DisplayCutoutHostImpl::GetSafeAreasPresentUKMValue() const {
-  int flags = 0;
-  flags |= insets_.top() ? DisplayCutoutSafeArea::kTop : 0;
-  flags |= insets_.left() ? DisplayCutoutSafeArea::kLeft : 0;
-  flags |= insets_.bottom() ? DisplayCutoutSafeArea::kBottom : 0;
-  flags |= insets_.right() ? DisplayCutoutSafeArea::kRight : 0;
-  return flags;
-}
-
 }  // namespace content
