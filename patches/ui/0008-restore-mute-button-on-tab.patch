diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 1517551159fc..033d98dfc83c 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -2599,6 +2599,9 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kLockScreenNotificationDescription, kOsCrOS,
      FEATURE_VALUE_TYPE(ash::features::kLockScreenNotifications)},
 #endif  // OS_CHROMEOS
+    {"enable-tab-audio-muting", flag_descriptions::kTabAudioMutingName,
+     flag_descriptions::kTabAudioMutingDescription, kOsDesktop,
+     SINGLE_VALUE_TYPE(switches::kEnableTabAudioMuting)},
     {"reduced-referrer-granularity",
      flag_descriptions::kReducedReferrerGranularityName,
      flag_descriptions::kReducedReferrerGranularityDescription, kOsAll,
diff --git a/chrome/browser/content_settings/sound_content_setting_observer.cc b/chrome/browser/content_settings/sound_content_setting_observer.cc
index 4089fb3e1adf..6c1960f516a3 100644
--- a/chrome/browser/content_settings/sound_content_setting_observer.cc
+++ b/chrome/browser/content_settings/sound_content_setting_observer.cc
@@ -132,6 +132,10 @@ void SoundContentSettingObserver::MuteOrUnmuteIfNecessary() {
 
   TabMutedReason reason = chrome::GetTabAudioMutedReason(web_contents());
 
+  // Do not unmute if we're muted due to audio indicator.
+  if (!mute && reason == TabMutedReason::AUDIO_INDICATOR)
+    return;
+
   // Do not override the decisions of an extension.
   if (reason == TabMutedReason::EXTENSION)
     return;
diff --git a/chrome/browser/extensions/api/tabs/tabs_api.cc b/chrome/browser/extensions/api/tabs/tabs_api.cc
index 38c40a7e868d..80efe2d17f07 100644
--- a/chrome/browser/extensions/api/tabs/tabs_api.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_api.cc
@@ -56,6 +56,7 @@
 #include "chrome/browser/ui/tabs/tab_utils.h"
 #include "chrome/browser/ui/window_sizer/window_sizer.h"
 #include "chrome/browser/web_applications/components/web_app_helpers.h"
+#include "chrome/common/chrome_switches.h"
 #include "chrome/common/extensions/api/tabs.h"
 #include "chrome/common/extensions/api/windows.h"
 #include "chrome/common/extensions/extension_constants.h"
diff --git a/chrome/browser/extensions/api/tabs/tabs_constants.cc b/chrome/browser/extensions/api/tabs/tabs_constants.cc
index a2d7cd800f10..e2af6d5c8c7d 100644
--- a/chrome/browser/extensions/api/tabs/tabs_constants.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_constants.cc
@@ -104,6 +104,8 @@ const char kSupportedInWindowsOnlyError[] = "Supported in Windows only";
 const char kInvalidWindowTypeError[] = "Invalid value for type";
 const char kInvalidWindowStateError[] = "Invalid value for state";
 const char kScreenshotsDisabled[] = "Taking screenshots has been disabled";
+const char kCannotUpdateMuteDisabled[] =
+    "Failed to update mute state for tab *, --* must be enabled";
 const char kCannotUpdateMuteCaptured[] =
     "Cannot update mute state for tab *, tab has audio or video currently "
     "being captured";
diff --git a/chrome/browser/extensions/api/tabs/tabs_constants.h b/chrome/browser/extensions/api/tabs/tabs_constants.h
index 12261d10c0fa..c9ca22000ead 100644
--- a/chrome/browser/extensions/api/tabs/tabs_constants.h
+++ b/chrome/browser/extensions/api/tabs/tabs_constants.h
@@ -101,6 +101,7 @@ extern const char kSupportedInWindowsOnlyError[];
 extern const char kInvalidWindowTypeError[];
 extern const char kInvalidWindowStateError[];
 extern const char kScreenshotsDisabled[];
+extern const char kCannotUpdateMuteDisabled[];
 extern const char kCannotUpdateMuteCaptured[];
 extern const char kCannotDetermineLanguageOfUnloadedTab[];
 extern const char kMissingLockWindowFullscreenPrivatePermission[];
diff --git a/chrome/browser/extensions/extension_tab_util.cc b/chrome/browser/extensions/extension_tab_util.cc
index 80c96746e48e..bf22e6ee16be 100644
--- a/chrome/browser/extensions/extension_tab_util.cc
+++ b/chrome/browser/extensions/extension_tab_util.cc
@@ -546,11 +546,12 @@ ExtensionTabUtil::CreateWindowValueForExtension(
 std::unique_ptr<api::tabs::MutedInfo> ExtensionTabUtil::CreateMutedInfo(
     content::WebContents* contents) {
   DCHECK(contents);
-  auto info = std::make_unique<api::tabs::MutedInfo>();
+  std::unique_ptr<api::tabs::MutedInfo> info(new api::tabs::MutedInfo);
   info->muted = contents->IsAudioMuted();
   switch (chrome::GetTabAudioMutedReason(contents)) {
     case TabMutedReason::NONE:
       break;
+    case TabMutedReason::AUDIO_INDICATOR:
     case TabMutedReason::CONTENT_SETTING:
     case TabMutedReason::CONTENT_SETTING_CHROME:
     case TabMutedReason::CONTEXT_MENU:
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index 5f89ea97082d..857660ac2be2 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -2067,6 +2067,12 @@ const char kSystemKeyboardLockDescription[] =
     "keyboard shortcuts and have the events routed directly to the website "
     "when in fullscreen mode.";
 
+const char kTabAudioMutingName[] = "Tab audio muting UI control";
+const char kTabAudioMutingDescription[] =
+    "When enabled, the audio indicators in the tab strip double as tab audio "
+    "mute controls. This also adds commands in the tab context menu for "
+    "quickly muting multiple selected tabs.";
+
 const char kSystemTrayMicGainName[] = "Modify mic gain in the system tray";
 const char kSystemTrayMicGainDescription[] =
     "Enables mic gain settings in the system tray audio "
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index 6bdfa4401536..b15e1c8d6ba8 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -1182,6 +1182,9 @@ extern const char kStrictOriginIsolationDescription[];
 extern const char kSystemKeyboardLockName[];
 extern const char kSystemKeyboardLockDescription[];
 
+extern const char kTabAudioMutingName[];
+extern const char kTabAudioMutingDescription[];
+
 extern const char kSuggestedContentToggleName[];
 extern const char kSuggestedContentToggleDescription[];
 
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index 1fc92a9660c3..72078f3d8ca3 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -3676,8 +3676,8 @@ static_library("ui") {
       "views/tab_search/tab_search_bubble_view.h",
       "views/tab_sharing/tab_sharing_ui_views.cc",
       "views/tab_sharing/tab_sharing_ui_views.h",
-      "views/tabs/alert_indicator.cc",
-      "views/tabs/alert_indicator.h",
+      "views/tabs/alert_indicator_button.cc",
+      "views/tabs/alert_indicator_button.h",
       "views/tabs/browser_tab_strip_controller.cc",
       "views/tabs/browser_tab_strip_controller.h",
       "views/tabs/color_picker_view.cc",
diff --git a/chrome/browser/ui/tabs/tab_utils.h b/chrome/browser/ui/tabs/tab_utils.h
index 166a4851daa0..f278ed7d6227 100644
--- a/chrome/browser/ui/tabs/tab_utils.h
+++ b/chrome/browser/ui/tabs/tab_utils.h
@@ -20,6 +20,7 @@ class WebContents;
 
 // Alert states for a tab. Any number of these (or none) may apply at once.
 enum class TabAlertState {
+  NONE,
   MEDIA_RECORDING,      // Audio/Video being recorded, consumed by tab.
   TAB_CAPTURING,        // Tab contents being captured.
   AUDIO_PLAYING,        // Audible audio is playing from the tab.
@@ -35,6 +36,7 @@ enum class TabAlertState {
 
 enum class TabMutedReason {
   NONE,                    // The tab has never been muted or unmuted.
+  AUDIO_INDICATOR,         // Mute toggled via tab-strip audio icon.
   CONTEXT_MENU,            // Mute/Unmute chosen from tab context menu.
   EXTENSION,               // Mute state changed via extension API.
   CONTENT_SETTING,         // The sound content setting was set to BLOCK.
diff --git a/chrome/browser/ui/views/tabs/alert_indicator.cc b/chrome/browser/ui/views/tabs/alert_indicator.cc
index 9e809327cbe8..fcd4c07bdd42 100644
--- a/chrome/browser/ui/views/tabs/alert_indicator.cc
+++ b/chrome/browser/ui/views/tabs/alert_indicator.cc
@@ -252,4 +252,4 @@ void AlertIndicator::ResetImage(TabAlertState state) {
   SkColor color = parent_tab_->GetAlertIndicatorColor(state);
   gfx::ImageSkia image = GetTabAlertIndicatorImage(state, color).AsImageSkia();
   SetImage(&image);
-}
+}
\ No newline at end of file
diff --git a/chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc b/chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
index 9c87ddcf4c4f..75e8852e1236 100644
--- a/chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
+++ b/chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
@@ -347,6 +347,12 @@ void BrowserTabStripController::CloseTab(int model_index) {
                              TabStripModel::CLOSE_CREATE_HISTORICAL_TAB);
 }
 
+void BrowserTabStripController::ToggleTabAudioMute(int model_index) {
+  content::WebContents* const contents = model_->GetWebContentsAt(model_index);
+  chrome::SetTabAudioMuted(contents, !contents->IsAudioMuted(),
+                           TabMutedReason::AUDIO_INDICATOR, std::string());
+}
+
 void BrowserTabStripController::AddTabToGroup(
     int model_index,
     const tab_groups::TabGroupId& group) {
diff --git a/chrome/browser/ui/views/tabs/browser_tab_strip_controller.h b/chrome/browser/ui/views/tabs/browser_tab_strip_controller.h
index eab9ab0240de..67fc14da2c22 100644
--- a/chrome/browser/ui/views/tabs/browser_tab_strip_controller.h
+++ b/chrome/browser/ui/views/tabs/browser_tab_strip_controller.h
@@ -70,6 +70,7 @@ class BrowserTabStripController : public TabStripController,
   void AddSelectionFromAnchorTo(int model_index) override;
   bool BeforeCloseTab(int model_index, CloseTabSource source) override;
   void CloseTab(int model_index) override;
+  void ToggleTabAudioMute(int model_index) override;
   void AddTabToGroup(int model_index,
                      const tab_groups::TabGroupId& group) override;
   void RemoveTabFromGroup(int model_index) override;
diff --git a/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.cc b/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.cc
index 7ca04e770c59..f9d0a58be246 100644
--- a/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.cc
+++ b/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.cc
@@ -205,6 +205,9 @@ void FakeBaseTabStripController::CloseTab(int index) {
   RemoveTab(index);
 }
 
+void FakeBaseTabStripController::ToggleTabAudioMute(int index) {
+}
+
 void FakeBaseTabStripController::ShowContextMenuForTab(
     Tab* tab,
     const gfx::Point& p,
diff --git a/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.h b/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.h
index e9f929bcbae2..2d1136ec5b0b 100644
--- a/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.h
+++ b/chrome/browser/ui/views/tabs/fake_base_tab_strip_controller.h
@@ -46,6 +46,7 @@ class FakeBaseTabStripController : public TabStripController {
   void AddSelectionFromAnchorTo(int index) override;
   bool BeforeCloseTab(int index, CloseTabSource source) override;
   void CloseTab(int index) override;
+  void ToggleTabAudioMute(int index) override;
   void MoveTab(int from_index, int to_index) override;
   void MoveGroup(const tab_groups::TabGroupId&, int to_index) override;
   bool ToggleTabGroupCollapsedState(const tab_groups::TabGroupId group,
diff --git a/chrome/browser/ui/views/tabs/tab.cc b/chrome/browser/ui/views/tabs/tab.cc
index b4bd164fe3f7..2a476a685a69 100644
--- a/chrome/browser/ui/views/tabs/tab.cc
+++ b/chrome/browser/ui/views/tabs/tab.cc
@@ -34,7 +34,7 @@
 #include "chrome/browser/ui/view_ids.h"
 #include "chrome/browser/ui/views/chrome_layout_provider.h"
 #include "chrome/browser/ui/views/frame/browser_view.h"
-#include "chrome/browser/ui/views/tabs/alert_indicator.h"
+#include "chrome/browser/ui/views/tabs/alert_indicator_button.h"
 #include "chrome/browser/ui/views/tabs/browser_tab_strip_controller.h"
 #include "chrome/browser/ui/views/tabs/tab_close_button.h"
 #include "chrome/browser/ui/views/tabs/tab_controller.h"
@@ -212,8 +212,8 @@ Tab::Tab(TabController* controller)
   icon_ = new TabIcon;
   AddChildView(icon_);
 
-  alert_indicator_ = new AlertIndicator(this);
-  AddChildView(alert_indicator_);
+  alert_indicator_button_ = new AlertIndicatorButton(this);
+  AddChildView(alert_indicator_button_);
 
   // Unretained is safe here because this class outlives its close button, and
   // the controller outlives this Tab.
@@ -256,14 +256,6 @@ void Tab::AnimationProgressed(const gfx::Animation* animation) {
 }
 
 void Tab::ButtonPressed(views::Button* sender, const ui::Event& event) {
-  if (!alert_indicator_ || !alert_indicator_->GetVisible())
-    base::RecordAction(UserMetricsAction("CloseTab_NoAlertIndicator"));
-  else if (GetAlertStateToShow(data_.alert_state) ==
-           TabAlertState::AUDIO_PLAYING)
-    base::RecordAction(UserMetricsAction("CloseTab_AudioIndicator"));
-  else
-    base::RecordAction(UserMetricsAction("CloseTab_RecordingIndicator"));
-
   const CloseTabSource source = (event.type() == ui::ET_MOUSE_RELEASED &&
                                  !(event.flags() & ui::EF_FROM_TOUCH))
                                     ? CLOSE_TAB_FROM_MOUSE
@@ -362,7 +354,7 @@ void Tab::Layout() {
       if (extra_alert_indicator_padding_)
         right -= ui::TouchUiController::Get()->touch_ui() ? 8 : 6;
     }
-    const gfx::Size image_size = alert_indicator_->GetPreferredSize();
+    const gfx::Size image_size = alert_indicator_button_->GetPreferredSize();
     gfx::Rect bounds(
         std::max(contents_rect.x(), right - image_size.width()),
         contents_rect.y() + Center(contents_rect.height(), image_size.height()),
@@ -374,9 +366,9 @@ void Tab::Layout() {
     } else {
       MaybeAdjustLeftForPinnedTab(&bounds, bounds.width());
     }
-    alert_indicator_->SetBoundsRect(bounds);
+    alert_indicator_button_->SetBoundsRect(bounds);
   }
-  alert_indicator_->SetVisible(showing_alert_indicator_);
+  alert_indicator_button_->SetVisible(showing_alert_indicator_);
 
   // Size the title to fill the remaining width and use all available height.
   bool show_title = ShouldRenderAsNormalTab();
@@ -394,7 +386,7 @@ void Tab::Layout() {
     }
     int title_right = contents_rect.right();
     if (showing_alert_indicator_) {
-      title_right = alert_indicator_->x() - after_title_padding;
+      title_right = alert_indicator_button_->x() - after_title_padding;
     } else if (showing_close_button_) {
       // Allow the title to overlay the close button's empty border padding.
       title_right = close_x - after_title_padding;
@@ -791,10 +783,23 @@ bool Tab::IsActive() const {
   return controller_->IsActiveTab(this);
 }
 
+int Tab::GetWidthOfLargestSelectableRegion() const {
+  // Assume the entire region to the left of the alert indicator and/or close
+  // buttons is available for click-to-select.  If neither are visible, the
+  // entire tab region is available.
+  const int indicator_left = alert_indicator_button_->GetVisible()
+                                 ? alert_indicator_button_->x()
+                                 : width();
+  const int close_button_left =
+      close_button_->GetVisible() ? close_button_->x() : width();
+  return std::min(indicator_left, close_button_left);
+}
+
 void Tab::ActiveStateChanged() {
   UpdateTabIconNeedsAttentionBlocked();
   UpdateForegroundColors();
   title_->SetFontList(tab_style_->GetFontList());
+  alert_indicator_button_->UpdateEnabledForMuteToggle();
   Layout();
 }
 
@@ -842,7 +847,7 @@ void Tab::SetData(TabRendererData data) {
   const auto new_alert_state = GetAlertStateToShow(data_.alert_state);
   const auto old_alert_state = GetAlertStateToShow(old.alert_state);
   if (new_alert_state != old_alert_state)
-    alert_indicator_->TransitionToAlertState(new_alert_state);
+    alert_indicator_button_->TransitionToAlertState(new_alert_state);
   if (old.pinned != data_.pinned)
     showing_alert_indicator_ = false;
 
@@ -933,7 +938,7 @@ void Tab::UpdateIconVisibility() {
 
   const bool has_favicon = data().show_icon;
   const bool has_alert_icon =
-      (alert_indicator_ ? alert_indicator_->showing_alert_state()
+      (alert_indicator_button_ ? alert_indicator_button_->showing_alert_state()
                         : GetAlertStateToShow(data().alert_state))
           .has_value();
 
@@ -950,7 +955,7 @@ void Tab::UpdateIconVisibility() {
 
   const bool touch_ui = ui::TouchUiController::Get()->touch_ui();
   const int favicon_width = gfx::kFaviconSize;
-  const int alert_icon_width = alert_indicator_->GetPreferredSize().width();
+  const int alert_icon_width = alert_indicator_button_->GetPreferredSize().width();
   // In case of touch optimized UI, the close button has an extra padding on the
   // left that needs to be considered.
   const int close_button_width =
@@ -1044,7 +1049,7 @@ void Tab::UpdateForegroundColors() {
 
   if (foreground_color_ != colors.foreground_color) {
     foreground_color_ = colors.foreground_color;
-    alert_indicator_->OnParentTabButtonColorChanged();
+    alert_indicator_button_->OnParentTabButtonColorChanged();
   }
 
   SchedulePaint();
diff --git a/chrome/browser/ui/views/tabs/tab.h b/chrome/browser/ui/views/tabs/tab.h
index 26cbfa1a25fb..44ff8d847639 100644
--- a/chrome/browser/ui/views/tabs/tab.h
+++ b/chrome/browser/ui/views/tabs/tab.h
@@ -27,7 +27,7 @@
 #include "ui/views/masked_targeter_delegate.h"
 #include "ui/views/view_observer.h"
 
-class AlertIndicator;
+class AlertIndicatorButton;
 class TabCloseButton;
 class TabController;
 class TabIcon;
@@ -120,6 +120,10 @@ class Tab : public gfx::AnimationDelegate,
   // Returns true if this tab is the active tab.
   bool IsActive() const;
 
+  // Returns the width of the largest part of the tab that is available for the
+  // user to click to select/activate the tab.
+  int GetWidthOfLargestSelectableRegion() const;
+
   // Notifies the AlertIndicatorButton that the active state of this tab has
   // changed.
   void ActiveStateChanged();
@@ -225,7 +229,7 @@ class Tab : public gfx::AnimationDelegate,
   bool closing_ = false;
 
   TabIcon* icon_ = nullptr;
-  AlertIndicator* alert_indicator_ = nullptr;
+  AlertIndicatorButton* alert_indicator_button_ = nullptr;
   TabCloseButton* close_button_ = nullptr;
 
   views::Label* title_;
diff --git a/chrome/browser/ui/views/tabs/tab_controller.h b/chrome/browser/ui/views/tabs/tab_controller.h
index 6b670221eda4..2b0bd0c436b8 100644
--- a/chrome/browser/ui/views/tabs/tab_controller.h
+++ b/chrome/browser/ui/views/tabs/tab_controller.h
@@ -58,6 +58,9 @@ class TabController {
   // Closes the tab.
   virtual void CloseTab(Tab* tab, CloseTabSource source) = 0;
 
+  // Toggles whether tab-wide audio muting is active.
+  virtual void ToggleTabAudioMute(Tab* tab) = 0;
+
   // Attempts to shift the specified tab to the right by one index.
   virtual void ShiftTabRight(Tab* tab) = 0;
 
diff --git a/chrome/browser/ui/views/tabs/tab_strip.cc b/chrome/browser/ui/views/tabs/tab_strip.cc
index b422070acf2f..7a94d7e337e6 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.cc
+++ b/chrome/browser/ui/views/tabs/tab_strip.cc
@@ -2815,6 +2815,12 @@ void TabStrip::CloseTabInternal(int model_index, CloseTabSource source) {
   controller_->CloseTab(model_index);
 }
 
+void TabStrip::ToggleTabAudioMute(Tab* tab) {
+  int model_index = GetModelIndexOf(tab);
+  if (IsValidModelIndex(model_index))
+    controller_->ToggleTabAudioMute(model_index);
+}
+
 void TabStrip::RemoveTabFromViewModel(int index) {
   Tab* closing_tab = tab_at(index);
   bool closing_tab_was_active = closing_tab->IsActive();
diff --git a/chrome/browser/ui/views/tabs/tab_strip.h b/chrome/browser/ui/views/tabs/tab_strip.h
index e0b3ed4d84e3..3a2ad4146fd2 100644
--- a/chrome/browser/ui/views/tabs/tab_strip.h
+++ b/chrome/browser/ui/views/tabs/tab_strip.h
@@ -277,6 +277,7 @@ class TabStrip : public views::AccessiblePaneView,
   void ToggleSelected(Tab* tab) override;
   void AddSelectionFromAnchorTo(Tab* tab) override;
   void CloseTab(Tab* tab, CloseTabSource source) override;
+  void ToggleTabAudioMute(Tab* tab) override;
   void ShiftTabLeft(Tab* tab) override;
   void ShiftTabRight(Tab* tab) override;
   void MoveTabFirst(Tab* tab) override;
diff --git a/chrome/browser/ui/views/tabs/tab_strip_controller.h b/chrome/browser/ui/views/tabs/tab_strip_controller.h
index 1041558d6a1a..c70bef826d1e 100644
--- a/chrome/browser/ui/views/tabs/tab_strip_controller.h
+++ b/chrome/browser/ui/views/tabs/tab_strip_controller.h
@@ -82,6 +82,9 @@ class TabStripController {
   // Closes the tab at the specified index in the model.
   virtual void CloseTab(int index) = 0;
 
+  // Toggles audio muting for the tab at the specified index in the model.
+  virtual void ToggleTabAudioMute(int index) = 0;
+
   // Adds a tab to an existing tab group.
   virtual void AddTabToGroup(int model_index,
                              const tab_groups::TabGroupId& group) = 0;
diff --git a/chrome/common/chrome_switches.cc b/chrome/common/chrome_switches.cc
index 11beb0e4400b..e37d0f43f901 100644
--- a/chrome/common/chrome_switches.cc
+++ b/chrome/common/chrome_switches.cc
@@ -301,6 +301,9 @@ const char kEnableNetBenchmarking[]         = "enable-net-benchmarking";
 const char kEnablePotentiallyAnnoyingSecurityFeatures[] =
     "enable-potentially-annoying-security-features";
 
+// Enables user control over muting tab audio from the tab strip.
+const char kEnableTabAudioMuting[]  = "enable-tab-audio-muting";
+
 // Name of the command line flag to force content verification to be on in one
 // of various modes.
 const char kExtensionContentVerification[] = "extension-content-verification";
diff --git a/chrome/common/chrome_switches.h b/chrome/common/chrome_switches.h
index 2199d95ac010..beb877f17925 100644
--- a/chrome/common/chrome_switches.h
+++ b/chrome/common/chrome_switches.h
@@ -96,6 +96,7 @@ extern const char kEnableExtensionActivityLogTesting[];
 extern const char kEnableNaCl[];
 extern const char kEnableNetBenchmarking[];
 extern const char kEnablePotentiallyAnnoyingSecurityFeatures[];
+extern const char kEnableTabAudioMuting[];
 extern const char kExtensionContentVerification[];
 extern const char kExtensionContentVerificationBootstrap[];
 extern const char kExtensionContentVerificationEnforce[];
diff --git a/chromecast/browser/extensions/api/tabs/tabs_constants.cc b/chromecast/browser/extensions/api/tabs/tabs_constants.cc
index eeabb9e849b8..df10b0b7f1c5 100644
--- a/chromecast/browser/extensions/api/tabs/tabs_constants.cc
+++ b/chromecast/browser/extensions/api/tabs/tabs_constants.cc
@@ -110,6 +110,8 @@ const char kSupportedInWindowsOnlyError[] = "Supported in Windows only";
 const char kInvalidWindowTypeError[] = "Invalid value for type";
 const char kInvalidWindowStateError[] = "Invalid value for state";
 const char kScreenshotsDisabled[] = "Taking screenshots has been disabled";
+const char kCannotUpdateMuteDisabled[] =
+    "Failed to update mute state for tab *, --* must be enabled";
 const char kCannotUpdateMuteCaptured[] =
     "Cannot update mute state for tab *, tab has audio or video currently "
     "being captured";
diff --git a/chromecast/browser/extensions/api/tabs/tabs_constants.h b/chromecast/browser/extensions/api/tabs/tabs_constants.h
index 57130c94b93b..f361549d62bd 100644
--- a/chromecast/browser/extensions/api/tabs/tabs_constants.h
+++ b/chromecast/browser/extensions/api/tabs/tabs_constants.h
@@ -102,6 +102,7 @@ extern const char kSupportedInWindowsOnlyError[];
 extern const char kInvalidWindowTypeError[];
 extern const char kInvalidWindowStateError[];
 extern const char kScreenshotsDisabled[];
+extern const char kCannotUpdateMuteDisabled[];
 extern const char kCannotUpdateMuteCaptured[];
 extern const char kCannotDetermineLanguageOfUnloadedTab[];
 extern const char kMissingLockWindowFullscreenPrivatePermission[];
