diff --git a/chrome/browser/reputation/reputation_web_contents_observer.cc b/chrome/browser/reputation/reputation_web_contents_observer.cc
index b4b14acac906..d88e4740bdce 100644
--- a/chrome/browser/reputation/reputation_web_contents_observer.cc
+++ b/chrome/browser/reputation/reputation_web_contents_observer.cc
@@ -17,10 +17,7 @@
 #include "components/lookalikes/core/lookalike_url_util.h"
 #include "components/security_state/core/features.h"
 #include "components/security_state/core/security_state.h"
-#include "components/ukm/content/source_url_recorder.h"
 #include "content/public/browser/navigation_entry.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "url/gurl.h"
 
 namespace {
@@ -29,35 +26,8 @@ namespace {
 const base::FeatureParam<bool> kEnableSuspiciousSiteChecks{
     &security_state::features::kSafetyTipUI, "suspicioussites", true};
 
-void RecordHeuristicsUKMData(ReputationCheckResult result,
-                             ukm::SourceId navigation_source_id,
-                             SafetyTipInteraction action) {
-  // If we didn't trigger any heuristics at all, we don't want to record UKM
-  // data.
-  if (!result.triggered_heuristics.triggered_any()) {
-    return;
-  }
-
-  ukm::builders::Security_SafetyTip(navigation_source_id)
-      .SetSafetyTipStatus(static_cast<int64_t>(result.safety_tip_status))
-      .SetSafetyTipInteraction(static_cast<int64_t>(action))
-      .SetTriggeredKeywordsHeuristics(
-          result.triggered_heuristics.keywords_heuristic_triggered)
-      .SetTriggeredLookalikeHeuristics(
-          result.triggered_heuristics.lookalike_heuristic_triggered)
-      .SetTriggeredServerSideBlocklist(
-          result.triggered_heuristics.blocklist_heuristic_triggered)
-      .SetUserPreviouslyIgnored(
-          result.safety_tip_status ==
-              security_state::SafetyTipStatus::kBadReputationIgnored ||
-          result.safety_tip_status ==
-              security_state::SafetyTipStatus::kLookalikeIgnored)
-      .Record(ukm::UkmRecorder::Get());
-}
-
 void OnSafetyTipClosed(ReputationCheckResult result,
                        base::Time start_time,
-                       ukm::SourceId navigation_source_id,
                        Profile* profile,
                        const GURL& url,
                        security_state::SafetyTipStatus status,
@@ -109,34 +79,7 @@ void OnSafetyTipClosed(ReputationCheckResult result,
   }
   if (warning_dismissed) {
     ReputationService::Get(profile)->SetUserIgnore(url);
-
-    // Record that the user dismissed the safety tip. kDismiss is recorded in
-    // all dismiss-like cases, which makes it easier to track overall dismissals
-    // without having to re-constitute from each bucket on how the user
-    // dismissed the safety tip. We additionally record a more specific action
-    // below (e.g. kDismissWithEsc).
-    base::UmaHistogramEnumeration(
-        security_state::GetSafetyTipHistogramName(
-            "Security.SafetyTips.Interaction", status),
-        SafetyTipInteraction::kDismiss);
-    base::UmaHistogramCustomTimes(
-        security_state::GetSafetyTipHistogramName(
-            std::string("Security.SafetyTips.OpenTime.Dismiss"),
-            result.safety_tip_status),
-        base::Time::Now() - start_time, base::TimeDelta::FromMilliseconds(1),
-        base::TimeDelta::FromHours(1), 100);
   }
-  base::UmaHistogramEnumeration(security_state::GetSafetyTipHistogramName(
-                                    "Security.SafetyTips.Interaction", status),
-                                action);
-  base::UmaHistogramCustomTimes(
-      security_state::GetSafetyTipHistogramName(
-          std::string("Security.SafetyTips.OpenTime.") + action_suffix,
-          result.safety_tip_status),
-      base::Time::Now() - start_time, base::TimeDelta::FromMilliseconds(1),
-      base::TimeDelta::FromHours(1), 100);
-
-  RecordHeuristicsUKMData(result, navigation_source_id, action);
 
   if (!safety_tip_close_callback_for_testing.is_null()) {
     std::move(safety_tip_close_callback_for_testing).Run();
@@ -233,17 +176,12 @@ void ReputationWebContentsObserver::DidFinishNavigation(
   last_committed_url_ = navigation_handle->GetURL();
 
   MaybeShowSafetyTip(
-      ukm::ConvertToSourceId(navigation_handle->GetNavigationId(),
-                             ukm::SourceIdType::NAVIGATION_ID),
-      /*called_from_visibility_check=*/false,
-      /*record_ukm_if_tip_not_shown=*/true);
+      /*called_from_visibility_check=*/false);
 }
 
 void ReputationWebContentsObserver::OnVisibilityChanged(
     content::Visibility visibility) {
-  MaybeShowSafetyTip(ukm::GetSourceIdForWebContentsDocument(web_contents()),
-                     /*called_from_visibility_check=*/true,
-                     /*record_ukm_if_tip_not_shown=*/false);
+  MaybeShowSafetyTip(/*called_from_visibility_check=*/true);
 }
 
 security_state::SafetyTipInfo
@@ -279,9 +217,7 @@ ReputationWebContentsObserver::ReputationWebContentsObserver(
 }
 
 void ReputationWebContentsObserver::MaybeShowSafetyTip(
-    ukm::SourceId navigation_source_id,
-    bool called_from_visibility_check,
-    bool record_ukm_if_tip_not_shown) {
+    bool called_from_visibility_check) {
   if (web_contents()->GetMainFrame()->GetVisibilityState() !=
       content::PageVisibilityState::kVisible) {
     MaybeCallReputationCheckCallback(false);
@@ -305,14 +241,12 @@ void ReputationWebContentsObserver::MaybeShowSafetyTip(
   service->GetReputationStatus(
       url, base::BindOnce(
                &ReputationWebContentsObserver::HandleReputationCheckResult,
-               weak_factory_.GetWeakPtr(), navigation_source_id,
-               called_from_visibility_check, record_ukm_if_tip_not_shown));
+               weak_factory_.GetWeakPtr(),
+               called_from_visibility_check));
 }
 
 void ReputationWebContentsObserver::HandleReputationCheckResult(
-    ukm::SourceId navigation_source_id,
     bool called_from_visibility_check,
-    bool record_ukm_if_tip_not_shown,
     ReputationCheckResult result) {
   UMA_HISTOGRAM_ENUMERATION("Security.SafetyTips.SafetyTipShown",
                             result.safety_tip_status);
@@ -347,8 +281,7 @@ void ReputationWebContentsObserver::HandleReputationCheckResult(
   if (result.safety_tip_status == security_state::SafetyTipStatus::kNone ||
       result.safety_tip_status ==
           security_state::SafetyTipStatus::kBadKeyword) {
-    FinalizeReputationCheckWhenTipNotShown(record_ukm_if_tip_not_shown, result,
-                                           navigation_source_id);
+    FinalizeReputationCheckWhenTipNotShown(result);
     return;
   }
 
@@ -358,8 +291,7 @@ void ReputationWebContentsObserver::HandleReputationCheckResult(
           security_state::SafetyTipStatus::kBadReputationIgnored) {
     UMA_HISTOGRAM_ENUMERATION("Security.SafetyTips.SafetyTipIgnoredPageLoad",
                               result.safety_tip_status);
-    FinalizeReputationCheckWhenTipNotShown(record_ukm_if_tip_not_shown, result,
-                                           navigation_source_id);
+    FinalizeReputationCheckWhenTipNotShown(result);
     return;
   }
 
@@ -376,8 +308,7 @@ void ReputationWebContentsObserver::HandleReputationCheckResult(
     }
 
     RecordPostFlagCheckHistogram(result.safety_tip_status);
-    FinalizeReputationCheckWhenTipNotShown(record_ukm_if_tip_not_shown, result,
-                                           navigation_source_id);
+    FinalizeReputationCheckWhenTipNotShown(result);
     return;
   }
 
@@ -385,7 +316,7 @@ void ReputationWebContentsObserver::HandleReputationCheckResult(
   ShowSafetyTipDialog(
       web_contents(), result.safety_tip_status, result.suggested_url,
       base::BindOnce(OnSafetyTipClosed, result, base::Time::Now(),
-                     navigation_source_id, profile_, result.url,
+                     profile_, result.url,
                      result.safety_tip_status,
                      std::move(safety_tip_close_callback_for_testing_)));
   MaybeCallReputationCheckCallback(true);
@@ -401,13 +332,7 @@ void ReputationWebContentsObserver::MaybeCallReputationCheckCallback(
 }
 
 void ReputationWebContentsObserver::FinalizeReputationCheckWhenTipNotShown(
-    bool record_ukm,
-    ReputationCheckResult result,
-    ukm::SourceId navigation_source_id) {
-  if (record_ukm) {
-    RecordHeuristicsUKMData(result, navigation_source_id,
-                            SafetyTipInteraction::kNotShown);
-  }
+    ReputationCheckResult result) {
   MaybeCallReputationCheckCallback(true);
 }
 
