diff --git a/components/download/internal/common/download_file_impl.cc b/components/download/internal/common/download_file_impl.cc
index 33bb7d1a8141..8bb838c3c1df 100644
--- a/components/download/internal/common/download_file_impl.cc
+++ b/components/download/internal/common/download_file_impl.cc
@@ -23,7 +23,6 @@
 #include "components/download/public/common/download_destination_observer.h"
 #include "components/download/public/common/download_features.h"
 #include "components/download/public/common/download_interrupt_reasons_utils.h"
-#include "components/download/public/common/download_stats.h"
 #include "crypto/secure_hash.h"
 #include "crypto/sha2.h"
 #include "mojo/public/c/system/types.h"
@@ -159,7 +158,6 @@ DownloadFileImpl::DownloadFileImpl(
       potential_file_length_(kUnknownContentLength),
       bytes_seen_(0),
       num_active_streams_(0),
-      record_stream_bandwidth_(false),
       bytes_seen_with_parallel_streams_(0),
       bytes_seen_without_parallel_streams_(0),
       is_paused_(false),
@@ -227,7 +225,6 @@ void DownloadFileImpl::Initialize(
   }
   download_start_ = base::TimeTicks::Now();
   last_update_time_ = download_start_;
-  record_stream_bandwidth_ = is_parallelizable;
 
   // Primarily to make reset to zero in restart visible to owner.
   SendUpdate();
@@ -544,7 +541,6 @@ bool DownloadFileImpl::InProgress() const {
 void DownloadFileImpl::Pause() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   is_paused_ = true;
-  record_stream_bandwidth_ = false;
   for (auto& stream : source_streams_)
     stream.second->ClearDataReadyCallback();
 }
@@ -704,13 +700,6 @@ void DownloadFileImpl::NotifyObserver(SourceStream* source_stream,
 }
 
 void DownloadFileImpl::OnDownloadCompleted() {
-  RecordFileBandwidth(bytes_seen_, base::TimeTicks::Now() - download_start_);
-  if (record_stream_bandwidth_) {
-    RecordParallelizableDownloadStats(
-        bytes_seen_with_parallel_streams_, download_time_with_parallel_streams_,
-        bytes_seen_without_parallel_streams_,
-        download_time_without_parallel_streams_, IsSparseFile());
-  }
   weak_factory_.InvalidateWeakPtrs();
   std::unique_ptr<crypto::SecureHash> hash_state = file_.Finish();
   update_timer_.reset();
