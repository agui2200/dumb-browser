diff --git a/chrome/browser/reputation/safety_tips_config.cc b/chrome/browser/reputation/safety_tips_config.cc
index 1ff18e544af9..2defa30c5077 100644
--- a/chrome/browser/reputation/safety_tips_config.cc
+++ b/chrome/browser/reputation/safety_tips_config.cc
@@ -5,13 +5,11 @@
 #include "chrome/browser/reputation/safety_tips_config.h"
 
 #include "base/no_destructor.h"
-#include "components/safe_browsing/core/db/v4_protocol_manager_util.h"
 #include "third_party/re2/src/re2/re2.h"
 #include "url/gurl.h"
 
 using chrome_browser_safety_tips::FlaggedPage;
 using chrome_browser_safety_tips::UrlPattern;
-using safe_browsing::V4ProtocolManagerUtil;
 
 namespace {
 
@@ -45,19 +43,14 @@ void UrlToSafetyTipPatterns(const GURL& url,
   std::string canon_host;
   std::string canon_path;
   std::string canon_query;
-  V4ProtocolManagerUtil::CanonicalizeUrl(url, &canon_host, &canon_path,
-                                         &canon_query);
 
   std::vector<std::string> hosts;
   if (url.HostIsIPAddress()) {
     hosts.push_back(url.host());
   } else {
-    V4ProtocolManagerUtil::GenerateHostVariantsToCheck(canon_host, &hosts);
   }
 
   std::vector<std::string> paths;
-  V4ProtocolManagerUtil::GeneratePathVariantsToCheck(canon_path, canon_query,
-                                                     &paths);
 
   for (const std::string& host : hosts) {
     for (const std::string& path : paths) {
@@ -69,16 +62,6 @@ void UrlToSafetyTipPatterns(const GURL& url,
 
 security_state::SafetyTipStatus FlagTypeToSafetyTipStatus(
     FlaggedPage::FlagType type) {
-  switch (type) {
-    case FlaggedPage::FlagType::FlaggedPage_FlagType_UNKNOWN:
-    case FlaggedPage::FlagType::FlaggedPage_FlagType_YOUNG_DOMAIN:
-      // Reached if component includes these flags, which might happen to
-      // support newer Chrome releases.
-      return security_state::SafetyTipStatus::kNone;
-    case FlaggedPage::FlagType::FlaggedPage_FlagType_BAD_REP:
-      return security_state::SafetyTipStatus::kBadReputation;
-  }
-  NOTREACHED();
   return security_state::SafetyTipStatus::kNone;
 }
 
