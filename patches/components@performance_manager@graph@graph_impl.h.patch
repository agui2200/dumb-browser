diff --git a/components/performance_manager/graph/graph_impl.h b/components/performance_manager/graph/graph_impl.h
index a68dc191b12a..53588e36a476 100644
--- a/components/performance_manager/graph/graph_impl.h
+++ b/components/performance_manager/graph/graph_impl.h
@@ -25,7 +25,6 @@
 #include "components/performance_manager/public/graph/node_attached_data.h"
 #include "components/performance_manager/public/render_process_host_id.h"
 #include "components/performance_manager/registered_objects.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 
 namespace performance_manager {
 
@@ -78,7 +77,6 @@ class GraphImpl : public Graph {
   std::vector<const PageNode*> GetAllPageNodes() const override;
   std::vector<const WorkerNode*> GetAllWorkerNodes() const override;
   bool IsEmpty() const override;
-  ukm::UkmRecorder* GetUkmRecorder() const override;
   NodeDataDescriberRegistry* GetNodeDataDescriberRegistry() const override;
   uintptr_t GetImplType() const override;
   const void* GetImpl() const override;
@@ -91,11 +89,6 @@ class GraphImpl : public Graph {
   // casts away constness. This will CHECK on an invalid cast.
   static GraphImpl* FromGraph(const Graph* graph);
 
-  void set_ukm_recorder(ukm::UkmRecorder* ukm_recorder) {
-    ukm_recorder_ = ukm_recorder;
-  }
-  ukm::UkmRecorder* ukm_recorder() const { return ukm_recorder_; }
-
   SystemNodeImpl* FindOrCreateSystemNodeImpl();
   std::vector<ProcessNodeImpl*> GetAllProcessNodeImpls() const;
   std::vector<FrameNodeImpl*> GetAllFrameNodeImpls() const;
@@ -185,7 +178,6 @@ class GraphImpl : public Graph {
   NodeSet nodes_;
   ProcessByPidMap processes_by_pid_;
   FrameById frames_by_id_;
-  ukm::UkmRecorder* ukm_recorder_ = nullptr;
 
   // Typed observers.
   // TODO(chrisha): We should wrap these containers in something that catches
