diff --git a/components/password_manager/core/browser/password_form_manager.cc b/components/password_manager/core/browser/password_form_manager.cc
index bc4a4a062588..f35c7fce3d54 100644
--- a/components/password_manager/core/browser/password_form_manager.cc
+++ b/components/password_manager/core/browser/password_form_manager.cc
@@ -28,6 +28,7 @@
 #include "components/password_manager/core/browser/password_feature_manager.h"
 #include "components/password_manager/core/browser/password_form.h"
 #include "components/password_manager/core/browser/password_form_filling.h"
+#include "components/password_manager/core/browser/password_form_metrics_recorder.h"
 #include "components/password_manager/core/browser/password_generation_manager.h"
 #include "components/password_manager/core/browser/password_manager_client.h"
 #include "components/password_manager/core/browser/password_manager_driver.h"
@@ -134,19 +135,15 @@ PasswordFormManager::PasswordFormManager(
     const base::WeakPtr<PasswordManagerDriver>& driver,
     const FormData& observed_form_data,
     FormFetcher* form_fetcher,
-    std::unique_ptr<PasswordSaveManager> password_save_manager,
-    scoped_refptr<PasswordFormMetricsRecorder> metrics_recorder)
+    std::unique_ptr<PasswordSaveManager> password_save_manager)
     : PasswordFormManager(client,
                           observed_form_data,
                           form_fetcher,
-                          std::move(password_save_manager),
-                          metrics_recorder) {
+                          std::move(password_save_manager)) {
   driver_ = driver;
   if (driver_)
     driver_id_ = driver->GetId();
 
-  metrics_recorder_->RecordFormSignature(
-      CalculateFormSignature(*observed_form()));
   // Do not fetch saved credentials for Chrome sync form, since nor filling nor
   // saving are supported.
   if (owned_form_fetcher_ &&
@@ -156,19 +153,18 @@ PasswordFormManager::PasswordFormManager(
   votes_uploader_.StoreInitialFieldValues(*observed_form());
 }
 
-PasswordFormManager::PasswordFormManager(
-    PasswordManagerClient* client,
-    PasswordStore::FormDigest observed_http_auth_digest,
-    FormFetcher* form_fetcher,
-    std::unique_ptr<PasswordSaveManager> password_save_manager)
-    : PasswordFormManager(client,
-                          observed_http_auth_digest,
-                          form_fetcher,
-                          std::move(password_save_manager),
-                          nullptr /* metrics_recorder */) {
-  if (owned_form_fetcher_)
-    owned_form_fetcher_->Fetch();
-}
+// PasswordFormManager::PasswordFormManager(
+//     PasswordManagerClient* client,
+//     PasswordStore::FormDigest observed_http_auth_digest,
+//     FormFetcher* form_fetcher,
+//     std::unique_ptr<PasswordSaveManager> password_save_manager)
+//     : PasswordFormManager(client,
+//                           observed_http_auth_digest,
+//                           form_fetcher,
+//                           std::move(password_save_manager)) {
+//   if (owned_form_fetcher_)
+//     owned_form_fetcher_->Fetch();
+// }
 
 PasswordFormManager::~PasswordFormManager() {
   form_fetcher_->RemoveConsumer(this);
@@ -251,10 +247,6 @@ metrics_util::CredentialSourceType PasswordFormManager::GetCredentialSource()
   return metrics_util::CredentialSourceType::kPasswordManager;
 }
 
-PasswordFormMetricsRecorder* PasswordFormManager::GetMetricsRecorder() {
-  return metrics_recorder_.get();
-}
-
 base::span<const InteractionsStats> PasswordFormManager::GetInteractionsStats()
     const {
   return base::make_span(form_fetcher_->GetInteractionsStats());
@@ -312,11 +304,6 @@ void PasswordFormManager::Save() {
 }
 
 void PasswordFormManager::Update(const PasswordForm& credentials_to_update) {
-  metrics_util::LogPasswordAcceptedSaveUpdateSubmissionIndicatorEvent(
-      parsed_submitted_form_->submission_event);
-  metrics_recorder_->SetSubmissionIndicatorEvent(
-      parsed_submitted_form_->submission_event);
-
   password_save_manager_->Update(credentials_to_update, observed_form(),
                                  *parsed_submitted_form_);
 
@@ -329,8 +316,6 @@ void PasswordFormManager::OnUpdateUsernameFromPrompt(
   parsed_submitted_form_->username_value = new_username;
   parsed_submitted_form_->username_element.clear();
 
-  metrics_recorder_->set_username_updated_in_bubble(true);
-
   // |has_username_edited_vote_| is true iff |new_username| was typed in another
   // field. Otherwise, |has_username_edited_vote_| is false and no vote will be
   // uploaded.
@@ -490,8 +475,6 @@ void PasswordFormManager::SetGenerationPopupWasShown(
     bool is_manual_generation) {
   votes_uploader_.set_generation_popup_was_shown(true);
   votes_uploader_.set_is_manual_generation(is_manual_generation);
-  metrics_recorder_->SetPasswordGenerationPopupShown(true,
-                                                     is_manual_generation);
 }
 
 void PasswordFormManager::SetGenerationElement(
@@ -593,7 +576,7 @@ std::unique_ptr<PasswordFormManager> PasswordFormManager::Clone() {
   // renderer process, to which the driver serves as an interface.
   auto result = base::WrapUnique(new PasswordFormManager(
       client_, observed_form_or_digest_, fetcher.get(),
-      password_save_manager_->Clone(), metrics_recorder_));
+      password_save_manager_->Clone()));
 
   // The constructor only can take a weak pointer to the fetcher, so moving the
   // owning one needs to happen explicitly.
@@ -618,7 +601,6 @@ std::unique_ptr<PasswordFormManager> PasswordFormManager::Clone() {
   }
   result->is_submitted_ = is_submitted_;
   result->password_save_manager_->Init(result->client_, result->form_fetcher_,
-                                       result->metrics_recorder_,
                                        &result->votes_uploader_);
   return result;
 }
@@ -631,8 +613,7 @@ PasswordFormManager::PasswordFormManager(
     : PasswordFormManager(client,
                           PasswordStore::FormDigest(*saved_form),
                           form_fetcher.get(),
-                          std::move(password_save_manager),
-                          nullptr /* metrics_recorder */) {
+                          std::move(password_save_manager)) {
   parsed_submitted_form_ = std::move(saved_form);
   is_submitted_ = true;
   owned_form_fetcher_ = std::move(form_fetcher);
@@ -699,8 +680,6 @@ bool PasswordFormManager::ProvisionallySave(
   DCHECK(DoesManage(submitted_form, driver));
   std::unique_ptr<PasswordForm> parsed_submitted_form =
       ParseFormAndMakeLogging(submitted_form, FormDataParser::Mode::kSaving);
-  RecordMetricOnReadonly(parser_.readonly_status(), !!parsed_submitted_form,
-                         FormDataParser::Mode::kSaving);
 
   bool have_password_to_save =
       parsed_submitted_form &&
@@ -716,14 +695,12 @@ bool PasswordFormManager::ProvisionallySave(
   submitted_form_ = submitted_form;
   is_submitted_ = true;
   CalculateFillingAssistanceMetric(submitted_form);
-  metrics_recorder_->set_possible_username_used(false);
   votes_uploader_.clear_single_username_vote_data();
 
   if (IsUsernameFirstFlowFeatureEnabled() &&
       parsed_submitted_form_->username_value.empty() &&
       UsePossibleUsername(possible_username)) {
     parsed_submitted_form_->username_value = possible_username->value;
-    metrics_recorder_->set_possible_username_used(true);
     if (possible_username->form_predictions) {
       votes_uploader_.set_single_username_vote_data(
           possible_username->renderer_id, *possible_username->form_predictions);
@@ -795,8 +772,6 @@ void PasswordFormManager::Fill() {
   // parse result, but to parse each time again.
   std::unique_ptr<PasswordForm> observed_password_form =
       ParseFormAndMakeLogging(*observed_form(), FormDataParser::Mode::kFilling);
-  RecordMetricOnReadonly(parser_.readonly_status(), !!observed_password_form,
-                         FormDataParser::Mode::kFilling);
   if (!observed_password_form)
     return;
 
@@ -827,13 +802,12 @@ void PasswordFormManager::Fill() {
   SendFillInformationToRenderer(
       client_, driver_.get(), *observed_password_form.get(),
       form_fetcher_->GetBestMatches(), form_fetcher_->GetFederatedMatches(),
-      form_fetcher_->GetPreferredMatch(), metrics_recorder_.get());
+      form_fetcher_->GetPreferredMatch());
 }
 
 void PasswordFormManager::FillForm(const FormData& observed_form_data) {
   uint32_t differences_bitmask =
       FindFormsDifferences(*observed_form(), observed_form_data);
-  metrics_recorder_->RecordFormChangeBitmask(differences_bitmask);
 
   if (differences_bitmask)
     *mutable_observed_form() = observed_form_data;
@@ -877,11 +851,9 @@ PasswordFormManager::PasswordFormManager(
     PasswordManagerClient* client,
     FormOrDigest observed_form_or_digest,
     FormFetcher* form_fetcher,
-    std::unique_ptr<PasswordSaveManager> password_save_manager,
-    scoped_refptr<PasswordFormMetricsRecorder> metrics_recorder)
+    std::unique_ptr<PasswordSaveManager> password_save_manager)
     : client_(client),
       observed_form_or_digest_(std::move(observed_form_or_digest)),
-      metrics_recorder_(metrics_recorder),
       owned_form_fetcher_(
           form_fetcher ? nullptr
                        : FormFetcherImpl::CreateFormFetcherImpl(
@@ -896,34 +868,10 @@ PasswordFormManager::PasswordFormManager(
       // |is_possible_change_password_form| in |votes_uploader_| constructor
       votes_uploader_(client, false /* is_possible_change_password_form */) {
   form_fetcher_->AddConsumer(this);
-  if (!metrics_recorder_) {
-    metrics_recorder_ = base::MakeRefCounted<PasswordFormMetricsRecorder>(
-        client_->IsCommittedMainFrameSecure(), client_->GetUkmSourceId(),
-        client_->GetPrefs());
-  }
-  password_save_manager_->Init(client_, form_fetcher_, metrics_recorder_,
+  password_save_manager_->Init(client_, form_fetcher_,
                                &votes_uploader_);
 }
 
-void PasswordFormManager::RecordMetricOnReadonly(
-    FormDataParser::ReadonlyPasswordFields readonly_status,
-    bool parsing_successful,
-    FormDataParser::Mode mode) {
-  // The reported value is combined of the |readonly_status| shifted by one bit
-  // to the left, and the success bit put in the least significant bit. Note:
-  // C++ guarantees that bool->int conversions map false to 0 and true to 1.
-  uint64_t value = static_cast<uint64_t>(parsing_successful) +
-                   (static_cast<uint64_t>(readonly_status) << 1);
-  switch (mode) {
-    case FormDataParser::Mode::kSaving:
-      metrics_recorder_->RecordReadonlyWhenSaving(value);
-      break;
-    case FormDataParser::Mode::kFilling:
-      metrics_recorder_->RecordReadonlyWhenFilling(value);
-      break;
-  }
-}
-
 void PasswordFormManager::ReportTimeBetweenStoreAndServerUMA() {
   if (!received_stored_credentials_time_.is_null()) {
     UMA_HISTOGRAM_TIMES("PasswordManager.TimeBetweenStoreAndServer",
@@ -984,12 +932,6 @@ void PasswordFormManager::CalculateFillingAssistanceMetric(
       saved_usernames.emplace(saved_form->username_value, saved_form->in_store);
     saved_passwords.emplace(saved_form->password_value, saved_form->in_store);
   }
-
-  metrics_recorder_->CalculateFillingAssistanceMetric(
-      submitted_form, saved_usernames, saved_passwords, IsBlacklisted(),
-      form_fetcher_->GetInteractionsStats(),
-      client_->GetPasswordFeatureManager()
-          ->ComputePasswordAccountStorageUsageLevel());
 }
 
 bool PasswordFormManager::UsePossibleUsername(
