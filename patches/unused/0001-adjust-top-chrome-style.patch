diff --git a/chrome/browser/ui/layout_constants.cc b/chrome/browser/ui/layout_constants.cc
index 3921f6e3ec21..75b6beb6e729 100644
--- a/chrome/browser/ui/layout_constants.cc
+++ b/chrome/browser/ui/layout_constants.cc
@@ -30,11 +30,7 @@ int GetLayoutConstant(LayoutConstant constant) {
   const bool touch_ui = ui::TouchUiController::Get()->touch_ui();
   switch (constant) {
     case BOOKMARK_BAR_HEIGHT:
-      // The fixed margin ensures the bookmark buttons appear centered relative
-      // to the white space above and below.
-      static constexpr int kBookmarkBarAttachedVerticalMargin = 4;
-      return GetLayoutConstant(BOOKMARK_BAR_BUTTON_HEIGHT) +
-             kBookmarkBarAttachedVerticalMargin;
+      return GetLayoutConstant(BOOKMARK_BAR_BUTTON_HEIGHT);
     case BOOKMARK_BAR_BUTTON_HEIGHT:
       return touch_ui ? 36 : 28;
     case BOOKMARK_BAR_NTP_HEIGHT:
@@ -54,7 +50,7 @@ int GetLayoutConstant(LayoutConstant constant) {
     case LOCATION_BAR_ELEMENT_PADDING:
       return touch_ui ? 3 : 2;
     case LOCATION_BAR_HEIGHT:
-      return touch_ui ? 36 : 28;
+      return touch_ui ? 36 : 26;
     case LOCATION_BAR_ICON_SIZE:
       return touch_ui ? 20 : 16;
     case TAB_AFTER_TITLE_PADDING:
@@ -64,7 +60,7 @@ int GetLayoutConstant(LayoutConstant constant) {
     case TAB_ALERT_INDICATOR_ICON_WIDTH:
       return touch_ui ? 12 : 16;
     case TAB_HEIGHT:
-      return (touch_ui ? 41 : 34) + GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP);
+      return (touch_ui ? 41 : 30) + GetLayoutConstant(TABSTRIP_TOOLBAR_OVERLAP);
     case TAB_PRE_TITLE_PADDING:
       return 8;
     case TAB_STACK_DISTANCE:
diff --git a/chrome/browser/ui/tabs/tab_style.cc b/chrome/browser/ui/tabs/tab_style.cc
index ccf846d78009..99b54c4e5a7c 100644
--- a/chrome/browser/ui/tabs/tab_style.cc
+++ b/chrome/browser/ui/tabs/tab_style.cc
@@ -15,7 +15,7 @@ constexpr int kSeparatorThickness = 1;
 
 // Returns the height of the separator between tabs.
 int GetSeparatorHeight() {
-  return ui::TouchUiController::Get()->touch_ui() ? 24 : 20;
+  return ui::TouchUiController::Get()->touch_ui() ? 24 : 18;
 }
 
 }  // namespace
diff --git a/chrome/browser/ui/views/frame/browser_non_client_frame_view_mac.mm b/chrome/browser/ui/views/frame/browser_non_client_frame_view_mac.mm
index 4c789d30f3b4..50b32437b2b3 100644
--- a/chrome/browser/ui/views/frame/browser_non_client_frame_view_mac.mm
+++ b/chrome/browser/ui/views/frame/browser_non_client_frame_view_mac.mm
@@ -155,7 +155,7 @@ FullscreenToolbarStyle GetUserPreferredToolbarStyle(bool always_show) {
 
   // Mac seems to reserve 1 DIP of the top inset as a resize handle.
   constexpr int kResizeHandleHeight = 1;
-  constexpr int kTabstripTopInset = 8;
+  constexpr int kTabstripTopInset = 4;
   int top_inset = kTabstripTopInset;
   if (EverHasVisibleBackgroundTabShapes()) {
     top_inset =
diff --git a/chrome/browser/ui/views/tabs/new_tab_button.cc b/chrome/browser/ui/views/tabs/new_tab_button.cc
index 80709a25950a..7d6a4491b3e1 100644
--- a/chrome/browser/ui/views/tabs/new_tab_button.cc
+++ b/chrome/browser/ui/views/tabs/new_tab_button.cc
@@ -64,7 +64,7 @@ int GetNewTabPromoStringSpecifier() {
 constexpr char NewTabButton::kClassName[];
 
 // static
-const gfx::Size NewTabButton::kButtonSize{28, 28};
+const gfx::Size NewTabButton::kButtonSize{24, 24};
 
 class NewTabButton::HighlightPathGenerator
     : public views::HighlightPathGenerator {
diff --git a/chrome/browser/ui/views/tabs/tab_style_views.cc b/chrome/browser/ui/views/tabs/tab_style_views.cc
index ee91707b46ab..b8945e94537f 100644
--- a/chrome/browser/ui/views/tabs/tab_style_views.cc
+++ b/chrome/browser/ui/views/tabs/tab_style_views.cc
@@ -220,7 +220,7 @@ SkPath GM2TabStyle::GetPath(PathType path_type,
 
   // Calculate the corner radii. Note that corner radius is based on original
   // tab width (in DIP), not our new, scaled-and-aligned bounds.
-  const float radius = GetTopCornerRadiusForWidth(tab_->width()) * scale;
+  const float radius = 4 * scale;
   float top_radius = radius;
   float bottom_radius = radius;
 
