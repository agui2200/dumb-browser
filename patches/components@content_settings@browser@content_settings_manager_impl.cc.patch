diff --git a/components/content_settings/browser/content_settings_manager_impl.cc b/components/content_settings/browser/content_settings_manager_impl.cc
index 59fb642150553..a3e4c08e84ce9 100644
--- a/components/content_settings/browser/content_settings_manager_impl.cc
+++ b/components/content_settings/browser/content_settings_manager_impl.cc
@@ -7,8 +7,6 @@
 #include "base/memory/ptr_util.h"
 #include "components/content_settings/browser/page_specific_content_settings.h"
 #include "components/content_settings/core/browser/cookie_settings.h"
-#include "components/page_load_metrics/browser/metrics_web_contents_observer.h"
-#include "components/page_load_metrics/browser/page_load_metrics_observer.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_process_host.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
@@ -18,28 +16,6 @@ using content_settings::PageSpecificContentSettings;
 namespace content_settings {
 namespace {
 
-void OnStorageAccessed(int process_id,
-                       int frame_id,
-                       const GURL& origin_url,
-                       const GURL& top_origin_url,
-                       bool blocked_by_policy,
-                       page_load_metrics::StorageType storage_type) {
-  content::RenderFrameHost* frame =
-      content::RenderFrameHost::FromID(process_id, frame_id);
-  content::WebContents* web_contents =
-      content::WebContents::FromRenderFrameHost(frame);
-  if (!web_contents)
-    return;
-
-  page_load_metrics::MetricsWebContentsObserver* metrics_observer =
-      page_load_metrics::MetricsWebContentsObserver::FromWebContents(
-          web_contents);
-  if (metrics_observer) {
-    metrics_observer->OnStorageAccessed(origin_url, top_origin_url,
-                                        blocked_by_policy, storage_type);
-  }
-}
-
 void OnDomStorageAccessed(int process_id,
                           int frame_id,
                           const GURL& origin_url,
@@ -101,38 +77,22 @@ void ContentSettingsManagerImpl::AllowStorageAccess(
     case StorageType::LOCAL_STORAGE:
       OnDomStorageAccessed(render_process_id_, render_frame_id, url,
                            top_frame_origin.GetURL(), true, !allowed);
-      OnStorageAccessed(render_process_id_, render_frame_id, url,
-                        top_frame_origin.GetURL(), !allowed,
-                        page_load_metrics::StorageType::kLocalStorage);
       break;
     case StorageType::SESSION_STORAGE:
       OnDomStorageAccessed(render_process_id_, render_frame_id, url,
                            top_frame_origin.GetURL(), false, !allowed);
-      OnStorageAccessed(render_process_id_, render_frame_id, url,
-                        top_frame_origin.GetURL(), !allowed,
-                        page_load_metrics::StorageType::kSessionStorage);
-
       break;
     case StorageType::FILE_SYSTEM:
       PageSpecificContentSettings::FileSystemAccessed(
           render_process_id_, render_frame_id, url, !allowed);
-      OnStorageAccessed(render_process_id_, render_frame_id, url,
-                        top_frame_origin.GetURL(), !allowed,
-                        page_load_metrics::StorageType::kFileSystem);
       break;
     case StorageType::INDEXED_DB:
       PageSpecificContentSettings::IndexedDBAccessed(
           render_process_id_, render_frame_id, url, !allowed);
-      OnStorageAccessed(render_process_id_, render_frame_id, url,
-                        top_frame_origin.GetURL(), !allowed,
-                        page_load_metrics::StorageType::kIndexedDb);
       break;
     case StorageType::CACHE:
       PageSpecificContentSettings::CacheStorageAccessed(
           render_process_id_, render_frame_id, url, !allowed);
-      OnStorageAccessed(render_process_id_, render_frame_id, url,
-                        top_frame_origin.GetURL(), !allowed,
-                        page_load_metrics::StorageType::kCacheStorage);
       break;
     case StorageType::WEB_LOCKS:
       // State not persisted, no need to record anything.
