diff --git a/base/metrics/histogram_functions.cc b/base/metrics/histogram_functions.cc
index 3aa89e39fc6a..e40bb971ec10 100644
--- a/base/metrics/histogram_functions.cc
+++ b/base/metrics/histogram_functions.cc
@@ -12,31 +12,17 @@
 namespace base {
 
 void UmaHistogramBoolean(const std::string& name, bool sample) {
-  HistogramBase* histogram = BooleanHistogram::FactoryGet(
-      name, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramBoolean(const char* name, bool sample) {
-  HistogramBase* histogram = BooleanHistogram::FactoryGet(
-      name, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramExactLinear(const std::string& name,
                              int sample,
                              int value_max) {
-  HistogramBase* histogram =
-      LinearHistogram::FactoryGet(name, 1, value_max, value_max + 1,
-                                  HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramExactLinear(const char* name, int sample, int value_max) {
-  HistogramBase* histogram =
-      LinearHistogram::FactoryGet(name, 1, value_max, value_max + 1,
-                                  HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramPercentage(const std::string& name, int percent) {
@@ -52,9 +38,6 @@ void UmaHistogramCustomCounts(const std::string& name,
                               int min,
                               int max,
                               int buckets) {
-  HistogramBase* histogram = Histogram::FactoryGet(
-      name, min, max, buckets, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramCustomCounts(const char* name,
@@ -62,9 +45,6 @@ void UmaHistogramCustomCounts(const char* name,
                               int min,
                               int max,
                               int buckets) {
-  HistogramBase* histogram = Histogram::FactoryGet(
-      name, min, max, buckets, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramCounts100(const std::string& name, int sample) {
@@ -120,9 +100,6 @@ void UmaHistogramCustomTimes(const std::string& name,
                              TimeDelta min,
                              TimeDelta max,
                              int buckets) {
-  HistogramBase* histogram = Histogram::FactoryTimeGet(
-      name, min, max, buckets, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->AddTimeMillisecondsGranularity(sample);
 }
 
 void UmaHistogramCustomTimes(const char* name,
@@ -130,9 +107,6 @@ void UmaHistogramCustomTimes(const char* name,
                              TimeDelta min,
                              TimeDelta max,
                              int buckets) {
-  HistogramBase* histogram = Histogram::FactoryTimeGet(
-      name, min, max, buckets, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->AddTimeMillisecondsGranularity(sample);
 }
 
 void UmaHistogramTimes(const std::string& name, TimeDelta sample) {
@@ -180,9 +154,6 @@ void UmaHistogramCustomMicrosecondsTimes(const std::string& name,
                                          TimeDelta min,
                                          TimeDelta max,
                                          int buckets) {
-  HistogramBase* histogram = Histogram::FactoryMicrosecondsTimeGet(
-      name, min, max, buckets, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->AddTimeMicrosecondsGranularity(sample);
 }
 
 void UmaHistogramCustomMicrosecondsTimes(const char* name,
@@ -190,9 +161,6 @@ void UmaHistogramCustomMicrosecondsTimes(const char* name,
                                          TimeDelta min,
                                          TimeDelta max,
                                          int buckets) {
-  HistogramBase* histogram = Histogram::FactoryMicrosecondsTimeGet(
-      name, min, max, buckets, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->AddTimeMicrosecondsGranularity(sample);
 }
 
 void UmaHistogramMicrosecondsTimes(const std::string& name, TimeDelta sample) {
@@ -250,15 +218,9 @@ void UmaHistogramMemoryLargeMB(const char* name, int sample) {
 }
 
 void UmaHistogramSparse(const std::string& name, int sample) {
-  HistogramBase* histogram = SparseHistogram::FactoryGet(
-      name, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 void UmaHistogramSparse(const char* name, int sample) {
-  HistogramBase* histogram = SparseHistogram::FactoryGet(
-      name, HistogramBase::kUmaTargetedHistogramFlag);
-  histogram->Add(sample);
 }
 
 }  // namespace base
