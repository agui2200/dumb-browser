diff --git a/media/blink/webmediaplayer_impl.h b/media/blink/webmediaplayer_impl.h
index bcb8e52a6ddb..9635c8fec6e4 100644
--- a/media/blink/webmediaplayer_impl.h
+++ b/media/blink/webmediaplayer_impl.h
@@ -45,7 +45,6 @@
 #include "media/blink/webmediaplayer_params.h"
 #include "media/filters/pipeline_controller.h"
 #include "media/learning/common/media_learning_tasks.h"
-#include "media/mojo/mojom/playback_events_recorder.mojom.h"
 #include "media/renderers/paint_canvas_video_renderer.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "services/media_session/public/cpp/media_position.h"
@@ -63,7 +62,6 @@ class WebAudioSourceProviderImpl;
 class WebLocalFrame;
 class WebMediaPlayerClient;
 class WebMediaPlayerEncryptedMediaClient;
-class WatchTimeReporter;
 }  // namespace blink
 
 namespace base {
@@ -462,9 +460,6 @@ class MEDIA_BLINK_EXPORT WebMediaPlayerImpl
   // thus we think we are idle forever).
   bool IsPrerollAttemptNeeded();
 
-  void CreateWatchTimeReporter();
-  void UpdateSecondaryProperties();
-
   void CreateVideoDecodeStatsReporter();
 
   // Returns true if the player is hidden.
@@ -859,7 +854,6 @@ class MEDIA_BLINK_EXPORT WebMediaPlayerImpl
   base::OneShotTimer background_pause_timer_;
 
   // Monitors the watch time of the played content.
-  std::unique_ptr<blink::WatchTimeReporter> watch_time_reporter_;
   AudioDecoderType audio_decoder_type_ = AudioDecoderType::kUnknown;
   VideoDecoderType video_decoder_type_ = VideoDecoderType::kUnknown;
 
@@ -873,9 +867,6 @@ class MEDIA_BLINK_EXPORT WebMediaPlayerImpl
 
   bool have_reported_time_to_play_ready_ = false;
 
-  // Records pipeline statistics for describing media capabilities.
-  std::unique_ptr<VideoDecodeStatsReporter> video_decode_stats_reporter_;
-
   // Elapsed time since we've last reached BUFFERING_HAVE_NOTHING.
   std::unique_ptr<base::ElapsedTimer> underflow_timer_;
 
@@ -970,9 +961,6 @@ class MEDIA_BLINK_EXPORT WebMediaPlayerImpl
   // base::CancellableOnceClosure.
   bool is_background_status_change_cancelled_ = true;
 
-  mojo::Remote<mojom::MediaMetricsProvider> media_metrics_provider_;
-  mojo::Remote<mojom::PlaybackEventsRecorder> playback_events_recorder_;
-
   base::Optional<ReadyState> stale_state_override_for_testing_;
 
   // True if we attempt to start the media pipeline in a suspended state for
