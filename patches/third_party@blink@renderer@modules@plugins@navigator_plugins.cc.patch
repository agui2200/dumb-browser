diff --git a/third_party/blink/renderer/modules/plugins/navigator_plugins.cc b/third_party/blink/renderer/modules/plugins/navigator_plugins.cc
index f154e3588e87..6fbad8857f9b 100644
--- a/third_party/blink/renderer/modules/plugins/navigator_plugins.cc
+++ b/third_party/blink/renderer/modules/plugins/navigator_plugins.cc
@@ -4,15 +4,11 @@
 
 #include "third_party/blink/renderer/modules/plugins/navigator_plugins.h"
 
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_token_builder.h"
 #include "third_party/blink/renderer/core/frame/local_dom_window.h"
 #include "third_party/blink/renderer/core/frame/navigator.h"
 #include "third_party/blink/renderer/modules/plugins/dom_mime_type.h"
 #include "third_party/blink/renderer/modules/plugins/dom_mime_type_array.h"
 #include "third_party/blink/renderer/modules/plugins/dom_plugin_array.h"
-#include "third_party/blink/renderer/platform/privacy_budget/identifiability_digest_helpers.h"
 
 namespace blink {
 
@@ -52,73 +48,17 @@ bool NavigatorPlugins::javaEnabled(Navigator& navigator) {
   return false;
 }
 
-namespace {
-
-void RecordPlugins(LocalDOMWindow* window, DOMPluginArray* plugins) {
-  if (!IdentifiabilityStudySettings::Get()->IsWebFeatureAllowed(
-          WebFeature::kNavigatorPlugins) ||
-      !window) {
-    return;
-  }
-  IdentifiableTokenBuilder builder;
-  for (unsigned i = 0; i < plugins->length(); i++) {
-    DOMPlugin* plugin = plugins->item(i);
-    builder.AddToken(IdentifiabilityBenignStringToken(plugin->name()));
-    builder.AddToken(IdentifiabilityBenignStringToken(plugin->description()));
-    builder.AddToken(IdentifiabilityBenignStringToken(plugin->filename()));
-    for (unsigned j = 0; j < plugin->length(); j++) {
-      DOMMimeType* mimeType = plugin->item(j);
-      builder.AddToken(IdentifiabilityBenignStringToken(mimeType->type()));
-      builder.AddToken(
-          IdentifiabilityBenignStringToken(mimeType->description()));
-      builder.AddToken(IdentifiabilityBenignStringToken(mimeType->suffixes()));
-    }
-  }
-  IdentifiabilityMetricBuilder(window->UkmSourceID())
-      .SetWebfeature(WebFeature::kNavigatorPlugins, builder.GetToken())
-      .Record(window->UkmRecorder());
-}
-
-void RecordMimeTypes(LocalDOMWindow* window, DOMMimeTypeArray* mime_types) {
-  constexpr IdentifiableSurface surface = IdentifiableSurface::FromTypeAndToken(
-      IdentifiableSurface::Type::kWebFeature, WebFeature::kNavigatorMimeTypes);
-  if (!IdentifiabilityStudySettings::Get()->ShouldSample(surface) || !window) {
-    return;
-  }
-  IdentifiableTokenBuilder builder;
-  for (unsigned i = 0; i < mime_types->length(); i++) {
-    DOMMimeType* mime_type = mime_types->item(i);
-    builder.AddToken(IdentifiabilityBenignStringToken(mime_type->type()));
-    builder.AddToken(
-        IdentifiabilityBenignStringToken(mime_type->description()));
-    builder.AddToken(IdentifiabilityBenignStringToken(mime_type->suffixes()));
-    DOMPlugin* plugin = mime_type->enabledPlugin();
-    if (plugin) {
-      builder.AddToken(IdentifiabilityBenignStringToken(plugin->name()));
-      builder.AddToken(IdentifiabilityBenignStringToken(plugin->filename()));
-      builder.AddToken(IdentifiabilityBenignStringToken(plugin->description()));
-    }
-  }
-  IdentifiabilityMetricBuilder(window->UkmSourceID())
-      .Set(surface, builder.GetToken())
-      .Record(window->UkmRecorder());
-}
-
-}  // namespace
-
 DOMPluginArray* NavigatorPlugins::plugins(LocalDOMWindow* window) const {
   if (!plugins_)
     plugins_ = MakeGarbageCollected<DOMPluginArray>(window);
 
   DOMPluginArray* result = plugins_.Get();
-  RecordPlugins(window, result);
   return result;
 }
 
 DOMMimeTypeArray* NavigatorPlugins::mimeTypes(LocalDOMWindow* window) const {
   if (!mime_types_) {
     mime_types_ = MakeGarbageCollected<DOMMimeTypeArray>(window);
-    RecordMimeTypes(window, mime_types_.Get());
   }
   return mime_types_.Get();
 }
