diff --git a/components/policy/core/common/cloud/cloud_policy_service.cc b/components/policy/core/common/cloud/cloud_policy_service.cc
index d6f0fb24e709..cdd5f2991f1e 100644
--- a/components/policy/core/common/cloud/cloud_policy_service.cc
+++ b/components/policy/core/common/cloud/cloud_policy_service.cc
@@ -90,7 +90,6 @@ void CloudPolicyService::OnPolicyFetched(CloudPolicyClient* client) {
   if (policy) {
     if (refresh_state_ != REFRESH_NONE)
       refresh_state_ = REFRESH_POLICY_STORE;
-    policy_pending_validation_signature_ = policy->policy_data_signature();
     store_->Store(*policy, client->fetched_invalidation_version());
   } else {
     RefreshCompleted(false);
@@ -164,8 +163,6 @@ void CloudPolicyService::OnStoreLoaded(CloudPolicyStore* store) {
     RefreshCompleted(true);
 
   CheckInitializationCompleted();
-
-  ReportValidationResult(store);
 }
 
 void CloudPolicyService::OnStoreError(CloudPolicyStore* store) {
@@ -174,55 +171,6 @@ void CloudPolicyService::OnStoreError(CloudPolicyStore* store) {
   if (refresh_state_ == REFRESH_POLICY_STORE)
     RefreshCompleted(false);
   CheckInitializationCompleted();
-  ReportValidationResult(store);
-}
-
-void CloudPolicyService::ReportValidationResult(CloudPolicyStore* store) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-
-  const CloudPolicyValidatorBase::ValidationResult* validation_result =
-      store->validation_result();
-  if (!validation_result)
-    return;
-
-  if (policy_pending_validation_signature_.empty() ||
-      policy_pending_validation_signature_ !=
-          validation_result->policy_data_signature) {
-    return;
-  }
-  policy_pending_validation_signature_.clear();
-
-  if (validation_result->policy_token.empty())
-    return;
-
-  if (validation_result->status ==
-          CloudPolicyValidatorBase::Status::VALIDATION_OK &&
-      validation_result->value_validation_issues.empty()) {
-    return;
-  }
-
-  // TODO(hendrich,pmarko): https://crbug.com/794848
-  // Update the status to reflect value validation errors/warnings. For now we
-  // don't want to reject policies on value validation errors, therefore the
-  // validation result will be |VALIDATION_OK| even though we might have value
-  // validation errors/warnings.
-  // Also update UploadPolicyValidationReport to only receive |policy_type_| and
-  // |validation_result|.
-  CloudPolicyValidatorBase::Status status = validation_result->status;
-  if (status == CloudPolicyValidatorBase::Status::VALIDATION_OK) {
-    status = CloudPolicyValidatorBase::Status::VALIDATION_VALUE_WARNING;
-    for (const ValueValidationIssue& issue :
-         validation_result->value_validation_issues) {
-      if (issue.severity == ValueValidationIssue::Severity::kError) {
-        status = CloudPolicyValidatorBase::Status::VALIDATION_VALUE_ERROR;
-        break;
-      }
-    }
-  }
-
-  client_->UploadPolicyValidationReport(
-      status, validation_result->value_validation_issues, policy_type_,
-      validation_result->policy_token);
 }
 
 void CloudPolicyService::CheckInitializationCompleted() {
