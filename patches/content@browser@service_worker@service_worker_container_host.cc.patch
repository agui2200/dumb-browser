diff --git a/content/browser/service_worker/service_worker_container_host.cc b/content/browser/service_worker/service_worker_container_host.cc
index 0b1981efd9eb..456d07b55e4f 100644
--- a/content/browser/service_worker/service_worker_container_host.cc
+++ b/content/browser/service_worker/service_worker_container_host.cc
@@ -745,8 +745,6 @@ void ServiceWorkerContainerHost::OnBeginNavigationCommit(
     int container_process_id,
     int container_frame_id,
     const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter,
     ukm::SourceId document_ukm_source_id) {
   DCHECK_CURRENTLY_ON(ServiceWorkerContext::GetCoreThreadId());
   DCHECK(IsContainerForWindowClient());
@@ -763,19 +761,12 @@ void ServiceWorkerContainerHost::OnBeginNavigationCommit(
 
   DCHECK(!cross_origin_embedder_policy_.has_value());
   cross_origin_embedder_policy_ = cross_origin_embedder_policy;
-  coep_reporter_.Bind(std::move(coep_reporter));
-
-  mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-      coep_reporter_to_be_passed;
-  coep_reporter_->Clone(
-      coep_reporter_to_be_passed.InitWithNewPipeAndPassReceiver());
 
   if (controller_ && controller_->fetch_handler_existence() ==
                          ServiceWorkerVersion::FetchHandlerExistence::EXISTS) {
     DCHECK(pending_controller_receiver_);
     controller_->controller()->Clone(std::move(pending_controller_receiver_),
-                                     cross_origin_embedder_policy_.value(),
-                                     std::move(coep_reporter_to_be_passed));
+                                     cross_origin_embedder_policy_.value());
   }
 
   auto* rfh = RenderFrameHostImpl::FromID(container_process_id, frame_id());
@@ -815,8 +806,7 @@ void ServiceWorkerContainerHost::CompleteWebWorkerPreparation(
     DCHECK(pending_controller_receiver_);
     // TODO(https://crbug.com/999049): Plumb the COEP reporter.
     controller_->controller()->Clone(std::move(pending_controller_receiver_),
-                                     cross_origin_embedder_policy_.value(),
-                                     mojo::NullRemote());
+                                     cross_origin_embedder_policy_.value());
   }
 
   DCHECK_EQ(ukm_source_id_, ukm::kInvalidSourceId);
@@ -918,22 +908,13 @@ ServiceWorkerContainerHost::GetRemoteControllerServiceWorker() {
     pending_controller_receiver_ =
         remote_controller.BindNewPipeAndPassReceiver();
   } else {
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter_to_be_passed;
-    if (coep_reporter_) {
-      DCHECK(IsContainerForWindowClient());
-      coep_reporter_->Clone(
-          coep_reporter_to_be_passed.InitWithNewPipeAndPassReceiver());
-    } else {
-      // TODO(https://crbug.com/999049): Implement DedicatedWorker and
-      // SharedWorker cases.
-      DCHECK(IsContainerForWorkerClient());
-    }
+    // TODO(https://crbug.com/999049): Implement DedicatedWorker and
+    // SharedWorker cases.
+    DCHECK(IsContainerForWorkerClient());    
 
     controller_->controller()->Clone(
         remote_controller.BindNewPipeAndPassReceiver(),
-        cross_origin_embedder_policy_.value(),
-        std::move(coep_reporter_to_be_passed));
+        cross_origin_embedder_policy_.value());
   }
   return remote_controller;
 }
@@ -1302,21 +1283,12 @@ void ServiceWorkerContainerHost::StartControllerComplete(
   if (status == blink::ServiceWorkerStatusCode::kOk) {
     DCHECK(is_response_committed());
 
-    mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-        coep_reporter_to_be_passed;
-    if (coep_reporter_) {
-      DCHECK(IsContainerForWindowClient());
-      coep_reporter_->Clone(
-          coep_reporter_to_be_passed.InitWithNewPipeAndPassReceiver());
-    } else {
-      // TODO(https://crbug.com/999049): Implement DedicatedWorker and
-      // SharedWorker cases.
-      DCHECK(IsContainerForWorkerClient());
-    }
+    // TODO(https://crbug.com/999049): Implement DedicatedWorker and
+    // SharedWorker cases.
+    DCHECK(IsContainerForWorkerClient());
 
     controller_->controller()->Clone(std::move(receiver),
-                                     cross_origin_embedder_policy_.value(),
-                                     std::move(coep_reporter_to_be_passed));
+                                     cross_origin_embedder_policy_.value());
   }
 }
 
