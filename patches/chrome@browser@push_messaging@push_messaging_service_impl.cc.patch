diff --git a/chrome/browser/push_messaging/push_messaging_service_impl.cc b/chrome/browser/push_messaging/push_messaging_service_impl.cc
index 912dd07b21881..fbfcb08da5ae5 100644
--- a/chrome/browser/push_messaging/push_messaging_service_impl.cc
+++ b/chrome/browser/push_messaging/push_messaging_service_impl.cc
@@ -382,70 +382,10 @@ void PushMessagingServiceImpl::OnMessage(const std::string& app_id,
       message.decrypted ? message.raw_data : std::string());
 
   if (IsPermissionSet(app_identifier.origin())) {
-    messages_pending_permission_check_.emplace(app_id, message);
-    // Start abusive origin verification only if no other verification is in
-    // progress.
-    if (!abusive_origin_revocation_request_)
-      CheckOriginForAbuseAndDispatchNextMessage();
-  } else {
-    // Drop message and unregister if origin has lost push permission.
-    DeliverMessageCallback(app_id, app_identifier.origin(),
-                           app_identifier.service_worker_registration_id(),
-                           message, message_handled_callback(),
-                           blink::mojom::PushEventStatus::PERMISSION_DENIED);
-  }
-}
-
-void PushMessagingServiceImpl::CheckOriginForAbuseAndDispatchNextMessage() {
-  if (messages_pending_permission_check_.empty())
-    return;
+    const GURL& origin = app_identifier.origin();
+    int64_t service_worker_registration_id =
+    app_identifier.service_worker_registration_id();
 
-  const std::string app_id =
-      std::move(messages_pending_permission_check_.front().app_id);
-  const gcm::IncomingMessage message =
-      std::move(messages_pending_permission_check_.front().message);
-  messages_pending_permission_check_.pop();
-
-  PushMessagingAppIdentifier app_identifier =
-      PushMessagingAppIdentifier::FindByAppId(profile_, app_id);
-
-  if (app_identifier.is_null()) {
-    CheckOriginForAbuseAndDispatchNextMessage();
-    return;
-  }
-
-  DCHECK(!abusive_origin_revocation_request_)
-      << "Create one Abusive Origin Revocation instance per request.";
-  abusive_origin_revocation_request_ =
-      std::make_unique<AbusiveOriginPermissionRevocationRequest>(
-          profile_, app_identifier.origin(),
-          base::BindOnce(&PushMessagingServiceImpl::OnCheckedOriginForAbuse,
-                         weak_factory_.GetWeakPtr(), app_id, message));
-}
-
-void PushMessagingServiceImpl::OnCheckedOriginForAbuse(
-    const std::string& app_id,
-    const gcm::IncomingMessage& message,
-    AbusiveOriginPermissionRevocationRequest::Outcome outcome) {
-  abusive_origin_revocation_request_.reset();
-
-  PushMessagingAppIdentifier app_identifier =
-      PushMessagingAppIdentifier::FindByAppId(profile_, app_id);
-
-  if (app_identifier.is_null()) {
-    CheckOriginForAbuseAndDispatchNextMessage();
-    return;
-  }
-
-  const GURL& origin = app_identifier.origin();
-  int64_t service_worker_registration_id =
-      app_identifier.service_worker_registration_id();
-
-  // It is possible that Notifications permission has been revoked by an user
-  // during abusive origin verification.
-  if (outcome == AbusiveOriginPermissionRevocationRequest::Outcome::
-                     PERMISSION_NOT_REVOKED &&
-      IsPermissionSet(origin)) {
     // The payload of a push message can be valid with content, valid with empty
     // content, or null.
     absl::optional<std::string> payload;
@@ -459,25 +399,13 @@ void PushMessagingServiceImpl::OnCheckedOriginForAbuse(
                        weak_factory_.GetWeakPtr(), app_id, origin,
                        service_worker_registration_id, message,
                        message_handled_callback()));
-
-    // Inform tests observing message dispatching about the event.
-    if (!message_dispatched_callback_for_testing_.is_null()) {
-      message_dispatched_callback_for_testing_.Run(
-          app_id, origin, service_worker_registration_id, std::move(payload));
-    }
   } else {
     // Drop message and unregister if origin has lost push permission.
-    DeliverMessageCallback(
-        app_id, app_identifier.origin(), service_worker_registration_id,
-        message, message_handled_callback(),
-        outcome == AbusiveOriginPermissionRevocationRequest::Outcome::
-                       PERMISSION_NOT_REVOKED
-            ? blink::mojom::PushEventStatus::PERMISSION_DENIED
-            : blink::mojom::PushEventStatus::PERMISSION_REVOKED_ABUSIVE);
+    DeliverMessageCallback(app_id, app_identifier.origin(),
+                           app_identifier.service_worker_registration_id(),
+                           message, message_handled_callback(),
+                           blink::mojom::PushEventStatus::PERMISSION_DENIED);
   }
-
-  // Verify the next message in the queue.
-  CheckOriginForAbuseAndDispatchNextMessage();
 }
 
 void PushMessagingServiceImpl::DeliverMessageCallback(
