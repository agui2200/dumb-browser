diff --git a/third_party/blink/renderer/modules/cookie_store/cookie_store.cc b/third_party/blink/renderer/modules/cookie_store/cookie_store.cc
index 05d3cfc4fae1a..59bc44c816a13 100644
--- a/third_party/blink/renderer/modules/cookie_store/cookie_store.cc
+++ b/third_party/blink/renderer/modules/cookie_store/cookie_store.cc
@@ -7,6 +7,7 @@
 #include <utility>
 
 #include "base/optional.h"
+#include "dumb/components/contextual_identity/context_id.h"
 #include "net/cookies/canonical_cookie.h"
 #include "services/network/public/mojom/restricted_cookie_manager.mojom-blink.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
@@ -152,7 +153,8 @@ std::unique_ptr<net::CanonicalCookie> ToCanonicalCookie(
       cookie_url, name.Utf8(), value.Utf8(), domain.Utf8(), path.Utf8(),
       base::Time() /*creation*/, expires, base::Time() /*last_access*/,
       true /*secure*/, false /*http_only*/, same_site,
-      net::CookiePriority::COOKIE_PRIORITY_DEFAULT, false /*same_party*/);
+      net::CookiePriority::COOKIE_PRIORITY_DEFAULT, false /*same_party*/,
+      contextual_identity::kDefaultContextId);
 }
 
 const KURL DefaultCookieURL(ExecutionContext* execution_context) {
@@ -408,6 +410,7 @@ ScriptPromise CookieStore::DoRead(
 
   auto* resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
   backend_->GetAllForUrl(
+      contextual_identity::kDefaultContextId,
       cookie_url, default_site_for_cookies_, default_top_frame_origin_,
       std::move(backend_options),
       WTF::Bind(backend_result_converter, WrapPersistent(resolver)));
@@ -484,6 +487,7 @@ ScriptPromise CookieStore::DoWrite(ScriptState* script_state,
 
   auto* resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
   backend_->SetCanonicalCookie(
+      contextual_identity::kDefaultContextId,
       *std::move(canonical_cookie), default_cookie_url_,
       default_site_for_cookies_, default_top_frame_origin_,
       WTF::Bind(&CookieStore::OnSetCanonicalCookieResult,
@@ -516,6 +520,7 @@ void CookieStore::StartObserving() {
   auto task_runner =
       GetExecutionContext()->GetTaskRunner(TaskType::kDOMManipulation);
   backend_->AddChangeListener(
+      contextual_identity::kDefaultContextId,
       default_cookie_url_, default_site_for_cookies_, default_top_frame_origin_,
       change_listener_receiver_.BindNewPipeAndPassRemote(task_runner), {});
 }
