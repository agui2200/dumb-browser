diff --git a/chrome/browser/metrics/chrome_metrics_service_client.cc b/chrome/browser/metrics/chrome_metrics_service_client.cc
index 77169b176b457..18cc939f9458a 100644
--- a/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ b/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -41,22 +41,10 @@
 #include "chrome/browser/chrome_notification_types.h"
 #include "chrome/browser/google/google_brand.h"
 #include "chrome/browser/history/history_service_factory.h"
-#include "chrome/browser/metrics/cached_metrics_profile.h"
-#include "chrome/browser/metrics/chrome_metrics_extensions_helper.h"
 #include "chrome/browser/metrics/chrome_metrics_service_accessor.h"
 #include "chrome/browser/metrics/chrome_metrics_services_manager_client.h"
-#include "chrome/browser/metrics/desktop_platform_features_metrics_provider.h"
-#include "chrome/browser/metrics/desktop_session_duration/desktop_profile_session_durations_service_factory.h"
-#include "chrome/browser/metrics/https_engagement_metrics_provider.h"
-#include "chrome/browser/metrics/metrics_reporting_state.h"
 #include "chrome/browser/metrics/network_quality_estimator_provider_impl.h"
-#include "chrome/browser/metrics/usertype_by_devicetype_metrics_provider.h"
-#include "chrome/browser/privacy_budget/privacy_budget_metrics_provider.h"
-#include "chrome/browser/privacy_budget/privacy_budget_prefs.h"
-#include "chrome/browser/privacy_budget/privacy_budget_ukm_entry_filter.h"
 #include "chrome/browser/profiles/profile_manager.h"
-#include "chrome/browser/safe_browsing/certificate_reporting_metrics_provider.h"
-#include "chrome/browser/safe_browsing/metrics/safe_browsing_metrics_provider.h"
 #include "chrome/browser/sync/device_info_sync_service_factory.h"
 #include "chrome/browser/sync/profile_sync_service_factory.h"
 #include "chrome/browser/tracing/background_tracing_metrics_provider.h"
@@ -70,41 +58,17 @@
 #include "chrome/common/pref_names.h"
 #include "components/crash/core/common/crash_keys.h"
 #include "components/history/core/browser/history_service.h"
-#include "components/metrics/call_stack_profile_metrics_provider.h"
-#include "components/metrics/component_metrics_provider.h"
-#include "components/metrics/content/content_stability_metrics_provider.h"
-#include "components/metrics/content/gpu_metrics_provider.h"
-#include "components/metrics/content/rendering_perf_metrics_provider.h"
-#include "components/metrics/content/subprocess_metrics_provider.h"
-#include "components/metrics/cpu_metrics_provider.h"
-#include "components/metrics/demographics/demographic_metrics_provider.h"
-#include "components/metrics/drive_metrics_provider.h"
-#include "components/metrics/entropy_state_provider.h"
-#include "components/metrics/metrics_log_uploader.h"
-#include "components/metrics/metrics_pref_names.h"
-#include "components/metrics/metrics_reporting_default_state.h"
 #include "components/metrics/metrics_service.h"
 #include "components/metrics/metrics_service_client.h"
 #include "components/metrics/metrics_state_manager.h"
-#include "components/metrics/metrics_switches.h"
-#include "components/metrics/net/cellular_logic_helper.h"
-#include "components/metrics/net/net_metrics_log_uploader.h"
-#include "components/metrics/net/network_metrics_provider.h"
-#include "components/metrics/persistent_histograms.h"
-#include "components/metrics/sampling_metrics_provider.h"
-#include "components/metrics/stability_metrics_helper.h"
-#include "components/metrics/ui/screen_info_metrics_provider.h"
 #include "components/metrics/url_constants.h"
 #include "components/metrics/version_utils.h"
-#include "components/network_time/network_time_tracker.h"
 #include "components/omnibox/browser/omnibox_metrics_provider.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/sync/driver/passphrase_type_metrics_provider.h"
 #include "components/sync/driver/sync_service.h"
 #include "components/sync_device_info/device_count_metrics_provider.h"
-#include "components/ukm/field_trials_provider_helper.h"
-#include "components/ukm/ukm_service.h"
 #include "components/version_info/version_info.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -121,7 +85,6 @@
 #include "chrome/browser/metrics/page_load_metrics_provider.h"
 #include "components/metrics/android_metrics_provider.h"
 #else
-#include "chrome/browser/metrics/browser_activity_watcher.h"
 #endif
 
 #if defined(OS_POSIX)
@@ -139,10 +102,6 @@
 #include "extensions/common/extension.h"
 #endif
 
-#if BUILDFLAG(ENABLE_PLUGINS)
-#include "chrome/browser/metrics/plugin_metrics_provider.h"
-#endif
-
 #if BUILDFLAG(IS_CHROMEOS_LACROS)
 #include "chrome/browser/metrics/lacros_metrics_provider.h"
 #endif
@@ -190,6 +149,7 @@
 #include "chrome/browser/metrics/power/power_metrics_provider_mac.h"
 #endif
 
+#if 0
 namespace {
 
 #if defined(OS_ANDROID) || BUILDFLAG(IS_CHROMEOS_ASH)
@@ -439,15 +399,18 @@ MakeDemographicMetricsProvider(
 }
 
 }  // namespace
+#endif
 
 ChromeMetricsServiceClient::ChromeMetricsServiceClient(
     metrics::MetricsStateManager* state_manager)
     : metrics_state_manager_(state_manager) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+#if 0
   RecordCommandLineMetrics();
   incognito_observer_ = IncognitoObserver::Create(
       base::BindRepeating(&ChromeMetricsServiceClient::UpdateRunningServices,
                           weak_ptr_factory_.GetWeakPtr()));
+#endif
 }
 
 ChromeMetricsServiceClient::~ChromeMetricsServiceClient() {
@@ -469,6 +432,7 @@ std::unique_ptr<ChromeMetricsServiceClient> ChromeMetricsServiceClient::Create(
 // static
 void ChromeMetricsServiceClient::RegisterPrefs(PrefRegistrySimple* registry) {
   metrics::MetricsService::RegisterPrefs(registry);
+#if 0
   ukm::UkmService::RegisterPrefs(registry);
   metrics::StabilityMetricsHelper::RegisterPrefs(registry);
   prefs::RegisterPrivacyBudgetPrefs(registry);
@@ -484,15 +448,18 @@ void ChromeMetricsServiceClient::RegisterPrefs(PrefRegistrySimple* registry) {
 #if BUILDFLAG(ENABLE_PLUGINS)
   PluginMetricsProvider::RegisterPrefs(registry);
 #endif  // BUILDFLAG(ENABLE_PLUGINS)
+#endif
 }
 
 metrics::MetricsService* ChromeMetricsServiceClient::GetMetricsService() {
   return metrics_service_.get();
 }
 
+#if 0
 ukm::UkmService* ChromeMetricsServiceClient::GetUkmService() {
   return ukm_service_.get();
 }
+#endif
 
 bool ChromeMetricsServiceClient::ShouldUploadMetricsForUserId(
     const uint64_t user_id) {
@@ -528,6 +495,7 @@ std::string ChromeMetricsServiceClient::GetVersionString() {
   return metrics::GetVersionString();
 }
 
+#if 0
 void ChromeMetricsServiceClient::OnEnvironmentUpdate(std::string* environment) {
 #if defined(OS_WIN) || defined(OS_MAC) || defined(OS_ANDROID)
   DCHECK(environment);
@@ -595,6 +563,7 @@ ChromeMetricsServiceClient::GetMetricsReportingDefaultState() {
   return metrics::GetMetricsReportingDefaultState(
       g_browser_process->local_state());
 }
+#endif
 
 void ChromeMetricsServiceClient::Initialize() {
   PrefService* local_state = g_browser_process->local_state();
@@ -602,6 +571,7 @@ void ChromeMetricsServiceClient::Initialize() {
   metrics_service_ = std::make_unique<metrics::MetricsService>(
       metrics_state_manager_, this, local_state);
 
+#if 0
   notification_listeners_active_ = RegisterForNotifications();
   RegisterMetricsServiceProviders();
 
@@ -626,8 +596,10 @@ void ChromeMetricsServiceClient::Initialize() {
   metrics::structured::Recorder::GetInstance()->SetUiTaskRunner(
       base::SequencedTaskRunnerHandle::Get());
 #endif
+#endif
 }
 
+#if 0
 void ChromeMetricsServiceClient::RegisterMetricsServiceProviders() {
   PrefService* local_state = g_browser_process->local_state();
 
@@ -1036,6 +1008,7 @@ bool ChromeMetricsServiceClient::RegisterForProfileEvents(Profile* profile) {
   StartObserving(sync, profile->GetPrefs());
   return true;
 }
+#endif
 
 void ChromeMetricsServiceClient::Observe(
     int type,
@@ -1048,10 +1021,10 @@ void ChromeMetricsServiceClient::Observe(
     case content::NOTIFICATION_LOAD_START:
     case content::NOTIFICATION_RENDERER_PROCESS_CLOSED:
     case content::NOTIFICATION_RENDER_WIDGET_HOST_HANG:
-      metrics_service_->OnApplicationNotIdle();
       break;
 
     case chrome::NOTIFICATION_PROFILE_ADDED: {
+#if 0
       bool success =
           RegisterForProfileEvents(content::Source<Profile>(source).ptr());
       // On failure, set |notification_listeners_active_| to false which will
@@ -1060,6 +1033,7 @@ void ChromeMetricsServiceClient::Observe(
         notification_listeners_active_ = false;
         UpdateRunningServices();
       }
+#endif
       break;
     }
 
@@ -1068,6 +1042,7 @@ void ChromeMetricsServiceClient::Observe(
   }
 }
 
+#if 0
 void ChromeMetricsServiceClient::OnURLOpenedFromOmnibox(OmniboxLog* log) {
   metrics_service_->OnApplicationNotIdle();
 }
@@ -1156,6 +1131,7 @@ bool ChromeMetricsServiceClient::IsUkmAllowedForAllProfiles() {
 bool ChromeMetricsServiceClient::IsUkmAllowedWithExtensionsForAllProfiles() {
   return UkmConsentStateObserver::IsUkmAllowedWithExtensionsForAllProfiles();
 }
+#endif
 
 bool g_notification_listeners_failed = false;
 void ChromeMetricsServiceClient::SetNotificationListenerSetupFailedForTesting(
@@ -1163,6 +1139,7 @@ void ChromeMetricsServiceClient::SetNotificationListenerSetupFailedForTesting(
   g_notification_listeners_failed = simulate_failure;
 }
 
+#if 0
 bool ChromeMetricsServiceClient::
     AreNotificationListenersEnabledOnAllProfiles() {
   // For testing
@@ -1170,17 +1147,20 @@ bool ChromeMetricsServiceClient::
     return false;
   return notification_listeners_active_;
 }
+#endif
 
 std::string ChromeMetricsServiceClient::GetAppPackageName() {
   return metrics::GetAppPackageName();
 }
 
+#if 0
 std::string ChromeMetricsServiceClient::GetUploadSigningKey() {
   std::string decoded_key;
   base::Base64Decode(google_apis::GetMetricsKey(), &decoded_key);
   return decoded_key;
 }
+#endif
 
 bool ChromeMetricsServiceClient::ShouldResetClientIdsOnClonedInstall() {
-  return metrics_service_->ShouldResetClientIdsOnClonedInstall();
+  return false;
 }
