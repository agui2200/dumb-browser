diff --git a/third_party/blink/renderer/core/frame/dom_window.cc b/third_party/blink/renderer/core/frame/dom_window.cc
index 59204c4d8db3..1489f4ad29d2 100644
--- a/third_party/blink/renderer/core/frame/dom_window.cc
+++ b/third_party/blink/renderer/core/frame/dom_window.cc
@@ -20,15 +20,12 @@
 #include "third_party/blink/renderer/core/events/message_event.h"
 #include "third_party/blink/renderer/core/execution_context/execution_context.h"
 #include "third_party/blink/renderer/core/execution_context/security_context.h"
-#include "third_party/blink/renderer/core/frame/coop_access_violation_report_body.h"
 #include "third_party/blink/renderer/core/frame/csp/content_security_policy.h"
 #include "third_party/blink/renderer/core/frame/frame.h"
 #include "third_party/blink/renderer/core/frame/frame_client.h"
 #include "third_party/blink/renderer/core/frame/frame_console.h"
 #include "third_party/blink/renderer/core/frame/local_dom_window.h"
 #include "third_party/blink/renderer/core/frame/location.h"
-#include "third_party/blink/renderer/core/frame/report.h"
-#include "third_party/blink/renderer/core/frame/reporting_context.h"
 #include "third_party/blink/renderer/core/frame/settings.h"
 #include "third_party/blink/renderer/core/frame/user_activation.h"
 #include "third_party/blink/renderer/core/input/input_device_capabilities.h"
@@ -454,8 +451,6 @@ void DOMWindow::PostMessageForTesting(
 void DOMWindow::InstallCoopAccessMonitor(
     network::mojom::blink::CoopAccessReportType report_type,
     LocalFrame* accessing_frame,
-    mojo::PendingRemote<network::mojom::blink::CrossOriginOpenerPolicyReporter>
-        pending_reporter,
     bool endpoint_defined,
     const WTF::String& reported_window_url) {
   CoopAccessMonitor monitor;
@@ -466,16 +461,6 @@ void DOMWindow::InstallCoopAccessMonitor(
   monitor.endpoint_defined = endpoint_defined;
   monitor.reported_window_url = std::move(reported_window_url);
 
-  monitor.reporter.Bind(std::move(pending_reporter));
-  // CoopAccessMonitor are cleared when their reporter are gone. This avoids
-  // accumulation. However it would have been interesting continuing reporting
-  // accesses past this point, at least for the ReportingObserver and Devtool.
-  // TODO(arthursonzogni): Consider observing |accessing_main_frame| deletion
-  // instead.
-  monitor.reporter.set_disconnect_handler(
-      WTF::Bind(&DOMWindow::DisconnectCoopAccessMonitor,
-                WrapWeakPersistent(this), monitor.accessing_main_frame));
-
   // As long as RenderDocument isn't shipped, it can exist a CoopAccessMonitor
   // for the same |accessing_main_frame|, because it might now host a different
   // Document. Same is true for |this| DOMWindow, it might refer to a window
@@ -553,30 +538,6 @@ void DOMWindow::ReportCoopAccess(const char* property_name) {
         location->Url() ? location->Url() : "", location->LineNumber(),
         location->ColumnNumber());
 
-    // TODO(https://crbug.com/1124251): Notify Devtool about the access attempt.
-
-    // If the reporting document hasn't specified any network report
-    // endpoint(s), then it is likely not interested in receiving
-    // ReportingObserver's reports.
-    //
-    // TODO(arthursonzogni): Reconsider this decision later, developers might be
-    // interested.
-    if (it->endpoint_defined) {
-      it->reporter->QueueAccessReport(it->report_type, property_name,
-                                      std::move(source_location),
-                                      std::move(it->reported_window_url));
-      // Send a coop-access-violation report.
-      if (network::IsAccessFromCoopPage(it->report_type)) {
-        ReportingContext::From(accessing_main_frame.DomWindow())
-            ->QueueReport(MakeGarbageCollected<Report>(
-                ReportType::kCoopAccessViolation,
-                accessing_main_frame.GetDocument()->Url().GetString(),
-                MakeGarbageCollected<CoopAccessViolationReportBody>(
-                    std::move(location), it->report_type, String(property_name),
-                    it->reported_window_url)));
-      }
-    }
-
     // CoopAccessMonitor are used once and destroyed. This avoids sending
     // multiple reports for the same access.
     it = coop_access_monitor_.erase(it);
