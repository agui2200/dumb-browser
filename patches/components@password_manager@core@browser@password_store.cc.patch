diff --git a/components/password_manager/core/browser/password_store.cc b/components/password_manager/core/browser/password_store.cc
index 5945ef1a891e..56149f703b46 100644
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -34,6 +34,7 @@
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_manager_util.h"
 #include "components/password_manager/core/browser/password_store_consumer.h"
+#include "components/password_manager/core/browser/password_store_signin_notifier.h"
 #include "components/password_manager/core/browser/statistics_table.h"
 #include "components/password_manager/core/browser/sync/password_sync_bridge.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
@@ -41,7 +42,6 @@
 #include "components/sync/model_impl/client_tag_based_model_type_processor.h"
 #include "components/sync/model_impl/proxy_model_type_controller_delegate.h"
 #include "base/strings/string16.h"
-#include "components/password_manager/core/browser/password_store_signin_notifier.h"
 #include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 
 namespace password_manager {
@@ -89,6 +89,7 @@ void PasswordStore::DatabaseCompromisedCredentialsObserver::
   OnCompromisedCredentialsChanged();
 }
 
+#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
 PasswordStore::CheckReuseRequest::CheckReuseRequest(
     PasswordReuseDetectorConsumer* consumer)
     : origin_task_runner_(base::SequencedTaskRunnerHandle::Get()),
@@ -112,6 +113,7 @@ void PasswordStore::CheckReuseRequest::OnReuseCheckDone(
                      matching_reused_credentials, saved_passwords));
   TRACE_EVENT_NESTABLE_ASYNC_END0("passwords", "CheckReuseRequest", this);
 }
+#endif
 
 PasswordStore::FormDigest::FormDigest(PasswordForm::Scheme new_scheme,
                                       const std::string& new_signon_realm,
@@ -547,6 +549,7 @@ void PasswordStore::SetSyncTaskTimeoutForTest(base::TimeDelta timeout) {
   sync_task_timeout_ = timeout;
 }
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 void PasswordStore::CheckReuse(const base::string16& input,
                                const std::string& domain,
                                PasswordReuseDetectorConsumer* consumer) {
@@ -554,6 +557,7 @@ void PasswordStore::CheckReuse(const base::string16& input,
                               std::make_unique<CheckReuseRequest>(consumer),
                               input, domain));
 }
+#endif
 
 void PasswordStore::PreparePasswordHashData(const std::string& sync_username,
                                             const bool is_signed_in) {
@@ -564,30 +568,24 @@ void PasswordStore::PreparePasswordHashData(const std::string& sync_username,
 
 void PasswordStore::SaveGaiaPasswordHash(const std::string& username,
                                          const base::string16& password,
-                                         bool is_primary_account,
-                                         GaiaPasswordHashChange event) {
+                                         bool is_primary_account) {
   SaveProtectedPasswordHash(username, password, is_primary_account,
-                            /*is_gaia_password=*/true, event);
+                            /*is_gaia_password=*/true);
 }
 
 void PasswordStore::SaveEnterprisePasswordHash(const std::string& username,
                                                const base::string16& password) {
   SaveProtectedPasswordHash(
       username, password, /*is_primary_account=*/false,
-      /*is_gaia_password=*/false,
-      GaiaPasswordHashChange::NON_GAIA_ENTERPRISE_PASSWORD_CHANGE);
+      /*is_gaia_password=*/false);
 }
 
 void PasswordStore::SaveProtectedPasswordHash(const std::string& username,
                                               const base::string16& password,
                                               bool is_primary_account,
-                                              bool is_gaia_password,
-                                              GaiaPasswordHashChange event) {
+                                              bool is_gaia_password) {
   if (hash_password_manager_.SavePasswordHash(username, password,
                                               is_gaia_password)) {
-    if (is_gaia_password) {
-      metrics_util::LogGaiaPasswordHashChange(event, is_primary_account);
-    }
     // This method is not being called on startup so it shouldn't log metrics.
     // |is_signed_in| is only used when |should_log_metrics| is true so
     // it doesn't matter what the value is here.
@@ -597,11 +595,8 @@ void PasswordStore::SaveProtectedPasswordHash(const std::string& username,
 }
 
 void PasswordStore::SaveSyncPasswordHash(
-    const PasswordHashData& sync_password_data,
-    GaiaPasswordHashChange event) {
+    const PasswordHashData& sync_password_data) {
   if (hash_password_manager_.SavePasswordHash(sync_password_data)) {
-    metrics_util::LogGaiaPasswordHashChange(event,
-                                            /*is_sync_password=*/true);
     SchedulePasswordHashUpdate(/*should_log_metrics=*/false,
                                /*does_primary_account_exists=*/false,
                                /*is_signed_in=*/false);
@@ -658,15 +653,6 @@ void PasswordStore::SchedulePasswordHashUpdate(bool should_log_metrics,
 }
 
 void PasswordStore::ScheduleEnterprisePasswordURLUpdate() {
-  std::vector<GURL> enterprise_login_urls;
-  safe_browsing::GetPasswordProtectionLoginURLsPref(*prefs_,
-                                                    &enterprise_login_urls);
-  GURL enterprise_change_password_url =
-      safe_browsing::GetPasswordProtectionChangePasswordURLPref(*prefs_);
-
-  ScheduleTask(base::BindOnce(&PasswordStore::SaveEnterprisePasswordURLs, this,
-                              std::move(enterprise_login_urls),
-                              std::move(enterprise_change_password_url)));
 }
 
 PasswordStore::~PasswordStore() {
@@ -809,22 +795,20 @@ void PasswordStore::NotifyUnsyncedCredentialsWillBeDeleted(
   }
 }
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
 void PasswordStore::CheckReuseImpl(std::unique_ptr<CheckReuseRequest> request,
                                    const base::string16& input,
                                    const std::string& domain) {
-  if (reuse_detector_) {
-    reuse_detector_->CheckReuse(input, domain, request.get());
-  } else {
-    request->OnReuseCheckDone(false, 0, base::nullopt, {}, 0);
-  }
+  request->OnReuseCheckDone(false, 0, base::nullopt, {}, 0);
 }
+#endif
 
 void PasswordStore::SaveProtectedPasswordHashImpl(
     PasswordHashDataList protected_password_data_list,
     bool should_log_metrics,
     bool does_primary_account_exists,
     bool is_signed_in) {
-  if (!reuse_detector_ || !protected_password_data_list.has_value())
+  if (!protected_password_data_list.has_value())
     return;
   TRACE_EVENT0("passwords", "PasswordStore::SaveProtectedPasswordHashImpl");
 
@@ -837,6 +821,7 @@ void PasswordStore::SaveProtectedPasswordHashImpl(
       enterprise_password_hash_list.push_back(std::move(password_hash));
   }
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   if (should_log_metrics) {
     metrics_util::LogProtectedPasswordHashCounts(
         gaia_password_hash_list.size(), enterprise_password_hash_list.size(),
@@ -845,41 +830,29 @@ void PasswordStore::SaveProtectedPasswordHashImpl(
   reuse_detector_->UseGaiaPasswordHash(std::move(gaia_password_hash_list));
   reuse_detector_->UseNonGaiaEnterprisePasswordHash(
       std::move(enterprise_password_hash_list));
+#endif
 }
 
 void PasswordStore::SaveEnterprisePasswordURLs(
     const std::vector<GURL>& enterprise_login_urls,
     const GURL& enterprise_change_password_url) {
-  if (!reuse_detector_)
-    return;
-  TRACE_EVENT0("passwords", "PasswordStore::SaveEnterprisePasswordURLs");
-  reuse_detector_->UseEnterprisePasswordURLs(std::move(enterprise_login_urls),
-                                             enterprise_change_password_url);
 }
 
 void PasswordStore::ClearGaiaPasswordHashImpl(const std::string& username) {
   TRACE_EVENT0("passwords", "PasswordStore::ClearGaiaPasswordHashImpl");
-  if (reuse_detector_)
-    reuse_detector_->ClearGaiaPasswordHash(username);
 }
 
 void PasswordStore::ClearAllGaiaPasswordHashImpl() {
   TRACE_EVENT0("passwords", "PasswordStore::ClearAllGaiaPasswordHashImpl");
-  if (reuse_detector_)
-    reuse_detector_->ClearAllGaiaPasswordHash();
 }
 
 void PasswordStore::ClearAllEnterprisePasswordHashImpl() {
   TRACE_EVENT0("passwords",
                "PasswordStore::ClearAllEnterprisePasswordHashImpl");
-  if (reuse_detector_)
-    reuse_detector_->ClearAllEnterprisePasswordHash();
 }
 
 void PasswordStore::ClearAllNonGmailPasswordHashImpl() {
   TRACE_EVENT0("passwords", "PasswordStore::ClearAllNonGmailPasswordHashImpl");
-  if (reuse_detector_)
-    reuse_detector_->ClearAllNonGmailPasswordHash();
 }
 
 void PasswordStore::OnInitCompleted(bool success) {
