diff --git a/components/password_manager/core/browser/password_store.cc b/components/password_manager/core/browser/password_store.cc
index 6cedd828ac72..996a3fc3c62f 100644
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -34,6 +34,7 @@
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_manager_util.h"
 #include "components/password_manager/core/browser/password_store_consumer.h"
+#include "components/password_manager/core/browser/password_store_signin_notifier.h"
 #include "components/password_manager/core/browser/statistics_table.h"
 #include "components/password_manager/core/browser/sync/password_sync_bridge.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
@@ -43,7 +44,6 @@
 
 #if defined(PASSWORD_REUSE_DETECTION_ENABLED)
 #include "base/strings/string16.h"
-#include "components/password_manager/core/browser/password_store_signin_notifier.h"
 #include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #endif
 
@@ -564,7 +564,6 @@ void PasswordStore::CheckReuse(const base::string16& input,
 }
 #endif
 
-#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
 void PasswordStore::PreparePasswordHashData(const std::string& sync_username,
                                             const bool is_signed_in) {
   SchedulePasswordHashUpdate(/*should_log_metrics=*/true,
@@ -574,30 +573,24 @@ void PasswordStore::PreparePasswordHashData(const std::string& sync_username,
 
 void PasswordStore::SaveGaiaPasswordHash(const std::string& username,
                                          const base::string16& password,
-                                         bool is_primary_account,
-                                         GaiaPasswordHashChange event) {
+                                         bool is_primary_account) {
   SaveProtectedPasswordHash(username, password, is_primary_account,
-                            /*is_gaia_password=*/true, event);
+                            /*is_gaia_password=*/true);
 }
 
 void PasswordStore::SaveEnterprisePasswordHash(const std::string& username,
                                                const base::string16& password) {
   SaveProtectedPasswordHash(
       username, password, /*is_primary_account=*/false,
-      /*is_gaia_password=*/false,
-      GaiaPasswordHashChange::NON_GAIA_ENTERPRISE_PASSWORD_CHANGE);
+      /*is_gaia_password=*/false);
 }
 
 void PasswordStore::SaveProtectedPasswordHash(const std::string& username,
                                               const base::string16& password,
                                               bool is_primary_account,
-                                              bool is_gaia_password,
-                                              GaiaPasswordHashChange event) {
+                                              bool is_gaia_password) {
   if (hash_password_manager_.SavePasswordHash(username, password,
                                               is_gaia_password)) {
-    if (is_gaia_password) {
-      metrics_util::LogGaiaPasswordHashChange(event, is_primary_account);
-    }
     // This method is not being called on startup so it shouldn't log metrics.
     // |is_signed_in| is only used when |should_log_metrics| is true so
     // it doesn't matter what the value is here.
@@ -607,11 +600,8 @@ void PasswordStore::SaveProtectedPasswordHash(const std::string& username,
 }
 
 void PasswordStore::SaveSyncPasswordHash(
-    const PasswordHashData& sync_password_data,
-    GaiaPasswordHashChange event) {
+    const PasswordHashData& sync_password_data) {
   if (hash_password_manager_.SavePasswordHash(sync_password_data)) {
-    metrics_util::LogGaiaPasswordHashChange(event,
-                                            /*is_sync_password=*/true);
     SchedulePasswordHashUpdate(/*should_log_metrics=*/false,
                                /*does_primary_account_exists=*/false,
                                /*is_signed_in=*/false);
@@ -668,18 +658,16 @@ void PasswordStore::SchedulePasswordHashUpdate(bool should_log_metrics,
 }
 
 void PasswordStore::ScheduleEnterprisePasswordURLUpdate() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   std::vector<GURL> enterprise_login_urls;
-  safe_browsing::GetPasswordProtectionLoginURLsPref(*prefs_,
-                                                    &enterprise_login_urls);
-  GURL enterprise_change_password_url =
-      safe_browsing::GetPasswordProtectionChangePasswordURLPref(*prefs_);
+  GURL enterprise_change_password_url = GURL();
 
   ScheduleTask(base::BindOnce(&PasswordStore::SaveEnterprisePasswordURLs, this,
                               std::move(enterprise_login_urls),
                               std::move(enterprise_change_password_url)));
+#endif
 }
 
-#endif
 
 PasswordStore::~PasswordStore() {
   DCHECK(shutdown_called_);
@@ -828,13 +816,14 @@ void PasswordStore::CheckReuseImpl(std::unique_ptr<CheckReuseRequest> request,
     request->OnReuseCheckDone(false, 0, base::nullopt, {}, 0);
   }
 }
+#endif
 
 void PasswordStore::SaveProtectedPasswordHashImpl(
     PasswordHashDataList protected_password_data_list,
     bool should_log_metrics,
     bool does_primary_account_exists,
     bool is_signed_in) {
-  if (!reuse_detector_ || !protected_password_data_list.has_value())
+  if (!protected_password_data_list.has_value())
     return;
   TRACE_EVENT0("passwords", "PasswordStore::SaveProtectedPasswordHashImpl");
 
@@ -847,6 +836,7 @@ void PasswordStore::SaveProtectedPasswordHashImpl(
       enterprise_password_hash_list.push_back(std::move(password_hash));
   }
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   if (should_log_metrics) {
     metrics_util::LogProtectedPasswordHashCounts(
         gaia_password_hash_list.size(), enterprise_password_hash_list.size(),
@@ -855,44 +845,53 @@ void PasswordStore::SaveProtectedPasswordHashImpl(
   reuse_detector_->UseGaiaPasswordHash(std::move(gaia_password_hash_list));
   reuse_detector_->UseNonGaiaEnterprisePasswordHash(
       std::move(enterprise_password_hash_list));
+#endif
 }
 
 void PasswordStore::SaveEnterprisePasswordURLs(
     const std::vector<GURL>& enterprise_login_urls,
     const GURL& enterprise_change_password_url) {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   if (!reuse_detector_)
     return;
   TRACE_EVENT0("passwords", "PasswordStore::SaveEnterprisePasswordURLs");
   reuse_detector_->UseEnterprisePasswordURLs(std::move(enterprise_login_urls),
                                              enterprise_change_password_url);
+#endif
 }
 
 void PasswordStore::ClearGaiaPasswordHashImpl(const std::string& username) {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords", "PasswordStore::ClearGaiaPasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearGaiaPasswordHash(username);
+#endif
 }
 
 void PasswordStore::ClearAllGaiaPasswordHashImpl() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords", "PasswordStore::ClearAllGaiaPasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearAllGaiaPasswordHash();
+#endif
 }
 
 void PasswordStore::ClearAllEnterprisePasswordHashImpl() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords",
                "PasswordStore::ClearAllEnterprisePasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearAllEnterprisePasswordHash();
+#endif
 }
 
 void PasswordStore::ClearAllNonGmailPasswordHashImpl() {
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   TRACE_EVENT0("passwords", "PasswordStore::ClearAllNonGmailPasswordHashImpl");
   if (reuse_detector_)
     reuse_detector_->ClearAllNonGmailPasswordHash();
-}
-
 #endif
+}
 
 void PasswordStore::OnInitCompleted(bool success) {
   DCHECK(main_task_runner_->RunsTasksInCurrentSequence());
