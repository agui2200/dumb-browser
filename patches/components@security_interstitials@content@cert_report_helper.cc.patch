diff --git a/components/security_interstitials/content/cert_report_helper.cc b/components/security_interstitials/content/cert_report_helper.cc
index 01364e93b529..c743df71ade0 100644
--- a/components/security_interstitials/content/cert_report_helper.cc
+++ b/components/security_interstitials/content/cert_report_helper.cc
@@ -15,7 +15,6 @@
 #include "build/branding_buildflags.h"
 #include "build/build_config.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/ssl_cert_reporter.h"
 #include "components/security_interstitials/core/controller_client.h"
 #include "components/security_interstitials/core/metrics_helper.h"
@@ -32,10 +31,6 @@ namespace {
 // set by tests.
 static bool g_is_fake_official_build_for_cert_report_testing = false;
 
-PrefService* GetPrefs(content::WebContents* web_contents) {
-  return user_prefs::UserPrefs::Get(web_contents->GetBrowserContext());
-}
-
 }  // namespace
 
 // Constants for the HTTPSErrorReporter Finch experiment
@@ -58,11 +53,7 @@ CertReportHelper::CertReportHelper(
     : ssl_cert_reporter_(std::move(ssl_cert_reporter)),
       web_contents_(web_contents),
       request_url_(request_url),
-      ssl_info_(ssl_info),
-      interstitial_reason_(interstitial_reason),
-      overridable_(overridable),
-      interstitial_time_(interstitial_time),
-      metrics_helper_(metrics_helper) {}
+      ssl_info_(ssl_info) {}
 
 CertReportHelper::~CertReportHelper() = default;
 
@@ -84,32 +75,13 @@ void CertReportHelper::PopulateExtendedReportingOption(
     return;
 
   load_time_data->SetBoolean(
-      security_interstitials::kBoxChecked,
-      safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)));
-
-  load_time_data->SetString(
-      security_interstitials::kOptInLink,
-      l10n_util::GetStringUTF16(IDS_SAFE_BROWSING_SCOUT_REPORTING_AGREE));
+      security_interstitials::kBoxChecked, false);
 }
 
 void CertReportHelper::PopulateEnhancedProtectionMessage(
     base::DictionaryValue* load_time_data) {
-  const bool show = ShouldShowEnhancedProtectionMessage();
-
   load_time_data->SetBoolean(
-      security_interstitials::kDisplayEnhancedProtectionMessage, show);
-
-  if (!show)
-    return;
-
-  if (metrics_helper_) {
-    metrics_helper_->RecordUserInteraction(
-        security_interstitials::MetricsHelper::SHOW_ENHANCED_PROTECTION);
-  }
-
-  load_time_data->SetString(
-      security_interstitials::kEnhancedProtectionMessage,
-      l10n_util::GetStringUTF16(IDS_SAFE_BROWSING_ENHANCED_PROTECTION_MESSAGE));
+      security_interstitials::kDisplayEnhancedProtectionMessage, false);
 }
 
 void CertReportHelper::SetSSLCertReporterForTesting(
@@ -122,14 +94,8 @@ void CertReportHelper::HandleReportingCommands(
     PrefService* pref_service) {
   switch (command) {
     case security_interstitials::CMD_DO_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, true, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_DONT_REPORT:
-      safe_browsing::SetExtendedReportingPrefAndMetric(
-          pref_service, false, /* value */
-          safe_browsing::SBER_OPTIN_SITE_SECURITY_INTERSTITIAL);
       break;
     case security_interstitials::CMD_PROCEED:
       user_action_ = CertificateErrorReport::USER_PROCEEDED;
@@ -143,57 +109,10 @@ void CertReportHelper::HandleReportingCommands(
   }
 }
 
-void CertReportHelper::FinishCertCollection() {
-  if (!ShouldShowCertificateReporterCheckbox())
-    return;
-
-  if (!safe_browsing::IsExtendedReportingEnabled(*GetPrefs(web_contents_)))
-    return;
-
-  if (metrics_helper_) {
-    metrics_helper_->RecordUserInteraction(
-        security_interstitials::MetricsHelper::EXTENDED_REPORTING_IS_ENABLED);
-  }
-
-  if (!ShouldReportCertificateError())
-    return;
-
-  std::string serialized_report;
-  CertificateErrorReport report(request_url_.host(), ssl_info_);
-
-  if (client_details_callback_)
-    client_details_callback_.Run(&report);
-
-  report.SetInterstitialInfo(
-      interstitial_reason_, user_action_,
-      overridable_ ? CertificateErrorReport::INTERSTITIAL_OVERRIDABLE
-                   : CertificateErrorReport::INTERSTITIAL_NOT_OVERRIDABLE,
-      interstitial_time_);
-
-  if (!report.Serialize(&serialized_report)) {
-    LOG(ERROR) << "Failed to serialize certificate report.";
-    return;
-  }
-
-  ssl_cert_reporter_->ReportInvalidCertificateChain(serialized_report);
-}
+void CertReportHelper::FinishCertCollection() {}
 
 bool CertReportHelper::ShouldShowCertificateReporterCheckbox() {
-  // Only show the checkbox iff the user is part of the respective Finch group
-  // and the window is not incognito and the feature is not disabled by policy
-  // and enhanced protection is off.
-  const bool in_incognito =
-      web_contents_->GetBrowserContext()->IsOffTheRecord();
-  const PrefService* pref_service = GetPrefs(web_contents_);
-  bool can_show_checkbox =
-      safe_browsing::IsExtendedReportingOptInAllowed(*pref_service) &&
-      !safe_browsing::IsExtendedReportingPolicyManaged(*pref_service);
-  bool is_enhanced_protection_enabled =
-      safe_browsing::IsEnhancedProtectionEnabled(*pref_service);
-
-  return base::FieldTrialList::FindFullName(kFinchExperimentName) ==
-             kFinchGroupShowPossiblySend &&
-         !in_incognito && can_show_checkbox && !is_enhanced_protection_enabled;
+  return false;
 }
 
 bool CertReportHelper::ShouldShowEnhancedProtectionMessage() {
@@ -203,26 +122,10 @@ bool CertReportHelper::ShouldShowEnhancedProtectionMessage() {
   // mode.
   const bool in_incognito =
       web_contents_->GetBrowserContext()->IsOffTheRecord();
-  const PrefService* pref_service = GetPrefs(web_contents_);
-  bool is_enhanced_protection_enabled =
-      safe_browsing::IsEnhancedProtectionEnabled(*pref_service);
-  bool is_safe_browsing_managed =
-      safe_browsing::IsSafeBrowsingPolicyManaged(*pref_service);
-  bool is_enhanced_protection_message_enabled =
-      safe_browsing::IsEnhancedProtectionMessageInInterstitialsEnabled();
 
   if (in_incognito) {
     return false;
   }
-  if (is_enhanced_protection_enabled) {
-    return false;
-  }
-  if (is_safe_browsing_managed) {
-    return false;
-  }
-  if (!is_enhanced_protection_message_enabled) {
-    return false;
-  }
   return true;
 }
 
