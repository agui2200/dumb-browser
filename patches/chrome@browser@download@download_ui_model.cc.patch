diff --git a/chrome/browser/download/download_ui_model.cc b/chrome/browser/download/download_ui_model.cc
index eb771c89b9726..d1b777a4dcd8f 100644
--- a/chrome/browser/download/download_ui_model.cc
+++ b/chrome/browser/download/download_ui_model.cc
@@ -11,14 +11,11 @@
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/download/download_commands.h"
 #include "chrome/browser/download/offline_item_utils.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager.h"
-#include "chrome/browser/safe_browsing/advanced_protection_status_manager_factory.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/download/public/common/download_danger_type.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/core/features.h"
 #include "net/base/mime_util.h"
 #include "third_party/blink/public/common/mime_util/mime_util.h"
 #include "ui/base/l10n/l10n_util.h"
@@ -36,7 +33,6 @@
 using base::TimeDelta;
 using download::DownloadItem;
 using offline_items_collection::FailState;
-using safe_browsing::DownloadFileType;
 
 namespace {
 
@@ -242,7 +238,7 @@ std::u16string DownloadUIModel::GetWarningText(const std::u16string& filename,
   *offset = std::string::npos;
   switch (GetDangerType()) {
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_URL:
-      return l10n_util::GetStringUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_URL);
+      break;
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_FILE:
       return IsExtensionDownload()
                  ? l10n_util::GetStringUTF16(
@@ -251,22 +247,8 @@ std::u16string DownloadUIModel::GetWarningText(const std::u16string& filename,
                                               filename, offset);
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_CONTENT:
     case download::DOWNLOAD_DANGER_TYPE_DANGEROUS_HOST:
-      return l10n_util::GetStringFUTF16(IDS_PROMPT_MALICIOUS_DOWNLOAD_CONTENT,
-                                        filename, offset);
-    case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT: {
-      bool request_ap_verdicts = false;
-#if BUILDFLAG(FULL_SAFE_BROWSING)
-      request_ap_verdicts =
-          safe_browsing::AdvancedProtectionStatusManagerFactory::GetForProfile(
-              profile())
-              ->IsUnderAdvancedProtection();
-#endif
-      return l10n_util::GetStringFUTF16(
-          request_ap_verdicts
-              ? IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT_IN_ADVANCED_PROTECTION
-              : IDS_PROMPT_UNCOMMON_DOWNLOAD_CONTENT,
-          filename, offset);
-    }
+    case download::DOWNLOAD_DANGER_TYPE_UNCOMMON_CONTENT:
+      break;
     case download::DOWNLOAD_DANGER_TYPE_POTENTIALLY_UNWANTED:
       return l10n_util::GetStringFUTF16(IDS_PROMPT_DOWNLOAD_CHANGES_SETTINGS,
                                         filename, offset);
@@ -283,11 +265,6 @@ std::u16string DownloadUIModel::GetWarningText(const std::u16string& filename,
       return l10n_util::GetStringFUTF16(
           IDS_PROMPT_DOWNLOAD_SENSITIVE_CONTENT_BLOCKED, filename, offset);
     case download::DOWNLOAD_DANGER_TYPE_PROMPT_FOR_SCANNING:
-      return l10n_util::GetStringFUTF16(
-          base::FeatureList::IsEnabled(safe_browsing::kPromptEsbForDeepScanning)
-              ? IDS_PROMPT_DEEP_SCANNING
-              : IDS_PROMPT_APP_DEEP_SCANNING,
-          filename, offset);
     case download::DOWNLOAD_DANGER_TYPE_BLOCKED_UNSUPPORTED_FILETYPE:
     case download::DOWNLOAD_DANGER_TYPE_DEEP_SCANNED_SAFE:
     case download::DOWNLOAD_DANGER_TYPE_DEEP_SCANNED_OPENED_DANGEROUS:
@@ -401,13 +378,6 @@ bool DownloadUIModel::ShouldPreferOpeningInBrowser() const {
 
 void DownloadUIModel::SetShouldPreferOpeningInBrowser(bool preference) {}
 
-DownloadFileType::DangerLevel DownloadUIModel::GetDangerLevel() const {
-  return DownloadFileType::NOT_DANGEROUS;
-}
-
-void DownloadUIModel::SetDangerLevel(
-    DownloadFileType::DangerLevel danger_level) {}
-
 download::DownloadItem::MixedContentStatus
 DownloadUIModel::GetMixedContentStatus() const {
   return download::DownloadItem::MixedContentStatus::UNKNOWN;
