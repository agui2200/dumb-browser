diff --git a/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc b/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc
index abd8322e6404..5194aec71948 100644
--- a/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc
+++ b/third_party/blink/renderer/platform/graphics/canvas_resource_provider.cc
@@ -1122,8 +1122,7 @@ CanvasResourceProvider::CanvasResourceProvider(
       filter_quality_(filter_quality),
       color_params_(color_params),
       is_origin_top_left_(is_origin_top_left),
-      snapshot_paint_image_id_(cc::PaintImage::GetNextId()),
-      identifiability_paint_op_digest_(size_) {
+      snapshot_paint_image_id_(cc::PaintImage::GetNextId()) {
   if (context_provider_wrapper_)
     context_provider_wrapper_->AddObserver(this);
   CanvasMemoryDumpProvider::Instance()->RegisterClient(this);
@@ -1274,9 +1273,6 @@ GrDirectContext* CanvasResourceProvider::GetGrContext() const {
 sk_sp<cc::PaintRecord> CanvasResourceProvider::FlushCanvas() {
   if (!HasRecordedDrawOps())
     return nullptr;
-  // Get PaintOp count before finishRecordingAsPicture() adds more, as these
-  // additional ops don't correspond to canvas context operations.
-  const size_t initial_paint_ops = recorder_->num_paint_ops();
   sk_sp<cc::PaintRecord> last_recording = recorder_->finishRecordingAsPicture();
   RasterRecord(last_recording);
   needs_flush_ = false;
@@ -1284,12 +1280,6 @@ sk_sp<cc::PaintRecord> CanvasResourceProvider::FlushCanvas() {
       recorder_->beginRecording(Size().Width(), Size().Height());
   if (restore_clip_stack_callback_)
     restore_clip_stack_callback_.Run(canvas);
-  identifiability_paint_op_digest_.MaybeUpdateDigest(last_recording,
-                                                     initial_paint_ops);
-  // restore_clip_stack_callback_ also adds PaintOps -- these need to be skipped
-  // during identifiability digest calculation.
-  identifiability_paint_op_digest_.SetPrefixSkipCount(
-      recorder_->num_paint_ops());
   return last_recording;
 }
 
@@ -1401,12 +1391,6 @@ void CanvasResourceProvider::OnDestroyResource() {
   --num_inflight_resources_;
 }
 
-const IdentifiabilityPaintOpDigest&
-CanvasResourceProvider::GetIdentifiablityPaintOpDigest() {
-  FlushCanvas();
-  return identifiability_paint_op_digest_;
-}
-
 scoped_refptr<CanvasResource> CanvasResourceProvider::NewOrRecycledResource() {
   if (canvas_resources_.IsEmpty()) {
     canvas_resources_.push_back(CreateResource());
