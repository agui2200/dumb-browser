diff --git a/chrome/browser/download/download_prefs.cc b/chrome/browser/download/download_prefs.cc
index f5ce4b6b6649f..ee2a72f1e7209 100644
--- a/chrome/browser/download/download_prefs.cc
+++ b/chrome/browser/download/download_prefs.cc
@@ -29,7 +29,6 @@
 #include "chrome/browser/download/download_core_service_impl.h"
 #include "chrome/browser/download/download_dir_util.h"
 #include "chrome/browser/download/download_prompt_status.h"
-#include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/download/download_target_determiner.h"
 #include "chrome/browser/download/trusted_sources_manager.h"
 #include "chrome/browser/profiles/profile.h"
@@ -42,10 +41,10 @@
 #include "components/policy/core/browser/url_blocklist_manager.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_service.h"
-#include "components/safe_browsing/core/file_type_policies.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/download_manager.h"
 #include "content/public/browser/save_page_type.h"
+#include "dumb/common/pref_names.h"
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
 #include "chrome/browser/ash/drive/drive_integration_service.h"
@@ -61,7 +60,6 @@
 using content::BrowserContext;
 using content::BrowserThread;
 using content::DownloadManager;
-using safe_browsing::FileTypePolicies;
 
 namespace {
 
@@ -198,14 +196,11 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
   }
 
   prompt_for_download_.Init(prefs::kPromptForDownload, prefs);
+  remove_after_completion_.Init(prefs::kRemoveAfterCompletion, prefs);
 #if defined(OS_ANDROID)
   prompt_for_download_android_.Init(prefs::kPromptForDownloadAndroid, prefs);
-  RecordDownloadPromptStatus(
-      static_cast<DownloadPromptStatus>(*prompt_for_download_android_));
   if (base::FeatureList::IsEnabled(download::features::kDownloadLater)) {
     prompt_for_download_later_.Init(prefs::kDownloadLaterPromptStatus, prefs);
-    RecordDownloadLaterPromptStatus(
-        static_cast<DownloadLaterPromptStatus>(*prompt_for_download_later_));
   }
 
   // If |kDownloadsLocationChange| is not enabled, always uses the default
@@ -221,8 +216,6 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
   download_path_.Init(prefs::kDownloadDefaultDirectory, prefs);
   save_file_path_.Init(prefs::kSaveFileDefaultDirectory, prefs);
   save_file_type_.Init(prefs::kSaveFileType, prefs);
-  safebrowsing_for_trusted_sources_enabled_.Init(
-      prefs::kSafeBrowsingForTrustedSourcesEnabled, prefs);
   download_restriction_.Init(prefs::kDownloadRestrictions, prefs);
 
   pref_change_registrar_.Add(
@@ -266,14 +259,7 @@ DownloadPrefs::DownloadPrefs(Profile* profile) : profile_(profile) {
         base::FilePath::StringType(1, base::FilePath::kExtensionSeparator) +
         extension);
 
-    // Note that the list of file types that are not allowed to open
-    // automatically can change in the future. When the list is tightened, it is
-    // expected that some entries in the users' auto open list will get dropped
-    // permanently as a result.
-    if (FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-            filename_with_extension)) {
-      auto_open_by_user_.insert(extension);
-    }
+    auto_open_by_user_.insert(extension);
   }
 }
 
@@ -286,6 +272,10 @@ void DownloadPrefs::RegisterProfilePrefs(
       prefs::kPromptForDownload,
       false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
+  registry->RegisterBooleanPref(
+      prefs::kRemoveAfterCompletion,
+      false,
+      user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
   registry->RegisterStringPref(prefs::kDownloadExtensionsToOpen, std::string());
   registry->RegisterListPref(prefs::kDownloadExtensionsToOpenByPolicy, {});
   registry->RegisterListPref(prefs::kDownloadAllowedURLsForOpenByPolicy, {});
@@ -293,8 +283,6 @@ void DownloadPrefs::RegisterProfilePrefs(
   registry->RegisterIntegerPref(prefs::kSaveFileType,
                                 content::SAVE_PAGE_TYPE_AS_COMPLETE_HTML);
   registry->RegisterIntegerPref(prefs::kDownloadRestrictions, 0);
-  registry->RegisterBooleanPref(prefs::kSafeBrowsingForTrustedSourcesEnabled,
-                                true);
 
   const base::FilePath& default_download_path = GetDefaultDownloadDirectory();
   registry->RegisterFilePathPref(prefs::kDownloadDefaultDirectory,
@@ -480,10 +468,6 @@ bool DownloadPrefs::IsAutoOpenByPolicy(const GURL& url,
 bool DownloadPrefs::EnableAutoOpenByUserBasedOnExtension(
     const base::FilePath& file_name) {
   base::FilePath::StringType extension = file_name.Extension();
-  if (!FileTypePolicies::GetInstance()->IsAllowedToOpenAutomatically(
-          file_name)) {
-    return false;
-  }
 
   DCHECK(extension[0] == base::FilePath::kExtensionSeparator);
   extension.erase(0, 1);
@@ -682,3 +666,7 @@ bool DownloadPrefs::AutoOpenCompareFunctor::operator()(
     const base::FilePath::StringType& b) const {
   return base::FilePath::CompareLessIgnoreCase(a, b);
 }
+
+bool DownloadPrefs::RemoveAfterCompletion() const {
+  return *remove_after_completion_;
+}
