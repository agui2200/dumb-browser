diff --git a/components/payments/content/payment_request.cc b/components/payments/content/payment_request.cc
index 5ae59f1d9a10..2e945e3b9b4d 100644
--- a/components/payments/content/payment_request.cc
+++ b/components/payments/content/payment_request.cc
@@ -32,14 +32,12 @@
 #include "components/payments/core/payments_validators.h"
 #include "components/payments/core/url_util.h"
 #include "components/prefs/pref_service.h"
-#include "components/ukm/content/source_url_recorder.h"
 #include "components/url_formatter/elide_url.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_process_host.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/common/content_features.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "third_party/blink/public/common/loader/network_utils.h"
 
 namespace payments {
@@ -48,11 +46,6 @@ namespace {
 using ::payments::mojom::CanMakePaymentQueryResult;
 using ::payments::mojom::HasEnrolledInstrumentQueryResult;
 
-bool IsGooglePaymentMethod(const std::string& method_name) {
-  return method_name == methods::kGooglePay ||
-         method_name == methods::kAndroidPay;
-}
-
 // Redact shipping address before exposing it in ShippingAddressChangeEvent.
 // https://w3c.github.io/payment-request/#shipping-address-changed-algorithm
 mojom::PaymentAddressPtr RedactShippingAddress(
@@ -96,9 +89,7 @@ PaymentRequest::PaymentRequest(
       frame_origin_(url_formatter::FormatUrlForSecurityDisplay(
           render_frame_host->GetLastCommittedURL())),
       frame_security_origin_(render_frame_host->GetLastCommittedOrigin()),
-      observer_for_testing_(observer_for_testing),
-      journey_logger_(delegate_->IsOffTheRecord(),
-                      ukm::GetSourceIdForWebContentsDocument(web_contents)) {
+      observer_for_testing_(observer_for_testing) {
   receiver_.Bind(std::move(receiver));
   // OnConnectionTerminated will be called when the Mojo pipe is closed. This
   // will happen as a result of many renderer-side events (both successful and
@@ -124,8 +115,6 @@ void PaymentRequest::Init(
     return;
   }
 
-  journey_logger_.RecordCheckoutStep(
-      JourneyLogger::CheckoutFunnelStep::kInitiated);
   is_initialized_ = true;
   client_.Bind(std::move(client));
 
@@ -192,32 +181,7 @@ void PaymentRequest::Init(
       frame_security_origin_, spec_.get(),
       /*delegate=*/weak_ptr_factory_.GetWeakPtr(),
       delegate_->GetApplicationLocale(), delegate_->GetPersonalDataManager(),
-      delegate_.get(), &journey_logger_);
-
-  journey_logger_.SetRequestedInformation(
-      spec_->request_shipping(), spec_->request_payer_email(),
-      spec_->request_payer_phone(), spec_->request_payer_name());
-
-  // Log metrics around which payment methods are requested by the merchant.
-  GURL google_pay_url(methods::kGooglePay);
-  GURL android_pay_url(methods::kAndroidPay);
-  // Looking for payment methods that are NOT google-related payment methods.
-  auto non_google_it =
-      std::find_if(spec_->url_payment_method_identifiers().begin(),
-                   spec_->url_payment_method_identifiers().end(),
-                   [google_pay_url, android_pay_url](const GURL& url) {
-                     return url != google_pay_url && url != android_pay_url;
-                   });
-  journey_logger_.SetRequestedPaymentMethodTypes(
-      /*requested_basic_card=*/!spec_->supported_card_networks().empty(),
-      /*requested_method_google=*/
-      base::Contains(spec_->url_payment_method_identifiers(), google_pay_url) ||
-          base::Contains(spec_->url_payment_method_identifiers(),
-                         android_pay_url),
-      /*requested_method_secure_payment_confirmation=*/
-      spec_->IsSecurePaymentConfirmationRequested(),
-      /*requested_method_other=*/non_google_it !=
-          spec_->url_payment_method_identifiers().end());
+      delegate_.get());
 
   payment_handler_host_.set_payment_request_id_for_logs(*spec_->details().id);
 
@@ -240,19 +204,12 @@ void PaymentRequest::Show(bool is_user_gesture, bool wait_for_updated_details) {
     return;
   }
 
-  journey_logger_.RecordCheckoutStep(
-      JourneyLogger::CheckoutFunnelStep::kShowCalled);
-  is_show_called_ = true;
-  journey_logger_.SetTriggerTime();
-
   // A tab can display only one PaymentRequest UI at a time.
   display_handle_ = display_manager_->TryShow(delegate_.get());
   if (!display_handle_) {
     log_.Error(errors::kAnotherUiShowing);
     DCHECK(!has_recorded_completion_);
     has_recorded_completion_ = true;
-    journey_logger_.SetNotShown(
-        JourneyLogger::NOT_SHOWN_REASON_CONCURRENT_REQUESTS);
     client_->OnError(mojom::PaymentErrorReason::ALREADY_SHOWING,
                      errors::kAnotherUiShowing);
     OnConnectionTerminated();
@@ -263,7 +220,6 @@ void PaymentRequest::Show(bool is_user_gesture, bool wait_for_updated_details) {
     log_.Error(errors::kCannotShowInBackgroundTab);
     DCHECK(!has_recorded_completion_);
     has_recorded_completion_ = true;
-    journey_logger_.SetNotShown(JourneyLogger::NOT_SHOWN_REASON_OTHER);
     client_->OnError(mojom::PaymentErrorReason::USER_CANCEL,
                      errors::kCannotShowInBackgroundTab);
     OnConnectionTerminated();
@@ -279,9 +235,6 @@ void PaymentRequest::Show(bool is_user_gesture, bool wait_for_updated_details) {
         PaymentRequestSpec::UpdateReason::INITIAL_PAYMENT_DETAILS);
   } else {
     DCHECK(spec_->details().total);
-    journey_logger_.RecordTransactionAmount(
-        spec_->details().total->amount->currency,
-        spec_->details().total->amount->value, false /*completed*/);
   }
 
   display_handle_->Show(this);
@@ -362,9 +315,6 @@ void PaymentRequest::UpdateWith(mojom::PaymentDetailsPtr details) {
 
   if (is_resolving_promise_passed_into_show_method) {
     DCHECK(spec_->details().total);
-    journey_logger_.RecordTransactionAmount(
-        spec_->details().total->amount->currency,
-        spec_->details().total->amount->value, false /*completed*/);
     if (SatisfiesSkipUIConstraints()) {
       Pay();
     } else if (spec_->request_shipping()) {
@@ -452,12 +402,8 @@ void PaymentRequest::Complete(mojom::PaymentComplete result) {
     delegate_->ShowErrorMessage();
   } else {
     DCHECK(!has_recorded_completion_);
-    journey_logger_.SetCompleted();
     has_recorded_completion_ = true;
     DCHECK(spec_->details().total);
-    journey_logger_.RecordTransactionAmount(
-        spec_->details().total->amount->currency,
-        spec_->details().total->amount->value, true /*completed*/);
 
     delegate_->GetPrefService()->SetBoolean(kPaymentsFirstTransactionCompleted,
                                             true);
@@ -573,8 +519,6 @@ void PaymentRequest::AreRequestedMethodsSupportedCallback(
   } else {
     DCHECK(!has_recorded_completion_);
     has_recorded_completion_ = true;
-    journey_logger_.SetNotShown(
-        JourneyLogger::NOT_SHOWN_REASON_NO_SUPPORTED_PAYMENT_METHOD);
     client_->OnError(mojom::PaymentErrorReason::NOT_SUPPORTED,
                      GetNotSupportedErrorMessage(
                          spec_ ? spec_->payment_method_identifiers_set()
@@ -642,10 +586,7 @@ bool PaymentRequest::SatisfiesSkipUIConstraints() {
       state()->selected_app() != nullptr;
   if (skipped_payment_request_ui_) {
     DCHECK(state()->IsInitialized() && spec()->IsInitialized());
-    journey_logger_.SetEventOccurred(JourneyLogger::EVENT_SKIPPED_SHOW);
   } else if (state()->IsInitialized() && spec()->IsInitialized()) {
-    // Set EVENT_SHOWN only after state() and spec() initialization.
-    journey_logger_.SetEventOccurred(JourneyLogger::EVENT_SHOWN);
   }
   return skipped_payment_request_ui_;
 }
@@ -655,39 +596,6 @@ void PaymentRequest::OnPaymentResponseAvailable(
   DCHECK(!response->method_name.empty());
   DCHECK(!response->stringified_details.empty());
 
-  journey_logger_.SetEventOccurred(
-      JourneyLogger::EVENT_RECEIVED_INSTRUMENT_DETAILS);
-
-  // Log the correct "selected instrument" metric according to its type and
-  // the method name in response.
-  DCHECK(state_->selected_app());
-  JourneyLogger::Event selected_event =
-      JourneyLogger::Event::EVENT_SELECTED_OTHER;
-  switch (state_->selected_app()->type()) {
-    case PaymentApp::Type::AUTOFILL:
-      selected_event = JourneyLogger::Event::EVENT_SELECTED_CREDIT_CARD;
-      break;
-    case PaymentApp::Type::SERVICE_WORKER_APP:
-      // Intentionally fall through.
-    case PaymentApp::Type::NATIVE_MOBILE_APP: {
-      selected_event = IsGooglePaymentMethod(response->method_name)
-                           ? JourneyLogger::Event::EVENT_SELECTED_GOOGLE
-                           : JourneyLogger::Event::EVENT_SELECTED_OTHER;
-      break;
-    }
-    case PaymentApp::Type::INTERNAL: {
-      if (response->method_name == methods::kSecurePaymentConfirmation) {
-        selected_event =
-            JourneyLogger::Event::EVENT_SELECTED_SECURE_PAYMENT_CONFIRMATION;
-      }
-      break;
-    }
-    case PaymentApp::Type::UNDEFINED:
-      NOTREACHED();
-      break;
-  }
-  journey_logger_.SetEventOccurred(selected_event);
-
   // If currently interactive, show the processing spinner. Autofill payment
   // apps request a CVC, so they are always interactive at this point. A payment
   // handler may elect to be non-interactive by not showing a confirmation page
@@ -699,10 +607,6 @@ void PaymentRequest::OnPaymentResponseAvailable(
 }
 
 void PaymentRequest::OnPaymentResponseError(const std::string& error_message) {
-  journey_logger_.SetEventOccurred(
-      JourneyLogger::EVENT_RECEIVED_INSTRUMENT_DETAILS);
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_INSTRUMENT_DETAILS_ERROR);
-
   reject_show_error_message_ = error_message;
   delegate_->ShowErrorMessage();
   // When the user dismisses the error message, UserCancelled() will reject
@@ -729,8 +633,6 @@ void PaymentRequest::UserCancelled() {
   if (!client_.is_bound())
     return;
 
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_ABORTED_BY_USER);
-
   // This sends an error to the renderer, which informs the API user.
   client_->OnError(mojom::PaymentErrorReason::USER_CANCEL,
                    !reject_show_error_message_.empty()
@@ -748,19 +650,12 @@ void PaymentRequest::UserCancelled() {
 
 void PaymentRequest::DidStartMainFrameNavigationToDifferentDocument(
     bool is_user_initiated) {
-  RecordFirstAbortReason(is_user_initiated
-                             ? JourneyLogger::ABORT_REASON_USER_NAVIGATION
-                             : JourneyLogger::ABORT_REASON_MERCHANT_NAVIGATION);
 }
 
 void PaymentRequest::RenderFrameDeleted(
     content::RenderFrameHost* render_frame_host) {
   DCHECK(render_frame_host ==
          content::RenderFrameHost::FromID(initiator_frame_routing_id_));
-  // RenderFrameHost is usually deleted explicitly before PaymentRequest
-  // destruction if the user closes the tab or browser window without closing
-  // the payment request dialog.
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_ABORTED_BY_USER);
   // But don't bother sending errors to |client_| because the mojo pipe will be
   // torn down anyways when RenderFrameHost is destroyed. It's not safe to call
   // UserCancelled() here because it is not re-entrant.
@@ -781,14 +676,10 @@ void PaymentRequest::OnConnectionTerminated() {
   if (observer_for_testing_)
     observer_for_testing_->OnConnectionTerminated();
 
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_MOJO_CONNECTION_ERROR);
   manager_->DestroyRequest(this);
 }
 
 void PaymentRequest::Pay() {
-  journey_logger_.SetEventOccurred(JourneyLogger::EVENT_PAY_CLICKED);
-  journey_logger_.RecordCheckoutStep(
-      JourneyLogger::CheckoutFunnelStep::kPaymentHandlerInvoked);
   DCHECK(state_->selected_app());
   state_->selected_app()->SetPaymentHandlerHost(
       payment_handler_host_.AsWeakPtr());
@@ -805,18 +696,6 @@ bool PaymentRequest::IsOffTheRecord() const {
 
 void PaymentRequest::OnPaymentHandlerOpenWindowCalled() {
   DCHECK(state_->selected_app());
-  // UKM for payment app origin should get recorded only when the origin of the
-  // invoked payment app is shown to the user.
-  journey_logger_.SetPaymentAppUkmSourceId(
-      state_->selected_app()->UkmSourceId());
-}
-
-void PaymentRequest::RecordFirstAbortReason(
-    JourneyLogger::AbortReason abort_reason) {
-  if (!has_recorded_completion_) {
-    has_recorded_completion_ = true;
-    journey_logger_.SetAborted(abort_reason);
-  }
 }
 
 void PaymentRequest::CanMakePaymentCallback(bool can_make_payment) {
@@ -824,8 +703,6 @@ void PaymentRequest::CanMakePaymentCallback(bool can_make_payment) {
       can_make_payment ? mojom::CanMakePaymentQueryResult::CAN_MAKE_PAYMENT
                        : mojom::CanMakePaymentQueryResult::CANNOT_MAKE_PAYMENT);
 
-  journey_logger_.SetCanMakePaymentValue(can_make_payment);
-
   if (observer_for_testing_)
     observer_for_testing_->OnCanMakePaymentReturned();
 }
@@ -864,7 +741,6 @@ void PaymentRequest::RespondToHasEnrolledInstrumentQuery(
 
   client_->OnHasEnrolledInstrument(has_enrolled_instrument ? positive
                                                            : negative);
-  journey_logger_.SetHasEnrolledInstrumentValue(has_enrolled_instrument);
 }
 
 void PaymentRequest::OnAbortResult(bool aborted) {
@@ -872,7 +748,6 @@ void PaymentRequest::OnAbortResult(bool aborted) {
     client_->OnAbort(aborted);
 
   if (aborted) {
-    RecordFirstAbortReason(JourneyLogger::ABORT_REASON_ABORTED_BY_MERCHANT);
     state_->OnAbort();
   }
 }
