diff --git a/components/payments/content/payment_request.cc b/components/payments/content/payment_request.cc
index bbd570cdcc9f1..7b5a0e6faf382 100644
--- a/components/payments/content/payment_request.cc
+++ b/components/payments/content/payment_request.cc
@@ -49,11 +49,6 @@ namespace {
 using ::payments::mojom::CanMakePaymentQueryResult;
 using ::payments::mojom::HasEnrolledInstrumentQueryResult;
 
-bool IsGooglePaymentMethod(const std::string& method_name) {
-  return method_name == methods::kGooglePay ||
-         method_name == methods::kAndroidPay;
-}
-
 // Redact shipping address before exposing it in ShippingAddressChangeEvent.
 // https://w3c.github.io/payment-request/#shipping-address-changed-algorithm
 mojom::PaymentAddressPtr RedactShippingAddress(
@@ -91,9 +86,7 @@ PaymentRequest::PaymentRequest(
       frame_origin_(url_formatter::FormatUrlForSecurityDisplay(
           render_frame_host->GetLastCommittedURL())),
       frame_security_origin_(render_frame_host->GetLastCommittedOrigin()),
-      observer_for_testing_(observer_for_testing),
-      journey_logger_(delegate_->IsOffTheRecord(),
-                      ukm::GetSourceIdForWebContentsDocument(web_contents())) {
+      observer_for_testing_(observer_for_testing) {
   receiver_.Bind(std::move(receiver));
   // TerminateConnection will be called when the Mojo pipe is closed. This
   // will happen as a result of many renderer-side events (both successful and
@@ -122,8 +115,6 @@ void PaymentRequest::Init(
     return;
   }
 
-  journey_logger_.RecordCheckoutStep(
-      JourneyLogger::CheckoutFunnelStep::kInitiated);
   is_initialized_ = true;
   client_.Bind(std::move(client));
 
@@ -209,8 +200,9 @@ void PaymentRequest::Init(
       initiator_frame, top_level_origin_, frame_origin_, frame_security_origin_,
       spec(), /*delegate=*/weak_ptr_factory_.GetWeakPtr(),
       delegate_->GetApplicationLocale(), delegate_->GetPersonalDataManager(),
-      delegate_.get(), &journey_logger_);
+      delegate_.get());
 
+#if 0
   journey_logger_.SetRequestedInformation(
       spec_->request_shipping(), spec_->request_payer_email(),
       spec_->request_payer_phone(), spec_->request_payer_name());
@@ -243,6 +235,7 @@ void PaymentRequest::Init(
     method_categories.push_back(JourneyLogger::PaymentMethodCategory::kOther);
   }
   journey_logger_.SetRequestedPaymentMethods(method_categories);
+#endif
 
   payment_handler_host_->set_payment_request_id_for_logs(*spec_->details().id);
 
@@ -285,19 +278,12 @@ void PaymentRequest::Show(bool is_user_gesture, bool wait_for_updated_details) {
     return;
   }
 
-  journey_logger_.RecordCheckoutStep(
-      JourneyLogger::CheckoutFunnelStep::kShowCalled);
-  is_show_called_ = true;
-  journey_logger_.SetTriggerTime();
-
   // A tab can display only one PaymentRequest UI at a time.
   display_handle_ = display_manager_->TryShow(delegate_.get());
   if (!display_handle_) {
     log_.Error(errors::kAnotherUiShowing);
     DCHECK(!has_recorded_completion_);
     has_recorded_completion_ = true;
-    journey_logger_.SetNotShown(
-        JourneyLogger::NOT_SHOWN_REASON_CONCURRENT_REQUESTS);
     client_->OnError(mojom::PaymentErrorReason::ALREADY_SHOWING,
                      errors::kAnotherUiShowing);
     TerminateConnection();
@@ -308,7 +294,6 @@ void PaymentRequest::Show(bool is_user_gesture, bool wait_for_updated_details) {
     log_.Error(errors::kCannotShowInBackgroundTab);
     DCHECK(!has_recorded_completion_);
     has_recorded_completion_ = true;
-    journey_logger_.SetNotShown(JourneyLogger::NOT_SHOWN_REASON_OTHER);
     client_->OnError(mojom::PaymentErrorReason::USER_CANCEL,
                      errors::kCannotShowInBackgroundTab);
     TerminateConnection();
@@ -325,9 +310,6 @@ void PaymentRequest::Show(bool is_user_gesture, bool wait_for_updated_details) {
     spec_->AddInitializationObserver(this);
   } else {
     DCHECK(spec_->details().total);
-    journey_logger_.RecordTransactionAmount(
-        spec_->details().total->amount->currency,
-        spec_->details().total->amount->value, false /*completed*/);
   }
 
   // If an app store billing payment method is one of the payment methods being
@@ -422,9 +404,6 @@ void PaymentRequest::UpdateWith(mojom::PaymentDetailsPtr details) {
 
   if (is_resolving_promise_passed_into_show_method) {
     DCHECK(spec_->details().total);
-    journey_logger_.RecordTransactionAmount(
-        spec_->details().total->amount->currency,
-        spec_->details().total->amount->value, false /*completed*/);
     if (SatisfiesSkipUIConstraints()) {
       Pay();
     } else {
@@ -518,12 +497,8 @@ void PaymentRequest::Complete(mojom::PaymentComplete result) {
     ShowErrorMessageAndAbortPayment();
   } else {
     DCHECK(!has_recorded_completion_);
-    journey_logger_.SetCompleted();
     has_recorded_completion_ = true;
     DCHECK(spec_->details().total);
-    journey_logger_.RecordTransactionAmount(
-        spec_->details().total->amount->currency,
-        spec_->details().total->amount->value, true /*completed*/);
 
     delegate_->GetPrefService()->SetBoolean(kPaymentsFirstTransactionCompleted,
                                             true);
@@ -648,8 +623,6 @@ void PaymentRequest::AreRequestedMethodsSupportedCallback(
             << "): requested method not supported.";
     DCHECK(!has_recorded_completion_);
     has_recorded_completion_ = true;
-    journey_logger_.SetNotShown(
-        JourneyLogger::NOT_SHOWN_REASON_NO_SUPPORTED_PAYMENT_METHOD);
     client_->OnError(mojom::PaymentErrorReason::NOT_SUPPORTED,
                      GetNotSupportedErrorMessage(
                          spec_ ? spec_->payment_method_identifiers_set()
@@ -727,10 +700,8 @@ bool PaymentRequest::SatisfiesSkipUIConstraints() {
       state()->selected_app() != nullptr;
   if (skipped_payment_request_ui_) {
     DCHECK(state()->IsInitialized() && spec()->IsInitialized());
-    journey_logger_.SetSkippedShow();
   } else if (state()->IsInitialized() && spec()->IsInitialized()) {
     // Set "shown" only after state() and spec() initialization.
-    journey_logger_.SetShown();
   }
   return skipped_payment_request_ui_;
 }
@@ -740,8 +711,6 @@ void PaymentRequest::OnPaymentResponseAvailable(
   DCHECK(!response->method_name.empty());
   DCHECK(!response->stringified_details.empty());
 
-  journey_logger_.SetReceivedInstrumentDetails();
-
   // If currently interactive, show the processing spinner. Autofill payment
   // apps request a CVC, so they are always interactive at this point. A payment
   // handler may elect to be non-interactive by not showing a confirmation page
@@ -753,9 +722,6 @@ void PaymentRequest::OnPaymentResponseAvailable(
 }
 
 void PaymentRequest::OnPaymentResponseError(const std::string& error_message) {
-  journey_logger_.SetReceivedInstrumentDetails();
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_INSTRUMENT_DETAILS_ERROR);
-
   reject_show_error_message_ = error_message;
   ShowErrorMessageAndAbortPayment();
 }
@@ -780,8 +746,6 @@ void PaymentRequest::OnUserCancelled() {
   if (!client_.is_bound())
     return;
 
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_ABORTED_BY_USER);
-
   // This sends an error to the renderer, which informs the API user.
   client_->OnError(mojom::PaymentErrorReason::USER_CANCEL,
                    !reject_show_error_message_.empty()
@@ -799,19 +763,18 @@ void PaymentRequest::OnUserCancelled() {
 
 void PaymentRequest::DidStartMainFrameNavigationToDifferentDocument(
     bool is_user_initiated) {
-  RecordFirstAbortReason(is_user_initiated
-                             ? JourneyLogger::ABORT_REASON_USER_NAVIGATION
-                             : JourneyLogger::ABORT_REASON_MERCHANT_NAVIGATION);
 }
 
 void PaymentRequest::RenderFrameDeleted(
     content::RenderFrameHost* render_frame_host) {
   DCHECK_EQ(render_frame_host->GetGlobalFrameRoutingId(),
             initiator_frame_routing_id_);
+#if 0
   // RenderFrameHost is usually deleted explicitly before PaymentRequest
   // destruction if the user closes the tab or browser window without closing
   // the payment request dialog.
   RecordFirstAbortReason(JourneyLogger::ABORT_REASON_ABORTED_BY_USER);
+#endif
   // But don't bother sending errors to |client_| because the mojo pipe will be
   // torn down anyways when RenderFrameHost is destroyed. It's not safe to call
   // OnUserCancelled() here because it is not re-entrant.
@@ -832,14 +795,10 @@ void PaymentRequest::TerminateConnection() {
   if (observer_for_testing_)
     observer_for_testing_->OnConnectionTerminated();
 
-  RecordFirstAbortReason(JourneyLogger::ABORT_REASON_MOJO_CONNECTION_ERROR);
   manager_->DestroyRequest(weak_ptr_factory_.GetWeakPtr());
 }
 
 void PaymentRequest::Pay() {
-  journey_logger_.SetPayClicked();
-  journey_logger_.RecordCheckoutStep(
-      JourneyLogger::CheckoutFunnelStep::kPaymentHandlerInvoked);
   DCHECK(state_->selected_app());
   VLOG(2) << "PaymentRequest (" << *spec_->details().id
           << "): paying with app: " << state_->selected_app()->GetLabel();
@@ -851,14 +810,12 @@ void PaymentRequest::Pay() {
     display_handle_->Show(weak_ptr_factory_.GetWeakPtr());
   }
 
-  // Log the correct "selected method".
-  journey_logger_.SetSelectedMethod(GetSelectedMethodCategory());
-
   state_->selected_app()->SetPaymentHandlerHost(
       payment_handler_host_->AsWeakPtr());
   state_->GeneratePaymentResponse();
 }
 
+#if 0
 JourneyLogger::PaymentMethodCategory PaymentRequest::GetSelectedMethodCategory()
     const {
   const PaymentApp* selected_app = state_->selected_app();
@@ -887,6 +844,7 @@ JourneyLogger::PaymentMethodCategory PaymentRequest::GetSelectedMethodCategory()
   }
   return JourneyLogger::PaymentMethodCategory::kOther;
 }
+#endif
 
 void PaymentRequest::HideIfNecessary() {
   display_handle_.reset();
@@ -898,10 +856,6 @@ bool PaymentRequest::IsOffTheRecord() const {
 
 void PaymentRequest::OnPaymentHandlerOpenWindowCalled() {
   DCHECK(state_->selected_app());
-  // UKM for payment app origin should get recorded only when the origin of the
-  // invoked payment app is shown to the user.
-  journey_logger_.SetPaymentAppUkmSourceId(
-      state_->selected_app()->UkmSourceId());
 }
 
 content::WebContents* PaymentRequest::web_contents() {
@@ -911,14 +865,6 @@ content::WebContents* PaymentRequest::web_contents() {
              : nullptr;
 }
 
-void PaymentRequest::RecordFirstAbortReason(
-    JourneyLogger::AbortReason abort_reason) {
-  if (!has_recorded_completion_) {
-    has_recorded_completion_ = true;
-    journey_logger_.SetAborted(abort_reason);
-  }
-}
-
 void PaymentRequest::CanMakePaymentCallback(bool can_make_payment) {
   VLOG(2) << "PaymentRequest (" << *spec_->details().id
           << "): canMakePayment = " << can_make_payment;
@@ -926,8 +872,6 @@ void PaymentRequest::CanMakePaymentCallback(bool can_make_payment) {
       can_make_payment ? mojom::CanMakePaymentQueryResult::CAN_MAKE_PAYMENT
                        : mojom::CanMakePaymentQueryResult::CANNOT_MAKE_PAYMENT);
 
-  journey_logger_.SetCanMakePaymentValue(can_make_payment);
-
   if (observer_for_testing_)
     observer_for_testing_->OnCanMakePaymentReturned();
 }
@@ -973,7 +917,6 @@ void PaymentRequest::RespondToHasEnrolledInstrumentQuery(
 
   client_->OnHasEnrolledInstrument(has_enrolled_instrument ? positive
                                                            : negative);
-  journey_logger_.SetHasEnrolledInstrumentValue(has_enrolled_instrument);
 }
 
 void PaymentRequest::OnAbortResult(bool aborted) {
@@ -983,7 +926,6 @@ void PaymentRequest::OnAbortResult(bool aborted) {
     client_->OnAbort(aborted);
 
   if (aborted) {
-    RecordFirstAbortReason(JourneyLogger::ABORT_REASON_ABORTED_BY_MERCHANT);
     state_->OnAbort();
   }
 }
