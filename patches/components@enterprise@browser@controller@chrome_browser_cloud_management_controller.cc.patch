diff --git a/components/enterprise/browser/controller/chrome_browser_cloud_management_controller.cc b/components/enterprise/browser/controller/chrome_browser_cloud_management_controller.cc
index 179e0886e1856..690118ddfd8e6 100644
--- a/components/enterprise/browser/controller/chrome_browser_cloud_management_controller.cc
+++ b/components/enterprise/browser/controller/chrome_browser_cloud_management_controller.cc
@@ -14,13 +14,10 @@
 #include "base/path_service.h"
 #include "base/task/post_task.h"
 #include "base/task/thread_pool.h"
-#include "base/threading/thread_task_runner_handle.h"
 #include "build/build_config.h"
 #include "components/enterprise/browser/controller/browser_dm_token_storage.h"
 #include "components/enterprise/browser/controller/chrome_browser_cloud_management_helper.h"
 #include "components/enterprise/browser/enterprise_switches.h"
-#include "components/enterprise/browser/reporting/report_generator.h"
-#include "components/enterprise/browser/reporting/report_scheduler.h"
 #include "components/policy/core/browser/browser_policy_connector.h"
 #include "components/policy/core/common/cloud/chrome_browser_cloud_management_metrics.h"
 #include "components/policy/core/common/cloud/cloud_external_data_manager.h"
@@ -163,14 +160,6 @@ void ChromeBrowserCloudManagementController::Init(
     delegate_->InitializeOAuthTokenFactory(url_loader_factory, local_state);
   }
 
-  // Post the task of CreateReportScheduler to run on best effort after launch
-  // is completed.
-  delegate_->GetBestEffortTaskRunner()->PostTask(
-      FROM_HERE,
-      base::BindOnce(
-          &ChromeBrowserCloudManagementController::CreateReportScheduler,
-          weak_factory_.GetWeakPtr()));
-
   MachineLevelUserCloudPolicyManager* policy_manager =
       delegate_->GetMachineLevelUserCloudPolicyManager();
   DeviceManagementService* device_management_service =
@@ -271,11 +260,6 @@ void ChromeBrowserCloudManagementController::InvalidatePolicies() {
     policy_fetcher_->RemoveClientObserver(this);
     policy_fetcher_->Disconnect();
   }
-
-  // This causes the scheduler to stop refreshing itself since the DM token is
-  // no longer valid.
-  if (report_scheduler_)
-    report_scheduler_->OnDMTokenUpdated();
 }
 
 void ChromeBrowserCloudManagementController::InvalidateDMTokenCallback(
@@ -318,8 +302,6 @@ void ChromeBrowserCloudManagementController::OnServiceAccountSet(
 
 void ChromeBrowserCloudManagementController::ShutDown() {
   delegate_->ShutDown();
-  if (report_scheduler_)
-    report_scheduler_.reset();
 }
 
 void ChromeBrowserCloudManagementController::NotifyPolicyRegisterFinished(
@@ -398,25 +380,10 @@ void ChromeBrowserCloudManagementController::
   VLOG(1) << "Fetch policy after enrollment.";
   policy_fetcher_->SetupRegistrationAndFetchPolicy(
       BrowserDMTokenStorage::Get()->RetrieveDMToken(), client_id);
-  if (report_scheduler_) {
-    report_scheduler_->OnDMTokenUpdated();
-  }
 
   NotifyPolicyRegisterFinished(true);
 }
 
-void ChromeBrowserCloudManagementController::CreateReportScheduler() {
-  cloud_policy_client_ = std::make_unique<policy::CloudPolicyClient>(
-      delegate_->GetDeviceManagementService(),
-      delegate_->GetSharedURLLoaderFactory(),
-      CloudPolicyClient::DeviceDMTokenCallback());
-  cloud_policy_client_->AddObserver(this);
-  report_scheduler_ =
-      delegate_->CreateReportScheduler(cloud_policy_client_.get());
-
-  NotifyCloudReportingLaunched();
-}
-
 void ChromeBrowserCloudManagementController::SetGaiaURLLoaderFactory(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory) {
   delegate_->SetGaiaURLLoaderFactory(url_loader_factory);
