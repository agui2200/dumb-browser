diff --git a/content/browser/service_worker/service_worker_container_host.h b/content/browser/service_worker/service_worker_container_host.h
index c5f9a0a7ba38..91d0f087d545 100644
--- a/content/browser/service_worker/service_worker_container_host.h
+++ b/content/browser/service_worker/service_worker_container_host.h
@@ -23,7 +23,6 @@
 #include "mojo/public/cpp/bindings/receiver_set.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "net/cookies/site_for_cookies.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "third_party/blink/public/common/service_worker/service_worker_status_code.h"
 #include "third_party/blink/public/mojom/service_worker/service_worker_client.mojom.h"
 #include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom.h"
@@ -267,8 +266,7 @@ class CONTENT_EXPORT ServiceWorkerContainerHost final
       int container_frame_id,
       const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
       mojo::PendingRemote<network::mojom::CrossOriginEmbedderPolicyReporter>
-          coep_reporter,
-      ukm::SourceId document_ukm_source_id);
+          coep_reporter);
 
   // For service worker window clients. Called after the navigation commits to a
   // render frame host. At this point, the previous ServiceWorkerContainerHost
@@ -281,8 +279,7 @@ class CONTENT_EXPORT ServiceWorkerContainerHost final
   // After this is called, is_response_committed() and is_execution_ready()
   // return true.
   void CompleteWebWorkerPreparation(
-      const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
-      ukm::SourceId worker_ukm_source_id);
+      const network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy);
 
   // Sets |url_|, |site_for_cookies_| and |top_frame_origin_|. For service
   // worker clients, updates the client uuid if it's a cross-origin transition.
@@ -463,8 +460,6 @@ class CONTENT_EXPORT ServiceWorkerContainerHost final
 
   base::WeakPtr<ServiceWorkerContainerHost> GetWeakPtr();
 
-  ukm::SourceId ukm_source_id() const { return ukm_source_id_; }
-
  private:
   friend class ServiceWorkerContainerHostTest;
   friend class service_worker_object_host_unittest::ServiceWorkerObjectHostTest;
@@ -667,9 +662,6 @@ class CONTENT_EXPORT ServiceWorkerContainerHost final
   // The type of client.
   const base::Optional<ServiceWorkerClientInfo> client_info_;
 
-  // The source id of the client's ExecutionContext, set on response commit.
-  ukm::SourceId ukm_source_id_ = ukm::kInvalidSourceId;
-
   // The URL used for service worker scope matching. It is empty except in the
   // case of a service worker client with a blob URL.
   GURL scope_match_url_for_blob_client_;
