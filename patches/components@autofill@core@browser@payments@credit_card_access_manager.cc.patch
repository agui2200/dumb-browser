diff --git a/components/autofill/core/browser/payments/credit_card_access_manager.cc b/components/autofill/core/browser/payments/credit_card_access_manager.cc
index cbd1018b3dd6..87c23336d9da 100644
--- a/components/autofill/core/browser/payments/credit_card_access_manager.cc
+++ b/components/autofill/core/browser/payments/credit_card_access_manager.cc
@@ -25,7 +25,6 @@
 #include "components/autofill/core/browser/autofill_driver.h"
 #include "components/autofill/core/browser/autofill_manager.h"
 #include "components/autofill/core/browser/data_model/credit_card.h"
-#include "components/autofill/core/browser/metrics/credit_card_form_event_logger.h"
 #include "components/autofill/core/browser/payments/payments_client.h"
 #include "components/autofill/core/browser/payments/webauthn_callback_types.h"
 #include "components/autofill/core/browser/personal_data_manager.h"
@@ -58,13 +57,11 @@ bool WaitForEvent(base::WaitableEvent* event) {
 CreditCardAccessManager::CreditCardAccessManager(
     AutofillDriver* driver,
     AutofillClient* client,
-    PersonalDataManager* personal_data_manager,
-    CreditCardFormEventLogger* form_event_logger)
+    PersonalDataManager* personal_data_manager)
     : driver_(driver),
       client_(client),
       payments_client_(client_->GetPaymentsClient()),
       personal_data_manager_(personal_data_manager),
-      form_event_logger_(form_event_logger),
       ready_to_start_authentication_(
           base::WaitableEvent::ResetPolicy::AUTOMATIC,
           base::WaitableEvent::InitialState::NOT_SIGNALED),
@@ -74,31 +71,6 @@ CreditCardAccessManager::CreditCardAccessManager(
 
 CreditCardAccessManager::~CreditCardAccessManager() {}
 
-void CreditCardAccessManager::UpdateCreditCardFormEventLogger() {
-  std::vector<CreditCard*> credit_cards = GetCreditCards();
-
-  size_t server_record_type_count = 0;
-  size_t local_record_type_count = 0;
-  bool has_server_nickname = false;
-  for (CreditCard* credit_card : credit_cards) {
-    // If any masked server card has valid nickname, we will set to true no
-    // matter the flag is enabled or not.
-    if (credit_card->record_type() == CreditCard::MASKED_SERVER_CARD &&
-        credit_card->HasNonEmptyValidNickname()) {
-      has_server_nickname = true;
-    }
-
-    if (credit_card->record_type() == CreditCard::LOCAL_CARD)
-      local_record_type_count++;
-    else
-      server_record_type_count++;
-  }
-  form_event_logger_->set_has_server_nickname(has_server_nickname);
-  form_event_logger_->set_server_record_type_count(server_record_type_count);
-  form_event_logger_->set_local_record_type_count(local_record_type_count);
-  form_event_logger_->set_is_context_secure(client_->IsContextSecure());
-}
-
 std::vector<CreditCard*> CreditCardAccessManager::GetCreditCards() {
   return personal_data_manager_->GetCreditCards();
 }
@@ -201,12 +173,6 @@ void CreditCardAccessManager::GetUnmaskDetailsIfUserIsVerifiable(
     bool is_user_verifiable) {
   is_user_verifiable_ = is_user_verifiable;
 
-  if (is_user_verifiable_called_timestamp_.has_value()) {
-    AutofillMetrics::LogUserVerifiabilityCheckDuration(
-        AutofillTickClock::NowTicks() -
-        is_user_verifiable_called_timestamp_.value());
-  }
-
   // If user is verifiable, then make preflight call to payments to fetch unmask
   // details, otherwise the only option is to perform CVC Auth, which does not
   // require any. Do nothing if request is already in progress.
@@ -218,17 +184,12 @@ void CreditCardAccessManager::GetUnmaskDetailsIfUserIsVerifiable(
                        weak_ptr_factory_.GetWeakPtr()),
         personal_data_manager_->app_locale());
     preflight_call_timestamp_ = AutofillTickClock::NowTicks();
-    AutofillMetrics::LogCardUnmaskPreflightCalled();
   }
 }
 
 void CreditCardAccessManager::OnDidGetUnmaskDetails(
     AutofillClient::PaymentsRpcResult result,
     payments::PaymentsClient::UnmaskDetails& unmask_details) {
-  // Log latency for preflight call.
-  AutofillMetrics::LogCardUnmaskPreflightDuration(
-      AutofillTickClock::NowTicks() - preflight_call_timestamp_);
-
   unmask_details_request_in_progress_ = false;
   unmask_details_ = unmask_details;
   unmask_details_.offer_fido_opt_in = unmask_details_.offer_fido_opt_in &&
@@ -283,22 +244,9 @@ void CreditCardAccessManager::FetchCreditCard(
     }
   }
 
-  // Latency metrics should only be logged if the user is verifiable and the
-  // flag is turned on. If flag is turned off, then |is_user_verifiable_| is not
-  // set.
-#if !defined(OS_IOS)
-  bool should_log_latency_metrics = is_user_verifiable_.value_or(false);
-#endif
   // Return immediately if local card and log that unmask details were ignored.
   if (card->record_type() != CreditCard::MASKED_SERVER_CARD) {
     accessor->OnCreditCardFetched(/*did_succeed=*/true, card);
-#if !defined(OS_IOS)
-    if (should_log_latency_metrics) {
-      AutofillMetrics::LogUserPerceivedLatencyOnCardSelection(
-          AutofillMetrics::PreflightCallEvent::kDidNotChooseMaskedCard,
-          GetOrCreateFIDOAuthenticator()->IsUserOptedIn());
-    }
-#endif
     return;
   }
 
@@ -313,19 +261,6 @@ void CreditCardAccessManager::FetchCreditCard(
   bool should_wait_to_authenticate =
       user_is_opted_in && !get_unmask_details_returned;
 
-  // Logging metrics.
-#if !defined(OS_IOS)
-  if (should_log_latency_metrics) {
-    AutofillMetrics::LogUserPerceivedLatencyOnCardSelection(
-        get_unmask_details_returned
-            ? AutofillMetrics::PreflightCallEvent::
-                  kPreflightCallReturnedBeforeCardChosen
-            : AutofillMetrics::PreflightCallEvent::
-                  kCardChosenBeforePreflightCallReturned,
-        GetOrCreateFIDOAuthenticator()->IsUserOptedIn());
-  }
-#endif
-
 #if !defined(OS_ANDROID) && !defined(OS_IOS)
   // On desktop, show the verify pending dialog for opted-in user, unless it is
   // already known that selected card requires CVC.
@@ -426,28 +361,10 @@ void CreditCardAccessManager::Authenticate(bool get_unmask_details_returned) {
 
   // If the user had to wait for Unmask Details, log the latency.
   if (card_selected_without_unmask_details_timestamp_.has_value()) {
-    AutofillMetrics::LogUserPerceivedLatencyOnCardSelectionDuration(
-        AutofillTickClock::NowTicks() -
-        card_selected_without_unmask_details_timestamp_.value());
-    AutofillMetrics::LogUserPerceivedLatencyOnCardSelectionTimedOut(
-        /*did_time_out=*/!get_unmask_details_returned);
     card_selected_without_unmask_details_timestamp_ = base::nullopt;
   }
 
   unmask_auth_flow_type_ = GetAuthenticationType(get_unmask_details_returned);
-  form_event_logger_->LogCardUnmaskAuthenticationPromptShown(
-      unmask_auth_flow_type_);
-
-  // If FIDO auth was suggested, logging which authentication method was
-  // actually used.
-  if (unmask_auth_flow_type_ == UnmaskAuthFlowType::kFido) {
-    AutofillMetrics::LogCardUnmaskTypeDecision(
-        AutofillMetrics::CardUnmaskTypeDecisionMetric::kFidoOnly);
-  }
-  if (unmask_auth_flow_type_ == UnmaskAuthFlowType::kCvcThenFido) {
-    AutofillMetrics::LogCardUnmaskTypeDecision(
-        AutofillMetrics::CardUnmaskTypeDecisionMetric::kCvcThenFido);
-  }
 
   if (unmask_auth_flow_type_ == UnmaskAuthFlowType::kFido) {
 #if defined(OS_IOS)
@@ -503,8 +420,6 @@ void CreditCardAccessManager::OnCVCAuthenticationComplete(
   // kCvcThenFido flow since that is yet to be completed.
   if (response.did_succeed &&
       unmask_auth_flow_type_ != UnmaskAuthFlowType::kCvcThenFido) {
-    form_event_logger_->LogCardUnmaskAuthenticationPromptCompleted(
-        unmask_auth_flow_type_);
   }
 
   // Store request options temporarily if given. They will be used for
@@ -634,13 +549,9 @@ void CreditCardAccessManager::OnFIDOAuthenticationComplete(
     accessor_->OnCreditCardFetched(did_succeed, card, cvc);
     can_fetch_unmask_details_.Signal();
 
-    form_event_logger_->LogCardUnmaskAuthenticationPromptCompleted(
-        unmask_auth_flow_type_);
     unmask_auth_flow_type_ = UnmaskAuthFlowType::kNone;
   } else {
     unmask_auth_flow_type_ = UnmaskAuthFlowType::kCvcFallbackFromFido;
-    form_event_logger_->LogCardUnmaskAuthenticationPromptShown(
-        unmask_auth_flow_type_);
     GetOrCreateCVCAuthenticator()->Authenticate(
         card_.get(), weak_ptr_factory_.GetWeakPtr(), personal_data_manager_,
         form_parsed_timestamp_);
@@ -650,8 +561,6 @@ void CreditCardAccessManager::OnFIDOAuthenticationComplete(
 void CreditCardAccessManager::OnFidoAuthorizationComplete(bool did_succeed) {
   if (did_succeed) {
     accessor_->OnCreditCardFetched(/*did_succeed=*/true, card_.get(), cvc_);
-    form_event_logger_->LogCardUnmaskAuthenticationPromptCompleted(
-        unmask_auth_flow_type_);
   }
   unmask_auth_flow_type_ = UnmaskAuthFlowType::kNone;
   cvc_ = base::string16();
