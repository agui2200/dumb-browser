diff --git a/cc/metrics/frame_sequence_tracker_collection.h b/cc/metrics/frame_sequence_tracker_collection.h
index d1b5fa53dd29..3e0a78468fd0 100644
--- a/cc/metrics/frame_sequence_tracker_collection.h
+++ b/cc/metrics/frame_sequence_tracker_collection.h
@@ -26,9 +26,6 @@ struct BeginFrameArgs;
 
 namespace cc {
 class FrameSequenceTracker;
-class CompositorFrameReportingController;
-class ThroughputUkmReporter;
-class UkmManager;
 
 // Map of kCustom tracker results keyed by a sequence id.
 using CustomTrackerResults =
@@ -41,8 +38,7 @@ typedef uint16_t ActiveFrameSequenceTrackers;
 class CC_EXPORT FrameSequenceTrackerCollection {
  public:
   FrameSequenceTrackerCollection(
-      bool is_single_threaded,
-      CompositorFrameReportingController* frame_reporting_controller);
+      bool is_single_threaded);
   ~FrameSequenceTrackerCollection();
 
   FrameSequenceTrackerCollection(const FrameSequenceTrackerCollection&) =
@@ -110,8 +106,6 @@ class CC_EXPORT FrameSequenceTrackerCollection {
   FrameSequenceTracker* GetRemovalTrackerForTesting(
       FrameSequenceTrackerType type);
 
-  void SetUkmManager(UkmManager* manager);
-
   using NotifyCustomerTrackerResutlsCallback =
       base::RepeatingCallback<void(const CustomTrackerResults&)>;
   void set_custom_tracker_results_added_callback(
@@ -141,14 +135,6 @@ class CC_EXPORT FrameSequenceTrackerCollection {
       const FrameSequenceMetrics::CustomReportData& data);
 
   const bool is_single_threaded_;
-  // The reporter takes throughput data and connect to UkmManager to report it.
-  // Note: this has to be before the frame_trackers_. The reason is that a
-  // FrameSequenceTracker owners a FrameSequenceMetrics, so the destructor of
-  // the former calls the destructor of the later. FrameSequenceMetrics's
-  // destructor calls its ReportMetrics() which requires
-  // |throughput_ukm_reporter_| to be alive. So putting it before
-  // |frame_trackers_| to ensure that it is destroyed after the tracker.
-  std::unique_ptr<ThroughputUkmReporter> throughput_ukm_reporter_;
 
   // The callsite can use the type to manipulate the tracker.
   base::flat_map<
@@ -165,8 +151,6 @@ class CC_EXPORT FrameSequenceTrackerCollection {
   NotifyCustomerTrackerResutlsCallback custom_tracker_results_added_callback_;
 
   std::vector<std::unique_ptr<FrameSequenceTracker>> removal_trackers_;
-  CompositorFrameReportingController* const
-      compositor_frame_reporting_controller_;
 
   base::flat_map<
       std::pair<FrameSequenceTrackerType, FrameSequenceMetrics::ThreadType>,
