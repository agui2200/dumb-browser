diff --git a/components/autofill/core/browser/autofill_experiments.cc b/components/autofill/core/browser/autofill_experiments.cc
index 86f1fbca419f..03ba7300dbef 100644
--- a/components/autofill/core/browser/autofill_experiments.cc
+++ b/components/autofill/core/browser/autofill_experiments.cc
@@ -12,7 +12,6 @@
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
-#include "components/autofill/core/browser/autofill_metrics.h"
 #include "components/autofill/core/browser/logging/log_manager.h"
 #include "components/autofill/core/browser/payments/payments_util.h"
 #include "components/autofill/core/browser/personal_data_manager.h"
@@ -42,19 +41,12 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
                                LogManager* log_manager) {
   if (!sync_service) {
     // If credit card sync is not active, we're not offering to upload cards.
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::SYNC_SERVICE_NULL,
-        sync_state);
     if (log_manager)
       log_manager->Log() << LoggingScope::kContext << "SYNC_SERVICE_NULL";
     return false;
   }
 
   if (sync_service->GetAuthError().IsPersistentError()) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::
-            SYNC_SERVICE_PERSISTENT_AUTH_ERROR,
-        sync_state);
     if (log_manager) {
       log_manager->Log() << LoggingScope::kContext
                          << "SYNC_SERVICE_PERSISTENT_ERROR";
@@ -63,10 +55,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
   }
 
   if (!sync_service->GetActiveDataTypes().Has(syncer::AUTOFILL_WALLET_DATA)) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::
-            SYNC_SERVICE_MISSING_AUTOFILL_WALLET_DATA_ACTIVE_TYPE,
-        sync_state);
     if (log_manager) {
       log_manager->Log()
           << LoggingScope::kContext
@@ -79,10 +67,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
     if (!sync_service->GetActiveDataTypes().Has(syncer::AUTOFILL_PROFILE)) {
       // In full sync mode, we only allow card upload when addresses are also
       // active, because we upload potential billing addresses with the card.
-      AutofillMetrics::LogCardUploadEnabledMetric(
-          AutofillMetrics::CardUploadEnabledMetric::
-              SYNC_SERVICE_MISSING_AUTOFILL_PROFILE_ACTIVE_TYPE,
-          sync_state);
       if (log_manager) {
         log_manager->Log()
             << LoggingScope::kContext
@@ -102,10 +86,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
   // information accessible to Google. Since upload makes credit card data
   // available to other Google systems, disable it for passphrase users.
   if (sync_service->GetUserSettings()->IsUsingSecondaryPassphrase()) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::
-            USING_SECONDARY_SYNC_PASSPHRASE,
-        sync_state);
     if (log_manager) {
       log_manager->Log() << LoggingScope::kContext
                          << "USER_HAS_SECONDARY_SYNC_PASSPHRASE";
@@ -116,9 +96,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
   // Don't offer upload for users that are only syncing locally, since they
   // won't receive the cards back from Google Payments.
   if (sync_service->IsLocalSyncEnabled()) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::LOCAL_SYNC_ENABLED,
-        sync_state);
     if (log_manager) {
       log_manager->Log() << LoggingScope::kContext
                          << "USER_ONLY_SYNCING_LOCALLY";
@@ -128,9 +105,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
 
   // Check Payments integration user setting.
   if (!prefs::IsPaymentsIntegrationEnabled(pref_service)) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::PAYMENTS_INTEGRATION_DISABLED,
-        sync_state);
     if (log_manager) {
       log_manager->Log() << LoggingScope::kContext
                          << "PAYMENTS_INTEGRATION_DISABLED";
@@ -140,8 +114,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
 
   // Check that the user is logged into a supported domain.
   if (user_email.empty()) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::EMAIL_EMPTY, sync_state);
     if (log_manager)
       log_manager->Log() << LoggingScope::kContext << "USER_EMAIL_EMPTY";
     return false;
@@ -158,9 +130,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
       !(domain == "googlemail.com" || domain == "gmail.com" ||
         domain == "google.com" || domain == "chromium.org" ||
         domain == "example.com")) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::EMAIL_DOMAIN_NOT_SUPPORTED,
-        sync_state);
     if (log_manager) {
       log_manager->Log() << LoggingScope::kContext
                          << "USER_EMAIL_DOMAIN_NOT_SUPPORTED";
@@ -169,9 +138,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
   }
 
   if (!base::FeatureList::IsEnabled(features::kAutofillUpstream)) {
-    AutofillMetrics::LogCardUploadEnabledMetric(
-        AutofillMetrics::CardUploadEnabledMetric::AUTOFILL_UPSTREAM_DISABLED,
-        sync_state);
     if (log_manager) {
       log_manager->Log() << LoggingScope::kContext
                          << "AUTOFILL_UPSTREAM_NOT_ENABLED";
@@ -179,9 +145,6 @@ bool IsCreditCardUploadEnabled(const PrefService* pref_service,
     return false;
   }
 
-  AutofillMetrics::LogCardUploadEnabledMetric(
-      AutofillMetrics::CardUploadEnabledMetric::CARD_UPLOAD_ENABLED,
-      sync_state);
   return true;
 }
 
