diff --git a/cc/metrics/frame_sequence_tracker_collection.cc b/cc/metrics/frame_sequence_tracker_collection.cc
index a30d44ba9c02..fc9af08ba735 100644
--- a/cc/metrics/frame_sequence_tracker_collection.cc
+++ b/cc/metrics/frame_sequence_tracker_collection.cc
@@ -8,9 +8,7 @@
 #include <vector>
 
 #include "base/memory/ptr_util.h"
-#include "cc/metrics/compositor_frame_reporting_controller.h"
 #include "cc/metrics/frame_sequence_tracker.h"
-#include "cc/metrics/throughput_ukm_reporter.h"
 
 namespace cc {
 
@@ -27,11 +25,8 @@ bool IsScrollType(FrameSequenceTrackerType type) {
 }  // namespace
 
 FrameSequenceTrackerCollection::FrameSequenceTrackerCollection(
-    bool is_single_threaded,
-    CompositorFrameReportingController* compositor_frame_reporting_controller)
-    : is_single_threaded_(is_single_threaded),
-      compositor_frame_reporting_controller_(
-          compositor_frame_reporting_controller) {}
+    bool is_single_threaded)
+    : is_single_threaded_(is_single_threaded) {}
 
 FrameSequenceTrackerCollection::~FrameSequenceTrackerCollection() {
   CleanUp();
@@ -52,12 +47,9 @@ FrameSequenceTracker* FrameSequenceTrackerCollection::StartSequenceInternal(
     return frame_trackers_[key].get();
 
   auto tracker = base::WrapUnique(
-      new FrameSequenceTracker(type, throughput_ukm_reporter_.get()));
+      new FrameSequenceTracker(type));
   frame_trackers_[key] = std::move(tracker);
 
-  if (compositor_frame_reporting_controller_)
-    compositor_frame_reporting_controller_->AddActiveTracker(type);
-
   auto* metrics = frame_trackers_[key]->metrics();
   if (accumulated_metrics_.contains(key)) {
     metrics->AdoptTrace(accumulated_metrics_[key].get());
@@ -68,19 +60,9 @@ FrameSequenceTracker* FrameSequenceTrackerCollection::StartSequenceInternal(
   }
 
   if (metrics->GetEffectiveThread() == ThreadType::kCompositor) {
-    if (compositor_frame_reporting_controller_ &&
-        compositor_thread_driving_smoothness_ == 0) {
-      compositor_frame_reporting_controller_->SetThreadAffectsSmoothness(
-          ThreadType::kCompositor, true);
-    }
     ++compositor_thread_driving_smoothness_;
   } else {
     DCHECK_EQ(metrics->GetEffectiveThread(), ThreadType::kMain);
-    if (compositor_frame_reporting_controller_ &&
-        main_thread_driving_smoothness_ == 0) {
-      compositor_frame_reporting_controller_->SetThreadAffectsSmoothness(
-          ThreadType::kMain, true);
-    }
     ++main_thread_driving_smoothness_;
   }
   return frame_trackers_[key].get();
@@ -108,7 +90,6 @@ void FrameSequenceTrackerCollection::CleanUp() {
     tracker->CleanUp();
   for (auto& metric : accumulated_metrics_)
     metric.second->ReportLeftoverData();
-  throughput_ukm_reporter_ = nullptr;
 }
 
 void FrameSequenceTrackerCollection::StopSequence(
@@ -126,27 +107,13 @@ void FrameSequenceTrackerCollection::StopSequence(
     return;
 
   auto tracker = std::move(frame_trackers_[key]);
-  if (compositor_frame_reporting_controller_) {
-    compositor_frame_reporting_controller_->RemoveActiveTracker(
-        tracker->type());
-  }
 
   if (tracker->metrics()->GetEffectiveThread() == ThreadType::kCompositor) {
     DCHECK_GT(compositor_thread_driving_smoothness_, 0u);
     --compositor_thread_driving_smoothness_;
-    if (compositor_frame_reporting_controller_ &&
-        compositor_thread_driving_smoothness_ == 0) {
-      compositor_frame_reporting_controller_->SetThreadAffectsSmoothness(
-          ThreadType::kCompositor, false);
-    }
   } else {
     DCHECK_GT(main_thread_driving_smoothness_, 0u);
     --main_thread_driving_smoothness_;
-    if (compositor_frame_reporting_controller_ &&
-        main_thread_driving_smoothness_ == 0) {
-      compositor_frame_reporting_controller_->SetThreadAffectsSmoothness(
-          ThreadType::kMain, false);
-    }
   }
 
   frame_trackers_.erase(key);
@@ -382,14 +349,6 @@ FrameSequenceTrackerCollection::GetRemovalTrackerForTesting(
   return nullptr;
 }
 
-void FrameSequenceTrackerCollection::SetUkmManager(UkmManager* manager) {
-  DCHECK(frame_trackers_.empty());
-  if (manager)
-    throughput_ukm_reporter_ = std::make_unique<ThroughputUkmReporter>(manager);
-  else
-    throughput_ukm_reporter_ = nullptr;
-}
-
 void FrameSequenceTrackerCollection::AddCustomTrackerResult(
     int custom_sequence_id,
     FrameSequenceMetrics::ThroughputData throughput_data) {
