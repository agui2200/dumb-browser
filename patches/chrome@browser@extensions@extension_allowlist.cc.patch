diff --git a/chrome/browser/extensions/extension_allowlist.cc b/chrome/browser/extensions/extension_allowlist.cc
index 9d6cdc3763bef..9939d315ded8f 100644
--- a/chrome/browser/extensions/extension_allowlist.cc
+++ b/chrome/browser/extensions/extension_allowlist.cc
@@ -7,9 +7,6 @@
 #include "base/metrics/histogram_functions.h"
 #include "chrome/browser/extensions/extension_service.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/safe_browsing/safe_browsing_metrics_collector.h"
-#include "chrome/browser/safe_browsing/safe_browsing_metrics_collector_factory.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "extensions/browser/allowlist_state.h"
 #include "extensions/browser/extension_registry.h"
 #include "extensions/browser/extension_system.h"
@@ -68,10 +65,6 @@ ExtensionAllowlist::ExtensionAllowlist(Profile* profile,
   // Register to Enhanced Safe Browsing setting changes for allowlist
   // enforcements.
   pref_change_registrar_.Init(profile_->GetPrefs());
-  pref_change_registrar_.Add(
-      prefs::kSafeBrowsingEnhanced,
-      base::BindRepeating(&ExtensionAllowlist::OnSafeBrowsingEnhancedChanged,
-                          base::Unretained(this)));
 }
 
 ExtensionAllowlist::~ExtensionAllowlist() = default;
@@ -240,15 +233,19 @@ void ExtensionAllowlist::OnExtensionInstalled(const std::string& extension_id,
 }
 
 void ExtensionAllowlist::SetAllowlistEnforcementFields() {
+#if 0
   if (safe_browsing::IsEnhancedProtectionEnabled(*profile_->GetPrefs())) {
     warnings_enabled_ = base::FeatureList::IsEnabled(
         extensions_features::kSafeBrowsingCrxAllowlistShowWarnings);
     should_auto_disable_extensions_ = base::FeatureList::IsEnabled(
         extensions_features::kSafeBrowsingCrxAllowlistAutoDisable);
   } else {
+#endif
     warnings_enabled_ = false;
     should_auto_disable_extensions_ = false;
+#if 0
   }
+#endif
 }
 
 // `ApplyEnforcement` can be called when an extension becomes not allowlisted or
@@ -398,6 +395,7 @@ void ExtensionAllowlist::NotifyExtensionAllowlistWarningStateChanged(
 }
 
 void ExtensionAllowlist::ReportExtensionReEnabledEvent() {
+#if 0
   auto* metrics_collector =
       safe_browsing::SafeBrowsingMetricsCollectorFactory::GetForProfile(
           profile_);
@@ -407,6 +405,7 @@ void ExtensionAllowlist::ReportExtensionReEnabledEvent() {
         safe_browsing::SafeBrowsingMetricsCollector::EventType::
             NON_ALLOWLISTED_EXTENSION_RE_ENABLED);
   }
+#endif
 }
 
 }  // namespace extensions
