diff --git a/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc b/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
index 228f003339840..9f4b67c2296bb 100644
--- a/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
+++ b/chrome/browser/privacy_sandbox/privacy_sandbox_settings.cc
@@ -11,12 +11,10 @@
 #include "base/metrics/user_metrics.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
-#include "chrome/browser/federated_learning/floc_id_provider.h"
 #include "chrome/common/chrome_features.h"
 #include "components/content_settings/core/browser/cookie_settings.h"
 #include "components/content_settings/core/browser/host_content_settings_map.h"
 #include "components/content_settings/core/common/pref_names.h"
-#include "components/federated_learning/features/features.h"
 #include "components/prefs/pref_service.h"
 #include "components/privacy_sandbox/privacy_sandbox_prefs.h"
 #include "components/signin/public/identity_manager/identity_manager.h"
@@ -135,6 +133,7 @@ bool IsFlocAllowedByPrefs(PrefService* pref_service) {
          pref_service->GetBoolean(prefs::kPrivacySandboxApisEnabled);
 }
 
+#if 0
 // Returns the number of days in |time|, rounded to the closest day by hour if
 // there is at least 1 day, but rounded to 0 if |time| is less than 1 day.
 int GetNumberOfDaysRoundedAboveOne(base::TimeDelta time) {
@@ -150,6 +149,7 @@ int GetNumberOfDaysRoundedAboveOne(base::TimeDelta time) {
 
   return number_of_days;
 }
+#endif
 
 }  // namespace
 
@@ -239,15 +239,13 @@ base::Time PrivacySandboxSettings::FlocDataAccessibleSince() const {
 }
 
 std::u16string PrivacySandboxSettings::GetFlocDescriptionForDisplay() const {
-  return l10n_util::GetPluralStringFUTF16(
-      IDS_PRIVACY_SANDBOX_FLOC_DESCRIPTION,
-      GetNumberOfDaysRoundedAboveOne(
-          federated_learning::kFlocIdScheduledUpdateInterval.Get()));
+  return std::u16string();
 }
 
 std::u16string PrivacySandboxSettings::GetFlocIdForDisplay() const {
   DCHECK(PrivacySandboxSettingsFunctional());
 
+#if 0
   const bool floc_feature_enabled = base::FeatureList::IsEnabled(
       blink::features::kInterestCohortAPIOriginTrial);
   auto floc_id = federated_learning::FlocId::ReadFromPrefs(pref_service_);
@@ -255,8 +253,11 @@ std::u16string PrivacySandboxSettings::GetFlocIdForDisplay() const {
     return l10n_util::GetStringUTF16(IDS_PRIVACY_SANDBOX_FLOC_INVALID);
 
   return base::NumberToString16(floc_id.ToUint64());
+#endif
+  return std::u16string();
 }
 
+#if 0
 /*static*/ std::u16string PrivacySandboxSettings::GetFlocIdNextUpdateForDisplay(
     federated_learning::FlocIdProvider* floc_id_provider,
     PrefService* pref_service,
@@ -283,13 +284,17 @@ std::u16string PrivacySandboxSettings::GetFlocIdForDisplay() const {
       IDS_PRIVACY_SANDBOX_FLOC_TIME_TO_NEXT_COMPUTE,
       GetNumberOfDaysRoundedAboveOne(next_compute_time - current_time));
 }
+#endif
 
 std::u16string PrivacySandboxSettings::GetFlocResetExplanationForDisplay()
     const {
+#if 0
   return l10n_util::GetPluralStringFUTF16(
       IDS_PRIVACY_SANDBOX_FLOC_RESET_EXPLANATION,
       GetNumberOfDaysRoundedAboveOne(
           federated_learning::kFlocIdScheduledUpdateInterval.Get()));
+#endif
+  return std::u16string();
 }
 
 std::u16string PrivacySandboxSettings::GetFlocStatusForDisplay() const {
