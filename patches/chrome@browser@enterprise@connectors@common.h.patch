diff --git a/chrome/browser/enterprise/connectors/common.h b/chrome/browser/enterprise/connectors/common.h
index e53edb184bcd6..9bbbf4b296d3b 100644
--- a/chrome/browser/enterprise/connectors/common.h
+++ b/chrome/browser/enterprise/connectors/common.h
@@ -11,14 +11,10 @@
 #include <vector>
 
 #include "base/supports_user_data.h"
-#include "components/enterprise/common/proto/connectors.pb.h"
 #include "url/gurl.h"
 
 namespace enterprise_connectors {
 
-// Alias to reduce verbosity when using TriggeredRule::Actions.
-using TriggeredRule = ContentAnalysisResponse::Result::TriggeredRule;
-
 // Keys used to read a connector's policy values.
 constexpr char kKeyServiceProvider[] = "service_provider";
 constexpr char kKeyEnable[] = "enable";
@@ -56,6 +52,7 @@ enum class BlockUntilVerdict {
   BLOCK = 1,
 };
 
+#if 0
 // Structs representing settings to be used for an analysis or a report. These
 // settings should only be kept and considered valid for the specific
 // analysis/report they were obtained for.
@@ -105,6 +102,7 @@ struct ReportingSettings {
   // false.
   bool per_profile = false;
 };
+#endif
 
 struct FileSystemSettings {
   FileSystemSettings();
@@ -128,30 +126,7 @@ struct FileSystemSettings {
 };
 
 // Returns the pref path corresponding to a connector.
-const char* ConnectorPref(AnalysisConnector connector);
-const char* ConnectorPref(ReportingConnector connector);
 const char* ConnectorPref(FileSystemConnector connector);
-const char* ConnectorScopePref(AnalysisConnector connector);
-const char* ConnectorScopePref(ReportingConnector connector);
-
-// Returns the highest precedence action in the given parameters.
-TriggeredRule::Action GetHighestPrecedenceAction(
-    const ContentAnalysisResponse& response);
-TriggeredRule::Action GetHighestPrecedenceAction(
-    const TriggeredRule::Action& action_1,
-    const TriggeredRule::Action& action_2);
-
-// User data class to persist ContentAnalysisResponses in base::SupportsUserData
-// objects.
-struct ScanResult : public base::SupportsUserData::Data {
-  explicit ScanResult(const ContentAnalysisResponse& response);
-  ~ScanResult() override;
-  static const char kKey[];
-  ContentAnalysisResponse response;
-};
-
-// Checks if |response| contains a negative malware verdict.
-bool ContainsMalwareVerdict(const ContentAnalysisResponse& response);
 
 }  // namespace enterprise_connectors
 
