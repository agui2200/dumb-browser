diff --git a/components/viz/common/gpu/metal_api_proxy.mm b/components/viz/common/gpu/metal_api_proxy.mm
index a6df2c7ed25a..789413497e5a 100644
--- a/components/viz/common/gpu/metal_api_proxy.mm
+++ b/components/viz/common/gpu/metal_api_proxy.mm
@@ -9,7 +9,6 @@
 #include <map>
 #include <string>
 
-#include "base/debug/crash_logging.h"
 #include "base/mac/foundation_util.h"
 #include "base/memory/ref_counted.h"
 #include "base/metrics/histogram_macros.h"
@@ -19,7 +18,6 @@
 #include "base/strings/sys_string_conversions.h"
 #include "base/synchronization/condition_variable.h"
 #include "base/trace_event/trace_event.h"
-#include "components/crash/core/common/crash_key.h"
 #include "ui/gl/progress_reporter.h"
 
 namespace {
@@ -136,9 +134,6 @@ class API_AVAILABLE(macos(10.11)) AsyncMetalState
   }
 }
 
-// Maximum length of a shader to be uploaded with a crash report.
-constexpr uint32_t kShaderCrashDumpLength = 8128;
-
 }  // namespace
 
 // A cache of the result of calls to NewLibraryWithRetry. This will store all
@@ -280,24 +275,10 @@ - (void)forwardInvocation:(NSInvocation*)invocation {
                    error:(__autoreleasing NSError**)error {
   TRACE_EVENT0("gpu", "-[MTLDevice newLibraryWithSource:options:error:]");
 
-  // Capture the shader's source in a crash key in case newLibraryWithSource
-  // hangs.
-  // https://crbug.com/974219
-  static crash_reporter::CrashKeyString<kShaderCrashDumpLength> shaderKey(
-      "MTLShaderSource");
   std::string sourceAsSysString = base::SysNSStringToUTF8(source);
-  if (sourceAsSysString.size() > kShaderCrashDumpLength)
-    DLOG(WARNING) << "Truncating shader in crash log.";
-
-  shaderKey.Set(sourceAsSysString);
-  static crash_reporter::CrashKeyString<16> newLibraryCountKey(
-      "MTLNewLibraryCount");
-  newLibraryCountKey.Set(base::NumberToString(_libraryCache->CacheMissCount()));
 
   id<MTLLibrary> library = _libraryCache->NewLibraryWithSource(
       _device, source, options, error, _progressReporter);
-  shaderKey.Clear();
-  newLibraryCountKey.Clear();
 
   // Shaders from Skia will have either a vertexMain or fragmentMain function.
   // Save the source and a weak pointer to the function, so we can capture
@@ -331,29 +312,10 @@ - (void)forwardInvocation:(NSInvocation*)invocation {
   // previous -newLibraryWithSource calls should have saved the sources for
   // these two functions.
   // https://crbug.com/974219
-  static crash_reporter::CrashKeyString<kShaderCrashDumpLength> vertexShaderKey(
-      "MTLVertexSource");
-  if (_vertexSourceFunction == [descriptor vertexFunction])
-    vertexShaderKey.Set(_vertexSource);
-  else
-    DLOG(WARNING) << "Failed to capture vertex shader.";
-  static crash_reporter::CrashKeyString<kShaderCrashDumpLength>
-      fragmentShaderKey("MTLFragmentSource");
-  if (_fragmentSourceFunction == [descriptor fragmentFunction])
-    fragmentShaderKey.Set(_fragmentSource);
-  else
-    DLOG(WARNING) << "Failed to capture fragment shader.";
-  static crash_reporter::CrashKeyString<16> newLibraryCountKey(
-      "MTLNewLibraryCount");
-  newLibraryCountKey.Set(base::NumberToString(_libraryCache->CacheMissCount()));
-
   SCOPED_UMA_HISTOGRAM_TIMER("Gpu.MetalProxy.NewRenderPipelineStateTime");
   id<MTLRenderPipelineState> pipelineState = NewRenderPipelineStateWithRetry(
       _device, descriptor, error, _progressReporter);
 
-  vertexShaderKey.Clear();
-  fragmentShaderKey.Clear();
-  newLibraryCountKey.Clear();
   return pipelineState;
 }
 
