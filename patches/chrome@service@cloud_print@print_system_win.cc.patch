diff --git a/chrome/service/cloud_print/print_system_win.cc b/chrome/service/cloud_print/print_system_win.cc
index 99711a032e78..96a322fbb5ad 100644
--- a/chrome/service/cloud_print/print_system_win.cc
+++ b/chrome/service/cloud_print/print_system_win.cc
@@ -26,7 +26,6 @@
 #include "chrome/service/cloud_print/cdd_conversion_win.h"
 #include "chrome/service/service_process.h"
 #include "chrome/service/service_utility_process_host.h"
-#include "components/crash/core/common/crash_keys.h"
 #include "components/printing/common/cloud_print_cdd_conversion.h"
 #include "printing/backend/win_helper.h"
 #include "printing/emf_win.h"
@@ -65,8 +64,6 @@ class PrintSystemWatcherWin : public base::win::ObjectWatcher::Delegate {
   bool Start(const std::string& printer_name, Delegate* delegate) {
     scoped_refptr<printing::PrintBackend> print_backend(
         printing::PrintBackend::CreateInstance(/*locale=*/std::string()));
-    printer_info_ = print_backend->GetPrinterDriverInfo(printer_name);
-    crash_keys::ScopedPrinterInfo crash_key(printer_info_);
 
     delegate_ = delegate;
     // An empty printer name means watch the current server, we need to pass
@@ -101,7 +98,6 @@ class PrintSystemWatcherWin : public base::win::ObjectWatcher::Delegate {
 
   // base::ObjectWatcher::Delegate method
   void OnObjectSignaled(HANDLE object) override {
-    crash_keys::ScopedPrinterInfo crash_key(printer_info_);
     DWORD change = 0;
     FindNextPrinterChangeNotification(object, &change, nullptr, nullptr);
 
@@ -135,7 +131,6 @@ class PrintSystemWatcherWin : public base::win::ObjectWatcher::Delegate {
   // Returned by FindFirstPrinterChangeNotifier.
   printing::ScopedPrinterChangeHandle printer_change_;
   Delegate* delegate_ = nullptr;  // Delegate to notify
-  std::string printer_info_;      // For crash reporting.
 };
 
 class PrintServerWatcherWin
@@ -240,8 +235,6 @@ class JobSpoolerWin : public PrintSystem::JobSpooler {
     // TODO(gene): add tags handling.
     scoped_refptr<printing::PrintBackend> print_backend(
         printing::PrintBackend::CreateInstance(/*locale=*/std::string()));
-    crash_keys::ScopedPrinterInfo crash_key(
-        print_backend->GetPrinterDriverInfo(printer_name));
     return core_->Spool(print_ticket, print_ticket_mime_type,
                         print_data_file_path, print_data_mime_type,
                         printer_name, job_title, delegate);
@@ -674,7 +667,6 @@ bool PrintSystemWin::ValidatePrintTicket(
     const std::string& printer_name,
     const std::string& print_ticket_data,
     const std::string& print_ticket_data_mime_type) {
-  crash_keys::ScopedPrinterInfo crash_key(GetPrinterDriverInfo(printer_name));
 
   return print_ticket_data_mime_type == kContentTypeJSON &&
          IsValidCjt(print_ticket_data);
@@ -683,8 +675,6 @@ bool PrintSystemWin::ValidatePrintTicket(
 bool PrintSystemWin::GetJobDetails(const std::string& printer_name,
                                    PlatformJobId job_id,
                                    PrintJobDetails* job_details) {
-  crash_keys::ScopedPrinterInfo crash_key(
-      print_backend_->GetPrinterDriverInfo(printer_name));
   DCHECK(job_details);
   printing::ScopedPrinterHandle printer_handle;
   base::string16 printer_name_16 = base::UTF8ToUTF16(printer_name);
