diff --git a/third_party/blink/renderer/core/frame/reporting_context.h b/third_party/blink/renderer/core/frame/reporting_context.h
index 51bee8be0e3fc..de0ea51f14c4c 100644
--- a/third_party/blink/renderer/core/frame/reporting_context.h
+++ b/third_party/blink/renderer/core/frame/reporting_context.h
@@ -5,6 +5,7 @@
 #ifndef THIRD_PARTY_BLINK_RENDERER_CORE_FRAME_REPORTING_CONTEXT_H_
 #define THIRD_PARTY_BLINK_RENDERER_CORE_FRAME_REPORTING_CONTEXT_H_
 
+#include "net/net_buildflags.h"
 #include "third_party/blink/public/mojom/frame/reporting_observer.mojom-blink.h"
 #include "third_party/blink/public/mojom/reporting/reporting.mojom-blink.h"
 #include "third_party/blink/renderer/core/core_export.h"
@@ -54,8 +55,10 @@ class CORE_EXPORT ReportingContext : public GarbageCollected<ReportingContext>,
   // Counts the use of a report type via UseCounter.
   void CountReport(Report*);
 
+#if BUILDFLAG(ENABLE_REPORTING)
   const HeapMojoRemote<mojom::blink::ReportingServiceProxy>&
   GetReportingService() const;
+#endif
 
   void NotifyInternal(Report* report);
   // Send |report| via the Reporting API to |endpoint|.
@@ -65,10 +68,12 @@ class CORE_EXPORT ReportingContext : public GarbageCollected<ReportingContext>,
   HeapHashMap<String, Member<HeapListHashSet<Member<Report>>>> report_buffer_;
   Member<ExecutionContext> execution_context_;
 
+#if BUILDFLAG(ENABLE_REPORTING)
   // This is declared mutable so that the service endpoint can be cached by
   // const methods.
   mutable HeapMojoRemote<mojom::blink::ReportingServiceProxy>
       reporting_service_;
+#endif
 
   HeapMojoReceiver<mojom::blink::ReportingObserver, ReportingContext> receiver_;
 };
