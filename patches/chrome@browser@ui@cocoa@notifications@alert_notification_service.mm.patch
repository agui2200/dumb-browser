diff --git a/chrome/browser/ui/cocoa/notifications/alert_notification_service.mm b/chrome/browser/ui/cocoa/notifications/alert_notification_service.mm
index 2a9282d47f69..5437c452161d 100644
--- a/chrome/browser/ui/cocoa/notifications/alert_notification_service.mm
+++ b/chrome/browser/ui/cocoa/notifications/alert_notification_service.mm
@@ -9,35 +9,11 @@
 #include "base/strings/string_number_conversions.h"
 #import "chrome/browser/ui/cocoa/notifications/alert_nsnotification_service.h"
 #import "chrome/browser/ui/cocoa/notifications/xpc_transaction_handler.h"
-#include "third_party/crashpad/crashpad/client/crashpad_client.h"
-#include "third_party/crashpad/crashpad/client/crashpad_info.h"
-#include "third_party/crashpad/crashpad/client/simple_string_dictionary.h"
-
-namespace {
-
-crashpad::SimpleStringDictionary* GetCrashpadAnnotations() {
-  static crashpad::SimpleStringDictionary* annotations = []() {
-    auto* annotations = new crashpad::SimpleStringDictionary();
-    annotations->SetKeyValue("ptype", "AlertNotificationService.xpc");
-    annotations->SetKeyValue("pid", base::NumberToString(getpid()).c_str());
-    return annotations;
-  }();
-  return annotations;
-}
-
-}  // namespace
 
 @implementation AlertNotificationService {
   base::scoped_nsobject<XPCTransactionHandler> _transactionHandler;
   base::scoped_nsobject<NSXPCConnection> _connection;
   base::scoped_nsobject<NSObject<NotificationDelivery>> _notificationDelivery;
-
-  // Ensures that the XPC service has been configured for crash reporting.
-  // Other messages should not be sent to a new instance of the service
-  // before -setMachExceptionPort: is called.
-  // Because XPC callouts occur on a concurrent dispatch queue, this must be
-  // accessed in a @synchronized(self) block.
-  BOOL _didSetExceptionPort;
 }
 
 - (instancetype)initWithTransactionHandler:(XPCTransactionHandler*)handler
@@ -58,26 +34,14 @@ - (void)setUseUNNotification:(BOOL)useUNNotification
   }
 
   @synchronized(self) {
-    if (_didSetExceptionPort) {
-      return;
-    }
-
     [_transactionHandler setUseUNNotification:useUNNotification];
     _notificationDelivery.reset([[AlertNSNotificationService alloc]
         initWithTransactionHandler:_transactionHandler
                      xpcConnection:_connection]);
-
-    crashpad::CrashpadClient client;
-    _didSetExceptionPort = client.SetHandlerMachPort(std::move(sendRight));
-    DCHECK(_didSetExceptionPort);
-
-    crashpad::CrashpadInfo::GetCrashpadInfo()->set_simple_annotations(
-        GetCrashpadAnnotations());
   }
 }
 
 - (void)deliverNotification:(NSDictionary*)notificationData {
-  DCHECK(_didSetExceptionPort);
   DCHECK(_notificationDelivery);
 
   [_notificationDelivery deliverNotification:notificationData];
@@ -85,7 +49,6 @@ - (void)deliverNotification:(NSDictionary*)notificationData {
 
 - (void)closeNotificationWithId:(NSString*)notificationId
                   withProfileId:(NSString*)profileId {
-  DCHECK(_didSetExceptionPort);
   DCHECK(_notificationDelivery);
 
   [_notificationDelivery closeNotificationWithId:notificationId
@@ -93,7 +56,6 @@ - (void)closeNotificationWithId:(NSString*)notificationId
 }
 
 - (void)closeAllNotifications {
-  DCHECK(_didSetExceptionPort);
   DCHECK(_notificationDelivery);
 
   [_notificationDelivery closeAllNotifications];
