diff --git a/media/learning/impl/learning_task_controller_impl.cc b/media/learning/impl/learning_task_controller_impl.cc
index 45c812d24899..ac81c5846d78 100644
--- a/media/learning/impl/learning_task_controller_impl.cc
+++ b/media/learning/impl/learning_task_controller_impl.cc
@@ -52,8 +52,7 @@ LearningTaskControllerImpl::~LearningTaskControllerImpl() = default;
 void LearningTaskControllerImpl::BeginObservation(
     base::UnguessableToken id,
     const FeatureVector& features,
-    const base::Optional<TargetValue>& default_target,
-    const base::Optional<ukm::SourceId>& source_id) {
+    const base::Optional<TargetValue>& default_target) {
   // TODO(liberato): Should we enforce that the right number of features are
   // present here?  Right now, we allow it to be shorter, so that features from
   // a FeatureProvider may be omitted.  Of course, they have to be at the end in
@@ -68,7 +67,7 @@ void LearningTaskControllerImpl::BeginObservation(
   // get here anyway.
   DCHECK(!default_target);
 
-  helper_->BeginObservation(id, features, source_id);
+  helper_->BeginObservation(id, features);
 }
 
 void LearningTaskControllerImpl::CompleteObservation(
@@ -104,8 +103,7 @@ void LearningTaskControllerImpl::PredictDistribution(
     std::move(callback).Run(base::nullopt);
 }
 
-void LearningTaskControllerImpl::AddFinishedExample(LabelledExample example,
-                                                    ukm::SourceId source_id) {
+void LearningTaskControllerImpl::AddFinishedExample(LabelledExample example) {
   // Verify that we have a trainer and that we got the right number of features.
   // We don't compare to |task_.feature_descriptions.size()| since that has been
   // adjusted to the subset size already.  We expect the original count.
@@ -140,7 +138,6 @@ void LearningTaskControllerImpl::AddFinishedExample(LabelledExample example,
 
     DistributionReporter::PredictionInfo info;
     info.observed = example.target_value;
-    info.source_id = source_id;
     info.total_training_weight = last_training_weight_;
     info.total_training_examples = last_training_size_;
     reporter_->GetPredictionCallback(info).Run(predicted);
