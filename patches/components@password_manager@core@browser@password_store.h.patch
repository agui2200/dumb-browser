diff --git a/components/password_manager/core/browser/password_store.h b/components/password_manager/core/browser/password_store.h
index 421ee1b0799f1..b9757dcbc4071 100644
--- a/components/password_manager/core/browser/password_store.h
+++ b/components/password_manager/core/browser/password_store.h
@@ -48,8 +48,6 @@ struct PasswordForm;
 
 using IsAccountStore = base::StrongAlias<class IsAccountStoreTag, bool>;
 
-using metrics_util::GaiaPasswordHashChange;
-
 class AffiliatedMatchHelper;
 class PasswordStoreConsumer;
 class InsecureCredentialsConsumer;
@@ -353,6 +351,7 @@ class PasswordStore : protected PasswordStoreSync,
   void PreparePasswordHashData(const std::string& sync_username,
                                bool is_signed_in);
 
+#if 0
   // Checks that some suffix of |input| equals to a password saved on another
   // registry controlled domain than |domain|.
   // If such suffix is found, |consumer|->OnReuseFound() is called on the same
@@ -361,6 +360,7 @@ class PasswordStore : protected PasswordStoreSync,
   virtual void CheckReuse(const std::u16string& input,
                           const std::string& domain,
                           PasswordReuseDetectorConsumer* consumer);
+#endif
 
   // Saves |username| and a hash of |password| for GAIA password reuse checking.
   // |event| is used for metric logging and for distinguishing sync password
@@ -369,8 +369,7 @@ class PasswordStore : protected PasswordStoreSync,
   // primary account.
   virtual void SaveGaiaPasswordHash(const std::string& username,
                                     const std::u16string& password,
-                                    bool is_primary_account,
-                                    GaiaPasswordHashChange event);
+                                    bool is_primary_account);
 
   // Saves |username| and a hash of |password| for enterprise password reuse
   // checking.
@@ -379,8 +378,7 @@ class PasswordStore : protected PasswordStoreSync,
 
   // Saves |sync_password_data| for sync password reuse checking.
   // |event| is used for metric logging.
-  virtual void SaveSyncPasswordHash(const PasswordHashData& sync_password_data,
-                                    GaiaPasswordHashChange event);
+  virtual void SaveSyncPasswordHash(const PasswordHashData& sync_password_data);
 
   // Clears the saved GAIA password hash for |username|.
   virtual void ClearGaiaPasswordHash(const std::string& username);
@@ -419,6 +417,7 @@ class PasswordStore : protected PasswordStoreSync,
  protected:
   friend class base::RefCountedThreadSafe<PasswordStore>;
 
+#if 0
   // Represents a single CheckReuse() request. Implements functionality to
   // listen to reuse events and propagate them to |consumer| on the sequence on
   // which CheckReuseRequest is created.
@@ -443,6 +442,7 @@ class PasswordStore : protected PasswordStoreSync,
 
     DISALLOW_COPY_AND_ASSIGN(CheckReuseRequest);
   };
+#endif
 
   // Status of PasswordStore::Init().
   enum class InitStatus {
@@ -605,13 +605,14 @@ class PasswordStore : protected PasswordStoreSync,
   void SaveProtectedPasswordHash(const std::string& username,
                                  const std::u16string& password,
                                  bool is_primary_account,
-                                 bool is_gaia_password,
-                                 GaiaPasswordHashChange event);
+                                 bool is_gaia_password);
 
+#if 0
   // Synchronous implementation of CheckReuse().
   void CheckReuseImpl(std::unique_ptr<CheckReuseRequest> request,
                       const std::u16string& input,
                       const std::string& domain);
+#endif
 
   // Synchronous implementation of SaveProtectedPasswordHash().
   // |should_log_metrics| indicates whether to log the counts of captured
@@ -865,10 +866,12 @@ class PasswordStore : protected PasswordStoreSync,
 
   PrefService* prefs_ = nullptr;
 
+#if 0
   // PasswordReuseDetector can be only destroyed on the background sequence. It
   // can't be owned by PasswordStore because PasswordStore can be destroyed on
   // the UI thread and DestroyOnBackgroundThread isn't guaranteed to be called.
   PasswordReuseDetector* reuse_detector_ = nullptr;
+#endif
   std::unique_ptr<PasswordStoreSigninNotifier> notifier_;
   HashPasswordManager hash_password_manager_;
 
