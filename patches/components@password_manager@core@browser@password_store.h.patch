diff --git a/components/password_manager/core/browser/password_store.h b/components/password_manager/core/browser/password_store.h
index efc26bab2a64..bf33304a27be 100644
--- a/components/password_manager/core/browser/password_store.h
+++ b/components/password_manager/core/browser/password_store.h
@@ -24,12 +24,12 @@
 #include "build/build_config.h"
 #include "components/keyed_service/core/refcounted_keyed_service.h"
 #include "components/password_manager/core/browser/compromised_credentials_table.h"
+#include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/password_manager/core/browser/password_form_forward.h"
 #include "components/password_manager/core/browser/password_store_change.h"
 #include "components/password_manager/core/browser/password_store_sync.h"
 
 #if defined(PASSWORD_REUSE_DETECTION_ENABLED)
-#include "components/password_manager/core/browser/hash_password_manager.h"
 #include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_reuse_detector.h"
 #include "components/password_manager/core/browser/password_reuse_detector_consumer.h"
@@ -66,9 +66,7 @@ struct FieldInfo;
 struct InteractionsStats;
 struct CompromisedCredentials;
 
-#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
 using PasswordHashDataList = base::Optional<std::vector<PasswordHashData>>;
-#endif
 
 // Interface for storing form passwords in a platform-specific secure way.
 // The login request/manipulation API is not threadsafe and must be used
@@ -379,12 +377,12 @@ class PasswordStore : protected PasswordStoreSync,
 
   void SetSyncTaskTimeoutForTest(base::TimeDelta timeout);
 
-#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
   // Immediately called after |Init()| to retrieve password hash data for
   // reuse detection.
   void PreparePasswordHashData(const std::string& sync_username,
                                bool is_signed_in);
 
+#if defined(FULL_SAFEBROWSING)
   // Checks that some suffix of |input| equals to a password saved on another
   // registry controlled domain than |domain|.
   // If such suffix is found, |consumer|->OnReuseFound() is called on the same
@@ -393,6 +391,7 @@ class PasswordStore : protected PasswordStoreSync,
   virtual void CheckReuse(const base::string16& input,
                           const std::string& domain,
                           PasswordReuseDetectorConsumer* consumer);
+#endif
 
   // Saves |username| and a hash of |password| for GAIA password reuse checking.
   // |event| is used for metric logging and for distinguishing sync password
@@ -401,8 +400,7 @@ class PasswordStore : protected PasswordStoreSync,
   // primary account.
   virtual void SaveGaiaPasswordHash(const std::string& username,
                                     const base::string16& password,
-                                    bool is_primary_account,
-                                    GaiaPasswordHashChange event);
+                                    bool is_primary_account);
 
   // Saves |username| and a hash of |password| for enterprise password reuse
   // checking.
@@ -411,8 +409,7 @@ class PasswordStore : protected PasswordStoreSync,
 
   // Saves |sync_password_data| for sync password reuse checking.
   // |event| is used for metric logging.
-  virtual void SaveSyncPasswordHash(const PasswordHashData& sync_password_data,
-                                    GaiaPasswordHashChange event);
+  virtual void SaveSyncPasswordHash(const PasswordHashData& sync_password_data);
 
   // Clears the saved GAIA password hash for |username|.
   virtual void ClearGaiaPasswordHash(const std::string& username);
@@ -448,7 +445,6 @@ class PasswordStore : protected PasswordStoreSync,
   // These URLs are used in enterprise password reuse detection.
   void ScheduleEnterprisePasswordURLUpdate();
 
-#endif
 
  protected:
   friend class base::RefCountedThreadSafe<PasswordStore>;
@@ -628,7 +624,6 @@ class PasswordStore : protected PasswordStoreSync,
   void InvokeAndNotifyAboutCompromisedPasswordsChange(
       base::OnceCallback<bool()> callback);
 
-#if defined(PASSWORD_REUSE_DETECTION_ENABLED)
   // Saves |username| and a hash of |password| for password reuse checking.
   // |is_gaia_password| indicates if it is a Gaia account. |event| is used for
   // metric logging. |is_primary_account| is whether account belong to the
@@ -636,13 +631,14 @@ class PasswordStore : protected PasswordStoreSync,
   void SaveProtectedPasswordHash(const std::string& username,
                                  const base::string16& password,
                                  bool is_primary_account,
-                                 bool is_gaia_password,
-                                 GaiaPasswordHashChange event);
+                                 bool is_gaia_password);
 
+#if defined(SYNC_PASSWORD_REUSE_DETECTION_ENABLED)
   // Synchronous implementation of CheckReuse().
   void CheckReuseImpl(std::unique_ptr<CheckReuseRequest> request,
                       const base::string16& input,
                       const std::string& domain);
+#endif
 
   // Synchronous implementation of SaveProtectedPasswordHash().
   // |should_log_metrics| indicates whether to log the counts of captured
@@ -671,7 +667,6 @@ class PasswordStore : protected PasswordStoreSync,
 
   // Synchronous implementation of ClearAllNonGmailPasswordHash().
   void ClearAllNonGmailPasswordHashImpl();
-#endif
 
   scoped_refptr<base::SequencedTaskRunner> main_task_runner() const {
     return main_task_runner_;
@@ -899,9 +894,10 @@ class PasswordStore : protected PasswordStoreSync,
   // can't be owned by PasswordStore because PasswordStore can be destroyed on
   // the UI thread and DestroyOnBackgroundThread isn't guaranteed to be called.
   PasswordReuseDetector* reuse_detector_ = nullptr;
+#endif
+
   std::unique_ptr<PasswordStoreSigninNotifier> notifier_;
   HashPasswordManager hash_password_manager_;
-#endif
 
   std::unique_ptr<UnsyncedCredentialsDeletionNotifier> deletion_notifier_;
 
