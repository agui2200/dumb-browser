diff --git a/ash/system/accessibility/tray_accessibility.cc b/ash/system/accessibility/tray_accessibility.cc
index 932ac8ea4689..0ed72211a354 100644
--- a/ash/system/accessibility/tray_accessibility.cc
+++ b/ash/system/accessibility/tray_accessibility.cc
@@ -16,7 +16,6 @@
 #include "ash/resources/vector_icons/vector_icons.h"
 #include "ash/shell.h"
 #include "ash/strings/grit/ash_strings.h"
-#include "ash/system/machine_learning/user_settings_event_logger.h"
 #include "ash/system/model/system_tray_model.h"
 #include "ash/system/tray/hover_highlight_view.h"
 #include "ash/system/tray/tray_detailed_view.h"
@@ -52,14 +51,6 @@ enum AccessibilityState {
   A11Y_SWITCH_ACCESS = 1 << 14,
 };
 
-void LogUserAccessibilityEvent(UserSettingsEvent::Event::AccessibilityId id,
-                               bool new_state) {
-  auto* logger = ml::UserSettingsEventLogger::Get();
-  if (logger) {
-    logger->LogAccessibilityUkmEvent(id, new_state);
-  }
-}
-
 }  // namespace
 
 namespace tray {
@@ -356,43 +347,22 @@ void AccessibilityDetailedView::HandleViewClicked(views::View* view) {
   if (spoken_feedback_view_ && view == spoken_feedback_view_ &&
       !controller->IsEnterpriseIconVisibleForSpokenFeedback()) {
     bool new_state = !controller->spoken_feedback().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_SpokenFeedbackEnabled")
-                     : UserMetricsAction("StatusArea_SpokenFeedbackDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::SPOKEN_FEEDBACK,
-                              new_state);
     controller->SetSpokenFeedbackEnabled(new_state, A11Y_NOTIFICATION_NONE);
   } else if (select_to_speak_view_ && view == select_to_speak_view_ &&
              !controller->IsEnterpriseIconVisibleForSelectToSpeak()) {
     bool new_state = !controller->select_to_speak().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_SelectToSpeakEnabled")
-                     : UserMetricsAction("StatusArea_SelectToSpeakDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::SELECT_TO_SPEAK,
-                              new_state);
     controller->select_to_speak().SetEnabled(new_state);
   } else if (dictation_view_ && view == dictation_view_ &&
              !controller->IsEnterpriseIconVisibleForDictation()) {
     bool new_state = !controller->dictation().enabled();
-    RecordAction(new_state ? UserMetricsAction("StatusArea_DictationEnabled")
-                           : UserMetricsAction("StatusArea_DictationDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::DICTATION, new_state);
     controller->dictation().SetEnabled(new_state);
   } else if (high_contrast_view_ && view == high_contrast_view_ &&
              !controller->IsEnterpriseIconVisibleForHighContrast()) {
     bool new_state = !controller->high_contrast().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_HighContrastEnabled")
-                     : UserMetricsAction("StatusArea_HighContrastDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::HIGH_CONTRAST,
-                              new_state);
     controller->high_contrast().SetEnabled(new_state);
   } else if (screen_magnifier_view_ && view == screen_magnifier_view_ &&
              !controller->IsEnterpriseIconVisibleForFullScreenMagnifier()) {
     bool new_state = !delegate->IsMagnifierEnabled();
-    RecordAction(new_state ? UserMetricsAction("StatusArea_MagnifierEnabled")
-                           : UserMetricsAction("StatusArea_MagnifierDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::MAGNIFIER, new_state);
     delegate->SetMagnifierEnabled(new_state);
   } else if (docked_magnifier_view_ && view == docked_magnifier_view_ &&
              !controller->IsEnterpriseIconVisibleForDockedMagnifier()) {
@@ -406,91 +376,43 @@ void AccessibilityDetailedView::HandleViewClicked(views::View* view) {
     // disabling the docked magnifier.
     CloseBubble();
 
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_DockedMagnifierEnabled")
-                     : UserMetricsAction("StatusArea_DockedMagnifierDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::DOCKED_MAGNIFIER,
-                              new_state);
     docked_magnifier_controller->SetEnabled(new_state);
   } else if (large_cursor_view_ && view == large_cursor_view_ &&
              !controller->IsEnterpriseIconVisibleForLargeCursor()) {
     bool new_state = !controller->large_cursor().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_LargeCursorEnabled")
-                     : UserMetricsAction("StatusArea_LargeCursorDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::LARGE_CURSOR,
-                              new_state);
     controller->large_cursor().SetEnabled(new_state);
   } else if (autoclick_view_ && view == autoclick_view_ &&
              !controller->IsEnterpriseIconVisibleForAutoclick()) {
     bool new_state = !controller->autoclick().enabled();
-    RecordAction(new_state ? UserMetricsAction("StatusArea_AutoClickEnabled")
-                           : UserMetricsAction("StatusArea_AutoClickDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::AUTO_CLICK, new_state);
-    controller->autoclick().SetEnabled(new_state);
   } else if (virtual_keyboard_view_ && view == virtual_keyboard_view_ &&
              !controller->IsEnterpriseIconVisibleForVirtualKeyboard()) {
     bool new_state = !controller->virtual_keyboard().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_VirtualKeyboardEnabled")
-                     : UserMetricsAction("StatusArea_VirtualKeyboardDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::VIRTUAL_KEYBOARD,
-                              new_state);
     controller->virtual_keyboard().SetEnabled(new_state);
   } else if (switch_access_view_ && view == switch_access_view_ &&
              !controller->IsEnterpriseIconVisibleForSwitchAccess()) {
     bool new_state = !controller->switch_access().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_SwitchAccessEnabled")
-                     : UserMetricsAction("StatusArea_SwitchAccessDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::SWITCH_ACCESS,
-                              new_state);
     controller->switch_access().SetEnabled(new_state);
   } else if (caret_highlight_view_ && view == caret_highlight_view_ &&
              !controller->IsEnterpriseIconVisibleForCaretHighlight()) {
     bool new_state = !controller->caret_highlight().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_CaretHighlightEnabled")
-                     : UserMetricsAction("StatusArea_CaretHighlightDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::CARET_HIGHLIGHT,
-                              new_state);
     controller->caret_highlight().SetEnabled(new_state);
   } else if (mono_audio_view_ && view == mono_audio_view_ &&
              !controller->IsEnterpriseIconVisibleForMonoAudio()) {
     bool new_state = !controller->mono_audio().enabled();
-    RecordAction(new_state ? UserMetricsAction("StatusArea_MonoAudioEnabled")
-                           : UserMetricsAction("StatusArea_MonoAudioDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::MONO_AUDIO, new_state);
     controller->mono_audio().SetEnabled(new_state);
   } else if (highlight_mouse_cursor_view_ &&
              view == highlight_mouse_cursor_view_ &&
              !controller->IsEnterpriseIconVisibleForCursorHighlight()) {
     bool new_state = !controller->cursor_highlight().enabled();
-    RecordAction(
-        new_state
-            ? UserMetricsAction("StatusArea_HighlightMouseCursorEnabled")
-            : UserMetricsAction("StatusArea_HighlightMouseCursorDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::HIGHLIGHT_MOUSE_CURSOR,
-                              new_state);
     controller->cursor_highlight().SetEnabled(new_state);
   } else if (highlight_keyboard_focus_view_ &&
              view == highlight_keyboard_focus_view_ &&
              !controller->IsEnterpriseIconVisibleForFocusHighlight()) {
     bool new_state = !controller->focus_highlight().enabled();
-    RecordAction(
-        new_state
-            ? UserMetricsAction("StatusArea_HighlightKeyboardFocusEnabled")
-            : UserMetricsAction("StatusArea_HighlightKeyboardFocusDisabled"));
-    LogUserAccessibilityEvent(
-        UserSettingsEvent::Event::HIGHLIGHT_KEYBOARD_FOCUS, new_state);
     controller->focus_highlight().SetEnabled(new_state);
   } else if (sticky_keys_view_ && view == sticky_keys_view_ &&
              !controller->IsEnterpriseIconVisibleForStickyKeys()) {
     bool new_state = !controller->sticky_keys().enabled();
-    RecordAction(new_state
-                     ? UserMetricsAction("StatusArea_StickyKeysEnabled")
-                     : UserMetricsAction("StatusArea_StickyKeysDisabled"));
-    LogUserAccessibilityEvent(UserSettingsEvent::Event::STICKY_KEYS, new_state);
     controller->sticky_keys().SetEnabled(new_state);
   }
 }
