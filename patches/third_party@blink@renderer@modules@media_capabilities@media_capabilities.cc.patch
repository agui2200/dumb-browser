diff --git a/third_party/blink/renderer/modules/media_capabilities/media_capabilities.cc b/third_party/blink/renderer/modules/media_capabilities/media_capabilities.cc
index 64b2b618d071..a1ec34bd79af 100644
--- a/third_party/blink/renderer/modules/media_capabilities/media_capabilities.cc
+++ b/third_party/blink/renderer/modules/media_capabilities/media_capabilities.cc
@@ -54,7 +54,6 @@
 #include "third_party/blink/renderer/modules/encryptedmedia/media_key_system_access.h"
 #include "third_party/blink/renderer/modules/encryptedmedia/media_key_system_access_initializer_base.h"
 #include "third_party/blink/renderer/modules/encryptedmedia/media_keys_controller.h"
-#include "third_party/blink/renderer/modules/media_capabilities/media_capabilities_identifiability_metrics.h"
 #include "third_party/blink/renderer/modules/media_capabilities_names.h"
 #include "third_party/blink/renderer/modules/mediarecorder/media_recorder_handler.h"
 #include "third_party/blink/renderer/platform/bindings/exception_state.h"
@@ -149,8 +148,6 @@ ScriptPromise CreateResolvedPromiseToDecodingInfoWith(
     ScriptState* script_state,
     const MediaDecodingConfiguration* config) {
   MediaCapabilitiesDecodingInfo* info = CreateDecodingInfoWith(value);
-  media_capabilities_identifiability_metrics::ReportDecodingInfoResult(
-      ExecutionContext::From(script_state), config, info);
   return ScriptPromise::Cast(script_state, ToV8(info, script_state));
 }
 
@@ -647,12 +644,10 @@ void MediaCapabilities::Trace(blink::Visitor* visitor) const {
 MediaCapabilities::PendingCallbackState::PendingCallbackState(
     ScriptPromiseResolver* resolver,
     MediaKeySystemAccess* access,
-    const base::TimeTicks& request_time,
-    base::Optional<IdentifiableToken> input_token)
+    const base::TimeTicks& request_time)
     : resolver(resolver),
       key_system_access(access),
-      request_time(request_time),
-      input_token(input_token) {}
+      request_time(request_time) {}
 
 void MediaCapabilities::PendingCallbackState::Trace(
     blink::Visitor* visitor) const {
@@ -723,8 +718,6 @@ ScriptPromise MediaCapabilities::decodingInfo(
       // MediaKeySystemAccess.
       MediaCapabilitiesDecodingInfo* info =
           CreateEncryptedDecodingInfoWith(false, nullptr);
-      media_capabilities_identifiability_metrics::ReportDecodingInfoResult(
-          ExecutionContext::From(script_state), config, info);
       return ScriptPromise::Cast(script_state, ToV8(info, script_state));
     }
   }
@@ -1089,8 +1082,6 @@ void MediaCapabilities::GetPerfInfo(
     // Audio-only is always smooth and power efficient.
     MediaCapabilitiesDecodingInfo* info = CreateDecodingInfoWith(true);
     info->setKeySystemAccess(access);
-    media_capabilities_identifiability_metrics::ReportDecodingInfoResult(
-        execution_context, decoding_config, info);
     resolver->Resolve(info);
     return;
   }
@@ -1106,8 +1097,6 @@ void MediaCapabilities::GetPerfInfo(
 
   if (!EnsurePerfHistoryService(execution_context)) {
     MediaCapabilitiesDecodingInfo* info = CreateDecodingInfoWith(true);
-    media_capabilities_identifiability_metrics::ReportDecodingInfoResult(
-        execution_context, decoding_config, info);
     resolver->Resolve(WrapPersistent(info));
     return;
   }
@@ -1116,9 +1105,7 @@ void MediaCapabilities::GetPerfInfo(
   pending_cb_map_.insert(
       callback_id,
       MakeGarbageCollected<MediaCapabilities::PendingCallbackState>(
-          resolver, access, request_time,
-          media_capabilities_identifiability_metrics::
-              ComputeDecodingInfoInputToken(decoding_config)));
+          resolver, access, request_time));
 
   if (base::FeatureList::IsEnabled(media::kMediaLearningSmoothnessExperiment)) {
     GetPerfInfo_ML(execution_context, callback_id, video_codec, video_profile,
@@ -1317,8 +1304,6 @@ void MediaCapabilities::ResolveCallbackIfReady(int callback_id) {
                         process_time);
   }
 
-  media_capabilities_identifiability_metrics::ReportDecodingInfoResult(
-      execution_context, pending_cb->input_token, info);
   pending_cb->resolver->Resolve(std::move(info));
   pending_cb_map_.erase(callback_id);
 }
