diff --git a/content/browser/net/cross_origin_opener_policy_reporter.cc b/content/browser/net/cross_origin_opener_policy_reporter.cc
index 5c86a8b55b88..791d1c0bcfca 100644
--- a/content/browser/net/cross_origin_opener_policy_reporter.cc
+++ b/content/browser/net/cross_origin_opener_policy_reporter.cc
@@ -20,6 +20,7 @@ namespace content {
 
 namespace {
 
+#if 0
 // Report attribute names (camelCase):
 constexpr char kColumnNumber[] = "columnNumber";
 constexpr char kDisposition[] = "disposition";
@@ -67,6 +68,7 @@ const char* ToString(network::mojom::CoopAccessReportType report_type) {
       return "access-to-coop-page-from-other";
   }
 }
+#endif
 
 base::UnguessableToken GetFrameToken(FrameTreeNode* frame,
                                      SiteInstance* site_instance) {
@@ -131,6 +133,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationToCOOPReport(
     const GURL& referrer_url,
     bool same_origin_with_previous,
     bool is_report_only) {
+#if 0
   const base::Optional<std::string>& endpoint =
       is_report_only ? coop_.report_only_reporting_endpoint
                      : coop_.reporting_endpoint;
@@ -154,6 +157,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationToCOOPReport(
   body.SetString(kReferrer, sanitized_referrer_url);
   body.SetString(kViolationType, kTypeToResponse);
   QueueNavigationReport(std::move(body), *endpoint, is_report_only);
+#endif
 }
 
 void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
@@ -161,6 +165,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
     bool is_current_source,
     bool same_origin_with_next,
     bool is_report_only) {
+#if 0
   const base::Optional<std::string>& endpoint =
       is_report_only ? coop_.report_only_reporting_endpoint
                      : coop_.reporting_endpoint;
@@ -178,12 +183,14 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
   body.SetString(kNextURL, sanitized_next_url);
   body.SetString(kViolationType, kTypeFromResponse);
   QueueNavigationReport(std::move(body), *endpoint, is_report_only);
+#endif
 }
 
 void CrossOriginOpenerPolicyReporter::QueueAccessReport(
     network::mojom::CoopAccessReportType report_type,
     const std::string& property,
     network::mojom::SourceLocationPtr source_location) {
+#if 0
   // Cross-Origin-Opener-Policy-Report-Only is not required to provide
   // endpoints.
   if (!coop_.report_only_reporting_endpoint)
@@ -209,6 +216,7 @@ void CrossOriginOpenerPolicyReporter::QueueAccessReport(
   }
   storage_partition_->GetNetworkContext()->QueueReport(
       "coop", endpoint, context_url_, base::nullopt, std::move(body));
+#endif
 }
 
 void CrossOriginOpenerPolicyReporter::Clone(
@@ -326,6 +334,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
     base::DictionaryValue body,
     const std::string& endpoint,
     bool is_report_only) {
+#if 0
   body.SetString(kDisposition,
                  is_report_only ? kDispositionReporting : kDispositionEnforce);
   body.SetString(
@@ -338,6 +347,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
   storage_partition_->GetNetworkContext()->QueueReport(
       "coop", endpoint, sanitized_context_url, /*user_agent=*/base::nullopt,
       std::move(body));
+#endif
 }
 
 }  // namespace content
