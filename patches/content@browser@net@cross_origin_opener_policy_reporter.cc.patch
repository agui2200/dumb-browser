diff --git a/content/browser/net/cross_origin_opener_policy_reporter.cc b/content/browser/net/cross_origin_opener_policy_reporter.cc
index 544cb4111885b..4883c3a7c384f 100644
--- a/content/browser/net/cross_origin_opener_policy_reporter.cc
+++ b/content/browser/net/cross_origin_opener_policy_reporter.cc
@@ -21,41 +21,6 @@ namespace content {
 
 namespace {
 
-// Report attribute names (camelCase):
-constexpr char kColumnNumber[] = "columnNumber";
-constexpr char kDisposition[] = "disposition";
-constexpr char kEffectivePolicy[] = "effectivePolicy";
-constexpr char kInitialPopupURL[] = "initialPopupURL";
-constexpr char kLineNumber[] = "lineNumber";
-constexpr char kNextURL[] = "nextResponseURL";
-constexpr char kOpeneeURL[] = "openeeURL";
-constexpr char kOpenerURL[] = "openerURL";
-constexpr char kOtherDocumentURL[] = "otherDocumentURL";
-constexpr char kPreviousURL[] = "previousResponseURL";
-constexpr char kProperty[] = "property";
-constexpr char kReferrer[] = "referrer";
-constexpr char kSourceFile[] = "sourceFile";
-constexpr char kType[] = "type";
-
-// Report attribute values:
-constexpr char kDispositionEnforce[] = "enforce";
-constexpr char kDispositionReporting[] = "reporting";
-constexpr char kTypeFromResponse[] = "navigation-from-response";
-constexpr char kTypeToResponse[] = "navigation-to-response";
-
-std::string ToString(network::mojom::CrossOriginOpenerPolicyValue coop_value) {
-  switch (coop_value) {
-    case network::mojom::CrossOriginOpenerPolicyValue::kUnsafeNone:
-      return "unsafe-none";
-    case network::mojom::CrossOriginOpenerPolicyValue::kSameOrigin:
-      return "same-origin";
-    case network::mojom::CrossOriginOpenerPolicyValue::kSameOriginAllowPopups:
-      return "same-origin-allow-popups";
-    case network::mojom::CrossOriginOpenerPolicyValue::kSameOriginPlusCoep:
-      return "same-origin-plus-coep";
-  }
-}
-
 base::Optional<blink::FrameToken> GetFrameToken(FrameTreeNode* frame,
                                                 SiteInstance* site_instance) {
   RenderFrameHostImpl* rfh = frame->current_frame_host();
@@ -152,20 +117,6 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationToCOOPReport(
     const GURL& previous_url,
     bool same_origin_with_previous,
     bool is_report_only) {
-  const base::Optional<std::string>& endpoint =
-      is_report_only ? coop_.report_only_reporting_endpoint
-                     : coop_.reporting_endpoint;
-  if (!endpoint)
-    return;
-
-  base::DictionaryValue body;
-  body.SetString(kDisposition,
-                 is_report_only ? kDispositionReporting : kDispositionEnforce);
-  body.SetString(kPreviousURL,
-                 same_origin_with_previous ? SanitizedURL(previous_url) : "");
-  body.SetString(kReferrer, context_referrer_url_);
-  body.SetString(kType, kTypeToResponse);
-  QueueNavigationReport(std::move(body), *endpoint, is_report_only);
 }
 
 void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
@@ -173,19 +124,6 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
     bool is_current_source,
     bool same_origin_with_next,
     bool is_report_only) {
-  const base::Optional<std::string>& endpoint =
-      is_report_only ? coop_.report_only_reporting_endpoint
-                     : coop_.reporting_endpoint;
-  if (!endpoint)
-    return;
-
-  std::string sanitized_next_url;
-  if (is_current_source || same_origin_with_next)
-    sanitized_next_url = SanitizedURL(next_url);
-  base::DictionaryValue body;
-  body.SetString(kNextURL, sanitized_next_url);
-  body.SetString(kType, kTypeFromResponse);
-  QueueNavigationReport(std::move(body), *endpoint, is_report_only);
 }
 
 void CrossOriginOpenerPolicyReporter::QueueAccessReport(
@@ -194,54 +132,6 @@ void CrossOriginOpenerPolicyReporter::QueueAccessReport(
     network::mojom::SourceLocationPtr source_location,
     const std::string& reported_window_url,
     const std::string& initial_popup_url) const {
-  // Cross-Origin-Opener-Policy-Report-Only is not required to provide
-  // endpoints.
-  if (!coop_.report_only_reporting_endpoint)
-    return;
-
-  const std::string& endpoint = coop_.report_only_reporting_endpoint.value();
-
-  DCHECK(base::FeatureList::IsEnabled(
-      network::features::kCrossOriginOpenerPolicyAccessReporting));
-
-  base::DictionaryValue body;
-  body.SetStringPath(kType, network::CoopAccessReportTypeToString(report_type));
-  body.SetStringPath(kDisposition, kDispositionReporting);
-  body.SetStringPath(kEffectivePolicy,
-                     ToString(coop_.report_only_value));
-  body.SetStringPath(kProperty, property);
-  if (network::IsAccessFromCoopPage(report_type) &&
-      source_location->url != "") {
-    body.SetStringPath(kSourceFile, source_location->url);
-    body.SetIntPath(kLineNumber, source_location->line);
-    body.SetIntPath(kColumnNumber, source_location->column);
-  }
-
-  switch (report_type) {
-    // Reporter is the openee:
-    case network::mojom::CoopAccessReportType::kAccessFromCoopPageToOpener:
-    case network::mojom::CoopAccessReportType::kAccessToCoopPageFromOpener:
-      body.SetStringPath(kOpenerURL, reported_window_url);
-      body.SetStringPath(kReferrer, context_referrer_url_);
-      break;
-
-    // Reporter is the opener:
-    case network::mojom::CoopAccessReportType::kAccessFromCoopPageToOpenee:
-    case network::mojom::CoopAccessReportType::kAccessToCoopPageFromOpenee:
-      body.SetStringPath(kOpeneeURL, reported_window_url);
-      body.SetStringPath(kInitialPopupURL, initial_popup_url);
-      break;
-
-    // Other:
-    case network::mojom::CoopAccessReportType::kAccessFromCoopPageToOther:
-    case network::mojom::CoopAccessReportType::kAccessToCoopPageFromOther:
-      body.SetStringPath(kOtherDocumentURL, reported_window_url);
-      break;
-  }
-
-  storage_partition_->GetNetworkContext()->QueueReport(
-      "coop", endpoint, context_url_, network_isolation_key_, base::nullopt,
-      std::move(body));
 }
 
 // static
@@ -385,14 +275,6 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
     base::DictionaryValue body,
     const std::string& endpoint,
     bool is_report_only) {
-  body.SetString(kDisposition,
-                 is_report_only ? kDispositionReporting : kDispositionEnforce);
-  body.SetString(
-      kEffectivePolicy,
-      ToString(is_report_only ? coop_.report_only_value : coop_.value));
-  storage_partition_->GetNetworkContext()->QueueReport(
-      "coop", endpoint, context_url_, network_isolation_key_,
-      /*user_agent=*/base::nullopt, std::move(body));
 }
 
 }  // namespace content
