diff --git a/content/browser/net/cross_origin_opener_policy_reporter.cc b/content/browser/net/cross_origin_opener_policy_reporter.cc
index 3f4ded2ebfeb6..259e9ac327381 100644
--- a/content/browser/net/cross_origin_opener_policy_reporter.cc
+++ b/content/browser/net/cross_origin_opener_policy_reporter.cc
@@ -21,6 +21,7 @@ namespace content {
 
 namespace {
 
+#if 0
 // Report attribute names (camelCase):
 constexpr char kColumnNumber[] = "columnNumber";
 constexpr char kDisposition[] = "disposition";
@@ -55,6 +56,7 @@ std::string ToString(network::mojom::CrossOriginOpenerPolicyValue coop_value) {
       return "same-origin-plus-coep";
   }
 }
+#endif
 
 absl::optional<blink::FrameToken> GetFrameToken(FrameTreeNode* frame,
                                                 SiteInstance* site_instance) {
@@ -152,6 +154,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationToCOOPReport(
     const GURL& previous_url,
     bool same_origin_with_previous,
     bool is_report_only) {
+#if 0
   const absl::optional<std::string>& endpoint =
       is_report_only ? coop_.report_only_reporting_endpoint
                      : coop_.reporting_endpoint;
@@ -166,6 +169,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationToCOOPReport(
   body.SetString(kReferrer, context_referrer_url_);
   body.SetString(kType, kTypeToResponse);
   QueueNavigationReport(std::move(body), *endpoint, is_report_only);
+#endif
 }
 
 void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
@@ -173,6 +177,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
     bool is_current_source,
     bool same_origin_with_next,
     bool is_report_only) {
+#if 0
   const absl::optional<std::string>& endpoint =
       is_report_only ? coop_.report_only_reporting_endpoint
                      : coop_.reporting_endpoint;
@@ -186,6 +191,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationAwayFromCOOPReport(
   body.SetString(kNextURL, sanitized_next_url);
   body.SetString(kType, kTypeFromResponse);
   QueueNavigationReport(std::move(body), *endpoint, is_report_only);
+#endif
 }
 
 void CrossOriginOpenerPolicyReporter::QueueAccessReport(
@@ -194,6 +200,7 @@ void CrossOriginOpenerPolicyReporter::QueueAccessReport(
     network::mojom::SourceLocationPtr source_location,
     const std::string& reported_window_url,
     const std::string& initial_popup_url) const {
+#if 0
   // Cross-Origin-Opener-Policy-Report-Only is not required to provide
   // endpoints.
   if (!coop_.report_only_reporting_endpoint)
@@ -242,6 +249,7 @@ void CrossOriginOpenerPolicyReporter::QueueAccessReport(
   storage_partition_->GetNetworkContext()->QueueReport(
       "coop", endpoint, context_url_, network_isolation_key_, absl::nullopt,
       std::move(body));
+#endif
 }
 
 // static
@@ -385,6 +393,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
     base::DictionaryValue body,
     const std::string& endpoint,
     bool is_report_only) {
+#if 0
   body.SetString(kDisposition,
                  is_report_only ? kDispositionReporting : kDispositionEnforce);
   body.SetString(
@@ -393,6 +402,7 @@ void CrossOriginOpenerPolicyReporter::QueueNavigationReport(
   storage_partition_->GetNetworkContext()->QueueReport(
       "coop", endpoint, context_url_, network_isolation_key_,
       /*user_agent=*/absl::nullopt, std::move(body));
+#endif
 }
 
 }  // namespace content
