diff --git a/components/search_engines/template_url_service.cc b/components/search_engines/template_url_service.cc
index 120df608bdc0..78158b68f992 100644
--- a/components/search_engines/template_url_service.cc
+++ b/components/search_engines/template_url_service.cc
@@ -347,26 +347,7 @@ bool TemplateURLService::CanAddAutogeneratedKeyword(
     const base::string16& keyword,
     const GURL& url,
     const TemplateURL** template_url_to_replace) {
-  DCHECK(!keyword.empty());  // This should only be called for non-empty
-                             // keywords. If we need to support empty kewords
-                             // the code needs to change slightly.
-  const TemplateURL* existing_url = GetTemplateURLForKeyword(keyword);
-  if (template_url_to_replace)
-    *template_url_to_replace = existing_url;
-  if (existing_url) {
-    // We already have a TemplateURL for this keyword. Only allow it to be
-    // replaced if the TemplateURL can be replaced.
-    return CanReplace(existing_url);
-  }
-
-  // We don't have a TemplateURL with keyword.  We still may not allow this
-  // keyword if there's evidence we may have created this keyword before and
-  // the user renamed it (because, for instance, the keyword is a common word
-  // that may interfere with search queries).  An easy heuristic for this is
-  // whether the user has a TemplateURL that has been manually modified (e.g.,
-  // renamed) connected to the same host.
-  return !url.is_valid() || url.host().empty() ||
-      CanAddAutogeneratedKeywordForHost(url.host());
+  return false;
 }
 
 bool TemplateURLService::IsPrepopulatedOrCreatedByPolicy(
@@ -1559,17 +1540,11 @@ void TemplateURLService::ChangeToLoadedState() {
 
 bool TemplateURLService::CanAddAutogeneratedKeywordForHost(
     const std::string& host) const {
-  const TemplateURLSet* urls = provider_map_->GetURLsForHost(host);
-  if (!urls)
-    return true;
-
-  return std::all_of(urls->begin(), urls->end(), [](const TemplateURL* turl) {
-    return turl->safe_for_autoreplace();
-  });
+  return false;
 }
 
 bool TemplateURLService::CanReplace(const TemplateURL* t_url) const {
-  return !ShowInDefaultList(t_url) && t_url->safe_for_autoreplace();
+  return false;
 }
 
 TemplateURL* TemplateURLService::FindNonExtensionTemplateURLForKeyword(
