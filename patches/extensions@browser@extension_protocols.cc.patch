diff --git a/extensions/browser/extension_protocols.cc b/extensions/browser/extension_protocols.cc
index e4e1bf4054ad..53af39858172 100644
--- a/extensions/browser/extension_protocols.cc
+++ b/extensions/browser/extension_protocols.cc
@@ -71,7 +71,6 @@
 #include "extensions/common/extension.h"
 #include "extensions/common/extension_resource.h"
 #include "extensions/common/file_util.h"
-#include "extensions/common/identifiability_metrics.h"
 #include "extensions/common/manifest_handlers/background_info.h"
 #include "extensions/common/manifest_handlers/csp_info.h"
 #include "extensions/common/manifest_handlers/icons_handler.h"
@@ -107,85 +106,6 @@ namespace {
 
 ExtensionProtocolTestHandler* g_test_handler = nullptr;
 
-// This is used to collect some metrics of load results, by wrapping the actual
-// URLLoaderClient and observing success or failure.
-//
-// This approach is taken because loading can happen via things like
-// content::CreateFileURLLoaderBypassingSecurityChecks(), and
-// LoadResourceFromResourceBundle and it avoids having to modify all those
-// places for a temporary study.
-class ResultRecordingClient : public network::mojom::URLLoaderClient {
- public:
-  ResultRecordingClient(
-      const GURL& url,
-      base::UkmSourceId ukm_source_id,
-      mojo::PendingRemote<network::mojom::URLLoaderClient> real_client)
-      : url_(url),
-        ukm_source_id_(ukm_source_id),
-        real_client_(std::move(real_client)) {}
-
-  void OnReceiveResponse(
-      network::mojom::URLResponseHeadPtr response_head) override {
-    real_client_->OnReceiveResponse(std::move(response_head));
-  }
-
-  void OnReceiveRedirect(
-      const net::RedirectInfo& redirect_info,
-      network::mojom::URLResponseHeadPtr response_head) override {
-    real_client_->OnReceiveRedirect(redirect_info, std::move(response_head));
-  }
-
-  void OnUploadProgress(int64_t current_position,
-                        int64_t total_size,
-                        OnUploadProgressCallback ack_callback) override {
-    real_client_->OnUploadProgress(current_position, total_size,
-                                   std::move(ack_callback));
-  }
-
-  void OnReceiveCachedMetadata(mojo_base::BigBuffer data) override {
-    real_client_->OnReceiveCachedMetadata(std::move(data));
-  }
-
-  void OnTransferSizeUpdated(int32_t transfer_size_diff) override {
-    real_client_->OnTransferSizeUpdated(transfer_size_diff);
-  }
-
-  void OnStartLoadingResponseBody(
-      mojo::ScopedDataPipeConsumerHandle body) override {
-    real_client_->OnStartLoadingResponseBody(std::move(body));
-  }
-
-  void OnComplete(const network::URLLoaderCompletionStatus& status) override {
-    RecordExtensionResourceAccessResult(
-        ukm_source_id_, url_,
-        status.error_code == net::OK ? ExtensionResourceAccessResult::kSuccess
-                                     : ExtensionResourceAccessResult::kFailure);
-    real_client_->OnComplete(status);
-  }
-
- private:
-  GURL url_;
-  base::UkmSourceId ukm_source_id_;
-  mojo::Remote<network::mojom::URLLoaderClient> real_client_;
-};
-
-mojo::PendingRemote<network::mojom::URLLoaderClient> WrapWithMetricsIfNeeded(
-    const GURL& url,
-    base::UkmSourceId ukm_source_id,
-    mojo::PendingRemote<network::mojom::URLLoaderClient> in_client) {
-  if (ukm_source_id == base::kInvalidUkmSourceId)
-    return in_client;
-
-  mojo::PendingRemote<network::mojom::URLLoaderClient> proxy_client_remote;
-  auto proxy_client = std::make_unique<ResultRecordingClient>(
-      url, ukm_source_id, std::move(in_client));
-
-  mojo::MakeSelfOwnedReceiver(
-      std::move(proxy_client),
-      proxy_client_remote.InitWithNewPipeAndPassReceiver());
-  return proxy_client_remote;
-}
-
 void GenerateBackgroundPageContents(const Extension* extension,
                                     std::string* mime_type,
                                     std::string* charset,
@@ -461,7 +381,6 @@ class ExtensionURLLoaderFactory
  public:
   static mojo::PendingRemote<network::mojom::URLLoaderFactory> Create(
       content::BrowserContext* browser_context,
-      base::UkmSourceId ukm_source_id,
       bool is_web_view_request,
       int render_process_id) {
     DCHECK(browser_context);
@@ -475,7 +394,7 @@ class ExtensionURLLoaderFactory
 
     // Manages its own lifetime.
     new ExtensionURLLoaderFactory(
-        browser_context, ukm_source_id, is_web_view_request, render_process_id,
+        browser_context, is_web_view_request, render_process_id,
         pending_remote.InitWithNewPipeAndPassReceiver());
 
     return pending_remote;
@@ -494,14 +413,12 @@ class ExtensionURLLoaderFactory
   // the NonNetworkURLLoaderFactoryBase::OnDisconnect method.
   ExtensionURLLoaderFactory(
       content::BrowserContext* browser_context,
-      base::UkmSourceId ukm_source_id,
       bool is_web_view_request,
       int render_process_id,
       mojo::PendingReceiver<network::mojom::URLLoaderFactory> factory_receiver)
       : content::NonNetworkURLLoaderFactoryBase(std::move(factory_receiver)),
         browser_context_(browser_context),
         is_web_view_request_(is_web_view_request),
-        ukm_source_id_(ukm_source_id),
         render_process_id_(render_process_id) {
     DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
     extension_info_map_ =
@@ -538,9 +455,6 @@ class ExtensionURLLoaderFactory
       return;
     }
 
-    client =
-        WrapWithMetricsIfNeeded(request.url, ukm_source_id_, std::move(client));
-
     const std::string extension_id = request.url.host();
     ExtensionRegistry* registry = ExtensionRegistry::Get(browser_context_);
     scoped_refptr<const Extension> extension =
@@ -592,20 +506,6 @@ class ExtensionURLLoaderFactory
                               &send_cors_header, &follow_symlinks_anywhere);
     }
 
-    // If the extension is the Media Router Component Extension used to support
-    // Casting scenarios, log metrics needed to track migration away from this
-    // extension.
-    // TODO(crbug.com/1097594): Remove this metric logging once migration away
-    // from the Media Router Component Extension completes.
-    const MediaRouterExtensionAccessLogger* media_router_access_logger =
-        ExtensionsBrowserClient::Get()->GetMediaRouterAccessLogger();
-    if (media_router_access_logger && request.request_initiator.has_value() &&
-        (extension.get()->id() == extension_misc::kCastExtensionIdRelease ||
-         extension.get()->id() == extension_misc::kCastExtensionIdDev)) {
-      media_router_access_logger->LogMediaRouterComponentExtensionUse(
-          request.request_initiator.value(), browser_context_);
-    }
-
     if (IsBackgroundPageURL(request.url)) {
       // Handle background page requests immediately with a simple generated
       // chunk of HTML.
@@ -789,7 +689,6 @@ class ExtensionURLLoaderFactory
 
   content::BrowserContext* browser_context_;
   bool is_web_view_request_;
-  base::UkmSourceId ukm_source_id_;
 
   // We store the ID and get RenderProcessHost each time it's needed. This is to
   // avoid holding on to stale pointers if we get requests past the lifetime of
@@ -852,10 +751,9 @@ void SetExtensionProtocolTestHandler(ExtensionProtocolTestHandler* handler) {
 mojo::PendingRemote<network::mojom::URLLoaderFactory>
 CreateExtensionNavigationURLLoaderFactory(
     content::BrowserContext* browser_context,
-    base::UkmSourceId ukm_source_id,
     bool is_web_view_request) {
   return ExtensionURLLoaderFactory::Create(
-      browser_context, ukm_source_id, is_web_view_request,
+      browser_context, is_web_view_request,
       content::ChildProcessHost::kInvalidUniqueID);
 }
 
@@ -863,7 +761,7 @@ mojo::PendingRemote<network::mojom::URLLoaderFactory>
 CreateExtensionWorkerMainResourceURLLoaderFactory(
     content::BrowserContext* browser_context) {
   return ExtensionURLLoaderFactory::Create(
-      browser_context, base::kInvalidUkmSourceId,
+      browser_context,
       /*is_web_view_request=*/false,
       content::ChildProcessHost::kInvalidUniqueID);
 }
@@ -872,7 +770,7 @@ mojo::PendingRemote<network::mojom::URLLoaderFactory>
 CreateExtensionServiceWorkerScriptURLLoaderFactory(
     content::BrowserContext* browser_context) {
   return ExtensionURLLoaderFactory::Create(
-      browser_context, base::kInvalidUkmSourceId,
+      browser_context,
       /*is_web_view_request=*/false,
       content::ChildProcessHost::kInvalidUniqueID);
 }
@@ -885,14 +783,8 @@ CreateExtensionURLLoaderFactory(int render_process_id, int render_frame_id) {
   bool is_web_view_request =
       WebViewGuest::FromFrameID(render_process_id, render_frame_id) != nullptr;
 
-  content::RenderFrameHost* rfh =
-      content::RenderFrameHost::FromID(render_process_id, render_frame_id);
-  base::UkmSourceId ukm_source_id = base::kInvalidUkmSourceId;
-  if (rfh)
-    ukm_source_id = base::UkmSourceId::FromInt64(rfh->GetPageUkmSourceId());
-
   return ExtensionURLLoaderFactory::Create(
-      browser_context, ukm_source_id, is_web_view_request, render_process_id);
+      browser_context, is_web_view_request, render_process_id);
 }
 
 void EnsureExtensionURLLoaderFactoryShutdownNotifierFactoryBuilt() {
