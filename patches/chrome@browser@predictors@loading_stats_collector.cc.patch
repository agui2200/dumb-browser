diff --git a/chrome/browser/predictors/loading_stats_collector.cc b/chrome/browser/predictors/loading_stats_collector.cc
index 947fa0806997b..c263b90528a77 100644
--- a/chrome/browser/predictors/loading_stats_collector.cc
+++ b/chrome/browser/predictors/loading_stats_collector.cc
@@ -7,15 +7,10 @@
 #include <set>
 #include <vector>
 
-#include "base/metrics/histogram_functions.h"
-#include "base/metrics/histogram_macros.h"
 #include "base/strings/stringprintf.h"
 #include "chrome/browser/predictors/loading_data_collector.h"
 #include "chrome/browser/predictors/preconnect_manager.h"
 #include "chrome/browser/predictors/resource_prefetch_predictor.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
-#include "services/metrics/public/cpp/ukm_source.h"
 
 namespace predictors {
 
@@ -23,6 +18,7 @@ namespace {
 
 using RedirectStatus = ResourcePrefetchPredictor::RedirectStatus;
 
+#if 0
 RedirectStatus GetPredictionRedirectStatus(const GURL& initial_url,
                                            const GURL& main_frame_url,
                                            const std::string& prediction_key,
@@ -142,20 +138,19 @@ void ReportPreconnectAccuracy(
   UMA_HISTOGRAM_COUNTS_100(internal::kLoadingPredictorPreconnectCount,
                            total_preconnects);
 }
+#endif
 
 }  // namespace
 
 LoadingStatsCollector::LoadingStatsCollector(
     ResourcePrefetchPredictor* predictor,
-    const LoadingPredictorConfig& config)
-    : predictor_(predictor),
-      max_stats_age_(base::TimeDelta::FromSeconds(
-          config.max_navigation_lifetime_seconds)) {}
+    const LoadingPredictorConfig& config) {}
 
 LoadingStatsCollector::~LoadingStatsCollector() = default;
 
 void LoadingStatsCollector::RecordPreconnectStats(
     std::unique_ptr<PreconnectStats> stats) {
+#if 0
   const GURL& main_frame_url = stats->url;
   auto it = preconnect_stats_.find(main_frame_url);
   if (it != preconnect_stats_.end()) {
@@ -164,12 +159,14 @@ void LoadingStatsCollector::RecordPreconnectStats(
   }
 
   preconnect_stats_.emplace(main_frame_url, std::move(stats));
+#endif
 }
 
 void LoadingStatsCollector::RecordPageRequestSummary(
     const PageRequestSummary& summary,
     const absl::optional<OptimizationGuidePrediction>&
         optimization_guide_prediction) {
+#if 0
   const GURL& initial_url = summary.initial_url;
 
   ukm::builders::LoadingPredictor builder(summary.ukm_source_id);
@@ -296,9 +293,11 @@ void LoadingStatsCollector::RecordPageRequestSummary(
     }
     builder.Record(ukm::UkmRecorder::Get());
   }
+#endif
 }
 
 void LoadingStatsCollector::CleanupAbandonedStats() {
+#if 0
   base::TimeTicks time_now = base::TimeTicks::Now();
   for (auto it = preconnect_stats_.begin(); it != preconnect_stats_.end();) {
     if (time_now - it->second->start_time > max_stats_age_) {
@@ -308,6 +307,7 @@ void LoadingStatsCollector::CleanupAbandonedStats() {
       ++it;
     }
   }
+#endif
 }
 
 }  // namespace predictors
