diff --git a/chrome/browser/predictors/loading_stats_collector.cc b/chrome/browser/predictors/loading_stats_collector.cc
index 5e781b51db52..50a5d291d9fa 100644
--- a/chrome/browser/predictors/loading_stats_collector.cc
+++ b/chrome/browser/predictors/loading_stats_collector.cc
@@ -7,15 +7,10 @@
 #include <set>
 #include <vector>
 
-#include "base/metrics/histogram_functions.h"
-#include "base/metrics/histogram_macros.h"
 #include "base/strings/stringprintf.h"
 #include "chrome/browser/predictors/loading_data_collector.h"
 #include "chrome/browser/predictors/preconnect_manager.h"
 #include "chrome/browser/predictors/resource_prefetch_predictor.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
-#include "services/metrics/public/cpp/ukm_source.h"
 
 namespace predictors {
 
@@ -23,6 +18,7 @@ namespace {
 
 using RedirectStatus = ResourcePrefetchPredictor::RedirectStatus;
 
+#if 0
 RedirectStatus GetPredictionRedirectStatus(const GURL& initial_url,
                                            const GURL& main_frame_url,
                                            const std::string& prediction_key,
@@ -142,172 +138,27 @@ void ReportPreconnectAccuracy(
   UMA_HISTOGRAM_COUNTS_100(internal::kLoadingPredictorPreconnectCount,
                            total_preconnects);
 }
+#endif
 
 }  // namespace
 
 LoadingStatsCollector::LoadingStatsCollector(
     ResourcePrefetchPredictor* predictor,
-    const LoadingPredictorConfig& config)
-    : predictor_(predictor),
-      max_stats_age_(base::TimeDelta::FromSeconds(
-          config.max_navigation_lifetime_seconds)) {}
+    const LoadingPredictorConfig& config) {}
 
 LoadingStatsCollector::~LoadingStatsCollector() = default;
 
 void LoadingStatsCollector::RecordPreconnectStats(
     std::unique_ptr<PreconnectStats> stats) {
-  const GURL& main_frame_url = stats->url;
-  auto it = preconnect_stats_.find(main_frame_url);
-  if (it != preconnect_stats_.end()) {
-    ReportPreconnectAccuracy(*it->second, {});
-    preconnect_stats_.erase(it);
-  }
-
-  preconnect_stats_.emplace(main_frame_url, std::move(stats));
 }
 
 void LoadingStatsCollector::RecordPageRequestSummary(
     const PageRequestSummary& summary,
     const base::Optional<OptimizationGuidePrediction>&
         optimization_guide_prediction) {
-  const GURL& initial_url = summary.initial_url;
-
-  ukm::builders::LoadingPredictor builder(summary.ukm_source_id);
-  bool recorded_ukm = false;
-  size_t ukm_cap = 100;
-
-  PreconnectPrediction preconnect_prediction;
-  if (predictor_->PredictPreconnectOrigins(initial_url,
-                                           &preconnect_prediction)) {
-    size_t correctly_predicted_origins = ReportPreconnectPredictionAccuracy(
-        preconnect_prediction, summary, HintOrigin::NAVIGATION);
-    if (!preconnect_prediction.requests.empty()) {
-      builder.SetLocalPredictionOrigins(
-          std::min(ukm_cap, preconnect_prediction.requests.size()));
-      builder.SetLocalPredictionCorrectlyPredictedOrigins(
-          std::min(ukm_cap, correctly_predicted_origins));
-      recorded_ukm = true;
-    }
-  }
-  if (optimization_guide_prediction) {
-    builder.SetOptimizationGuidePredictionDecision(
-        static_cast<int64_t>(optimization_guide_prediction->decision));
-    if (optimization_guide_prediction->optimization_guide_prediction_arrived) {
-      builder.SetNavigationStartToOptimizationGuidePredictionArrived(
-          (optimization_guide_prediction->optimization_guide_prediction_arrived
-               .value() -
-           summary.navigation_started)
-              .InMilliseconds());
-    }
-    if (!optimization_guide_prediction->preconnect_prediction.requests
-             .empty()) {
-      ReportPreconnectPredictionAccuracy(
-          optimization_guide_prediction->preconnect_prediction, summary,
-          HintOrigin::OPTIMIZATION_GUIDE);
-    }
-    if (!optimization_guide_prediction->predicted_subresources.empty()) {
-      builder.SetOptimizationGuidePredictionSubresources(std::min(
-          ukm_cap,
-          optimization_guide_prediction->predicted_subresources.size()));
-      const auto& actual_subresource_urls = summary.subresource_urls;
-      size_t correctly_predicted_subresources = std::count_if(
-          optimization_guide_prediction->predicted_subresources.begin(),
-          optimization_guide_prediction->predicted_subresources.end(),
-          [&actual_subresource_urls](const GURL& subresource_url) {
-            return actual_subresource_urls.find(subresource_url) !=
-                   actual_subresource_urls.end();
-          });
-      builder.SetOptimizationGuidePredictionCorrectlyPredictedSubresources(
-          std::min(ukm_cap, correctly_predicted_subresources));
-
-      url::Origin main_frame_origin = url::Origin::Create(summary.initial_url);
-      std::set<url::Origin> predicted_origins;
-      for (const auto& subresource :
-           optimization_guide_prediction->predicted_subresources) {
-        url::Origin subresource_origin = url::Origin::Create(subresource);
-        if (subresource_origin == main_frame_origin) {
-          // Do not count the main frame origin as a predicted origin.
-          continue;
-        }
-        predicted_origins.insert(subresource_origin);
-      }
-      builder.SetOptimizationGuidePredictionOrigins(
-          std::min(ukm_cap, predicted_origins.size()));
-      const auto& actual_subresource_origins = summary.origins;
-      size_t correctly_predicted_origins = std::count_if(
-          predicted_origins.begin(), predicted_origins.end(),
-          [&actual_subresource_origins](const url::Origin& subresource_origin) {
-            return actual_subresource_origins.find(subresource_origin) !=
-                   actual_subresource_origins.end();
-          });
-      builder.SetOptimizationGuidePredictionCorrectlyPredictedOrigins(
-          std::min(ukm_cap, correctly_predicted_origins));
-    }
-    recorded_ukm = true;
-  }
-  if (!summary.preconnect_origins.empty()) {
-    builder.SetSubresourceOriginPreconnectsInitiated(
-        std::min(ukm_cap, summary.preconnect_origins.size()));
-    const auto& actual_subresource_origins = summary.origins;
-    size_t correctly_predicted_subresource_origins_initiated = std::count_if(
-        summary.preconnect_origins.begin(), summary.preconnect_origins.end(),
-        [&actual_subresource_origins](const url::Origin& subresource_origin) {
-          return actual_subresource_origins.find(subresource_origin) !=
-                 actual_subresource_origins.end();
-        });
-    builder.SetCorrectSubresourceOriginPreconnectsInitiated(
-        std::min(ukm_cap, correctly_predicted_subresource_origins_initiated));
-    recorded_ukm = true;
-  }
-  if (!summary.prefetch_urls.empty()) {
-    builder.SetSubresourcePrefetchesInitiated(
-        std::min(ukm_cap, summary.prefetch_urls.size()));
-    const auto& actual_subresource_urls = summary.subresource_urls;
-    size_t correctly_predicted_subresource_prefetches_initiated = std::count_if(
-        summary.prefetch_urls.begin(), summary.prefetch_urls.end(),
-        [&actual_subresource_urls](const GURL& subresource_url) {
-          return actual_subresource_urls.find(subresource_url) !=
-                 actual_subresource_urls.end();
-        });
-    builder.SetCorrectSubresourcePrefetchesInitiated(std::min(
-        ukm_cap, correctly_predicted_subresource_prefetches_initiated));
-    recorded_ukm = true;
-  }
-  if (summary.first_prefetch_initiated) {
-    DCHECK(!summary.prefetch_urls.empty());
-    builder.SetNavigationStartToFirstSubresourcePrefetchInitiated(
-        (summary.first_prefetch_initiated.value() - summary.navigation_started)
-            .InMilliseconds());
-    recorded_ukm = true;
-  }
-
-  auto it = preconnect_stats_.find(initial_url);
-  if (it != preconnect_stats_.end()) {
-    ReportPreconnectAccuracy(*it->second, summary.origins);
-    preconnect_stats_.erase(it);
-  }
-
-  if (recorded_ukm) {
-    // Only record nav start to commit if we had any predictions.
-    if (summary.navigation_committed != base::TimeTicks::Max()) {
-      builder.SetNavigationStartToNavigationCommit(
-          (summary.navigation_committed - summary.navigation_started)
-              .InMilliseconds());
-    }
-    builder.Record(ukm::UkmRecorder::Get());
-  }
 }
 
 void LoadingStatsCollector::CleanupAbandonedStats() {
-  base::TimeTicks time_now = base::TimeTicks::Now();
-  for (auto it = preconnect_stats_.begin(); it != preconnect_stats_.end();) {
-    if (time_now - it->second->start_time > max_stats_age_) {
-      ReportPreconnectAccuracy(*it->second, {});
-      it = preconnect_stats_.erase(it);
-    } else {
-      ++it;
-    }
-  }
 }
 
 }  // namespace predictors
