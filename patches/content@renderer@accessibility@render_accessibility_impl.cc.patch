diff --git a/content/renderer/accessibility/render_accessibility_impl.cc b/content/renderer/accessibility/render_accessibility_impl.cc
index 50be3f152f41..04655efbd4e5 100644
--- a/content/renderer/accessibility/render_accessibility_impl.cc
+++ b/content/renderer/accessibility/render_accessibility_impl.cc
@@ -33,8 +33,6 @@
 #include "content/renderer/render_frame_proxy.h"
 #include "content/renderer/render_view_impl.h"
 #include "services/image_annotation/public/mojom/image_annotation.mojom.h"
-#include "services/metrics/public/cpp/mojo_ukm_recorder.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
 #include "third_party/blink/public/platform/task_type.h"
 #include "third_party/blink/public/web/web_disallow_transition_scope.h"
 #include "third_party/blink/public/web/web_document.h"
@@ -65,16 +63,6 @@ namespace {
 // example this is used during initial page load.
 constexpr int kDelayForDeferredEvents = 350;
 
-// The minimum amount of time in milliseconds that should be spent
-// in serializing code in order to report the elapsed time as a URL-keyed
-// metric.
-constexpr int kMinSerializationTimeToSendInMS = 100;
-
-// When URL-keyed metrics for the amount of time spent in serializing code
-// are sent, the minimum amount of time to wait, in seconds, before
-// sending metrics. Metrics may also be sent once per page transition.
-constexpr int kMinUKMDelayInSeconds = 300;
-
 void SetAccessibilityCrashKey(ui::AXMode mode) {
   // Add a crash key with the ax_mode, to enable searching for top crashes that
   // occur when accessibility is turned on. This adds it for each renderer,
@@ -196,13 +184,7 @@ RenderAccessibilityImpl::RenderAccessibilityImpl(
       plugin_tree_source_(nullptr),
       last_scroll_offset_(gfx::Size()),
       event_schedule_status_(EventScheduleStatus::kNotWaiting),
-      reset_token_(0),
-      ukm_timer_(std::make_unique<base::ElapsedTimer>()),
-      last_ukm_source_id_(ukm::kInvalidSourceId) {
-  mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> recorder;
-  content::RenderThread::Get()->BindHostReceiver(
-      recorder.InitWithNewPipeAndPassReceiver());
-  ukm_recorder_ = std::make_unique<ukm::MojoUkmRecorder>(std::move(recorder));
+      reset_token_(0) {
   WebView* web_view = render_frame_->GetRenderView()->GetWebView();
   WebSettings* settings = web_view->GetSettings();
 
@@ -287,9 +269,7 @@ void RenderAccessibilityImpl::DidCommitProvisionalLoad(
   // Defer events during initial page load.
   event_schedule_mode_ = EventScheduleMode::kDeferEvents;
 
-  MaybeSendUKM();
   slowest_serialization_ms_ = 0;
-  ukm_timer_ = std::make_unique<base::ElapsedTimer>();
 
   // Remove the image annotator if the page is loading and it was added for
   // the one-shot image annotation (i.e. AXMode for image annotation is not
@@ -1007,13 +987,8 @@ void RenderAccessibilityImpl::SendPendingAccessibilityEvents() {
   // maximum within a time interval so we can upload UKM.
   int elapsed_time_ms = timer.Elapsed().InMilliseconds();
   if (elapsed_time_ms > slowest_serialization_ms_) {
-    last_ukm_source_id_ = document.GetUkmSourceId();
-    last_ukm_url_ = document.CanonicalUrlForSharing().GetString().Utf8();
     slowest_serialization_ms_ = elapsed_time_ms;
   }
-
-  if (ukm_timer_->Elapsed().InSeconds() >= kMinUKMDelayInSeconds)
-    MaybeSendUKM();
 }
 
 void RenderAccessibilityImpl::SendLocationChanges() {
@@ -1384,23 +1359,6 @@ void RenderAccessibilityImpl::CancelScheduledEvents() {
   }
 }
 
-void RenderAccessibilityImpl::MaybeSendUKM() {
-  if (slowest_serialization_ms_ < kMinSerializationTimeToSendInMS)
-    return;
-
-  ukm::builders::Accessibility_Renderer(last_ukm_source_id_)
-      .SetCpuTime_SendPendingAccessibilityEvents(slowest_serialization_ms_)
-      .Record(ukm_recorder_.get());
-  ResetUKMData();
-}
-
-void RenderAccessibilityImpl::ResetUKMData() {
-  slowest_serialization_ms_ = 0;
-  ukm_timer_ = std::make_unique<base::ElapsedTimer>();
-  last_ukm_source_id_ = ukm::kInvalidSourceId;
-  last_ukm_url_ = "";
-}
-
 RenderAccessibilityImpl::DirtyObject::DirtyObject() = default;
 RenderAccessibilityImpl::DirtyObject::DirtyObject(const DirtyObject& other) =
     default;
