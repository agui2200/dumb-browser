diff --git a/components/metrics/metrics_service_client.h b/components/metrics/metrics_service_client.h
index 9a92599366316..32eeef3b65933 100644
--- a/components/metrics/metrics_service_client.h
+++ b/components/metrics/metrics_service_client.h
@@ -12,8 +12,6 @@
 
 #include "base/callback.h"
 #include "base/time/time.h"
-#include "components/metrics/metrics_log_store.h"
-#include "components/metrics/metrics_log_uploader.h"
 #include "components/metrics/metrics_reporting_default_state.h"
 #include "third_party/metrics_proto/system_profile.pb.h"
 #include "url/gurl.h"
@@ -28,7 +26,6 @@ class UkmService;
 
 namespace metrics {
 
-class MetricsLogUploader;
 class MetricsService;
 
 // An abstraction of operations that depend on the embedder's (e.g. Chrome)
@@ -44,9 +41,6 @@ class MetricsServiceClient {
   // implementation will own the MetricsService instance being returned).
   virtual MetricsService* GetMetricsService() = 0;
 
-  // Returns the UkmService instance that this client is associated with.
-  virtual ukm::UkmService* GetUkmService();
-
   // Registers the client id with other services (e.g. crash reporting), called
   // when metrics recording gets enabled.
   virtual void SetMetricsClientId(const std::string& client_id) = 0;
@@ -72,42 +66,12 @@ class MetricsServiceClient {
   // Returns the version of the application as a string.
   virtual std::string GetVersionString() = 0;
 
-  // Called by the metrics service when a new environment has been recorded.
-  // Takes the serialized environment as a parameter. The contents of
-  // |serialized_environment| are consumed by the call, but the caller maintains
-  // ownership.
-  virtual void OnEnvironmentUpdate(std::string* serialized_environment) {}
-
-  // Called by the metrics service to record a clean shutdown.
-  virtual void OnLogCleanShutdown() {}
-
-  // Called prior to a metrics log being closed, allowing the client to collect
-  // extra histograms that will go in that log. Asynchronous API - the client
-  // implementation should call |done_callback| when complete.
-  virtual void CollectFinalMetricsForLog(base::OnceClosure done_callback) = 0;
-
   // Get the URL of the metrics server.
   virtual GURL GetMetricsServerUrl();
 
   // Get the fallback HTTP URL of the metrics server.
   virtual GURL GetInsecureMetricsServerUrl();
 
-  // Creates a MetricsLogUploader with the specified parameters (see comments on
-  // MetricsLogUploader for details).
-  virtual std::unique_ptr<MetricsLogUploader> CreateUploader(
-      const GURL& server_url,
-      const GURL& insecure_server_url,
-      base::StringPiece mime_type,
-      metrics::MetricsLogUploader::MetricServiceType service_type,
-      const MetricsLogUploader::UploadCallback& on_upload_complete) = 0;
-
-  // Returns the interval between upload attempts. Checks if debugging flags
-  // have been set, otherwise defaults to GetStandardUploadInterval().
-  base::TimeDelta GetUploadInterval();
-
-  // Returns the standard interval between upload attempts.
-  virtual base::TimeDelta GetStandardUploadInterval() = 0;
-
   // Whether or not the MetricsService should start up quickly and upload the
   // initial report quickly. By default, this work may be delayed by some
   // amount. Only the default behavior should be used in production, but clients
@@ -123,31 +87,6 @@ class MetricsServiceClient {
   // as a mechanism for observing renderer crashes).
   virtual void OnRendererProcessCrash() {}
 
-  // Returns whether metrics reporting is managed by policy.
-  virtual bool IsReportingPolicyManaged();
-
-  // Gets information about the default value for the metrics reporting checkbox
-  // shown during first-run.
-  virtual EnableMetricsDefault GetMetricsReportingDefaultState();
-
-  // Returns whether cellular logic is enabled for metrics reporting.
-  virtual bool IsUMACellularUploadLogicEnabled();
-
-  // Returns whether the allowlist for external experiment ids is enabled. Some
-  // embedders like WebLayer disable it. For Chrome, it should be enabled.
-  virtual bool IsExternalExperimentAllowlistEnabled();
-
-  // Returns true iff UKM is allowed for all profiles.
-  // See //components/ukm/observers/ukm_consent_state_observer.h for details.
-  virtual bool IsUkmAllowedForAllProfiles();
-
-  // Returns true iff UKM is allowed to capture extensions for all profiles.
-  // See //components/ukm/observers/ukm_consent_state_observer.h for details.
-  virtual bool IsUkmAllowedWithExtensionsForAllProfiles();
-
-  // Returns whether UKM notification listeners were attached to all profiles.
-  virtual bool AreNotificationListenersEnabledOnAllProfiles();
-
   // Gets the app package name (as defined by the embedder). Since package name
   // is only meaningful for Android, other platforms should return the empty
   // string (this is the same as the default behavior). If the package name
@@ -155,25 +94,12 @@ class MetricsServiceClient {
   // should return the empty string.
   virtual std::string GetAppPackageName();
 
-  // Gets the key used to sign metrics uploads. This will be used to compute an
-  // HMAC-SHA256 signature of an uploaded log.
-  virtual std::string GetUploadSigningKey();
-
   // Checks if the cloned install detector says that client ids should be reset.
   virtual bool ShouldResetClientIdsOnClonedInstall();
 
-  // Specifies local log storage requirements and restrictions.
-  virtual MetricsLogStore::StorageLimits GetStorageLimits() const;
-
-  // Sets the callback to run MetricsServiceManager::UpdateRunningServices.
-  void SetUpdateRunningServicesCallback(const base::RepeatingClosure& callback);
-
   // Notify MetricsServiceManager to UpdateRunningServices using callback.
   void UpdateRunningServices();
 
-  // Checks if the user has forced metrics collection on via the override flag.
-  bool IsMetricsReportingForceEnabled() const;
-
  private:
   base::RepeatingClosure update_running_services_;
 
