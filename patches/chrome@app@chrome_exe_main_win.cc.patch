diff --git a/chrome/app/chrome_exe_main_win.cc b/chrome/app/chrome_exe_main_win.cc
index b24d33d4b301..2dc6e9d9c3fd 100644
--- a/chrome/app/chrome_exe_main_win.cc
+++ b/chrome/app/chrome_exe_main_win.cc
@@ -43,13 +43,8 @@
 #include "chrome/install_static/install_util.h"
 #include "chrome/install_static/user_data_dir.h"
 #include "components/browser_watcher/exit_code_watcher_win.h"
-#include "components/crash/core/app/crash_switches.h"
-#include "components/crash/core/app/crashpad.h"
-#include "components/crash/core/app/fallback_crash_handling_win.h"
-#include "components/crash/core/app/run_as_crashpad_handler_win.h"
 #include "content/public/common/content_switches.h"
 #include "content/public/common/result_codes.h"
-#include "third_party/crashpad/crashpad/util/win/initial_client_data.h"
 
 #if defined(WIN_CONSOLE_APP)
 // Forward declaration of main.
@@ -169,21 +164,6 @@ bool RemoveAppCompatFlagsEntry() {
   return false;
 }
 
-int RunFallbackCrashHandler(const base::CommandLine& cmd_line) {
-  // Retrieve the product & version details we need to report the crash
-  // correctly.
-  wchar_t exe_file[MAX_PATH] = {};
-  CHECK(::GetModuleFileName(nullptr, exe_file, base::size(exe_file)));
-
-  std::wstring product_name, version, channel_name, special_build;
-  install_static::GetExecutableVersionDetails(exe_file, &product_name, &version,
-                                              &special_build, &channel_name);
-
-  return crash_reporter::RunAsFallbackCrashHandler(
-      cmd_line, base::WideToUTF8(product_name), base::WideToUTF8(version),
-      base::WideToUTF8(channel_name));
-}
-
 // In 32-bit builds, the main thread starts with the default (small) stack size.
 // The ARCH_CPU_32_BITS blocks here and below are in support of moving the main
 // thread to a fiber with a larger stack size.
@@ -267,7 +247,6 @@ int main() {
 
   SetCwdForBrowserProcess();
   install_static::InitializeFromPrimaryModule();
-  SignalInitializeCrashReporting();
 #if defined(ARCH_CPU_32_BITS)
   // Intentionally crash if converting to a fiber failed.
   CHECK_EQ(fiber_status, FiberStatus::kSuccess);
@@ -299,54 +278,6 @@ int main() {
   DCHECK(process_type.empty() ||
          HasValidWindowsPrefetchArgument(*command_line));
 
-  if (process_type == crash_reporter::switches::kCrashpadHandler) {
-    // Check if we should monitor the exit code of this process
-    std::unique_ptr<browser_watcher::ExitCodeWatcher> exit_code_watcher;
-
-    crash_reporter::SetupFallbackCrashHandling(*command_line);
-    // no-periodic-tasks is specified for self monitoring crashpad instances.
-    // This is to ensure we are a crashpad process monitoring the browser
-    // process and not another crashpad process.
-    if (!command_line->HasSwitch("no-periodic-tasks")) {
-      // Retrieve the client process from the command line
-      crashpad::InitialClientData initial_client_data;
-      if (initial_client_data.InitializeFromString(
-              command_line->GetSwitchValueASCII("initial-client-data"))) {
-        // Setup exit code watcher to monitor the parent process
-        HANDLE duplicate_handle = INVALID_HANDLE_VALUE;
-        if (DuplicateHandle(
-                ::GetCurrentProcess(), initial_client_data.client_process(),
-                ::GetCurrentProcess(), &duplicate_handle,
-                PROCESS_QUERY_INFORMATION, FALSE, DUPLICATE_SAME_ACCESS)) {
-          base::Process parent_process(duplicate_handle);
-          exit_code_watcher =
-              std::make_unique<browser_watcher::ExitCodeWatcher>();
-          if (exit_code_watcher->Initialize(std::move(parent_process))) {
-            exit_code_watcher->StartWatching();
-          }
-        }
-      }
-    }
-
-    // The handler process must always be passed the user data dir on the
-    // command line.
-    DCHECK(command_line->HasSwitch(switches::kUserDataDir));
-
-    base::FilePath user_data_dir =
-        command_line->GetSwitchValuePath(switches::kUserDataDir);
-    int crashpad_status = crash_reporter::RunAsCrashpadHandler(
-        *base::CommandLine::ForCurrentProcess(), user_data_dir,
-        switches::kProcessType, switches::kUserDataDir);
-    if (crashpad_status != 0 && exit_code_watcher) {
-      // Crashpad failed to initialize, explicitly stop the exit code watcher
-      // so the crashpad-handler process can exit with an error
-      exit_code_watcher->StopWatching();
-    }
-    return crashpad_status;
-  } else if (process_type == crash_reporter::switches::kFallbackCrashHandler) {
-    return RunFallbackCrashHandler(*command_line);
-  }
-
   const base::TimeTicks exe_entry_point_ticks = base::TimeTicks::Now();
 
   // Signal Chrome Elf that Chrome has begun to start.
