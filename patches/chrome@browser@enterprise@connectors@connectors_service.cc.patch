diff --git a/chrome/browser/enterprise/connectors/connectors_service.cc b/chrome/browser/enterprise/connectors/connectors_service.cc
index 2a28a3e0592b..29cfde1b7475 100644
--- a/chrome/browser/enterprise/connectors/connectors_service.cc
+++ b/chrome/browser/enterprise/connectors/connectors_service.cc
@@ -23,7 +23,6 @@
 #include "components/policy/core/common/cloud/machine_level_user_cloud_policy_manager.h"
 #include "components/policy/core/common/cloud/user_cloud_policy_manager.h"
 #include "components/policy/core/common/policy_types.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/user_prefs/user_prefs.h"
 #include "content/public/browser/browser_context.h"
 
@@ -140,47 +139,6 @@ ConnectorsService::ConnectorsService(content::BrowserContext* context,
 
 ConnectorsService::~ConnectorsService() = default;
 
-base::Optional<ReportingSettings> ConnectorsService::GetReportingSettings(
-    ReportingConnector connector) {
-  if (!ConnectorsEnabled())
-    return base::nullopt;
-
-  base::Optional<ReportingSettings> settings =
-      connectors_manager_->GetReportingSettings(connector);
-  if (!settings.has_value())
-    return base::nullopt;
-
-  base::Optional<DmToken> dm_token = GetDmToken(ConnectorScopePref(connector));
-  if (!dm_token.has_value())
-    return base::nullopt;
-
-  settings.value().dm_token = dm_token.value().value;
-  settings.value().per_profile =
-      dm_token.value().scope == policy::POLICY_SCOPE_USER;
-
-  return settings;
-}
-
-base::Optional<AnalysisSettings> ConnectorsService::GetAnalysisSettings(
-    const GURL& url,
-    AnalysisConnector connector) {
-  if (!ConnectorsEnabled())
-    return base::nullopt;
-
-  base::Optional<AnalysisSettings> settings =
-      connectors_manager_->GetAnalysisSettings(url, connector);
-  if (!settings.has_value())
-    return base::nullopt;
-
-  base::Optional<DmToken> dm_token = GetDmToken(ConnectorScopePref(connector));
-  if (!dm_token.has_value())
-    return base::nullopt;
-
-  settings.value().dm_token = dm_token.value().value;
-
-  return settings;
-}
-
 base::Optional<FileSystemSettings> ConnectorsService::GetFileSystemSettings(
     const GURL& url,
     FileSystemConnector connector) {
@@ -195,20 +153,6 @@ base::Optional<FileSystemSettings> ConnectorsService::GetFileSystemSettings(
   return settings;
 }
 
-bool ConnectorsService::IsConnectorEnabled(AnalysisConnector connector) const {
-  if (!ConnectorsEnabled())
-    return false;
-
-  return connectors_manager_->IsConnectorEnabled(connector);
-}
-
-bool ConnectorsService::IsConnectorEnabled(ReportingConnector connector) const {
-  if (!ConnectorsEnabled())
-    return false;
-
-  return connectors_manager_->IsConnectorEnabled(connector);
-}
-
 bool ConnectorsService::IsConnectorEnabled(
     FileSystemConnector connector) const {
   if (!ConnectorsEnabled())
@@ -217,67 +161,14 @@ bool ConnectorsService::IsConnectorEnabled(
   return connectors_manager_->IsConnectorEnabled(connector);
 }
 
-std::vector<std::string> ConnectorsService::GetReportingServiceProviderNames(
-    ReportingConnector connector) {
-  if (!ConnectorsEnabled())
-    return {};
-
-  if (!GetDmToken(ConnectorScopePref(connector)).has_value())
-    return {};
-
-  return connectors_manager_->GetReportingServiceProviderNames(connector);
-}
-
-bool ConnectorsService::DelayUntilVerdict(AnalysisConnector connector) {
-  if (!ConnectorsEnabled())
-    return false;
-
-  return connectors_manager_->DelayUntilVerdict(connector);
-}
-
-std::vector<std::string> ConnectorsService::GetAnalysisServiceProviderNames(
-    AnalysisConnector connector) {
-  if (!ConnectorsEnabled())
-    return {};
-
-  if (!GetDmToken(ConnectorScopePref(connector)).has_value())
-    return {};
-
-  return connectors_manager_->GetAnalysisServiceProviderNames(connector);
-}
-
 base::Optional<std::string> ConnectorsService::GetDMTokenForRealTimeUrlCheck()
     const {
   if (!ConnectorsEnabled())
     return base::nullopt;
 
-  if (Profile::FromBrowserContext(context_)->GetPrefs()->GetInteger(
-          prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckMode) ==
-      safe_browsing::REAL_TIME_CHECK_DISABLED) {
-    return base::nullopt;
-  }
-
-  base::Optional<DmToken> dm_token =
-      GetDmToken(prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckScope);
-
-  if (dm_token.has_value())
-    return dm_token.value().value;
   return base::nullopt;
 }
 
-safe_browsing::EnterpriseRealTimeUrlCheckMode
-ConnectorsService::GetAppliedRealTimeUrlCheck() const {
-  if (!ConnectorsEnabled() ||
-      !GetDmToken(prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckScope)
-           .has_value()) {
-    return safe_browsing::REAL_TIME_CHECK_DISABLED;
-  }
-
-  return static_cast<safe_browsing::EnterpriseRealTimeUrlCheckMode>(
-      Profile::FromBrowserContext(context_)->GetPrefs()->GetInteger(
-          prefs::kSafeBrowsingEnterpriseRealTimeUrlCheckMode));
-}
-
 ConnectorsManager* ConnectorsService::ConnectorsManagerForTesting() {
   return connectors_manager_.get();
 }
