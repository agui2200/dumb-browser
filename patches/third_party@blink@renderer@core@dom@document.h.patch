diff --git a/third_party/blink/renderer/core/dom/document.h b/third_party/blink/renderer/core/dom/document.h
index 6355a6e917452..740e56786dee5 100644
--- a/third_party/blink/renderer/core/dom/document.h
+++ b/third_party/blink/renderer/core/dom/document.h
@@ -41,7 +41,6 @@
 #include "services/network/public/mojom/referrer_policy.mojom-blink-forward.h"
 #include "services/network/public/mojom/web_sandbox_flags.mojom-blink-forward.h"
 #include "third_party/blink/public/common/metrics/document_update_reason.h"
-#include "third_party/blink/public/mojom/federated_learning/floc.mojom-blink-forward.h"
 #include "third_party/blink/public/mojom/frame/color_scheme.mojom-blink-forward.h"
 #include "third_party/blink/public/mojom/input/focus_type.mojom-blink-forward.h"
 #include "third_party/blink/public/mojom/permissions/permission.mojom-blink-forward.h"
@@ -140,7 +139,6 @@ class EventWithHitTestResults;
 class ExceptionState;
 class FloatQuad;
 class FloatRect;
-class FontMatchingMetrics;
 class FormController;
 class FrameCallback;
 class FrameScheduler;
@@ -1098,16 +1096,13 @@ class CORE_EXPORT Document : public ContainerNode,
                               const String& issuer,
                               ExceptionState&);
 
-  // Floc service helper methods to facilitate querying the floc (i.e.
-  // interestCohort).
-  mojom::blink::FlocService* GetFlocService(
-      ExecutionContext* execution_context);
-
+#if 0
   // Sends a query via Mojo to ask for the interest cohort. This can reject on
   // permissions errors (e.g. preferences, content settings, permissions policy,
   // etc.) or when the interest cohort is unavailable.
   // https://github.com/jkarlin/floc
   ScriptPromise interestCohort(ScriptState* script_state, ExceptionState&);
+#endif
 
   // The following implements the rule from HTML 4 for what valid names are.
   // To get this right for all the XML cases, we probably have to improve this
@@ -1508,13 +1503,8 @@ class CORE_EXPORT Document : public ContainerNode,
   void captureEvents() {}
   void releaseEvents() {}
 
-  ukm::UkmRecorder* UkmRecorder();
   ukm::SourceId UkmSourceID() const;
 
-  // Tracks and reports UKM metrics of the number of attempted font family match
-  // attempts (both successful and not successful) by the page.
-  FontMatchingMetrics* GetFontMatchingMetrics();
-
   scoped_refptr<base::SingleThreadTaskRunner> GetTaskRunner(TaskType);
 
   StylePropertyMapReadOnly* ComputedStyleMap(Element*);
@@ -1705,6 +1695,10 @@ class CORE_EXPORT Document : public ContainerNode,
   bool IsDirAttributeDirty() { return dir_attribute_dirty_; }
   void SetDirAttributeDirty() { dir_attribute_dirty_ = true; }
 
+  // Values for get*ClientRect fingerprint deception.
+  double GetNoiseFactorX();
+  double GetNoiseFactorY();
+
  protected:
   void ClearXMLVersion() { xml_version_ = String(); }
 
@@ -1849,6 +1843,9 @@ class CORE_EXPORT Document : public ContainerNode,
 
   void RunPostPrerenderingActivationSteps();
 
+  double noise_factor_x_;
+  double noise_factor_y_;
+
   DocumentLifecycle lifecycle_;
 
   bool is_initial_empty_document_;
@@ -2136,10 +2133,6 @@ class CORE_EXPORT Document : public ContainerNode,
   std::unique_ptr<ukm::UkmRecorder> ukm_recorder_;
   const int64_t ukm_source_id_;
 
-  // Tracks and reports metrics of attempted font match attempts (both
-  // successful and not successful) by the page.
-  std::unique_ptr<FontMatchingMetrics> font_matching_metrics_;
-
 #if DCHECK_IS_ON()
   unsigned slot_assignment_recalc_forbidden_recursion_depth_ = 0;
 #endif
