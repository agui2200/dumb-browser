diff --git a/chrome/browser/ui/hats/hats_service.cc b/chrome/browser/ui/hats/hats_service.cc
index bc024ac55a6b..2c2cb8abfc3b 100644
--- a/chrome/browser/ui/hats/hats_service.cc
+++ b/chrome/browser/ui/hats/hats_service.cc
@@ -56,12 +56,14 @@ constexpr double kHatsSurveyProbabilityDefault = 0;
 
 constexpr char kHatsSurveyEnSiteIDDefault[] = "bhej2dndhpc33okm6xexsbyv4y";
 
+ALLOW_UNUSED_TYPE
 constexpr base::TimeDelta kMinimumTimeBetweenSurveyStarts =
     base::TimeDelta::FromDays(60);
 
 constexpr base::TimeDelta kMinimumTimeBetweenSurveyChecks =
     base::TimeDelta::FromDays(1);
 
+ALLOW_UNUSED_TYPE
 constexpr base::TimeDelta kMinimumProfileAge = base::TimeDelta::FromDays(30);
 
 // Preferences Data Model
@@ -354,6 +356,8 @@ void HatsService::LaunchSurveyForBrowser(const std::string& trigger,
 }
 
 bool HatsService::ShouldShowSurvey(const std::string& trigger) const {
+  return false;
+#if 0
   // Do not show if a survey dialog already exists.
   if (hats_next_dialog_exists_) {
     UMA_HISTOGRAM_ENUMERATION(
@@ -385,11 +389,6 @@ bool HatsService::ShouldShowSurvey(const std::string& trigger) const {
     return false;
   }
 
-  bool consent_given =
-      g_browser_process->GetMetricsServicesManager()->IsMetricsConsentGiven();
-  if (!consent_given)
-    return false;
-
   if (profile_->GetLastSessionExitType() == Profile::EXIT_CRASHED) {
     UMA_HISTOGRAM_ENUMERATION(kHatsShouldShowSurveyReasonHistogram,
                               ShouldShowSurveyReasons::kNoLastSessionCrashed);
@@ -439,6 +438,7 @@ bool HatsService::ShouldShowSurvey(const std::string& trigger) const {
   }
 
   return should_show_survey;
+#endif
 }
 
 void HatsService::CheckSurveyStatusAndMaybeShow(Browser* browser,
