diff --git a/components/password_manager/core/browser/password_manager_client.h b/components/password_manager/core/browser/password_manager_client.h
index 1859150bb5d6..9bad966382a4 100644
--- a/components/password_manager/core/browser/password_manager_client.h
+++ b/components/password_manager/core/browser/password_manager_client.h
@@ -27,7 +27,6 @@
 #include "components/password_manager/core/browser/password_store.h"
 #include "components/safe_browsing/buildflags.h"
 #include "net/cert/cert_status_flags.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 
 class PrefService;
 
@@ -59,10 +58,6 @@ class Origin;
 
 class GURL;
 
-namespace safe_browsing {
-class PasswordProtectionService;
-}
-
 namespace password_manager {
 
 class FieldInfoManager;
@@ -70,7 +65,6 @@ class PasswordFeatureManager;
 class BiometricAuthenticator;
 class PasswordFormManagerForUI;
 class PasswordManagerDriver;
-class PasswordManagerMetricsRecorder;
 class HttpAuthManager;
 class PasswordRequirementsService;
 class PasswordStore;
@@ -325,10 +319,6 @@ class PasswordManagerClient {
   // Returns the current best guess as to the page's display language.
   virtual std::string GetPageLanguage() const;
 
-  // Return the PasswordProtectionService associated with this instance.
-  virtual safe_browsing::PasswordProtectionService*
-  GetPasswordProtectionService() const = 0;
-
 #if defined(ON_FOCUS_PING_ENABLED)
   // Checks the safe browsing reputation of the webpage when the
   // user focuses on a username/password field. This is used for reporting
@@ -337,6 +327,7 @@ class PasswordManagerClient {
                                            const GURL& frame_url) = 0;
 #endif
 
+#if defined(PASSWORD_REUSE_WARNING_ENABLED)
   // Checks the safe browsing reputation of the webpage where password reuse
   // happens. This is called by the PasswordReuseDetectionManager when a
   // protected password is typed on the wrong domain. This may trigger a
@@ -350,22 +341,9 @@ class PasswordManagerClient {
       const std::vector<MatchingReusedCredential>& matching_reused_credentials,
       bool password_field_exists) = 0;
 
-#if defined(PASSWORD_REUSE_WARNING_ENABLED)
   // Records a Chrome Sync event that GAIA password reuse was detected.
   virtual void LogPasswordReuseDetectedEvent() = 0;
 #endif
-
-  // Gets a ukm::SourceId that is associated with the WebContents object
-  // and its last committed main frame navigation.
-  virtual ukm::SourceId GetUkmSourceId() = 0;
-
-  // Gets a metrics recorder for the currently committed navigation.
-  // As PasswordManagerMetricsRecorder submits metrics on destruction, a new
-  // instance will be returned for each committed navigation. A caller must not
-  // hold on to the pointer. This method returns a nullptr if the client
-  // does not support metrics recording.
-  virtual PasswordManagerMetricsRecorder* GetMetricsRecorder() = 0;
-
   // Gets the PasswordRequirementsService associated with the client. It is
   // valid that this method returns a nullptr if the PasswordRequirementsService
   // has not been implemented for a specific platform or the context is an
