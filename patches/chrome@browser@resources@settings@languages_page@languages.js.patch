diff --git a/chrome/browser/resources/settings/languages_page/languages.js b/chrome/browser/resources/settings/languages_page/languages.js
index 6353a04fecec..f3c2eca63dbc 100644
--- a/chrome/browser/resources/settings/languages_page/languages.js
+++ b/chrome/browser/resources/settings/languages_page/languages.js
@@ -140,10 +140,6 @@ Polymer({
     'prospectiveUILanguageChanged_(prefs.intl.app_locale.value, languages)',
     'preferredLanguagesPrefChanged_(' +
         'prefs.' + preferredLanguagesPrefName + '.value, languages)',
-    'spellCheckDictionariesPrefChanged_(' +
-        'prefs.spellcheck.dictionaries.value.*, ' +
-        'prefs.spellcheck.forced_dictionaries.value.*, ' +
-        'prefs.spellcheck.blacklisted_dictionaries.value.*, languages)',
     'translateLanguagesPrefChanged_(' +
         'prefs.translate_blocked_languages.value.*, languages)',
     'updateRemovableLanguages_(' +
@@ -160,11 +156,6 @@ Polymer({
   /** @private {?Function} */
   boundOnInputMethodChanged_: null,
 
-  // <if expr="not is_macosx">
-  /** @private {?Function} */
-  boundOnSpellcheckDictionariesChanged_: null,
-  // </if>
-
   /** @private {?settings.LanguagesBrowserProxy} */
   browserProxy_: null,
 
@@ -241,15 +232,6 @@ Polymer({
       // which only exist for ChromeOS.
       this.createModel_(results[1], results[2], results[3], results[4]);
 
-      // <if expr="not is_macosx">
-      this.boundOnSpellcheckDictionariesChanged_ =
-          this.onSpellcheckDictionariesChanged_.bind(this);
-      this.languageSettingsPrivate_.onSpellcheckDictionariesChanged.addListener(
-          this.boundOnSpellcheckDictionariesChanged_);
-      this.languageSettingsPrivate_.getSpellcheckDictionaryStatuses(
-          this.boundOnSpellcheckDictionariesChanged_);
-      // </if>
-
       this.resolver_.resolve();
     });
 
@@ -279,14 +261,6 @@ Polymer({
           assert(this.boundOnInputMethodRemoved_));
       this.boundOnInputMethodRemoved_ = null;
     }
-
-    // <if expr="not is_macosx">
-    if (this.boundOnSpellcheckDictionariesChanged_) {
-      this.languageSettingsPrivate_.onSpellcheckDictionariesChanged
-          .removeListener(this.boundOnSpellcheckDictionariesChanged_);
-      this.boundOnSpellcheckDictionariesChanged_ = null;
-    }
-    // </if>
   },
 
   /**
@@ -320,19 +294,6 @@ Polymer({
 
     this.set('languages.enabled', enabledLanguageStates);
 
-    // <if expr="not is_macosx">
-    if (this.boundOnSpellcheckDictionariesChanged_) {
-      this.languageSettingsPrivate_.getSpellcheckDictionaryStatuses(
-          this.boundOnSpellcheckDictionariesChanged_);
-    }
-
-    // Recreate the set of spellcheck forced languages in case a forced
-    // spellcheck language was removed from the languages list.
-    this.set(
-        'languages.forcedSpellCheckLanguages',
-        this.getForcedSpellCheckLanguages_(this.languages.enabled));
-    // </if>
-
     // Update translate target language.
     new Promise(resolve => {
       this.languageSettingsPrivate_.getTranslateTargetLanguage(resolve);
@@ -445,7 +406,6 @@ Polymer({
       const language = supportedLanguages[i];
       language.supportsUI = !!language.supportsUI;
       language.supportsTranslate = !!language.supportsTranslate;
-      language.supportsSpellcheck = !!language.supportsSpellcheck;
       language.isProhibitedLanguage = !!language.isProhibitedLanguage;
       this.supportedLanguageMap_.set(language.code, language);
     }
@@ -469,14 +429,10 @@ Polymer({
       this.enabledLanguageSet_.add(enabledLanguageStates[l].language.code);
     }
 
-    const forcedSpellCheckLanguages =
-        this.getForcedSpellCheckLanguages_(enabledLanguageStates);
-
     const model = /** @type {!LanguagesModel} */ ({
       supported: supportedLanguages,
       enabled: enabledLanguageStates,
       translateTarget: translateTarget,
-      forcedSpellCheckLanguages: forcedSpellCheckLanguages,
     });
 
     if (cr.isChromeOS || cr.isWindows) {
@@ -543,17 +499,6 @@ Polymer({
 
     const pref = this.getPref(preferredLanguagesPrefName);
     const enabledLanguageCodes = pref.value.split(',');
-    const spellCheckPref = this.getPref('spellcheck.dictionaries');
-    const spellCheckForcedPref = this.getPref('spellcheck.forced_dictionaries');
-    const spellCheckBlacklistedPref =
-        this.getPref('spellcheck.blacklisted_dictionaries');
-    const spellCheckSet = this.makeSetFromArray_(
-        /** @type {!Array<string>} */ (
-            spellCheckPref.value.concat(spellCheckForcedPref.value)));
-    const spellCheckForcedSet = this.makeSetFromArray_(
-        /** @type {!Array<string>} */ (spellCheckForcedPref.value));
-    const spellCheckBlacklistedSet = this.makeSetFromArray_(
-        /** @type {!Array<string>} */ (spellCheckBlacklistedPref.value));
 
     const translateBlockedPref = this.getPref('translate_blocked_languages');
     const translateBlockedSet = this.makeSetFromArray_(
@@ -569,14 +514,9 @@ Polymer({
       }
       const languageState = /** @type {LanguageState} */ ({});
       languageState.language = language;
-      languageState.spellCheckEnabled =
-          spellCheckSet.has(code) && !spellCheckBlacklistedSet.has(code) ||
-          spellCheckForcedSet.has(code);
       languageState.translateEnabled = this.isTranslateEnabled_(
           code, !!language.supportsTranslate, translateBlockedSet,
           translateTarget, prospectiveUILanguage);
-      languageState.isManaged =
-          spellCheckForcedSet.has(code) || spellCheckBlacklistedSet.has(code);
       languageState.downloadDictionaryFailureCount = 0;
       enabledLanguageStates.push(languageState);
     }
@@ -606,47 +546,6 @@ Polymer({
         (!prospectiveUILanguage || code !== prospectiveUILanguage);
   },
 
-  // <if expr="not is_macosx">
-  /**
-   * Updates the dictionary download status for languages in
-   * |this.languages.enabled| and |this.languages.forcedSpellCheckLanguages| in
-   * order to track the number of times a spell check dictionary download has
-   * failed.
-   * @param {!Array<!chrome.languageSettingsPrivate.SpellcheckDictionaryStatus>}
-   *     statuses
-   * @private
-   */
-  onSpellcheckDictionariesChanged_(statuses) {
-    const statusMap = new Map();
-    statuses.forEach(status => {
-      statusMap.set(status.languageCode, status);
-    });
-
-    ['enabled', 'forcedSpellCheckLanguages'].forEach(collectionName => {
-      this.languages[collectionName].forEach((languageState, index) => {
-        const status = statusMap.get(languageState.language.code);
-        if (!status) {
-          return;
-        }
-
-        const previousStatus = languageState.downloadDictionaryStatus;
-        const keyPrefix = `languages.${collectionName}.${index}`;
-        this.set(`${keyPrefix}.downloadDictionaryStatus`, status);
-
-        const failureCountKey = `${keyPrefix}.downloadDictionaryFailureCount`;
-        if (status.downloadFailed &&
-            !(previousStatus && previousStatus.downloadFailed)) {
-          const failureCount = languageState.downloadDictionaryFailureCount + 1;
-          this.set(failureCountKey, failureCount);
-        } else if (
-            status.isReady && !(previousStatus && previousStatus.isReady)) {
-          this.set(failureCountKey, 0);
-        }
-      });
-    });
-  },
-  // </if>
-
   /**
    * Returns a list of enabled input methods.
    * @return {!Array<!chrome.languageSettingsPrivate.InputMethod>}
@@ -790,7 +689,7 @@ Polymer({
   },
 
   /**
-   * Enables the language, making it available for spell check and input.
+   * Enables the language, making it available for input.
    * @param {string} languageCode
    */
   enableLanguage(languageCode) {
@@ -810,9 +709,6 @@ Polymer({
       return;
     }
 
-    // Remove the language from spell check.
-    this.deletePrefListItem('spellcheck.dictionaries', languageCode);
-
     if (cr.isChromeOS) {
       // Remove input methods that don't support any other enabled language.
       const inputMethods = this.languageInputMethods_.get(languageCode) || [];
@@ -945,24 +841,6 @@ Polymer({
         languageCode, false);
   },
 
-  /**
-   * Enables or disables spell check for the given language.
-   * @param {string} languageCode
-   * @param {boolean} enable
-   */
-  toggleSpellCheck(languageCode, enable) {
-    if (!this.languages) {
-      return;
-    }
-
-    if (enable) {
-      const spellCheckPref = this.getPref('spellcheck.dictionaries');
-      this.appendPrefListItem('spellcheck.dictionaries', languageCode);
-    } else {
-      this.deletePrefListItem('spellcheck.dictionaries', languageCode);
-    }
-  },
-
   /**
    * Converts the language code for translate. There are some differences
    * between the language set the Translate server uses and that for
