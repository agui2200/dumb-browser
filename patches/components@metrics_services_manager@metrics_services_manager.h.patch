diff --git a/components/metrics_services_manager/metrics_services_manager.h b/components/metrics_services_manager/metrics_services_manager.h
index c705745f44f20..3f0081019be4d 100644
--- a/components/metrics_services_manager/metrics_services_manager.h
+++ b/components/metrics_services_manager/metrics_services_manager.h
@@ -20,10 +20,6 @@ class MetricsService;
 class MetricsServiceClient;
 }
 
-namespace ukm {
-class UkmService;
-}
-
 namespace variations {
 class VariationsService;
 }
@@ -56,60 +52,24 @@ class MetricsServicesManager {
   // additionally creating the MetricsServiceClient in that case).
   metrics::MetricsService* GetMetricsService();
 
-  // Returns the UkmService, creating it if it hasn't been created yet.
-  ukm::UkmService* GetUkmService();
-
   // Returns the VariationsService, creating it if it hasn't been created yet.
   variations::VariationsService* GetVariationsService();
 
-  // Should be called when a plugin loading error occurs.
-  void OnPluginLoadingError(const base::FilePath& plugin_path);
-
   // Some embedders use this method to notify the metrics system when a
   // renderer process exits unexpectedly.
   void OnRendererProcessCrash();
 
-  // Update the managed services when permissions for uploading metrics change.
-  void UpdateUploadPermissions(bool may_upload);
-
-  // Gets the current state of metric reporting.
-  bool IsMetricsReportingEnabled() const;
-
-  // Gets the current state of metrics consent.
-  bool IsMetricsConsentGiven() const;
-
  private:
   // Returns the MetricsServiceClient, creating it if it hasn't been
   // created yet (and additionally creating the MetricsService in that case).
   metrics::MetricsServiceClient* GetMetricsServiceClient();
 
-  // Update which services are running to match current permissions.
-  void UpdateRunningServices();
-
-  // Update the state of UkmService to match current permissions.
-  void UpdateUkmService();
-
-  // Update the managed services when permissions for recording/uploading
-  // metrics change.
-  void UpdatePermissions(bool current_may_record,
-                         bool current_consent_given,
-                         bool current_may_upload);
-
   // The client passed in from the embedder.
   const std::unique_ptr<MetricsServicesManagerClient> client_;
 
   // Ensures that all functions are called from the same thread.
   base::ThreadChecker thread_checker_;
 
-  // The current metrics reporting setting.
-  bool may_upload_;
-
-  // The current metrics recording setting.
-  bool may_record_;
-
-  // The current metrics setting reflecting if consent was given.
-  bool consent_given_;
-
   // The MetricsServiceClient. Owns the MetricsService.
   std::unique_ptr<metrics::MetricsServiceClient> metrics_service_client_;
 
