diff --git a/components/metrics_services_manager/metrics_services_manager.h b/components/metrics_services_manager/metrics_services_manager.h
index 38c955cfde54..6cf6c53a1b01 100644
--- a/components/metrics_services_manager/metrics_services_manager.h
+++ b/components/metrics_services_manager/metrics_services_manager.h
@@ -20,14 +20,6 @@ class MetricsService;
 class MetricsServiceClient;
 }
 
-namespace rappor {
-class RapporServiceImpl;
-}
-
-namespace ukm {
-class UkmService;
-}
-
 namespace variations {
 class VariationsService;
 }
@@ -60,12 +52,6 @@ class MetricsServicesManager {
   // additionally creating the MetricsServiceClient in that case).
   metrics::MetricsService* GetMetricsService();
 
-  // Returns the RapporServiceImpl, creating it if it hasn't been created yet.
-  rappor::RapporServiceImpl* GetRapporServiceImpl();
-
-  // Returns the UkmService, creating it if it hasn't been created yet.
-  ukm::UkmService* GetUkmService();
-
   // Returns the VariationsService, creating it if it hasn't been created yet.
   variations::VariationsService* GetVariationsService();
 
@@ -86,10 +72,6 @@ class MetricsServicesManager {
   bool IsMetricsConsentGiven() const;
 
  private:
-  // Update the managed services when permissions for recording/uploading
-  // metrics change.
-  void UpdateRapporServiceImpl();
-
   // Returns the MetricsServiceClient, creating it if it hasn't been
   // created yet (and additionally creating the MetricsService in that case).
   metrics::MetricsServiceClient* GetMetricsServiceClient();
@@ -97,9 +79,6 @@ class MetricsServicesManager {
   // Update which services are running to match current permissions.
   void UpdateRunningServices();
 
-  // Update the state of UkmService to match current permissions.
-  void UpdateUkmService();
-
   // Update the managed services when permissions for recording/uploading
   // metrics change.
   void UpdatePermissions(bool current_may_record,
@@ -124,9 +103,6 @@ class MetricsServicesManager {
   // The MetricsServiceClient. Owns the MetricsService.
   std::unique_ptr<metrics::MetricsServiceClient> metrics_service_client_;
 
-  // The RapporServiceImpl, for RAPPOR metric uploads.
-  std::unique_ptr<rappor::RapporServiceImpl> rappor_service_;
-
   // The VariationsService, for server-side experiments infrastructure.
   std::unique_ptr<variations::VariationsService> variations_service_;
 
