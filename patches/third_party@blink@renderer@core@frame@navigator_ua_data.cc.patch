diff --git a/third_party/blink/renderer/core/frame/navigator_ua_data.cc b/third_party/blink/renderer/core/frame/navigator_ua_data.cc
index a696f0c804aa6..dca015c154ab7 100644
--- a/third_party/blink/renderer/core/frame/navigator_ua_data.cc
+++ b/third_party/blink/renderer/core/frame/navigator_ua_data.cc
@@ -6,11 +6,6 @@
 
 #include "base/compiler_specific.h"
 #include "base/single_thread_task_runner.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_surface.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_token.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_token_builder.h"
 #include "third_party/blink/public/mojom/web_feature/web_feature.mojom-blink.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
 #include "third_party/blink/renderer/bindings/core/v8/v8_ua_data_values.h"
@@ -19,26 +14,6 @@
 
 namespace blink {
 
-namespace {
-
-// Record identifiability study metrics for a single field requested by a
-// getHighEntropyValues() call if the user is in the study.
-void MaybeRecordMetric(bool record_identifiability,
-                       const String& hint,
-                       const String& value,
-                       ExecutionContext* execution_context) {
-  if (LIKELY(!record_identifiability))
-    return;
-  auto identifiable_surface = IdentifiableSurface::FromTypeAndToken(
-      IdentifiableSurface::Type::kNavigatorUAData_GetHighEntropyValues,
-      IdentifiableToken(hint.Utf8()));
-  IdentifiabilityMetricBuilder(execution_context->UkmSourceID())
-      .Set(identifiable_surface, IdentifiableToken(value.Utf8()))
-      .Record(execution_context->UkmRecorder());
-}
-
-}  // namespace
-
 NavigatorUAData::NavigatorUAData(ExecutionContext* context)
     : ExecutionContextClient(context) {
   NavigatorUABrandVersion* dict = NavigatorUABrandVersion::Create();
@@ -108,31 +83,18 @@ ScriptPromise NavigatorUAData::getHighEntropyValues(
       ExecutionContext::From(script_state);  // GetExecutionContext();
   DCHECK(execution_context);
 
-  bool record_identifiability =
-      IdentifiabilityStudySettings::Get()->ShouldSample(
-          IdentifiableSurface::Type::kNavigatorUAData_GetHighEntropyValues);
   UADataValues* values = MakeGarbageCollected<UADataValues>();
   for (const String& hint : hints) {
     if (hint == "platform") {
       values->setPlatform(platform_);
-      MaybeRecordMetric(record_identifiability, hint, platform_,
-                        execution_context);
     } else if (hint == "platformVersion") {
       values->setPlatformVersion(platform_version_);
-      MaybeRecordMetric(record_identifiability, hint, platform_version_,
-                        execution_context);
     } else if (hint == "architecture") {
       values->setArchitecture(architecture_);
-      MaybeRecordMetric(record_identifiability, hint, architecture_,
-                        execution_context);
     } else if (hint == "model") {
       values->setModel(model_);
-      MaybeRecordMetric(record_identifiability, hint, model_,
-                        execution_context);
     } else if (hint == "uaFullVersion") {
       values->setUaFullVersion(ua_full_version_);
-      MaybeRecordMetric(record_identifiability, hint, ua_full_version_,
-                        execution_context);
     }
   }
 
