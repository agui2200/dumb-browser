diff --git a/cc/metrics/compositor_frame_reporting_controller.cc b/cc/metrics/compositor_frame_reporting_controller.cc
index 2ff29e6ba970..0ac74aefcf3a 100644
--- a/cc/metrics/compositor_frame_reporting_controller.cc
+++ b/cc/metrics/compositor_frame_reporting_controller.cc
@@ -8,7 +8,6 @@
 
 #include "cc/metrics/compositor_frame_reporter.h"
 #include "cc/metrics/dropped_frame_counter.h"
-#include "cc/metrics/latency_ukm_reporter.h"
 #include "components/viz/common/frame_timing_details.h"
 #include "components/viz/common/quads/compositor_frame_metadata.h"
 
@@ -23,8 +22,7 @@ CompositorFrameReportingController::CompositorFrameReportingController(
     bool should_report_metrics,
     int layer_tree_host_id)
     : should_report_metrics_(should_report_metrics),
-      layer_tree_host_id_(layer_tree_host_id),
-      latency_ukm_reporter_(std::make_unique<LatencyUkmReporter>()) {}
+      layer_tree_host_id_(layer_tree_host_id) {}
 
 CompositorFrameReportingController::~CompositorFrameReportingController() {
   base::TimeTicks now = Now();
@@ -92,7 +90,7 @@ void CompositorFrameReportingController::WillBeginImplFrame(
     }
   }
   auto reporter = std::make_unique<CompositorFrameReporter>(
-      active_trackers_, args, latency_ukm_reporter_.get(),
+      active_trackers_, args,
       should_report_metrics_, GetSmoothThread(), layer_tree_host_id_,
       dropped_frame_counter_);
   reporter->set_tick_clock(tick_clock_);
@@ -119,7 +117,7 @@ void CompositorFrameReportingController::WillBeginMainFrame(
     // beginMain frame before next BeginImplFrame (Not reached the ImplFrame
     // deadline yet). So will start a new reporter at BeginMainFrame.
     auto reporter = std::make_unique<CompositorFrameReporter>(
-        active_trackers_, args, latency_ukm_reporter_.get(),
+        active_trackers_, args,
         should_report_metrics_, GetSmoothThread(), layer_tree_host_id_,
         dropped_frame_counter_);
     reporter->set_tick_clock(tick_clock_);
@@ -471,10 +469,6 @@ CompositorFrameReportingController::RestoreReporterAtBeginImpl(
   return nullptr;
 }
 
-void CompositorFrameReportingController::SetUkmManager(UkmManager* manager) {
-  latency_ukm_reporter_->set_ukm_manager(manager);
-}
-
 CompositorFrameReporter::SmoothThread
 CompositorFrameReportingController::GetSmoothThread() const {
   if (is_main_thread_driving_smoothness_) {
@@ -511,7 +505,7 @@ void CompositorFrameReportingController::CreateReportersForDroppedFrames(
         timestamp + old_args.interval, old_args.interval,
         viz::BeginFrameArgs::NORMAL);
     auto reporter = std::make_unique<CompositorFrameReporter>(
-        active_trackers_, args, latency_ukm_reporter_.get(),
+        active_trackers_, args,
         should_report_metrics_, GetSmoothThread(), layer_tree_host_id_,
         dropped_frame_counter_);
     reporter->set_tick_clock(tick_clock_);
