diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
index 94e871ea16b08..c1a1803c52184 100644
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -54,10 +54,7 @@
 #include "components/crash/core/common/crash_key.h"
 #include "components/crash/core/common/crash_keys.h"
 #include "components/gwp_asan/buildflags/buildflags.h"
-#include "components/heap_profiling/in_process/heap_profiler_controller.h"
 #include "components/nacl/common/buildflags.h"
-#include "components/services/heap_profiling/public/cpp/profiling_client.h"
-#include "components/startup_metric_utils/browser/startup_metric_utils.h"
 #include "components/version_info/version_info.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_constants.h"
@@ -139,9 +136,6 @@
 #include "components/power_scheduler/power_scheduler.h"
 #include "net/android/network_change_notifier_factory_android.h"
 #else  // defined(OS_ANDROID)
-// Diagnostics is only available on non-android platforms.
-#include "chrome/browser/diagnostics/diagnostics_controller.h"
-#include "chrome/browser/diagnostics/diagnostics_writer.h"
 #endif
 
 #if defined(OS_POSIX) && !defined(OS_MAC) && !defined(OS_ANDROID)
@@ -469,46 +463,12 @@ void InitLogging(const std::string& process_type) {
 }
 #endif
 
-void RecordMainStartupMetrics(base::TimeTicks application_start_time) {
-  const base::TimeTicks now = base::TimeTicks::Now();
-
-#if defined(OS_WIN)
-  DCHECK(!application_start_time.is_null());
-  startup_metric_utils::RecordApplicationStartTime(application_start_time);
-#elif defined(OS_ANDROID)
-  // On Android the main entry point time is the time when the Java code starts.
-  // This happens before the shared library containing this code is even loaded.
-  // The Java startup code has recorded that time, but the C++ code can't fetch
-  // it from the Java side until it has initialized the JNI. See
-  // ChromeMainDelegateAndroid.
-#else
-  // On other platforms, |application_start_time| == |now| since the application
-  // starts with ChromeMain().
-  startup_metric_utils::RecordApplicationStartTime(now);
-#endif
-
-#if defined(OS_MAC) || defined(OS_WIN) || defined(OS_LINUX) || \
-    defined(OS_CHROMEOS)
-  // Record the startup process creation time on supported platforms. On Android
-  // this is recorded in ChromeMainDelegateAndroid.
-  startup_metric_utils::RecordStartupProcessCreationTime(
-      base::Process::Current().CreationTime());
-#endif
-
-  startup_metric_utils::RecordChromeMainEntryTime(now);
-}
-
 }  // namespace
 
 ChromeMainDelegate::ChromeMainDelegate()
     : ChromeMainDelegate(base::TimeTicks()) {}
 
 ChromeMainDelegate::ChromeMainDelegate(base::TimeTicks exe_entry_point_ticks) {
-  // Record startup metrics in the browser process. For component builds, there
-  // is no way to know the type of process (process command line is not yet
-  // initialized), so the function below will also be called in renderers.
-  // This doesn't matter as it simply sets global variables.
-  RecordMainStartupMetrics(exe_entry_point_ticks);
 }
 
 ChromeMainDelegate::~ChromeMainDelegate() {
@@ -569,17 +529,6 @@ void ChromeMainDelegate::PostEarlyInitialization(bool is_running_tests) {
       new net::NetworkChangeNotifierFactoryAndroid());
 #endif
 
-  if (base::FeatureList::IsEnabled(
-          features::kWriteBasicSystemProfileToPersistentHistogramsFile)) {
-    bool record = true;
-#if defined(OS_ANDROID)
-    record =
-        base::FeatureList::IsEnabled(chrome::android::kUmaBackgroundSessions);
-#endif
-    if (record)
-      chrome_content_browser_client_->startup_data()->RecordCoreSystemProfile();
-  }
-
 #if defined(OS_ANDROID)
   UmaSessionStats::OnStartup();
 #endif
@@ -598,7 +547,9 @@ void ChromeMainDelegate::PostFieldTrialInitialization() {
   std::string process_type =
       base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
           switches::kProcessType);
+#if !defined(OS_LINUX)
   bool is_browser_process = process_type.empty();
+#endif
 
   // Enable Split cache by default here and not in content/ so as to not
   // impact non-Chrome embedders like WebView, Cronet etc. This only enables
@@ -645,12 +596,6 @@ void ChromeMainDelegate::PostFieldTrialInitialization() {
   }
 #endif
 
-  // Start heap profiling as early as possible so it can start recording
-  // memory allocations.
-  if (is_browser_process) {
-    heap_profiler_controller_ = std::make_unique<HeapProfilerController>();
-    heap_profiler_controller_->Start();
-
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     chromeos::ConfigureSwap();
     chromeos::InitializeKstaled();
@@ -659,7 +604,6 @@ void ChromeMainDelegate::PostFieldTrialInitialization() {
     // that now.
     chromeos::LockMainProgramText();
 #endif
-  }
 
 #if defined(OS_WIN)
   SetUpExtendedCrashReporting(is_browser_process);
@@ -784,37 +728,6 @@ bool ChromeMainDelegate::BasicStartupComplete(int* exit_code) {
   ContentSettingsPattern::SetNonWildcardDomainNonPortSchemes(
       kNonWildcardDomainNonPortSchemes, kNonWildcardDomainNonPortSchemesSize);
 
-// No support for ANDROID yet as DiagnosticsController needs wchar support.
-// TODO(gspencer): That's not true anymore, or at least there are no w-string
-// references anymore. Not sure if that means this can be enabled on Android or
-// not though.  As there is no easily accessible command line on Android, I'm
-// not sure this is a big deal.
-#if !defined(OS_ANDROID)
-  // If we are in diagnostics mode this is the end of the line: after the
-  // diagnostics are run the process will invariably exit.
-  if (command_line.HasSwitch(switches::kDiagnostics)) {
-    diagnostics::DiagnosticsWriter::FormatType format =
-        diagnostics::DiagnosticsWriter::HUMAN;
-    if (command_line.HasSwitch(switches::kDiagnosticsFormat)) {
-      std::string format_str =
-          command_line.GetSwitchValueASCII(switches::kDiagnosticsFormat);
-      if (format_str == "machine") {
-        format = diagnostics::DiagnosticsWriter::MACHINE;
-      } else if (format_str == "log") {
-        format = diagnostics::DiagnosticsWriter::LOG;
-      } else {
-        DCHECK_EQ("human", format_str);
-      }
-    }
-
-    diagnostics::DiagnosticsWriter writer(format);
-    *exit_code = diagnostics::DiagnosticsController::GetInstance()->Run(
-        command_line, &writer);
-    diagnostics::DiagnosticsController::GetInstance()->ClearResults();
-    return true;
-  }
-#endif
-
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   // Initialize primary user homedir (in multi-profile session) as it may be
   // passed as a command line switch.
@@ -879,14 +792,6 @@ bool ChromeMainDelegate::BasicStartupComplete(int* exit_code) {
   }
 #endif
 
-  // The TLS slot used by the memlog allocator shim needs to be initialized
-  // early to ensure that it gets assigned a low slot number. If it gets
-  // initialized too late, the glibc TLS system will require a malloc call in
-  // order to allocate storage for a higher slot number. Since malloc is hooked,
-  // this causes re-entrancy into the allocator shim, while the TLS object is
-  // partially-initialized, which the TLS object is supposed to protect again.
-  heap_profiling::InitTLSSlot();
-
   return false;
 }
 
@@ -910,40 +815,17 @@ void ChromeMainDelegate::InitMacCrashReporter(
   crash_reporter::InitializeCrashpad(initial_client, process_type);
 
   if (!browser_process) {
-    std::string metrics_client_id =
-        command_line.GetSwitchValueASCII(switches::kMetricsClientID);
+    std::string metrics_client_id;
     crash_keys::SetMetricsClientIdFromGUID(metrics_client_id);
   }
-
-  // Mac Chrome is packaged with a main app bundle and a helper app bundle.
-  // The main app bundle should only be used for the browser process, so it
-  // should never see a --type switch (switches::kProcessType).  Likewise,
-  // the helper should always have a --type switch.
-  //
-  // This check is done this late so there is already a call to
-  // base::mac::IsBackgroundOnlyProcess(), so there is no change in
-  // startup/initialization order.
-
-  // The helper's Info.plist marks it as a background only app.
-  if (base::mac::IsBackgroundOnlyProcess()) {
-    CHECK(command_line.HasSwitch(switches::kProcessType) &&
-          !process_type.empty())
-        << "Helper application requires --type.";
-  } else if (base::mac::AmIBundled()) {
-    CHECK(!command_line.HasSwitch(switches::kProcessType) &&
-          process_type.empty())
-        << "Main application forbids --type, saw " << process_type;
-  }
 }
 
 void ChromeMainDelegate::SetUpInstallerPreferences(
     const base::CommandLine& command_line) {
-  const bool uma_setting = command_line.HasSwitch(switches::kEnableUserMetrics);
   const bool default_browser_setting =
       command_line.HasSwitch(switches::kMakeChromeDefault);
 
-  if (uma_setting)
-    crash_reporter::SetUploadConsent(uma_setting);
+  crash_reporter::SetUploadConsent(false);
   if (default_browser_setting)
     shell_integration::SetAsDefaultBrowser();
 }
