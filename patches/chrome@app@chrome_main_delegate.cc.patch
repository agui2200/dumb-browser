diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
index e81210859bd3..9f473bafe9b3 100644
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -55,7 +55,6 @@
 #include "components/heap_profiling/in_process/heap_profiler_controller.h"
 #include "components/nacl/common/buildflags.h"
 #include "components/services/heap_profiling/public/cpp/profiling_client.h"
-#include "components/startup_metric_utils/browser/startup_metric_utils.h"
 #include "components/version_info/version_info.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_constants.h"
@@ -473,12 +472,12 @@ void InitLogging(const std::string& process_type) {
 }
 #endif
 
+#if 0
 void RecordMainStartupMetrics(base::TimeTicks application_start_time) {
   const base::TimeTicks now = base::TimeTicks::Now();
 
 #if defined(OS_WIN)
   DCHECK(!application_start_time.is_null());
-  startup_metric_utils::RecordApplicationStartTime(application_start_time);
 #elif defined(OS_ANDROID)
   // On Android the main entry point time is the time when the Java code starts.
   // This happens before the shared library containing this code is even loaded.
@@ -488,18 +487,14 @@ void RecordMainStartupMetrics(base::TimeTicks application_start_time) {
 #else
   // On other platforms, |application_start_time| == |now| since the application
   // starts with ChromeMain().
-  startup_metric_utils::RecordApplicationStartTime(now);
 #endif
 
 #if defined(OS_MAC) || defined(OS_WIN) || defined(OS_LINUX) || \
     defined(OS_CHROMEOS)
-  // Record the startup process creation time on supported platforms.
-  startup_metric_utils::RecordStartupProcessCreationTime(
-      base::Process::Current().CreationTime());
 #endif
 
-  startup_metric_utils::RecordChromeMainEntryTime(now);
 }
+#endif
 
 }  // namespace
 
@@ -507,11 +502,6 @@ ChromeMainDelegate::ChromeMainDelegate()
     : ChromeMainDelegate(base::TimeTicks()) {}
 
 ChromeMainDelegate::ChromeMainDelegate(base::TimeTicks exe_entry_point_ticks) {
-  // Record startup metrics in the browser process. For component builds, there
-  // is no way to know the type of process (process command line is not yet
-  // initialized), so the function below will also be called in renderers.
-  // This doesn't matter as it simply sets global variables.
-  RecordMainStartupMetrics(exe_entry_point_ticks);
 }
 
 ChromeMainDelegate::~ChromeMainDelegate() {
@@ -636,7 +626,6 @@ void ChromeMainDelegate::PostFieldTrialInitialization() {
   }
 
 #if defined(OS_WIN)
-  SetUpExtendedCrashReporting(is_browser_process);
   base::sequence_manager::internal::ThreadControllerPowerMonitor::
       InitializeOnMainThread();
 #endif
@@ -697,15 +686,7 @@ bool ChromeMainDelegate::BasicStartupComplete(int* exit_code) {
   tracing_sampler_profiler_ =
       tracing::TracingSamplerProfiler::CreateOnMainThread();
 
-#if defined(OS_WIN)
-  v8_crashpad_support::SetUp();
-#endif
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
-  if (!crash_reporter::IsCrashpadEnabled()) {
-    breakpad::SetFirstChanceExceptionHandler(v8::TryHandleWebAssemblyTrapPosix);
-  }
-#endif
 
 #if defined(OS_POSIX)
   if (HandleVersionSwitches(command_line)) {
@@ -918,16 +899,6 @@ void ChromeMainDelegate::PreSandboxStartup() {
   std::string process_type =
       command_line.GetSwitchValueASCII(switches::kProcessType);
 
-  crash_reporter::InitializeCrashKeys();
-
-#if defined(OS_POSIX)
-  ChromeCrashReporterClient::Create();
-#endif
-
-#if defined(OS_MAC)
-  InitMacCrashReporter(command_line, process_type);
-  SetUpInstallerPreferences(command_line);
-#endif
 
 #if defined(OS_WIN)
   child_process_logging::Init();
@@ -1052,28 +1023,6 @@ void ChromeMainDelegate::PreSandboxStartup() {
         locale;
   }
 
-#if defined(OS_POSIX) && !defined(OS_MAC)
-  // Zygote needs to call InitCrashReporter() in RunZygote().
-  if (process_type != service_manager::switches::kZygoteProcess) {
-#if defined(OS_ANDROID)
-    crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
-    if (process_type.empty()) {
-      base::android::InitJavaExceptionReporter();
-      UninstallPureJavaExceptionHandler();
-    } else {
-      base::android::InitJavaExceptionReporterForChildProcess();
-    }
-#else  // !defined(OS_ANDROID)
-    if (crash_reporter::IsCrashpadEnabled()) {
-      crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
-      crash_reporter::SetFirstChanceExceptionHandler(
-          v8::TryHandleWebAssemblyTrapPosix);
-    } else {
-      breakpad::InitCrashReporter(process_type);
-    }
-#endif  // defined(OS_ANDROID)
-  }
-#endif  // defined(OS_POSIX) && !defined(OS_MAC)
 
 #if defined(OS_ANDROID)
   CHECK_EQ(base::android::GetLibraryProcessType(),
@@ -1181,23 +1130,6 @@ void ChromeMainDelegate::ZygoteForked() {
     base::debug::RestartProfilingAfterFork();
     SetUpProfilingShutdownHandler();
   }
-
-  // Needs to be called after we have chrome::DIR_USER_DATA.  BrowserMain sets
-  // this up for the browser process in a different manner.
-  const base::CommandLine* command_line =
-      base::CommandLine::ForCurrentProcess();
-  std::string process_type =
-      command_line->GetSwitchValueASCII(switches::kProcessType);
-  if (crash_reporter::IsCrashpadEnabled()) {
-    crash_reporter::InitializeCrashpad(false, process_type);
-    crash_reporter::SetFirstChanceExceptionHandler(
-        v8::TryHandleWebAssemblyTrapPosix);
-  } else {
-    breakpad::InitCrashReporter(process_type);
-  }
-
-  // Reset the command line for the newly spawned process.
-  crash_keys::SetCrashKeysFromCommandLine(*command_line);
 }
 
 #endif  // defined(OS_LINUX) || defined(OS_CHROMEOS)
