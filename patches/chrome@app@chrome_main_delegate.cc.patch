diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
index 826ef32f3033..5acced89331e 100644
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -42,7 +42,6 @@
 #include "chrome/common/chrome_paths_internal.h"
 #include "chrome/common/chrome_result_codes.h"
 #include "chrome/common/chrome_switches.h"
-#include "chrome/common/crash_keys.h"
 #include "chrome/common/logging_chrome.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/gpu/chrome_content_gpu_client.h"
@@ -50,14 +49,8 @@
 #include "chrome/utility/chrome_content_utility_client.h"
 #include "components/component_updater/component_updater_paths.h"
 #include "components/content_settings/core/common/content_settings_pattern.h"
-#include "components/crash/core/app/crash_reporter_client.h"
-#include "components/crash/core/common/crash_key.h"
-#include "components/crash/core/common/crash_keys.h"
 #include "components/gwp_asan/buildflags/buildflags.h"
-#include "components/heap_profiling/in_process/heap_profiler_controller.h"
 #include "components/nacl/common/buildflags.h"
-#include "components/services/heap_profiling/public/cpp/profiling_client.h"
-#include "components/startup_metric_utils/browser/startup_metric_utils.h"
 #include "components/version_info/version_info.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_constants.h"
@@ -83,11 +76,9 @@
 #include "base/debug/close_handle_hook_win.h"
 #include "base/files/important_file_writer_cleaner.h"
 #include "base/win/atl.h"
-#include "chrome/child/v8_crashpad_support_win.h"
 #include "chrome/chrome_elf/chrome_elf_main.h"
 #include "chrome/common/child_process_logging.h"
 #include "chrome/install_static/install_util.h"
-#include "components/browser_watcher/extended_crash_reporting.h"
 #include "sandbox/win/src/sandbox.h"
 #include "ui/base/resource/resource_bundle_win.h"
 #endif
@@ -98,7 +89,6 @@
 #include "chrome/browser/chrome_browser_application_mac.h"
 #include "chrome/browser/mac/relauncher.h"
 #include "chrome/browser/shell_integration.h"
-#include "components/crash/core/common/objc_zombie.h"
 #include "ui/base/l10n/l10n_util_mac.h"
 #endif
 
@@ -106,7 +96,6 @@
 #include <locale.h>
 #include <signal.h>
 
-#include "chrome/app/chrome_crash_reporter_client.h"
 #include "chrome/app/shutdown_signal_handlers_posix.h"
 #endif
 
@@ -145,7 +134,6 @@
 #endif
 
 #if defined(OS_POSIX) && !defined(OS_MAC) && !defined(OS_ANDROID)
-#include "components/crash/core/app/breakpad_linux.h"
 #include "v8/include/v8-wasm-trap-handler-posix.h"
 #include "v8/include/v8.h"
 #endif
@@ -157,7 +145,6 @@
 #if defined(OS_MAC) || defined(OS_WIN) || defined(OS_ANDROID) || \
     defined(OS_LINUX) || defined(OS_CHROMEOS)
 #include "chrome/browser/policy/policy_path_parser.h"
-#include "components/crash/core/app/crashpad.h"
 #endif
 
 #if BUILDFLAG(ENABLE_NACL)
@@ -234,29 +221,6 @@ bool IsSandboxedProcess() {
   return is_sandboxed_process_func && is_sandboxed_process_func();
 }
 
-void SetUpExtendedCrashReporting(bool is_browser_process) {
-  browser_watcher::ExtendedCrashReporting* extended_crash_reporting =
-      browser_watcher::ExtendedCrashReporting::SetUpIfEnabled(
-          is_browser_process
-              ? browser_watcher::ExtendedCrashReporting::kBrowserProcess
-              : browser_watcher::ExtendedCrashReporting::kOther);
-
-  if (!extended_crash_reporting)
-    return;
-
-  // Record product, version, channel and special build strings.
-  wchar_t exe_file[MAX_PATH] = {};
-  CHECK(::GetModuleFileName(nullptr, exe_file, base::size(exe_file)));
-
-  std::wstring product_name, version_number, channel_name, special_build;
-  install_static::GetExecutableVersionDetails(
-      exe_file, &product_name, &version_number, &special_build, &channel_name);
-
-  extended_crash_reporting->SetProductStrings(
-      base::WideToUTF16(product_name), base::WideToUTF16(version_number),
-      base::WideToUTF16(channel_name), base::WideToUTF16(special_build));
-}
-
 #endif  // defined(OS_WIN)
 
 #if defined(OS_LINUX) || defined(OS_CHROMEOS)
@@ -469,46 +433,12 @@ void InitLogging(const std::string& process_type) {
 }
 #endif
 
-void RecordMainStartupMetrics(base::TimeTicks application_start_time) {
-  const base::TimeTicks now = base::TimeTicks::Now();
-
-#if defined(OS_WIN)
-  DCHECK(!application_start_time.is_null());
-  startup_metric_utils::RecordApplicationStartTime(application_start_time);
-#elif defined(OS_ANDROID)
-  // On Android the main entry point time is the time when the Java code starts.
-  // This happens before the shared library containing this code is even loaded.
-  // The Java startup code has recorded that time, but the C++ code can't fetch
-  // it from the Java side until it has initialized the JNI. See
-  // ChromeMainDelegateAndroid.
-#else
-  // On other platforms, |application_start_time| == |now| since the application
-  // starts with ChromeMain().
-  startup_metric_utils::RecordApplicationStartTime(now);
-#endif
-
-#if defined(OS_MAC) || defined(OS_WIN) || defined(OS_LINUX) || \
-    defined(OS_CHROMEOS)
-  // Record the startup process creation time on supported platforms. On Android
-  // this is recorded in ChromeMainDelegateAndroid.
-  startup_metric_utils::RecordStartupProcessCreationTime(
-      base::Process::Current().CreationTime());
-#endif
-
-  startup_metric_utils::RecordChromeMainEntryTime(now);
-}
-
 }  // namespace
 
 ChromeMainDelegate::ChromeMainDelegate()
     : ChromeMainDelegate(base::TimeTicks()) {}
 
 ChromeMainDelegate::ChromeMainDelegate(base::TimeTicks exe_entry_point_ticks) {
-  // Record startup metrics in the browser process. For component builds, there
-  // is no way to know the type of process (process command line is not yet
-  // initialized), so the function below will also be called in renderers.
-  // This doesn't matter as it simply sets global variables.
-  RecordMainStartupMetrics(exe_entry_point_ticks);
 }
 
 ChromeMainDelegate::~ChromeMainDelegate() {
@@ -569,17 +499,6 @@ void ChromeMainDelegate::PostEarlyInitialization(bool is_running_tests) {
       new net::NetworkChangeNotifierFactoryAndroid());
 #endif
 
-  if (base::FeatureList::IsEnabled(
-          features::kWriteBasicSystemProfileToPersistentHistogramsFile)) {
-    bool record = true;
-#if defined(OS_ANDROID)
-    record =
-        base::FeatureList::IsEnabled(chrome::android::kUmaBackgroundSessions);
-#endif
-    if (record)
-      chrome_content_browser_client_->startup_data()->RecordCoreSystemProfile();
-  }
-
 #if defined(OS_ANDROID)
   UmaSessionStats::OnStartup();
 #endif
@@ -640,12 +559,6 @@ void ChromeMainDelegate::PostFieldTrialInitialization() {
   }
 #endif
 
-  // Start heap profiling as early as possible so it can start recording
-  // memory allocations.
-  if (is_browser_process) {
-    heap_profiler_controller_ = std::make_unique<HeapProfilerController>();
-    heap_profiler_controller_->Start();
-
 #if BUILDFLAG(IS_CHROMEOS_ASH)
     chromeos::ConfigureSwap();
     chromeos::InitializeKstaled();
@@ -654,10 +567,8 @@ void ChromeMainDelegate::PostFieldTrialInitialization() {
     // that now.
     chromeos::LockMainProgramText();
 #endif
-  }
 
 #if defined(OS_WIN)
-  SetUpExtendedCrashReporting(is_browser_process);
   base::sequence_manager::internal::ThreadControllerPowerMonitor::
       InitializeOnMainThread();
 #endif
@@ -712,29 +623,13 @@ bool ChromeMainDelegate::BasicStartupComplete(int* exit_code) {
     return true;
   }
 #endif
-
-#if defined(OS_MAC)
-  // Give the browser process a longer treadmill, since crashes
-  // there have more impact.
-  const bool is_browser = !command_line.HasSwitch(switches::kProcessType);
-  ObjcEvilDoers::ZombieEnable(true, is_browser ? 10000 : 1000);
-#endif
-
   content::Profiling::ProcessStarted();
 
   // Setup tracing sampler profiler as early as possible at startup if needed.
   tracing_sampler_profiler_ =
       tracing::TracingSamplerProfiler::CreateOnMainThread();
 
-#if defined(OS_WIN)
-  v8_crashpad_support::SetUp();
-#endif
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
-  if (!crash_reporter::IsCrashpadEnabled()) {
-    breakpad::SetFirstChanceExceptionHandler(v8::TryHandleWebAssemblyTrapPosix);
-  }
-#endif
 
 #if defined(OS_POSIX)
   if (HandleVersionSwitches(command_line)) {
@@ -874,92 +769,15 @@ bool ChromeMainDelegate::BasicStartupComplete(int* exit_code) {
   }
 #endif
 
-  // The TLS slot used by the memlog allocator shim needs to be initialized
-  // early to ensure that it gets assigned a low slot number. If it gets
-  // initialized too late, the glibc TLS system will require a malloc call in
-  // order to allocate storage for a higher slot number. Since malloc is hooked,
-  // this causes re-entrancy into the allocator shim, while the TLS object is
-  // partially-initialized, which the TLS object is supposed to protect again.
-  heap_profiling::InitTLSSlot();
-
   return false;
 }
 
-#if defined(OS_MAC)
-void ChromeMainDelegate::InitMacCrashReporter(
-    const base::CommandLine& command_line,
-    const std::string& process_type) {
-  // TODO(mark): Right now, InitializeCrashpad() needs to be called after
-  // CommandLine::Init() and chrome::RegisterPathProvider().  Ideally, Crashpad
-  // initialization could occur sooner, preferably even before the framework
-  // dylib is even loaded, to catch potential early crashes.
-
-  const bool browser_process = process_type.empty();
-  const bool install_from_dmg_relauncher_process =
-      process_type == switches::kRelauncherProcess &&
-      command_line.HasSwitch(switches::kRelauncherProcessDMGDevice);
-
-  const bool initial_client =
-      browser_process || install_from_dmg_relauncher_process;
-
-  crash_reporter::InitializeCrashpad(initial_client, process_type);
-
-  if (!browser_process) {
-    std::string metrics_client_id =
-        command_line.GetSwitchValueASCII(switches::kMetricsClientID);
-    crash_keys::SetMetricsClientIdFromGUID(metrics_client_id);
-  }
-
-  // Mac Chrome is packaged with a main app bundle and a helper app bundle.
-  // The main app bundle should only be used for the browser process, so it
-  // should never see a --type switch (switches::kProcessType).  Likewise,
-  // the helper should always have a --type switch.
-  //
-  // This check is done this late so there is already a call to
-  // base::mac::IsBackgroundOnlyProcess(), so there is no change in
-  // startup/initialization order.
-
-  // The helper's Info.plist marks it as a background only app.
-  if (base::mac::IsBackgroundOnlyProcess()) {
-    CHECK(command_line.HasSwitch(switches::kProcessType) &&
-          !process_type.empty())
-        << "Helper application requires --type.";
-  } else if (base::mac::AmIBundled()) {
-    CHECK(!command_line.HasSwitch(switches::kProcessType) &&
-          process_type.empty())
-        << "Main application forbids --type, saw " << process_type;
-  }
-}
-
-void ChromeMainDelegate::SetUpInstallerPreferences(
-    const base::CommandLine& command_line) {
-  const bool uma_setting = command_line.HasSwitch(switches::kEnableUserMetrics);
-  const bool default_browser_setting =
-      command_line.HasSwitch(switches::kMakeChromeDefault);
-
-  if (uma_setting)
-    crash_reporter::SetUploadConsent(uma_setting);
-  if (default_browser_setting)
-    shell_integration::SetAsDefaultBrowser();
-}
-#endif  // defined(OS_MAC)
-
 void ChromeMainDelegate::PreSandboxStartup() {
   const base::CommandLine& command_line =
       *base::CommandLine::ForCurrentProcess();
   std::string process_type =
       command_line.GetSwitchValueASCII(switches::kProcessType);
 
-  crash_reporter::InitializeCrashKeys();
-
-#if defined(OS_POSIX)
-  ChromeCrashReporterClient::Create();
-#endif
-
-#if defined(OS_MAC)
-  InitMacCrashReporter(command_line, process_type);
-  SetUpInstallerPreferences(command_line);
-#endif
 
 #if defined(OS_WIN)
   child_process_logging::Init();
@@ -1083,39 +901,12 @@ void ChromeMainDelegate::PreSandboxStartup() {
         locale;
   }
 
-#if defined(OS_POSIX) && !defined(OS_MAC)
-  // Zygote needs to call InitCrashReporter() in RunZygote().
-  if (process_type != switches::kZygoteProcess) {
-#if defined(OS_ANDROID)
-    crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
-    if (process_type.empty()) {
-      base::android::InitJavaExceptionReporter();
-      UninstallPureJavaExceptionHandler();
-    } else {
-      base::android::InitJavaExceptionReporterForChildProcess();
-    }
-#else  // !defined(OS_ANDROID)
-    if (crash_reporter::IsCrashpadEnabled()) {
-      crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
-      crash_reporter::SetFirstChanceExceptionHandler(
-          v8::TryHandleWebAssemblyTrapPosix);
-    } else {
-      breakpad::InitCrashReporter(process_type);
-    }
-#endif  // defined(OS_ANDROID)
-  }
-#endif  // defined(OS_POSIX) && !defined(OS_MAC)
-
 #if defined(OS_ANDROID)
   CHECK_EQ(base::android::GetLibraryProcessType(),
            process_type.empty() ? base::android::PROCESS_BROWSER
                                 : base::android::PROCESS_CHILD);
 #endif  // defined(OS_ANDROID)
 
-  // After all the platform Breakpads have been initialized, store the command
-  // line for crash reporting.
-  crash_keys::SetCrashKeysFromCommandLine(command_line);
-
 #if BUILDFLAG(ENABLE_PDF)
   MaybeInitializeGDI();
 #endif
@@ -1212,23 +1003,6 @@ void ChromeMainDelegate::ZygoteForked() {
     base::debug::RestartProfilingAfterFork();
     SetUpProfilingShutdownHandler();
   }
-
-  // Needs to be called after we have chrome::DIR_USER_DATA.  BrowserMain sets
-  // this up for the browser process in a different manner.
-  const base::CommandLine* command_line =
-      base::CommandLine::ForCurrentProcess();
-  std::string process_type =
-      command_line->GetSwitchValueASCII(switches::kProcessType);
-  if (crash_reporter::IsCrashpadEnabled()) {
-    crash_reporter::InitializeCrashpad(false, process_type);
-    crash_reporter::SetFirstChanceExceptionHandler(
-        v8::TryHandleWebAssemblyTrapPosix);
-  } else {
-    breakpad::InitCrashReporter(process_type);
-  }
-
-  // Reset the command line for the newly spawned process.
-  crash_keys::SetCrashKeysFromCommandLine(*command_line);
 }
 
 #endif  // defined(OS_LINUX) || defined(OS_CHROMEOS)
