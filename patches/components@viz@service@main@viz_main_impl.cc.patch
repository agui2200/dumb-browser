diff --git a/components/viz/service/main/viz_main_impl.cc b/components/viz/service/main/viz_main_impl.cc
index 55a292a0c77c4..44ab9d0715e05 100644
--- a/components/viz/service/main/viz_main_impl.cc
+++ b/components/viz/service/main/viz_main_impl.cc
@@ -23,8 +23,6 @@
 #include "gpu/ipc/service/gpu_init.h"
 #include "gpu/ipc/service/gpu_watchdog_thread.h"
 #include "media/gpu/buildflags.h"
-#include "services/metrics/public/cpp/delegating_ukm_recorder.h"
-#include "services/metrics/public/cpp/mojo_ukm_recorder.h"
 #include "skia/ext/legacy_display_globals.h"
 #include "ui/gfx/rendering_pipeline.h"
 
@@ -98,12 +96,14 @@ VizMainImpl::VizMainImpl(Delegate* delegate,
         base::PlatformThread::CurrentId(), base::ThreadTaskRunnerHandle::Get());
   }
 
+#if 0
   if (!gpu_init_->gpu_info().in_process_gpu && dependencies_.ukm_recorder) {
     // NOTE: If the GPU is running in the browser process, we can use the
     // browser's UKMRecorder.
     ukm::DelegatingUkmRecorder::Get()->AddDelegate(
         dependencies_.ukm_recorder->GetWeakPtr());
   }
+#endif
 
   gpu_service_ = std::make_unique<GpuServiceImpl>(
       gpu_init_->gpu_info(), gpu_init_->TakeWatchdogThread(), io_task_runner(),
@@ -133,9 +133,11 @@ VizMainImpl::~VizMainImpl() {
   viz_compositor_thread_runner_ = nullptr;
   viz_compositor_thread_runner_impl_.reset();
 
+#if 0
   if (dependencies_.ukm_recorder)
     ukm::DelegatingUkmRecorder::Get()->RemoveDelegate(
         dependencies_.ukm_recorder.get());
+#endif
 }
 
 void VizMainImpl::Bind(mojo::PendingReceiver<mojom::VizMain> receiver) {
