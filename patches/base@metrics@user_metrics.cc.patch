diff --git a/base/metrics/user_metrics.cc b/base/metrics/user_metrics.cc
index 24a44515e605..f7049e933f71 100644
--- a/base/metrics/user_metrics.cc
+++ b/base/metrics/user_metrics.cc
@@ -19,62 +19,28 @@
 namespace base {
 namespace {
 
-LazyInstance<std::vector<ActionCallback>>::DestructorAtExit g_callbacks =
-    LAZY_INSTANCE_INITIALIZER;
 LazyInstance<scoped_refptr<SingleThreadTaskRunner>>::DestructorAtExit
     g_task_runner = LAZY_INSTANCE_INITIALIZER;
 
 }  // namespace
 
 void RecordAction(const UserMetricsAction& action) {
-  RecordComputedAction(action.str_);
 }
 
 void RecordComputedAction(const std::string& action) {
-  RecordComputedActionAt(action, TimeTicks::Now());
 }
 
 void RecordComputedActionSince(const std::string& action,
                                TimeDelta time_since) {
-  RecordComputedActionAt(action, TimeTicks::Now() - time_since);
 }
 
 void RecordComputedActionAt(const std::string& action, TimeTicks action_time) {
-  TRACE_EVENT_INSTANT1("ui", "UserEvent", TRACE_EVENT_SCOPE_GLOBAL, "action",
-                       action);
-  if (!g_task_runner.Get()) {
-    DCHECK(g_callbacks.Get().empty());
-    return;
-  }
-
-  if (!g_task_runner.Get()->BelongsToCurrentThread()) {
-    g_task_runner.Get()->PostTask(
-        FROM_HERE, BindOnce(&RecordComputedActionAt, action, action_time));
-    return;
-  }
-
-  for (const ActionCallback& callback : g_callbacks.Get()) {
-    callback.Run(action, action_time);
-  }
 }
 
 void AddActionCallback(const ActionCallback& callback) {
-  // Only allow adding a callback if the task runner is set.
-  DCHECK(g_task_runner.Get());
-  DCHECK(g_task_runner.Get()->BelongsToCurrentThread());
-  g_callbacks.Get().push_back(callback);
 }
 
 void RemoveActionCallback(const ActionCallback& callback) {
-  DCHECK(g_task_runner.Get());
-  DCHECK(g_task_runner.Get()->BelongsToCurrentThread());
-  std::vector<ActionCallback>* callbacks = g_callbacks.Pointer();
-  for (size_t i = 0; i < callbacks->size(); ++i) {
-    if ((*callbacks)[i] == callback) {
-      callbacks->erase(callbacks->begin() + i);
-      return;
-    }
-  }
 }
 
 void SetRecordActionTaskRunner(
