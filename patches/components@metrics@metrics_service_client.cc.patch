diff --git a/components/metrics/metrics_service_client.cc b/components/metrics/metrics_service_client.cc
index 5054743529dcf..3fb6b1dfbab02 100644
--- a/components/metrics/metrics_service_client.cc
+++ b/components/metrics/metrics_service_client.cc
@@ -17,6 +17,7 @@
 
 namespace metrics {
 
+#if 0
 namespace {
 
 // The minimum time in seconds between consecutive metrics report uploads.
@@ -55,14 +56,17 @@ constexpr size_t kMinInitialLogQueueCount = 20;
 constexpr size_t kMinOngoingLogQueueCount = 8;
 
 }  // namespace
+#endif
 
 MetricsServiceClient::MetricsServiceClient() {}
 
 MetricsServiceClient::~MetricsServiceClient() {}
 
+#if 0
 ukm::UkmService* MetricsServiceClient::GetUkmService() {
   return nullptr;
 }
+#endif
 
 bool MetricsServiceClient::ShouldUploadMetricsForUserId(
     const uint64_t user_id) {
@@ -77,92 +81,21 @@ GURL MetricsServiceClient::GetInsecureMetricsServerUrl() {
   return GURL(kNewMetricsServerUrlInsecure);
 }
 
-base::TimeDelta MetricsServiceClient::GetUploadInterval() {
-  const base::CommandLine* command_line =
-      base::CommandLine::ForCurrentProcess();
-  // If an upload interval is set from the command line, use that value but
-  // subject it to a minimum threshold to mitigate the risk of DDoS attack.
-  if (command_line->HasSwitch(metrics::switches::kMetricsUploadIntervalSec)) {
-    const std::string switch_value = command_line->GetSwitchValueASCII(
-        metrics::switches::kMetricsUploadIntervalSec);
-    int custom_upload_interval;
-    if (base::StringToInt(switch_value, &custom_upload_interval)) {
-      return base::TimeDelta::FromSeconds(
-          std::max(custom_upload_interval, kMetricsUploadIntervalSecMinimum));
-    }
-    LOG(DFATAL) << "Malformed value for --metrics-upload-interval. "
-                << "Expected int, got: " << switch_value;
-  }
-  return GetStandardUploadInterval();
-}
-
 bool MetricsServiceClient::ShouldStartUpFastForTesting() const {
   return false;
 }
 
-bool MetricsServiceClient::IsReportingPolicyManaged() {
-  return false;
-}
-
-EnableMetricsDefault MetricsServiceClient::GetMetricsReportingDefaultState() {
-  return EnableMetricsDefault::DEFAULT_UNKNOWN;
-}
-
-bool MetricsServiceClient::IsUMACellularUploadLogicEnabled() {
-  return false;
-}
-
-bool MetricsServiceClient::IsExternalExperimentAllowlistEnabled() {
-  return true;
-}
-
-bool MetricsServiceClient::IsUkmAllowedForAllProfiles() {
-  return false;
-}
-
-bool MetricsServiceClient::IsUkmAllowedWithExtensionsForAllProfiles() {
-  return false;
-}
-
-bool MetricsServiceClient::AreNotificationListenersEnabledOnAllProfiles() {
-  return false;
-}
-
 std::string MetricsServiceClient::GetAppPackageName() {
   return std::string();
 }
 
-std::string MetricsServiceClient::GetUploadSigningKey() {
-  return std::string();
-}
-
 bool MetricsServiceClient::ShouldResetClientIdsOnClonedInstall() {
   return false;
 }
 
-MetricsLogStore::StorageLimits MetricsServiceClient::GetStorageLimits() const {
-  return {
-      /*min_initial_log_queue_count=*/kMinInitialLogQueueCount,
-      /*min_initial_log_queue_size=*/kMinLogQueueSize,
-      /*min_ongoing_log_queue_count=*/kMinOngoingLogQueueCount,
-      /*min_ongoing_log_queue_size=*/kMinLogQueueSize,
-      /*max_ongoing_log_size=*/kMaxOngoingLogSize,
-  };
-}
-
-void MetricsServiceClient::SetUpdateRunningServicesCallback(
-    const base::RepeatingClosure& callback) {
-  update_running_services_ = callback;
-}
-
 void MetricsServiceClient::UpdateRunningServices() {
   if (update_running_services_)
     update_running_services_.Run();
 }
 
-bool MetricsServiceClient::IsMetricsReportingForceEnabled() const {
-  return base::CommandLine::ForCurrentProcess()->HasSwitch(
-      switches::kForceEnableMetricsReporting);
-}
-
 }  // namespace metrics
