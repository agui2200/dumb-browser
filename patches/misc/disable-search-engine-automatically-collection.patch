--- a/chrome/renderer/chrome_render_frame_observer.cc
+++ b/chrome/renderer/chrome_render_frame_observer.cc
@@ -213,7 +213,7 @@ void ChromeRenderFrameObserver::DidFinis
   // Don't do anything for subframes.
   if (frame->Parent())
     return;
-
+#if 0
   GURL osdd_url = frame->GetDocument().OpenSearchDescriptionURL();
   if (!osdd_url.is_empty()) {
     mojo::AssociatedRemote<chrome::mojom::OpenSearchDescriptionDocumentHandler>
@@ -223,6 +223,7 @@ void ChromeRenderFrameObserver::DidFinis
     osdd_handler->PageHasOpenSearchDescriptionDocument(
         frame->GetDocument().Url(), osdd_url);
   }
+#endif
 }
 
 void ChromeRenderFrameObserver::DidCreateNewDocument() {
--- a/components/search_engines/template_url_service.cc
+++ b/components/search_engines/template_url_service.cc
@@ -341,6 +341,7 @@ bool TemplateURLService::CanAddAutogener
     const base::string16& keyword,
     const GURL& url,
     const TemplateURL** template_url_to_replace) {
+  return false;
   DCHECK(!keyword.empty());  // This should only be called for non-empty
                              // keywords. If we need to support empty kewords
                              // the code needs to change slightly.
@@ -1615,6 +1616,7 @@ void TemplateURLService::ChangeToLoadedS
 
 bool TemplateURLService::CanAddAutogeneratedKeywordForHost(
     const std::string& host) const {
+  return false;
   const TemplateURLSet* urls = provider_map_->GetURLsForHost(host);
   if (!urls)
     return true;
@@ -1625,7 +1627,7 @@ bool TemplateURLService::CanAddAutogener
 }
 
 bool TemplateURLService::CanReplace(const TemplateURL* t_url) const {
-  return !ShowInDefaultList(t_url) && t_url->safe_for_autoreplace();
+  return false;
 }
 
 TemplateURL* TemplateURLService::FindNonExtensionTemplateURLForKeyword(
