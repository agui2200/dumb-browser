diff --git a/components/policy/core/common/cloud/cloud_policy_core.h b/components/policy/core/common/cloud/cloud_policy_core.h
index afb4d047adca..1c4b829c3e01 100644
--- a/components/policy/core/common/cloud/cloud_policy_core.h
+++ b/components/policy/core/common/cloud/cloud_policy_core.h
@@ -28,8 +28,6 @@ class CloudPolicyClient;
 class CloudPolicyRefreshScheduler;
 class CloudPolicyService;
 class CloudPolicyStore;
-class RemoteCommandsFactory;
-class RemoteCommandsService;
 
 // CloudPolicyCore glues together the ingredients that are essential for
 // obtaining a fully-functional cloud policy system: CloudPolicyClient and
@@ -52,10 +50,6 @@ class POLICY_EXPORT CloudPolicyCore {
 
     // Called before the core is disconnected.
     virtual void OnCoreDisconnecting(CloudPolicyCore* core) = 0;
-
-    // Called after the remote commands service is started. Defaults to be
-    // empty.
-    virtual void OnRemoteCommandsServiceStarted(CloudPolicyCore* core);
   };
 
   // |task_runner| is the runner for policy refresh tasks.
@@ -83,26 +77,12 @@ class POLICY_EXPORT CloudPolicyCore {
     return refresh_scheduler_.get();
   }
 
-  RemoteCommandsService* remote_commands_service() {
-    return remote_commands_service_.get();
-  }
-  const RemoteCommandsService* remote_commands_service() const {
-    return remote_commands_service_.get();
-  }
-
   // Initializes the cloud connection.
   void Connect(std::unique_ptr<CloudPolicyClient> client);
 
   // Shuts down the cloud connection.
   void Disconnect();
 
-  // Starts a remote commands service, with the provided factory. Will attempt
-  // to fetch commands immediately, thus requiring the cloud policy client to
-  // be registered.
-  void StartRemoteCommandsService(
-      std::unique_ptr<RemoteCommandsFactory> factory,
-      PolicyInvalidationScope scope);
-
   // Requests a policy refresh to be performed soon. This may apply throttling,
   // and the request may not be immediately sent.
   void RefreshSoon();
@@ -137,7 +117,6 @@ class POLICY_EXPORT CloudPolicyCore {
   std::unique_ptr<CloudPolicyClient> client_;
   std::unique_ptr<CloudPolicyService> service_;
   std::unique_ptr<CloudPolicyRefreshScheduler> refresh_scheduler_;
-  std::unique_ptr<RemoteCommandsService> remote_commands_service_;
   std::unique_ptr<IntegerPrefMember> refresh_delay_;
   base::ObserverList<Observer, true>::Unchecked observers_;
 
