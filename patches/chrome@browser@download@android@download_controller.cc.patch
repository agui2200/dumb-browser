diff --git a/chrome/browser/download/android/download_controller.cc b/chrome/browser/download/android/download_controller.cc
index bae8f9c28cb2a..3cbc1742b67fd 100644
--- a/chrome/browser/download/android/download_controller.cc
+++ b/chrome/browser/download/android/download_controller.cc
@@ -27,7 +27,6 @@
 #include "chrome/browser/download/android/download_utils.h"
 #include "chrome/browser/download/download_offline_content_provider.h"
 #include "chrome/browser/download/download_offline_content_provider_factory.h"
-#include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/flags/android/chrome_feature_list.h"
 #include "chrome/browser/offline_pages/android/offline_page_bridge.h"
 #include "chrome/browser/permissions/permission_update_infobar_delegate_android.h"
@@ -75,13 +74,9 @@ void CreateContextMenuDownloadInternal(
     return;
 
   if (!web_contents) {
-    DownloadController::RecordStoragePermission(
-        DownloadController::StoragePermissionType::
-            STORAGE_PERMISSION_NO_WEB_CONTENTS);
     return;
   }
 
-  RecordDownloadSource(DOWNLOAD_INITIATED_BY_CONTEXT_MENU);
   auto origin = offline_pages::android::OfflinePageBridge::GetEncodedOriginApp(
       web_contents);
   download::CreateContextMenuDownload(web_contents, params, origin, is_link);
@@ -145,14 +140,6 @@ void OnStoragePermissionDecided(
     bool granted) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
-  if (granted) {
-    DownloadController::RecordStoragePermission(
-        DownloadController::StoragePermissionType::STORAGE_PERMISSION_GRANTED);
-  } else {
-    DownloadController::RecordStoragePermission(
-        DownloadController::StoragePermissionType::STORAGE_PERMISSION_DENIED);
-  }
-
   std::move(cb).Run(granted);
 }
 
@@ -193,12 +180,6 @@ void DownloadControllerBase::SetDownloadControllerBase(
   DownloadControllerBase::download_controller_ = download_controller;
 }
 
-// static
-void DownloadController::RecordStoragePermission(StoragePermissionType type) {
-  UMA_HISTOGRAM_ENUMERATION("MobileDownload.StoragePermission", type,
-                            STORAGE_PERMISSION_MAX);
-}
-
 // static
 void DownloadController::CloseTabIfEmpty(content::WebContents* web_contents,
                                          download::DownloadItem* download) {
@@ -247,10 +228,6 @@ void DownloadController::AcquireFileAccessPermission(
   WebContents* web_contents = web_contents_getter.Run();
 
   if (HasFileAccessPermission()) {
-    RecordStoragePermission(
-        StoragePermissionType::STORAGE_PERMISSION_REQUESTED);
-    RecordStoragePermission(
-        StoragePermissionType::STORAGE_PERMISSION_NO_ACTION_NEEDED);
     content::GetUIThreadTaskRunner({})->PostTask(
         FROM_HERE, base::BindOnce(std::move(cb), true));
     return;
@@ -262,7 +239,6 @@ void DownloadController::AcquireFileAccessPermission(
     return;
   }
 
-  RecordStoragePermission(StoragePermissionType::STORAGE_PERMISSION_REQUESTED);
   AcquirePermissionCallback callback(base::BindOnce(
       &OnRequestFileAccessResult, web_contents_getter,
       base::BindOnce(&OnStoragePermissionDecided, std::move(cb))));
