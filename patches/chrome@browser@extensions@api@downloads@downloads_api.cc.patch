diff --git a/chrome/browser/extensions/api/downloads/downloads_api.cc b/chrome/browser/extensions/api/downloads/downloads_api.cc
index b20a75d494d4..d8e11dcb384d 100644
--- a/chrome/browser/extensions/api/downloads/downloads_api.cc
+++ b/chrome/browser/extensions/api/downloads/downloads_api.cc
@@ -38,13 +38,11 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/browser/download/download_file_icon_extractor.h"
 #include "chrome/browser/download/download_open_prompt.h"
 #include "chrome/browser/download/download_prefs.h"
 #include "chrome/browser/download/download_query.h"
 #include "chrome/browser/download/download_shelf.h"
-#include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/extensions/chrome_extension_function_details.h"
 #include "chrome/browser/icon_loader.h"
 #include "chrome/browser/icon_manager.h"
@@ -498,12 +496,6 @@ enum DownloadsFunctionName {
   DOWNLOADS_FUNCTION_LAST
 };
 
-void RecordApiFunctions(DownloadsFunctionName function) {
-  UMA_HISTOGRAM_ENUMERATION("Download.ApiFunctions",
-                            function,
-                            DOWNLOADS_FUNCTION_LAST);
-}
-
 void CompileDownloadQueryOrderBy(
     const std::vector<std::string>& order_by_strs,
     std::string* error,
@@ -1093,7 +1085,6 @@ ExtensionFunction::ResponseAction DownloadsDownloadFunction::Run() {
       BrowserContext::GetDownloadManager(browser_context());
 
   manager->DownloadUrl(std::move(download_params));
-  RecordApiFunctions(DOWNLOADS_FUNCTION_DOWNLOAD);
   return RespondLater();
 }
 
@@ -1171,7 +1162,6 @@ ExtensionFunction::ResponseAction DownloadsSearchFunction::Run() {
                                            : profile->GetOriginalProfile()));
     json_results->Append(std::move(json_item));
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SEARCH);
   return RespondNow(
       OneArgument(base::Value::FromUniquePtrValue(std::move(json_results))));
 }
@@ -1195,7 +1185,6 @@ ExtensionFunction::ResponseAction DownloadsPauseFunction::Run() {
   // If the item is already paused, this is a no-op and the operation will
   // silently succeed.
   download_item->Pause();
-  RecordApiFunctions(DOWNLOADS_FUNCTION_PAUSE);
   return RespondNow(NoArguments());
 }
 
@@ -1218,7 +1207,6 @@ ExtensionFunction::ResponseAction DownloadsResumeFunction::Run() {
   // Note that if the item isn't paused, this will be a no-op, and the extension
   // call will seem successful.
   download_item->Resume(user_gesture());
-  RecordApiFunctions(DOWNLOADS_FUNCTION_RESUME);
   return RespondNow(NoArguments());
 }
 
@@ -1237,7 +1225,6 @@ ExtensionFunction::ResponseAction DownloadsCancelFunction::Run() {
     download_item->Cancel(true);
   // |download_item| can be NULL if the download ID was invalid or if the
   // download is not currently active.  Either way, it's not a failure.
-  RecordApiFunctions(DOWNLOADS_FUNCTION_CANCEL);
   return RespondNow(NoArguments());
 }
 
@@ -1264,7 +1251,6 @@ ExtensionFunction::ResponseAction DownloadsEraseFunction::Run() {
     json_results->AppendInteger(static_cast<int>((*it)->GetId()));
     (*it)->Remove();
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_ERASE);
   return RespondNow(
       OneArgument(base::Value::FromUniquePtrValue(std::move(json_results))));
 }
@@ -1288,7 +1274,6 @@ ExtensionFunction::ResponseAction DownloadsRemoveFileFunction::Run() {
       Fault(download_item->GetFileExternallyRemoved(),
             download_extension_errors::kFileAlreadyDeleted, &error))
     return RespondNow(Error(std::move(error)));
-  RecordApiFunctions(DOWNLOADS_FUNCTION_REMOVE_FILE);
   download_item->DeleteFile(
       base::BindOnce(&DownloadsRemoveFileFunction::Done, this));
   return RespondLater();
@@ -1307,9 +1292,6 @@ DownloadsAcceptDangerFunction::DownloadsAcceptDangerFunction() {}
 
 DownloadsAcceptDangerFunction::~DownloadsAcceptDangerFunction() {}
 
-DownloadsAcceptDangerFunction::OnPromptCreatedCallback*
-    DownloadsAcceptDangerFunction::on_prompt_created_ = NULL;
-
 ExtensionFunction::ResponseAction DownloadsAcceptDangerFunction::Run() {
   std::unique_ptr<downloads::AcceptDanger::Params> params(
       downloads::AcceptDanger::Params::Create(*args_));
@@ -1346,42 +1328,7 @@ void DownloadsAcceptDangerFunction::PromptOrWait(int download_id, int retries) {
     Respond(Error(download_extension_errors::kInvisibleContext));
     return;
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_ACCEPT_DANGER);
-  // DownloadDangerPrompt displays a modal dialog using native widgets that the
-  // user must either accept or cancel. It cannot be scripted.
-  DownloadDangerPrompt* prompt = DownloadDangerPrompt::Create(
-      download_item, web_contents, true,
-      base::BindOnce(&DownloadsAcceptDangerFunction::DangerPromptCallback, this,
-                     download_id));
-  // DownloadDangerPrompt deletes itself
-  if (on_prompt_created_ && !on_prompt_created_->is_null())
-    std::move(*on_prompt_created_).Run(prompt);
-  // Function finishes in DangerPromptCallback().
-}
-
-void DownloadsAcceptDangerFunction::DangerPromptCallback(
-    int download_id, DownloadDangerPrompt::Action action) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  DownloadItem* download_item = GetDownload(
-      browser_context(), include_incognito_information(), download_id);
-  std::string error;
-  if (InvalidId(download_item, &error) ||
-      Fault(download_item->GetState() != DownloadItem::IN_PROGRESS,
-            download_extension_errors::kNotInProgress, &error)) {
-    Respond(Error(std::move(error)));
-    return;
-  }
-  switch (action) {
-    case DownloadDangerPrompt::ACCEPT:
-      download_item->ValidateDangerousDownload();
-      break;
-    case DownloadDangerPrompt::CANCEL:
-      download_item->Remove();
-      break;
-    case DownloadDangerPrompt::DISMISS:
-      break;
-  }
-  Respond(NoArguments());
+  download_item->ValidateDangerousDownload();
 }
 
 DownloadsShowFunction::DownloadsShowFunction() {}
@@ -1398,7 +1345,6 @@ ExtensionFunction::ResponseAction DownloadsShowFunction::Run() {
   if (InvalidId(download_item, &error))
     return RespondNow(Error(std::move(error)));
   download_item->ShowDownloadInShell();
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SHOW);
   return RespondNow(NoArguments());
 }
 
@@ -1415,7 +1361,6 @@ ExtensionFunction::ResponseAction DownloadsShowDefaultFolderFunction::Run() {
       Profile::FromBrowserContext(browser_context()),
       DownloadPrefs::FromDownloadManager(manager)->DownloadPath(),
       platform_util::OPEN_FOLDER, platform_util::OpenOperationCallback());
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SHOW_DEFAULT_FOLDER);
   return RespondNow(NoArguments());
 }
 
@@ -1470,7 +1415,6 @@ ExtensionFunction::ResponseAction DownloadsOpenFunction::Run() {
                          params->download_id));
   if (on_prompt_created_cb_)
     std::move(*on_prompt_created_cb_).Run(download_open_prompt);
-  RecordApiFunctions(DOWNLOADS_FUNCTION_OPEN);
   return RespondLater();
 }
 
@@ -1506,7 +1450,6 @@ ExtensionFunction::ResponseAction DownloadsSetShelfEnabledFunction::Run() {
     return RespondNow(Error(download_extension_errors::kShelfPermission));
   }
 
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SET_SHELF_ENABLED);
   DownloadManager* manager = NULL;
   DownloadManager* incognito_manager = NULL;
   GetManagers(browser_context(), include_incognito_information(), &manager,
@@ -1601,7 +1544,6 @@ void DownloadsGetFileIconFunction::OnIconURLExtracted(const std::string& url) {
     Respond(Error(std::move(error)));
     return;
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_GET_FILE_ICON);
   Respond(OneArgument(base::Value(url)));
 }
 
@@ -1750,7 +1692,6 @@ bool ExtensionDownloadsEventRouter::DetermineFilename(
     downloads::FilenameConflictAction conflict_action,
     std::string* error) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  RecordApiFunctions(DOWNLOADS_FUNCTION_DETERMINE_FILENAME);
   DownloadItem* item =
       GetDownload(browser_context, include_incognito, download_id);
   ExtensionDownloadsEventRouterData* data =
