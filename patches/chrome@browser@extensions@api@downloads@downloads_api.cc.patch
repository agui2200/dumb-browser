diff --git a/chrome/browser/extensions/api/downloads/downloads_api.cc b/chrome/browser/extensions/api/downloads/downloads_api.cc
index e000564a3fb8b..23bf739fba1d7 100644
--- a/chrome/browser/extensions/api/downloads/downloads_api.cc
+++ b/chrome/browser/extensions/api/downloads/downloads_api.cc
@@ -36,13 +36,11 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
-#include "chrome/browser/download/download_danger_prompt.h"
 #include "chrome/browser/download/download_file_icon_extractor.h"
 #include "chrome/browser/download/download_open_prompt.h"
 #include "chrome/browser/download/download_prefs.h"
 #include "chrome/browser/download/download_query.h"
 #include "chrome/browser/download/download_shelf.h"
-#include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/extensions/chrome_extension_function_details.h"
 #include "chrome/browser/icon_loader.h"
 #include "chrome/browser/icon_manager.h"
@@ -500,10 +498,12 @@ enum DownloadsFunctionName {
   DOWNLOADS_FUNCTION_LAST
 };
 
+#if 0
 void RecordApiFunctions(DownloadsFunctionName function) {
   UMA_HISTOGRAM_ENUMERATION("Download.ApiFunctions", function,
                             DOWNLOADS_FUNCTION_LAST);
 }
+#endif
 
 void CompileDownloadQueryOrderBy(const std::vector<std::string>& order_by_strs,
                                  std::string* error,
@@ -1060,7 +1060,6 @@ ExtensionFunction::ResponseAction DownloadsDownloadFunction::Run() {
 
   DownloadManager* manager = browser_context()->GetDownloadManager();
   manager->DownloadUrl(std::move(download_params));
-  RecordApiFunctions(DOWNLOADS_FUNCTION_DOWNLOAD);
   return RespondLater();
 }
 
@@ -1138,7 +1137,6 @@ ExtensionFunction::ResponseAction DownloadsSearchFunction::Run() {
                  : profile->GetOriginalProfile()));
     json_results->Append(std::move(json_item));
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SEARCH);
   return RespondNow(
       OneArgument(base::Value::FromUniquePtrValue(std::move(json_results))));
 }
@@ -1162,7 +1160,6 @@ ExtensionFunction::ResponseAction DownloadsPauseFunction::Run() {
   // If the item is already paused, this is a no-op and the operation will
   // silently succeed.
   download_item->Pause();
-  RecordApiFunctions(DOWNLOADS_FUNCTION_PAUSE);
   return RespondNow(NoArguments());
 }
 
@@ -1185,7 +1182,6 @@ ExtensionFunction::ResponseAction DownloadsResumeFunction::Run() {
   // Note that if the item isn't paused, this will be a no-op, and the extension
   // call will seem successful.
   download_item->Resume(user_gesture());
-  RecordApiFunctions(DOWNLOADS_FUNCTION_RESUME);
   return RespondNow(NoArguments());
 }
 
@@ -1203,7 +1199,6 @@ ExtensionFunction::ResponseAction DownloadsCancelFunction::Run() {
     download_item->Cancel(true);
   // |download_item| can be NULL if the download ID was invalid or if the
   // download is not currently active.  Either way, it's not a failure.
-  RecordApiFunctions(DOWNLOADS_FUNCTION_CANCEL);
   return RespondNow(NoArguments());
 }
 
@@ -1230,7 +1225,6 @@ ExtensionFunction::ResponseAction DownloadsEraseFunction::Run() {
     json_results->AppendInteger(static_cast<int>((*it)->GetId()));
     (*it)->Remove();
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_ERASE);
   return RespondNow(
       OneArgument(base::Value::FromUniquePtrValue(std::move(json_results))));
 }
@@ -1252,7 +1246,6 @@ ExtensionFunction::ResponseAction DownloadsRemoveFileFunction::Run() {
       Fault(download_item->GetFileExternallyRemoved(),
             download_extension_errors::kFileAlreadyDeleted, &error))
     return RespondNow(Error(std::move(error)));
-  RecordApiFunctions(DOWNLOADS_FUNCTION_REMOVE_FILE);
   download_item->DeleteFile(
       base::BindOnce(&DownloadsRemoveFileFunction::Done, this));
   return RespondLater();
@@ -1271,9 +1264,6 @@ DownloadsAcceptDangerFunction::DownloadsAcceptDangerFunction() {}
 
 DownloadsAcceptDangerFunction::~DownloadsAcceptDangerFunction() {}
 
-DownloadsAcceptDangerFunction::OnPromptCreatedCallback*
-    DownloadsAcceptDangerFunction::on_prompt_created_ = NULL;
-
 ExtensionFunction::ResponseAction DownloadsAcceptDangerFunction::Run() {
   std::unique_ptr<downloads::AcceptDanger::Params> params(
       downloads::AcceptDanger::Params::Create(*args_));
@@ -1310,6 +1300,7 @@ void DownloadsAcceptDangerFunction::PromptOrWait(int download_id, int retries) {
     Respond(Error(download_extension_errors::kInvisibleContext));
     return;
   }
+#if 0
   RecordApiFunctions(DOWNLOADS_FUNCTION_ACCEPT_DANGER);
   // DownloadDangerPrompt displays a modal dialog using native widgets that the
   // user must either accept or cancel. It cannot be scripted.
@@ -1321,8 +1312,10 @@ void DownloadsAcceptDangerFunction::PromptOrWait(int download_id, int retries) {
   if (on_prompt_created_ && !on_prompt_created_->is_null())
     std::move(*on_prompt_created_).Run(prompt);
   // Function finishes in DangerPromptCallback().
+#endif
 }
 
+#if 0
 void DownloadsAcceptDangerFunction::DangerPromptCallback(
     int download_id,
     DownloadDangerPrompt::Action action) {
@@ -1348,6 +1341,7 @@ void DownloadsAcceptDangerFunction::DangerPromptCallback(
   }
   Respond(NoArguments());
 }
+#endif
 
 DownloadsShowFunction::DownloadsShowFunction() {}
 
@@ -1363,7 +1357,6 @@ ExtensionFunction::ResponseAction DownloadsShowFunction::Run() {
   if (InvalidId(download_item, &error))
     return RespondNow(Error(std::move(error)));
   download_item->ShowDownloadInShell();
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SHOW);
   return RespondNow(NoArguments());
 }
 
@@ -1380,7 +1373,6 @@ ExtensionFunction::ResponseAction DownloadsShowDefaultFolderFunction::Run() {
       Profile::FromBrowserContext(browser_context()),
       DownloadPrefs::FromDownloadManager(manager)->DownloadPath(),
       platform_util::OPEN_FOLDER, platform_util::OpenOperationCallback());
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SHOW_DEFAULT_FOLDER);
   return RespondNow(NoArguments());
 }
 
@@ -1435,7 +1427,6 @@ ExtensionFunction::ResponseAction DownloadsOpenFunction::Run() {
                          params->download_id));
   if (on_prompt_created_cb_)
     std::move(*on_prompt_created_cb_).Run(download_open_prompt);
-  RecordApiFunctions(DOWNLOADS_FUNCTION_OPEN);
   return RespondLater();
 }
 
@@ -1471,7 +1462,6 @@ ExtensionFunction::ResponseAction DownloadsSetShelfEnabledFunction::Run() {
     return RespondNow(Error(download_extension_errors::kShelfPermission));
   }
 
-  RecordApiFunctions(DOWNLOADS_FUNCTION_SET_SHELF_ENABLED);
   DownloadManager* manager = NULL;
   DownloadManager* incognito_manager = NULL;
   GetManagers(browser_context(), include_incognito_information(), &manager,
@@ -1563,7 +1553,6 @@ void DownloadsGetFileIconFunction::OnIconURLExtracted(const std::string& url) {
     Respond(Error(std::move(error)));
     return;
   }
-  RecordApiFunctions(DOWNLOADS_FUNCTION_GET_FILE_ICON);
   Respond(OneArgument(base::Value(url)));
 }
 
@@ -1708,7 +1697,6 @@ bool ExtensionDownloadsEventRouter::DetermineFilename(
     downloads::FilenameConflictAction conflict_action,
     std::string* error) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  RecordApiFunctions(DOWNLOADS_FUNCTION_DETERMINE_FILENAME);
   DownloadItem* item =
       GetDownload(browser_context, include_incognito, download_id);
   ExtensionDownloadsEventRouterData* data =
