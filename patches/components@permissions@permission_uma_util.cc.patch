diff --git a/components/permissions/permission_uma_util.cc b/components/permissions/permission_uma_util.cc
index 0cac71e89e4e..23a9be78f643 100644
--- a/components/permissions/permission_uma_util.cc
+++ b/components/permissions/permission_uma_util.cc
@@ -15,11 +15,8 @@
 #include "components/permissions/permission_request.h"
 #include "components/permissions/permission_util.h"
 #include "components/permissions/permissions_client.h"
-#include "components/ukm/content/source_url_recorder.h"
 #include "content/public/browser/permission_type.h"
 #include "content/public/browser/web_contents.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "third_party/blink/public/common/loader/network_utils.h"
 #include "url/gurl.h"
 
@@ -119,53 +116,6 @@ void RecordEngagementMetric(const std::vector<PermissionRequest*>& requests,
   base::UmaHistogramPercentage(name, engagement_score);
 }
 
-void RecordPermissionActionUkm(
-    PermissionAction action,
-    PermissionRequestGestureType gesture_type,
-    ContentSettingsType permission,
-    int dismiss_count,
-    int ignore_count,
-    PermissionSourceUI source_ui,
-    PermissionPromptDisposition ui_disposition,
-    base::Optional<bool> has_three_consecutive_denies,
-    base::Optional<bool> has_previously_revoked_permission,
-    base::Optional<ukm::SourceId> source_id) {
-  // Only record the permission change if the origin is in the history.
-  if (!source_id.has_value())
-    return;
-
-  size_t num_values = 0;
-
-  ukm::builders::Permission builder(source_id.value());
-  builder.SetAction(static_cast<int64_t>(action))
-      .SetGesture(static_cast<int64_t>(gesture_type))
-      .SetPermissionType(static_cast<int64_t>(
-          ContentSettingTypeToHistogramValue(permission, &num_values)))
-      .SetPriorDismissals(std::min(kPriorCountCap, dismiss_count))
-      .SetPriorIgnores(std::min(kPriorCountCap, ignore_count))
-      .SetSource(static_cast<int64_t>(source_ui))
-      .SetPromptDisposition(static_cast<int64_t>(ui_disposition));
-
-  if (has_three_consecutive_denies.has_value()) {
-    int64_t satisfied_adaptive_triggers = 0;
-    if (has_three_consecutive_denies.value())
-      satisfied_adaptive_triggers |=
-          static_cast<int64_t>(AdaptiveTriggers::THREE_CONSECUTIVE_DENIES);
-    builder.SetSatisfiedAdaptiveTriggers(satisfied_adaptive_triggers);
-  }
-
-  if (has_previously_revoked_permission.has_value()) {
-    int64_t previously_revoked_permission = 0;
-    if (has_previously_revoked_permission.value()) {
-      previously_revoked_permission = static_cast<int64_t>(
-          PermissionAutoRevocationHistory::PREVIOUSLY_AUTO_REVOKED);
-    }
-    builder.SetPermissionAutoRevocationHistory(previously_revoked_permission);
-  }
-
-  builder.Record(ukm::UkmRecorder::Get());
-}
-
 std::string GetPromptDispositionString(
     PermissionPromptDisposition ui_disposition) {
   switch (ui_disposition) {
@@ -555,25 +505,6 @@ void PermissionUmaUtil::RecordPermissionAction(
     const GURL& requesting_origin,
     const content::WebContents* web_contents,
     content::BrowserContext* browser_context) {
-  PermissionDecisionAutoBlocker* autoblocker =
-      PermissionsClient::Get()->GetPermissionDecisionAutoBlocker(
-          browser_context);
-  int dismiss_count =
-      autoblocker->GetDismissCount(requesting_origin, permission);
-  int ignore_count = autoblocker->GetIgnoreCount(requesting_origin, permission);
-
-  PermissionsClient::Get()->GetUkmSourceId(
-      browser_context, web_contents, requesting_origin,
-      base::BindOnce(
-          &RecordPermissionActionUkm, action, gesture_type, permission,
-          dismiss_count, ignore_count, source_ui, ui_disposition,
-          permission == ContentSettingsType::NOTIFICATIONS
-              ? PermissionsClient::Get()
-                    ->HadThreeConsecutiveNotificationPermissionDenies(
-                        browser_context)
-              : base::nullopt,
-          PermissionsClient::Get()->HasPreviouslyAutoRevokedPermission(
-              browser_context, requesting_origin, permission)));
 
   switch (permission) {
     case ContentSettingsType::GEOLOCATION:
