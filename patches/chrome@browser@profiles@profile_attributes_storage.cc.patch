diff --git a/chrome/browser/profiles/profile_attributes_storage.cc b/chrome/browser/profiles/profile_attributes_storage.cc
index a520ff8a4b50..576d4e66ec8a 100644
--- a/chrome/browser/profiles/profile_attributes_storage.cc
+++ b/chrome/browser/profiles/profile_attributes_storage.cc
@@ -21,7 +21,6 @@
 #include "base/threading/scoped_blocking_call.h"
 #include "chrome/browser/profiles/profile_avatar_downloader.h"
 #include "chrome/browser/profiles/profile_avatar_icon_util.h"
-#include "chrome/browser/profiles/profile_metrics.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/policy/core/browser/browser_policy_connector.h"
 #include "components/profile_metrics/state.h"
@@ -150,83 +149,6 @@ bool ProfileAttributesSortComparator::operator()(
   return a->GetPath().value() < b->GetPath().value();
 }
 
-MultiProfileUserType GetMultiProfileUserType(
-    const std::vector<ProfileAttributesEntry*>& entries) {
-  DCHECK_GT(entries.size(), 0u);
-  if (entries.size() == 1u)
-    return MultiProfileUserType::kSingleProfile;
-
-  int active_count = std::count_if(
-      entries.begin(), entries.end(), [](ProfileAttributesEntry* entry) {
-        return ProfileMetrics::IsProfileActive(entry);
-      });
-
-  if (active_count <= 1)
-    return MultiProfileUserType::kLatentMultiProfile;
-  return MultiProfileUserType::kActiveMultiProfile;
-}
-
-profile_metrics::AvatarState GetAvatarState(ProfileAttributesEntry* entry) {
-  size_t index = entry->GetAvatarIconIndex();
-  bool is_modern = profiles::IsModernAvatarIconIndex(index);
-  if (entry->GetSigninState() == SigninState::kNotSignedIn) {
-    if (index == profiles::GetPlaceholderAvatarIndex())
-      return profile_metrics::AvatarState::kSignedOutDefault;
-    return is_modern ? profile_metrics::AvatarState::kSignedOutModern
-                     : profile_metrics::AvatarState::kSignedOutOld;
-  }
-  if (entry->IsUsingGAIAPicture())
-    return profile_metrics::AvatarState::kSignedInGaia;
-  return is_modern ? profile_metrics::AvatarState::kSignedInModern
-                   : profile_metrics::AvatarState::kSignedInOld;
-}
-
-profile_metrics::NameState GetNameState(ProfileAttributesEntry* entry) {
-  bool has_default_name = entry->IsUsingDefaultName();
-  switch (entry->GetNameForm()) {
-    case NameForm::kGaiaName:
-      return profile_metrics::NameState::kGaiaName;
-    case NameForm::kLocalName:
-      return has_default_name ? profile_metrics::NameState::kDefaultName
-                              : profile_metrics::NameState::kCustomName;
-    case NameForm::kGaiaAndLocalName:
-      return has_default_name ? profile_metrics::NameState::kGaiaAndDefaultName
-                              : profile_metrics::NameState::kGaiaAndCustomName;
-  }
-}
-
-profile_metrics::UnconsentedPrimaryAccountType GetUnconsentedPrimaryAccountType(
-    ProfileAttributesEntry* entry) {
-  if (entry->GetSigninState() == SigninState::kNotSignedIn)
-    return profile_metrics::UnconsentedPrimaryAccountType::kSignedOut;
-  if (entry->IsChild())
-    return profile_metrics::UnconsentedPrimaryAccountType::kChild;
-  // TODO(crbug.com/1060113): Replace this check by
-  // !entry->GetHostedDomain().has_value() in M84 (once the cache gets
-  // reasonably well populated).
-  if (policy::BrowserPolicyConnector::IsNonEnterpriseUser(
-          base::UTF16ToUTF8(entry->GetUserName()))) {
-    return profile_metrics::UnconsentedPrimaryAccountType::kConsumer;
-  }
-  // TODO(crbug.com/1060113): Figure out how to distinguish EDU accounts from
-  // other enterprise.
-  return profile_metrics::UnconsentedPrimaryAccountType::kEnterprise;
-}
-
-void RecordProfileState(ProfileAttributesEntry* entry,
-                        profile_metrics::StateSuffix suffix) {
-  profile_metrics::LogProfileAvatar(GetAvatarState(entry), suffix);
-  profile_metrics::LogProfileName(GetNameState(entry), suffix);
-  profile_metrics::LogProfileAccountType(
-      GetUnconsentedPrimaryAccountType(entry), suffix);
-  profile_metrics::LogProfileSyncEnabled(
-      entry->GetSigninState() ==
-          SigninState::kSignedInWithConsentedPrimaryAccount,
-      suffix);
-  profile_metrics::LogProfileDaysSinceLastUse(
-      (base::Time::Now() - entry->GetActiveTime()).InDays(), suffix);
-}
-
 }  // namespace
 
 ProfileAttributesStorage::ProfileAttributesStorage(PrefService* prefs)
@@ -394,7 +316,6 @@ void ProfileAttributesStorage::RemoveObserver(Observer* obs) {
 void ProfileAttributesStorage::RecordDeletedProfileState(
     ProfileAttributesEntry* entry) {
   DCHECK(entry);
-  RecordProfileState(entry, profile_metrics::StateSuffix::kUponDeletion);
   bool is_last_profile = GetNumberOfProfiles() <= 1u;
   // If the profile has windows opened, they are still open at this moment.
   // Thus, this really means that only the profile manager is open.
@@ -405,37 +326,6 @@ void ProfileAttributesStorage::RecordDeletedProfileState(
 #endif
 
 void ProfileAttributesStorage::RecordProfilesState() {
-  std::vector<ProfileAttributesEntry*> entries = GetAllProfilesAttributes();
-  if (entries.size() == 0)
-    return;
-
-  MultiProfileUserType type = GetMultiProfileUserType(entries);
-
-  for (ProfileAttributesEntry* entry : entries) {
-    RecordProfileState(entry, profile_metrics::StateSuffix::kAll);
-
-    switch (type) {
-      case MultiProfileUserType::kSingleProfile:
-        RecordProfileState(entry, profile_metrics::StateSuffix::kSingleProfile);
-        break;
-      case MultiProfileUserType::kActiveMultiProfile:
-        RecordProfileState(entry,
-                           profile_metrics::StateSuffix::kActiveMultiProfile);
-        break;
-      case MultiProfileUserType::kLatentMultiProfile: {
-        RecordProfileState(entry,
-                           profile_metrics::StateSuffix::kLatentMultiProfile);
-        if (ProfileMetrics::IsProfileActive(entry)) {
-          RecordProfileState(
-              entry, profile_metrics::StateSuffix::kLatentMultiProfileActive);
-        } else {
-          RecordProfileState(
-              entry, profile_metrics::StateSuffix::kLatentMultiProfileOthers);
-        }
-        break;
-      }
-    }
-  }
 }
 
 void ProfileAttributesStorage::NotifyOnProfileAvatarChanged(
