diff --git a/content/browser/file_system_access/file_system_access_file_writer_impl.cc b/content/browser/file_system_access/file_system_access_file_writer_impl.cc
index ee60c5e2e5bcc..ccdeabefcb1d7 100644
--- a/content/browser/file_system_access/file_system_access_file_writer_impl.cc
+++ b/content/browser/file_system_access/file_system_access_file_writer_impl.cc
@@ -136,14 +136,10 @@ FileSystemAccessFileWriterImpl::FileSystemAccessFileWriterImpl(
     const SharedHandleState& handle_state,
     mojo::PendingReceiver<blink::mojom::FileSystemAccessFileWriter> receiver,
     bool has_transient_user_activation,
-    bool auto_close,
-    download::QuarantineConnectionCallback quarantine_connection_callback)
+    bool auto_close)
     : FileSystemAccessHandleBase(manager, context, url, handle_state),
       receiver_(this, std::move(receiver)),
       swap_url_(swap_url),
-      quarantine_connection_callback_(
-          std::move(quarantine_connection_callback)),
-      has_transient_user_activation_(has_transient_user_activation),
       auto_close_(auto_close) {
   DCHECK_EQ(swap_url.type(), url.type());
   receiver_.set_disconnect_handler(base::BindOnce(
@@ -341,9 +337,8 @@ void FileSystemAccessFileWriterImpl::CloseImpl(CloseCallback callback) {
     return;
   }
 
-  ComputeHashForSwapFile(
-      base::BindOnce(&FileSystemAccessFileWriterImpl::DoAfterWriteCheck,
-                     weak_factory_.GetWeakPtr()));
+  DidAfterWriteCheck(
+      FileSystemAccessPermissionContext::AfterWriteCheckResult::kAllow);
 }
 
 void FileSystemAccessFileWriterImpl::AbortImpl(AbortCallback callback) {
@@ -363,6 +358,7 @@ void FileSystemAccessFileWriterImpl::AbortImpl(AbortCallback callback) {
   manager()->RemoveFileWriter(this);
 }
 
+#if 0
 // static
 void FileSystemAccessFileWriterImpl::DoAfterWriteCheck(
     base::File::Error hash_result,
@@ -391,6 +387,7 @@ void FileSystemAccessFileWriterImpl::DoAfterWriteCheck(
       base::BindOnce(&FileSystemAccessFileWriterImpl::DidAfterWriteCheck,
                      weak_factory_.GetWeakPtr()));
 }
+#endif
 
 void FileSystemAccessFileWriterImpl::DidAfterWriteCheck(
     FileSystemAccessPermissionContext::AfterWriteCheckResult result) {
@@ -410,6 +407,7 @@ void FileSystemAccessFileWriterImpl::DidAfterWriteCheck(
   // In case of error, the swap file URL will point to a valid filesystem
   // location. The file at this URL will be deleted when the mojo pipe closes.
   base::OnceCallback<void(base::File::Error)> result_callback;
+#if 0
   if (RequireSecurityChecks()) {
     GURL referrer_url = manager()->is_off_the_record() ? GURL() : context().url;
     mojo::Remote<quarantine::mojom::Quarantine> quarantine_remote;
@@ -422,10 +420,13 @@ void FileSystemAccessFileWriterImpl::DidAfterWriteCheck(
                        weak_factory_.GetWeakPtr(), url(), referrer_url,
                        std::move(quarantine_remote));
   } else {
+#endif
     result_callback = base::BindOnce(
         &FileSystemAccessFileWriterImpl::DidSwapFileSkipQuarantine,
         weak_factory_.GetWeakPtr());
+#if 0
   }
+#endif
   DoFileSystemOperation(
       FROM_HERE, &FileSystemOperationRunner::MoveFileLocal,
       std::move(result_callback), swap_url(), url(),
@@ -447,6 +448,7 @@ void FileSystemAccessFileWriterImpl::DidSwapFileSkipQuarantine(
   CallCloseCallbackAndDeleteThis(file_system_access_error::Ok());
 }
 
+#if 0
 void FileSystemAccessFileWriterImpl::DidSwapFileDoQuarantine(
     const storage::FileSystemURL& target_url,
     const GURL& referrer_url,
@@ -509,12 +511,12 @@ void FileSystemAccessFileWriterImpl::DidSwapFileDoQuarantine(
 #endif
   }
 }
+#endif
 
-void FileSystemAccessFileWriterImpl::DidAnnotateFile(
-    mojo::Remote<quarantine::mojom::Quarantine> quarantine_remote,
-    quarantine::mojom::QuarantineFileResult result) {
+void FileSystemAccessFileWriterImpl::DidAnnotateFile() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
+#if 0
   if (result != quarantine::mojom::QuarantineFileResult::OK &&
       result != quarantine::mojom::QuarantineFileResult::ANNOTATION_FAILED) {
     // If malware was detected, or the file referrer was blocked by policy, the
@@ -526,6 +528,7 @@ void FileSystemAccessFileWriterImpl::DidAnnotateFile(
         "Write operation aborted due to security policy."));
     return;
   }
+#endif
 
   CallCloseCallbackAndDeleteThis(file_system_access_error::Ok());
 }
