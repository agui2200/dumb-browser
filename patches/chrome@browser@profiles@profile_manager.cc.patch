diff --git a/chrome/browser/profiles/profile_manager.cc b/chrome/browser/profiles/profile_manager.cc
index d2a29e4e928c7..a57e47084f3c4 100644
--- a/chrome/browser/profiles/profile_manager.cc
+++ b/chrome/browser/profiles/profile_manager.cc
@@ -44,13 +44,9 @@
 #include "chrome/browser/buildflags.h"
 #include "chrome/browser/chrome_notification_types.h"
 #include "chrome/browser/content_settings/host_content_settings_map_factory.h"
-#include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.h"
-#include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings_factory.h"
 #include "chrome/browser/download/download_core_service.h"
 #include "chrome/browser/download/download_core_service_factory.h"
 #include "chrome/browser/lifetime/application_lifetime.h"
-#include "chrome/browser/lite_video/lite_video_keyed_service.h"
-#include "chrome/browser/lite_video/lite_video_keyed_service_factory.h"
 #include "chrome/browser/navigation_predictor/navigation_predictor_keyed_service_factory.h"
 #include "chrome/browser/password_manager/password_store_factory.h"
 #include "chrome/browser/permissions/adaptive_quiet_notification_permission_ui_enabler.h"
@@ -64,7 +60,6 @@
 #include "chrome/browser/profiles/profile_keep_alive_types.h"
 #include "chrome/browser/profiles/profile_key.h"
 #include "chrome/browser/profiles/profile_manager_observer.h"
-#include "chrome/browser/profiles/profile_metrics.h"
 #include "chrome/browser/profiles/profiles_state.h"
 #include "chrome/browser/signin/account_reconcilor_factory.h"
 #include "chrome/browser/signin/identity_manager_factory.h"
@@ -278,7 +273,6 @@ void CancelProfileDeletion(const base::FilePath& path) {
   DCHECK(!base::Contains(ProfilesToDelete(), path) ||
          ProfilesToDelete()[path] == ProfileDeletionStage::SCHEDULING);
   ProfilesToDelete().erase(path);
-  ProfileMetrics::LogProfileDeleteUser(ProfileMetrics::DELETE_PROFILE_ABORTED);
 }
 #endif
 
@@ -990,8 +984,7 @@ ProfileShortcutManager* ProfileManager::profile_shortcut_manager() {
 #if !defined(OS_ANDROID)
 void ProfileManager::MaybeScheduleProfileForDeletion(
     const base::FilePath& profile_dir,
-    ProfileLoadedCallback callback,
-    ProfileMetrics::ProfileDelete deletion_source) {
+    ProfileLoadedCallback callback) {
   if (!ScheduleProfileDirectoryForDeletion(profile_dir))
     return;
 
@@ -1001,7 +994,6 @@ void ProfileManager::MaybeScheduleProfileForDeletion(
   if (entry) {
     storage.RecordDeletedProfileState(entry);
   }
-  ProfileMetrics::LogProfileDeleteUser(deletion_source);
 
   ScheduleProfileForDeletion(profile_dir, std::move(callback));
 }
@@ -1525,11 +1517,6 @@ void ProfileManager::DoFinalInitForServices(Profile* profile,
   SupervisedUserServiceFactory::GetForProfile(profile)->Init();
 #endif
 
-  // Activate data reduction proxy. This creates a request context and makes a
-  // URL request to check if the data reduction proxy server is reachable.
-  DataReductionProxyChromeSettingsFactory::GetForBrowserContext(profile)->
-      MaybeActivateDataReductionProxy(true);
-
   // Ensure NavigationPredictorKeyedService is started.
   NavigationPredictorKeyedServiceFactory::GetForProfile(profile);
 
@@ -1556,12 +1543,14 @@ void ProfileManager::DoFinalInitForServices(Profile* profile,
   ash::AccountManagerPolicyControllerFactory::GetForBrowserContext(profile);
 #endif
 
+#if 0
   // Creates the LiteVideo Keyed Service and begins loading the
   // hint cache and user blocklist.
   auto* lite_video_keyed_service =
       LiteVideoKeyedServiceFactory::GetForProfile(profile);
   if (lite_video_keyed_service)
     lite_video_keyed_service->Initialize(profile->GetPath());
+#endif
 
   // TODO(crbug.com/1031477): Remove once getting this created with the browser
   // context does not change dependency initialization order to cause crashes.
@@ -1770,9 +1759,6 @@ void ProfileManager::EnsureActiveProfileExistsBeforeDeletion(
   // Load existing profile otherwise.
   if (fallback_profile_path.empty()) {
     fallback_profile_path = GenerateNextProfileDirectoryPath();
-    // A new profile about to be created.
-    ProfileMetrics::LogProfileAddNewUser(
-        ProfileMetrics::ADD_NEW_USER_LAST_DELETED);
   }
 
   // Create and/or load fallback profile.
@@ -1808,7 +1794,6 @@ void ProfileManager::OnLoadProfileForProfileDeletion(
     ProfileAttributesEntry* entry =
         storage.GetProfileAttributesWithPath(profile_dir);
     DCHECK(entry);
-    ProfileMetrics::LogProfileDelete(entry->IsAuthenticated());
     // Some platforms store passwords in keychains. They should be removed.
     scoped_refptr<password_manager::PasswordStore> password_store =
         PasswordStoreFactory::GetForProfile(profile,
