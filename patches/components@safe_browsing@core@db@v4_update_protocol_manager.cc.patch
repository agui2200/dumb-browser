diff --git a/components/safe_browsing/core/db/v4_update_protocol_manager.cc b/components/safe_browsing/core/db/v4_update_protocol_manager.cc
index ca37287f414c..fae9f8d935b4 100644
--- a/components/safe_browsing/core/db/v4_update_protocol_manager.cc
+++ b/components/safe_browsing/core/db/v4_update_protocol_manager.cc
@@ -76,19 +76,8 @@ static const int kV4TimerStartIntervalSecMax = 300;
 // Maximum time, in seconds, to wait for a response to an update request.
 static const int kV4TimerUpdateWaitSecMax = 15 * 60;  // 15 minutes
 
-ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue(
-    ExtendedReportingLevel reporting_level) {
-  switch (reporting_level) {
-    case SBER_LEVEL_OFF:
-      return ChromeClientInfo::OPT_OUT;
-    case SBER_LEVEL_LEGACY:
-      return ChromeClientInfo::EXTENDED;
-    case SBER_LEVEL_SCOUT:
-      return ChromeClientInfo::SCOUT;
-    default:
-      NOTREACHED() << "Unexpected reporting_level!";
-      return ChromeClientInfo::UNSPECIFIED;
-  }
+ChromeClientInfo::SafeBrowsingReportingPopulation GetReportingLevelProtoValue() {
+  return ChromeClientInfo::OPT_OUT;
 }
 
 // The default V4UpdateProtocolManagerFactory.
@@ -100,12 +89,10 @@ class V4UpdateProtocolManagerFactoryImpl
   std::unique_ptr<V4UpdateProtocolManager> CreateProtocolManager(
       scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
       const V4ProtocolConfig& config,
-      V4UpdateCallback update_callback,
-      ExtendedReportingLevelCallback extended_reporting_level_callback)
+      V4UpdateCallback update_callback)
       override {
     return base::WrapUnique(
-        new V4UpdateProtocolManager(url_loader_factory, config, update_callback,
-                                    extended_reporting_level_callback));
+        new V4UpdateProtocolManager(url_loader_factory, config, update_callback));
   }
 
  private:
@@ -121,14 +108,12 @@ V4UpdateProtocolManagerFactory* V4UpdateProtocolManager::factory_ = nullptr;
 std::unique_ptr<V4UpdateProtocolManager> V4UpdateProtocolManager::Create(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback) {
+    V4UpdateCallback update_callback) {
   if (!factory_) {
     factory_ = new V4UpdateProtocolManagerFactoryImpl();
   }
   return factory_->CreateProtocolManager(url_loader_factory, config,
-                                         update_callback,
-                                         extended_reporting_level_callback);
+                                         update_callback);
 }
 
 void V4UpdateProtocolManager::ResetUpdateErrors() {
@@ -139,8 +124,7 @@ void V4UpdateProtocolManager::ResetUpdateErrors() {
 V4UpdateProtocolManager::V4UpdateProtocolManager(
     scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory,
     const V4ProtocolConfig& config,
-    V4UpdateCallback update_callback,
-    ExtendedReportingLevelCallback extended_reporting_level_callback)
+    V4UpdateCallback update_callback)
     : update_error_count_(0),
       update_back_off_mult_(1),
       next_update_interval_(base::TimeDelta::FromSeconds(
@@ -148,8 +132,7 @@ V4UpdateProtocolManager::V4UpdateProtocolManager(
                         kV4TimerStartIntervalSecMax))),
       config_(config),
       url_loader_factory_(url_loader_factory),
-      update_callback_(update_callback),
-      extended_reporting_level_callback_(extended_reporting_level_callback) {
+      update_callback_(update_callback) {
   // Do not auto-schedule updates. Let the owner (V4LocalDatabaseManager) do it
   // when it is ready to process updates.
 }
@@ -244,11 +227,6 @@ std::string V4UpdateProtocolManager::GetBase64SerializedUpdateRequestProto() {
         RICE);
   }
 
-  if (!extended_reporting_level_callback_.is_null()) {
-    request.mutable_chrome_client_info()->set_reporting_population(
-        GetReportingLevelProtoValue(extended_reporting_level_callback_.Run()));
-  }
-
   V4ProtocolManagerUtil::SetClientInfoFromConfig(request.mutable_client(),
                                                  config_);
 
