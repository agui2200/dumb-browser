diff --git a/services/device/battery/battery_status_service.cc b/services/device/battery/battery_status_service.cc
index 67f6c9f7136e..9a1b30f41891 100644
--- a/services/device/battery/battery_status_service.cc
+++ b/services/device/battery/battery_status_service.cc
@@ -22,10 +22,7 @@ BatteryStatusService::BatteryStatusService()
       update_callback_(
           base::BindRepeating(&BatteryStatusService::NotifyConsumers,
                               base::Unretained(this))),
-      status_updated_(false),
       is_shutdown_(false) {
-  callback_list_.set_removal_callback(base::BindRepeating(
-      &BatteryStatusService::ConsumersChanged, base::Unretained(this)));
 }
 
 BatteryStatusService::~BatteryStatusService() = default;
@@ -40,58 +37,16 @@ BatteryStatusService::AddCallback(const BatteryUpdateCallback& callback) {
   DCHECK(main_thread_task_runner_->BelongsToCurrentThread());
   DCHECK(!is_shutdown_);
 
-  if (!battery_fetcher_)
-    battery_fetcher_ = BatteryStatusManager::Create(update_callback_);
-
-  if (callback_list_.empty()) {
-    bool success = battery_fetcher_->StartListeningBatteryChange();
-    // On failure pass the default values back.
-    if (!success)
-      callback.Run(mojom::BatteryStatus());
-  }
-
-  if (status_updated_) {
-    // Send recent status to the new callback if already available.
-    callback.Run(status_);
-  }
+  // Always pass the default values.
+  callback.Run(mojom::BatteryStatus());
 
   return callback_list_.Add(callback);
 }
 
-void BatteryStatusService::ConsumersChanged() {
-  if (is_shutdown_)
-    return;
-
-  if (callback_list_.empty()) {
-    battery_fetcher_->StopListeningBatteryChange();
-    status_updated_ = false;
-  }
-}
-
 void BatteryStatusService::NotifyConsumers(const mojom::BatteryStatus& status) {
-  DCHECK(!is_shutdown_);
-
-  main_thread_task_runner_->PostTask(
-      FROM_HERE,
-      base::BindOnce(&BatteryStatusService::NotifyConsumersOnMainThread,
-                     base::Unretained(this), status));
-}
-
-void BatteryStatusService::NotifyConsumersOnMainThread(
-    const mojom::BatteryStatus& status) {
-  DCHECK(main_thread_task_runner_->BelongsToCurrentThread());
-  if (callback_list_.empty())
-    return;
-
-  status_ = status;
-  status_updated_ = true;
-  callback_list_.Notify(status_);
 }
 
 void BatteryStatusService::Shutdown() {
-  if (!callback_list_.empty())
-    battery_fetcher_->StopListeningBatteryChange();
-  battery_fetcher_.reset();
   is_shutdown_ = true;
 }
 
@@ -102,9 +57,6 @@ BatteryStatusService::GetUpdateCallbackForTesting() const {
 
 void BatteryStatusService::SetBatteryManagerForTesting(
     std::unique_ptr<BatteryStatusManager> test_battery_manager) {
-  battery_fetcher_ = std::move(test_battery_manager);
-  status_ = mojom::BatteryStatus();
-  status_updated_ = false;
   is_shutdown_ = false;
   main_thread_task_runner_ = base::ThreadTaskRunnerHandle::Get();
 }
