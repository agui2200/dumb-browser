diff --git a/services/network/network_service.cc b/services/network/network_service.cc
index 143c7bd8fc938..312d1810a0389 100644
--- a/services/network/network_service.cc
+++ b/services/network/network_service.cc
@@ -27,6 +27,7 @@
 #include "build/chromeos_buildflags.h"
 #include "components/network_session_configurator/common/network_features.h"
 #include "components/os_crypt/os_crypt.h"
+#include "dumb/services/network/privacy_guard/url_purify_delegate.h"
 #include "mojo/public/cpp/bindings/scoped_message_error_crash_key.h"
 #include "mojo/public/cpp/system/functions.h"
 #include "net/base/features.h"
@@ -347,6 +348,8 @@ void NetworkService::Initialize(mojom::NetworkServiceParamsPtr params,
   sct_auditing_cache_ =
       std::make_unique<SCTAuditingCache>(kMaxSCTAuditingCacheEntries);
 #endif
+
+  url_purify_delegate_ = std::make_unique<dumb::URLPurifyDelegate>();
 }
 
 NetworkService::~NetworkService() {
@@ -377,6 +380,7 @@ void NetworkService::set_os_crypt_is_configured() {
 
 std::unique_ptr<NetworkService> NetworkService::Create(
     mojo::PendingReceiver<mojom::NetworkService> receiver) {
+  VLOG(1) << "NetworkService::Create";
   return std::make_unique<NetworkService>(nullptr, std::move(receiver));
 }
 
@@ -801,4 +805,10 @@ NetworkService* NetworkService::GetNetworkServiceForTesting() {
   return g_network_service;
 }
 
+void NetworkService::UpdateURLPurifyRules(
+    base::span<const uint8_t> purify_rules,
+    mojom::NetworkService::UpdateURLPurifyRulesCallback callback) {
+  url_purify_delegate_->OnNewRules(purify_rules, std::move(callback));
+}
+
 }  // namespace network
