diff --git a/net/cookies/canonical_cookie.cc b/net/cookies/canonical_cookie.cc
index 8af2c1b14b443..705a9e189dd21 100644
--- a/net/cookies/canonical_cookie.cc
+++ b/net/cookies/canonical_cookie.cc
@@ -58,6 +58,7 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
 #include "base/strings/stringprintf.h"
+#include "dumb/components/contextual_identity/context_id.h"
 #include "net/base/features.h"
 #include "net/base/url_util.h"
 #include "net/cookies/cookie_constants.h"
@@ -285,6 +286,7 @@ CanonicalCookie::CanonicalCookie(const std::string& name,
                                  CookieSameSite same_site,
                                  CookiePriority priority,
                                  bool same_party,
+                                 const std::string& context_id,
                                  CookieSourceScheme source_scheme,
                                  int source_port)
     : name_(name),
@@ -299,7 +301,8 @@ CanonicalCookie::CanonicalCookie(const std::string& name,
       same_site_(same_site),
       priority_(priority),
       same_party_(same_party),
-      source_scheme_(source_scheme) {
+      source_scheme_(source_scheme),
+      context_id_(context_id) {
   SetSourcePort(source_port);
 }
 
@@ -455,7 +458,9 @@ std::unique_ptr<CanonicalCookie> CanonicalCookie::Create(
       parsed_cookie.Name(), parsed_cookie.Value(), cookie_domain, cookie_path,
       creation_time, cookie_expires, creation_time, parsed_cookie.IsSecure(),
       parsed_cookie.IsHttpOnly(), samesite, parsed_cookie.Priority(),
-      parsed_cookie.IsSameParty(), source_scheme, source_port));
+      parsed_cookie.IsSameParty(),
+      contextual_identity::kDefaultContextId,
+      source_scheme, source_port));
 
   // TODO(chlily): Log metrics.
   if (!cc->IsCanonical()) {
@@ -485,7 +490,8 @@ std::unique_ptr<CanonicalCookie> CanonicalCookie::CreateSanitizedCookie(
     bool http_only,
     CookieSameSite same_site,
     CookiePriority priority,
-    bool same_party) {
+    bool same_party,
+    const std::string& context_id) {
   // Validate consistency of passed arguments.
   if (ParsedCookie::ParseTokenString(name) != name ||
       ParsedCookie::ParseValueString(value) != value ||
@@ -542,6 +548,7 @@ std::unique_ptr<CanonicalCookie> CanonicalCookie::CreateSanitizedCookie(
   std::unique_ptr<CanonicalCookie> cc = base::WrapUnique(new CanonicalCookie(
       name, value, cookie_domain, cookie_path, creation_time, expiration_time,
       last_access_time, secure, http_only, same_site, priority, same_party,
+      context_id,
       source_scheme, source_port));
   DCHECK(cc->IsCanonical());
 
@@ -562,11 +569,14 @@ std::unique_ptr<CanonicalCookie> CanonicalCookie::FromStorage(
     CookieSameSite same_site,
     CookiePriority priority,
     bool same_party,
+    const std::string& context_id,
     CookieSourceScheme source_scheme,
     int source_port) {
   std::unique_ptr<CanonicalCookie> cc = base::WrapUnique(new CanonicalCookie(
       name, value, domain, path, creation, expiration, last_access, secure,
-      httponly, same_site, priority, same_party, source_scheme, source_port));
+      httponly, same_site, priority, same_party,
+      context_id,
+      source_scheme, source_port));
   if (!cc->IsCanonical())
     return nullptr;
   return cc;
@@ -586,11 +596,13 @@ std::unique_ptr<CanonicalCookie> CanonicalCookie::CreateUnsafeCookieForTesting(
     CookieSameSite same_site,
     CookiePriority priority,
     bool same_party,
+    const std::string& context_id,
     CookieSourceScheme source_scheme,
     int source_port) {
   return base::WrapUnique(new CanonicalCookie(
       name, value, domain, path, creation, expiration, last_access, secure,
-      httponly, same_site, priority, same_party, source_scheme, source_port));
+      httponly, same_site, priority, same_party, context_id,
+      source_scheme, source_port));
 }
 
 std::string CanonicalCookie::DomainWithoutDot() const {
