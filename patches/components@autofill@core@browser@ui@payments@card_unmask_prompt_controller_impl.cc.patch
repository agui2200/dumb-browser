diff --git a/components/autofill/core/browser/ui/payments/card_unmask_prompt_controller_impl.cc b/components/autofill/core/browser/ui/payments/card_unmask_prompt_controller_impl.cc
index 5c0830950ce8..b49db96c26ac 100644
--- a/components/autofill/core/browser/ui/payments/card_unmask_prompt_controller_impl.cc
+++ b/components/autofill/core/browser/ui/payments/card_unmask_prompt_controller_impl.cc
@@ -13,7 +13,6 @@
 #include "base/time/time.h"
 #include "build/build_config.h"
 #include "components/autofill/core/browser/autofill_experiments.h"
-#include "components/autofill/core/browser/autofill_metrics.h"
 #include "components/autofill/core/browser/ui/payments/card_unmask_prompt_view.h"
 #include "components/autofill/core/browser/validation.h"
 #include "components/autofill/core/common/autofill_clock.h"
@@ -54,8 +53,6 @@ void CardUnmaskPromptControllerImpl::ShowPrompt(
   unmasking_result_ = AutofillClient::NONE;
   unmasking_number_of_attempts_ = 0;
   unmasking_initial_should_store_pan_ = GetStoreLocallyStartState();
-  AutofillMetrics::LogUnmaskPromptEvent(AutofillMetrics::UNMASK_PROMPT_SHOWN,
-                                        card_.HasNonEmptyValidNickname());
 }
 
 void CardUnmaskPromptControllerImpl::OnVerificationResult(
@@ -92,15 +89,11 @@ void CardUnmaskPromptControllerImpl::OnVerificationResult(
   }
 
   unmasking_result_ = result;
-  AutofillMetrics::LogRealPanResult(result);
-  AutofillMetrics::LogUnmaskingDuration(
-      AutofillClock::Now() - verify_timestamp_, result);
   card_unmask_view_->GotVerificationResult(error_message, AllowsRetry(result));
 }
 
 void CardUnmaskPromptControllerImpl::OnUnmaskDialogClosed() {
   card_unmask_view_ = nullptr;
-  LogOnCloseEvents();
   unmasking_result_ = AutofillClient::NONE;
   if (delegate_)
     delegate_->OnUnmaskPromptClosed();
@@ -287,53 +280,4 @@ bool CardUnmaskPromptControllerImpl::AllowsRetry(
   return true;
 }
 
-void CardUnmaskPromptControllerImpl::LogOnCloseEvents() {
-  AutofillMetrics::UnmaskPromptEvent close_reason_event = GetCloseReasonEvent();
-  AutofillMetrics::LogUnmaskPromptEvent(close_reason_event,
-                                        card_.HasNonEmptyValidNickname());
-  AutofillMetrics::LogUnmaskPromptEventDuration(
-      AutofillClock::Now() - shown_timestamp_, close_reason_event,
-      card_.HasNonEmptyValidNickname());
-
-  if (close_reason_event == AutofillMetrics::UNMASK_PROMPT_CLOSED_NO_ATTEMPTS)
-    return;
-
-  if (close_reason_event ==
-      AutofillMetrics::UNMASK_PROMPT_CLOSED_ABANDON_UNMASKING) {
-    AutofillMetrics::LogTimeBeforeAbandonUnmasking(
-        AutofillClock::Now() - verify_timestamp_,
-        card_.HasNonEmptyValidNickname());
-  }
-
-  bool final_should_store_pan = pending_details_.should_store_pan;
-  if (unmasking_result_ == AutofillClient::SUCCESS && final_should_store_pan) {
-    AutofillMetrics::LogUnmaskPromptEvent(
-        AutofillMetrics::UNMASK_PROMPT_SAVED_CARD_LOCALLY,
-        card_.HasNonEmptyValidNickname());
-  }
-}
-
-AutofillMetrics::UnmaskPromptEvent
-CardUnmaskPromptControllerImpl::GetCloseReasonEvent() {
-  if (unmasking_number_of_attempts_ == 0)
-    return AutofillMetrics::UNMASK_PROMPT_CLOSED_NO_ATTEMPTS;
-
-  // If NONE and we have a pending request, we have a pending GetRealPan
-  // request.
-  if (unmasking_result_ == AutofillClient::NONE)
-    return AutofillMetrics::UNMASK_PROMPT_CLOSED_ABANDON_UNMASKING;
-
-  if (unmasking_result_ == AutofillClient::SUCCESS) {
-    return unmasking_number_of_attempts_ == 1
-               ? AutofillMetrics::UNMASK_PROMPT_UNMASKED_CARD_FIRST_ATTEMPT
-               : AutofillMetrics::
-                     UNMASK_PROMPT_UNMASKED_CARD_AFTER_FAILED_ATTEMPTS;
-  }
-  return AllowsRetry(unmasking_result_)
-             ? AutofillMetrics::
-                   UNMASK_PROMPT_CLOSED_FAILED_TO_UNMASK_RETRIABLE_FAILURE
-             : AutofillMetrics::
-                   UNMASK_PROMPT_CLOSED_FAILED_TO_UNMASK_NON_RETRIABLE_FAILURE;
-}
-
 }  // namespace autofill
