diff --git a/chrome/browser/mac/exception_processor.mm b/chrome/browser/mac/exception_processor.mm
index da7bfae05e8b..f91b1491cb13 100644
--- a/chrome/browser/mac/exception_processor.mm
+++ b/chrome/browser/mac/exception_processor.mm
@@ -18,7 +18,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/stl_util.h"
 #include "base/strings/sys_string_conversions.h"
-#include "components/crash/core/common/crash_key.h"
 
 namespace chrome {
 
@@ -92,9 +91,6 @@ static NOINLINE void TERMINATING_FROM_UNCAUGHT_NSEXCEPTION(id exception) {
       stringWithFormat:@"%@: %@", [exception name], [exception reason]];
   std::string exception_message = base::SysNSStringToUTF8(exception_message_ns);
 
-  static crash_reporter::CrashKeyString<256> crash_key("nsexception");
-  crash_key.Set(exception_message);
-
   LOG(FATAL) << "Terminating from Objective-C exception: " << exception_message;
 }
 
@@ -104,26 +100,6 @@ static id ObjcExceptionPreprocessor(id exception) {
   // Record UMA and crash keys about the exception.
   RecordExceptionWithUma(exception);
 
-  static crash_reporter::CrashKeyString<256> firstexception("firstexception");
-  static crash_reporter::CrashKeyString<256> lastexception("lastexception");
-
-  static crash_reporter::CrashKeyString<1024> firstexception_bt(
-      "firstexception_bt");
-  static crash_reporter::CrashKeyString<1024> lastexception_bt(
-      "lastexception_bt");
-
-  auto* key = seen_first_exception ? &lastexception : &firstexception;
-  auto* bt_key = seen_first_exception ? &lastexception_bt : &firstexception_bt;
-
-  NSString* value = [NSString stringWithFormat:@"%@ reason %@",
-      [exception name], [exception reason]];
-  key->Set(base::SysNSStringToUTF8(value));
-
-  // This exception preprocessor runs prior to the one in libobjc, which sets
-  // the -[NSException callStackReturnAddresses].
-  crash_reporter::SetCrashKeyStringToStackTrace(bt_key,
-                                                base::debug::StackTrace());
-
   seen_first_exception = true;
 
   //////////////////////////////////////////////////////////////////////////////
