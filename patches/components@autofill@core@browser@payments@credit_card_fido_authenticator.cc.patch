diff --git a/components/autofill/core/browser/payments/credit_card_fido_authenticator.cc b/components/autofill/core/browser/payments/credit_card_fido_authenticator.cc
index d7b17fdd33df..82f253052bac 100644
--- a/components/autofill/core/browser/payments/credit_card_fido_authenticator.cc
+++ b/components/autofill/core/browser/payments/credit_card_fido_authenticator.cc
@@ -14,7 +14,6 @@
 #include "base/strings/string_util.h"
 #include "build/build_config.h"
 #include "components/autofill/core/browser/autofill_client.h"
-#include "components/autofill/core/browser/autofill_metrics.h"
 #include "components/autofill/core/browser/data_model/credit_card.h"
 #include "components/autofill/core/browser/payments/fido_authentication_strike_database.h"
 #include "components/autofill/core/browser/payments/payments_client.h"
@@ -214,9 +213,6 @@ void CreditCardFIDOAuthenticator::OnWebauthnOfferDialogRequested(
   // Cancel any previous pending WebAuthn requests.
   authenticator()->Cancel();
 
-  AutofillMetrics::LogWebauthnOptInPromoShown(
-      /*is_checkout_flow=*/!card_authorization_token_.empty());
-
   // At this point, it must be the case that the user is opted-out, otherwise
   // there would be no need to register the user. However, if the user is
   // opting-in through the settings page, the user preference is set to opted-in
@@ -234,15 +230,6 @@ void CreditCardFIDOAuthenticator::OnWebauthnOfferDialogUserResponse(
     // being fetched.
     Register(card_authorization_token_);
   } else {
-    // If user declined, log user decision. User may have initially accepted the
-    // dialog, but then chose to cancel while the challenge was being fetched.
-    AutofillMetrics::LogWebauthnOptInPromoUserDecision(
-        /*is_checkout_flow=*/!card_authorization_token_.empty(),
-        current_flow_ == OPT_IN_FETCH_CHALLENGE_FLOW
-            ? AutofillMetrics::WebauthnOptInPromoUserDecisionMetric::
-                  kDeclinedAfterAccepting
-            : AutofillMetrics::WebauthnOptInPromoUserDecisionMetric::
-                  kDeclinedImmediately);
     payments_client_->CancelRequest();
     card_authorization_token_ = std::string();
     current_flow_ = NONE_FLOW;
@@ -273,13 +260,7 @@ void CreditCardFIDOAuthenticator::GetAssertion(
   // closed, then the offer was declined during the fetching challenge process,
   // and thus returned early.
   if (current_flow_ == OPT_IN_WITH_CHALLENGE_FLOW) {
-    if (autofill_client_->CloseWebauthnDialog()) {
-      // Now that the dialog has closed and will proceed to a WebAuthn prompt,
-      // the user must have accepted the dialog without cancelling.
-      AutofillMetrics::LogWebauthnOptInPromoUserDecision(
-          /*is_checkout_flow=*/!card_authorization_token_.empty(),
-          AutofillMetrics::WebauthnOptInPromoUserDecisionMetric::kAccepted);
-    } else {
+    if (!autofill_client_->CloseWebauthnDialog()) {
       current_flow_ = NONE_FLOW;
       return;
     }
@@ -298,13 +279,7 @@ void CreditCardFIDOAuthenticator::MakeCredential(
   // level authentication dialog. If dialog is already closed, then the offer
   // was declined during the fetching challenge process, and thus returned
   // early.
-  if (autofill_client_->CloseWebauthnDialog()) {
-    // Now that the dialog has closed and will proceed to a WebAuthn prompt,
-    // the user must have accepted the dialog without cancelling.
-    AutofillMetrics::LogWebauthnOptInPromoUserDecision(
-        /*is_checkout_flow=*/!card_authorization_token_.empty(),
-        AutofillMetrics::WebauthnOptInPromoUserDecisionMetric::kAccepted);
-  } else {
+  if (!autofill_client_->CloseWebauthnDialog()) {
     current_flow_ = NONE_FLOW;
     return;
   }
@@ -348,41 +323,23 @@ void CreditCardFIDOAuthenticator::OptChange(
   // If |authenticator_response| is not set, that means the user was fetching a
   // challenge, in which case |card_authorization_token_| will be required for
   // the subsequent OptChange call.
-  AutofillMetrics::WebauthnOptInParameters opt_change_metric;
-  bool is_checkout_flow = !card_authorization_token_.empty();
   if (authenticator_response.is_dict()) {
     request_details.fido_authenticator_response =
         std::move(authenticator_response);
-    opt_change_metric =
-        request_details.fido_authenticator_response->FindKey(
-            "fido_assertion_info")
-            ? AutofillMetrics::WebauthnOptInParameters::kWithRequestChallenge
-            : AutofillMetrics::WebauthnOptInParameters::kWithCreationChallenge;
     if (!card_authorization_token_.empty()) {
       request_details.card_authorization_token = card_authorization_token_;
       card_authorization_token_ = std::string();
     }
-  } else {
-    opt_change_metric =
-        AutofillMetrics::WebauthnOptInParameters::kFetchingChallenge;
   }
   payments_client_->OptChange(
       request_details,
       base::BindOnce(&CreditCardFIDOAuthenticator::OnDidGetOptChangeResult,
                      weak_ptr_factory_.GetWeakPtr()));
-
-  // Logging call if user was attempting to change their opt-in state.
-  if (current_flow_ != FOLLOWUP_AFTER_CVC_AUTH_FLOW) {
-    bool request_to_opt_in = (current_flow_ != OPT_OUT_FLOW);
-    AutofillMetrics::LogWebauthnOptChangeCalled(
-        request_to_opt_in, is_checkout_flow, opt_change_metric);
-  }
 }
 
 void CreditCardFIDOAuthenticator::OnDidGetAssertion(
     AuthenticatorStatus status,
     GetAssertionAuthenticatorResponsePtr assertion_response) {
-  LogWebauthnResult(status);
 
   // End the flow if there was an authentication error.
   if (status != AuthenticatorStatus::SUCCESS) {
@@ -446,7 +403,6 @@ void CreditCardFIDOAuthenticator::OnDidGetAssertion(
 void CreditCardFIDOAuthenticator::OnDidMakeCredential(
     AuthenticatorStatus status,
     MakeCredentialAuthenticatorResponsePtr attestation_response) {
-  LogWebauthnResult(status);
 
   // End the flow if there was an authentication error.
   if (status != AuthenticatorStatus::SUCCESS) {
@@ -735,42 +691,6 @@ bool CreditCardFIDOAuthenticator::IsValidCreationOptions(
          creation_options.FindStringKey("challenge");
 }
 
-void CreditCardFIDOAuthenticator::LogWebauthnResult(
-    AuthenticatorStatus status) {
-  AutofillMetrics::WebauthnFlowEvent event;
-  switch (current_flow_) {
-    case AUTHENTICATION_FLOW:
-      event = AutofillMetrics::WebauthnFlowEvent::kImmediateAuthentication;
-      break;
-    case FOLLOWUP_AFTER_CVC_AUTH_FLOW:
-      event = AutofillMetrics::WebauthnFlowEvent::kAuthenticationAfterCvc;
-      break;
-    case OPT_IN_WITH_CHALLENGE_FLOW:
-      event = card_authorization_token_.empty()
-                  ? AutofillMetrics::WebauthnFlowEvent::kSettingsPageOptIn
-                  : AutofillMetrics::WebauthnFlowEvent::kCheckoutOptIn;
-      break;
-    default:
-      NOTREACHED();
-      return;
-  }
-
-  // TODO(crbug.com/949269): Add metrics for revoked pending WebAuthn requests.
-  AutofillMetrics::WebauthnResultMetric metric;
-  switch (status) {
-    case AuthenticatorStatus::SUCCESS:
-      metric = AutofillMetrics::WebauthnResultMetric::kSuccess;
-      break;
-    case AuthenticatorStatus::NOT_ALLOWED_ERROR:
-      metric = AutofillMetrics::WebauthnResultMetric::kNotAllowedError;
-      break;
-    default:
-      metric = AutofillMetrics::WebauthnResultMetric::kOtherError;
-      break;
-  }
-  AutofillMetrics::LogWebauthnResult(event, metric);
-}
-
 void CreditCardFIDOAuthenticator::UpdateUserPref() {
   ::autofill::prefs::SetCreditCardFIDOAuthEnabled(autofill_client_->GetPrefs(),
                                                   user_is_opted_in_);
