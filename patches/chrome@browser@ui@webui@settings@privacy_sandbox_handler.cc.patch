diff --git a/chrome/browser/ui/webui/settings/privacy_sandbox_handler.cc b/chrome/browser/ui/webui/settings/privacy_sandbox_handler.cc
index 266c7aa150ded..445ad5b71aaf1 100644
--- a/chrome/browser/ui/webui/settings/privacy_sandbox_handler.cc
+++ b/chrome/browser/ui/webui/settings/privacy_sandbox_handler.cc
@@ -4,13 +4,13 @@
 
 #include "chrome/browser/ui/webui/settings/privacy_sandbox_handler.h"
 
-#include "chrome/browser/federated_learning/floc_id_provider_factory.h"
 #include "chrome/browser/privacy_sandbox/privacy_sandbox_settings.h"
 #include "chrome/browser/privacy_sandbox/privacy_sandbox_settings_factory.h"
 #include "chrome/browser/profiles/profile.h"
 
 namespace settings {
 
+#if 0
 namespace {
 
 // Keys of the dictionary returned by GetFlocIdInformation.
@@ -42,6 +42,7 @@ base::Value GetFlocIdInformation(Profile* profile) {
 }
 
 }  // namespace
+#endif
 
 void PrivacySandboxHandler::RegisterMessages() {
   web_ui()->RegisterMessageCallback(
@@ -59,9 +60,6 @@ void PrivacySandboxHandler::HandleGetFlocId(const base::ListValue* args) {
   CHECK_EQ(1U, args->GetSize());
   const base::Value* callback_id;
   CHECK(args->Get(0, &callback_id));
-
-  ResolveJavascriptCallback(*callback_id,
-                            GetFlocIdInformation(Profile::FromWebUI(web_ui())));
 }
 
 void PrivacySandboxHandler::HandleResetFlocId(const base::ListValue* args) {
@@ -74,6 +72,7 @@ void PrivacySandboxHandler::HandleResetFlocId(const base::ListValue* args) {
 
   privacy_sandbox_settings->ResetFlocId();
 
+#if 0
   // The identifier will have been immediately invalidated in response to
   // the clearing action, so synchronously retrieving the FLoC ID will retrieve
   // the appropriate invalid ID string.
@@ -81,6 +80,7 @@ void PrivacySandboxHandler::HandleResetFlocId(const base::ListValue* args) {
   // from the FLoC provider, rather than inferring behavior.
   FireWebUIListener("floc-id-changed",
                     GetFlocIdInformation(Profile::FromWebUI(web_ui())));
+#endif
 }
 
 }  // namespace settings
