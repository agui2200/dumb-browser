diff --git a/chrome/browser/chrome_content_browser_client.h b/chrome/browser/chrome_content_browser_client.h
index dea633771818..0b087f29021f 100644
--- a/chrome/browser/chrome_content_browser_client.h
+++ b/chrome/browser/chrome_content_browser_client.h
@@ -28,7 +28,6 @@
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "ppapi/buildflags/buildflags.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "services/network/public/mojom/network_context.mojom-forward.h"
 #include "third_party/blink/public/common/loader/previews_state.h"
 
@@ -65,12 +64,6 @@ class PreviewsDecider;
 class PreviewsUserData;
 }  // namespace previews
 
-namespace safe_browsing {
-class RealTimeUrlLookupServiceBase;
-class SafeBrowsingService;
-class UrlCheckerDelegate;
-}  // namespace safe_browsing
-
 namespace sandbox {
 class SeatbeltExecClient;
 }  // namespace sandbox
@@ -465,7 +458,6 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
       int frame_tree_node_id) override;
   void RegisterNonNetworkNavigationURLLoaderFactories(
       int frame_tree_node_id,
-      ukm::SourceIdObj ukm_source_id,
       NonNetworkURLLoaderFactoryMap* factories) override;
   void RegisterNonNetworkWorkerMainResourceURLLoaderFactories(
       content::BrowserContext* browser_context,
@@ -484,7 +476,6 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
       URLLoaderFactoryType type,
       const url::Origin& request_initiator,
       base::Optional<int64_t> navigation_id,
-      ukm::SourceIdObj ukm_source_id,
       mojo::PendingReceiver<network::mojom::URLLoaderFactory>* factory_receiver,
       mojo::PendingRemote<network::mojom::TrustedURLLoaderHeaderClient>*
           header_client,
@@ -698,7 +689,6 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
   bool ShouldAllowInsecurePrivateNetworkRequests(
       content::BrowserContext* browser_context,
       const GURL& url) override;
-  ukm::UkmService* GetUkmService() override;
 
   void OnKeepaliveRequestStarted() override;
   void OnKeepaliveRequestFinished() override;
@@ -754,26 +744,6 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
       bool allow);
 #endif
 
-  // Returns the existing UrlCheckerDelegate object if it is already created.
-  // Otherwise, creates a new one and returns it. It returns nullptr if
-  // |safe_browsing_enabled_for_profile| is false, because it should bypass safe
-  // browsing check when safe browsing is disabled. Set
-  // |should_check_on_sb_disabled| to true if you still want to perform safe
-  // browsing check when safe browsing is disabled(e.g. for enterprise real time
-  // URL check).
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-  GetSafeBrowsingUrlCheckerDelegate(bool safe_browsing_enabled_for_profile,
-                                    bool should_check_on_sb_disabled);
-
-  // Returns a RealTimeUrlLookupServiceBase object used for real time URL check.
-  // Returns an enterprise version if |is_enterprise_lookup_enabled| is true.
-  // Returns a consumer version if |is_enterprise_lookup_enabled| is false and
-  // |is_consumer_lookup_enabled| is true. Returns nullptr if both are false.
-  safe_browsing::RealTimeUrlLookupServiceBase* GetUrlLookupService(
-      content::BrowserContext* browser_context,
-      bool is_enterprise_lookup_enabled,
-      bool is_consumer_lookup_enabled);
-
   void OnKeepaliveTimerFired(
       std::unique_ptr<ScopedKeepAlive> keep_alive_handle);
 
@@ -781,10 +751,6 @@ class ChromeContentBrowserClient : public content::ContentBrowserClient {
   // Parts are deleted in the reverse order they are added.
   std::vector<ChromeContentBrowserClientParts*> extra_parts_;
 
-  scoped_refptr<safe_browsing::SafeBrowsingService> safe_browsing_service_;
-  scoped_refptr<safe_browsing::UrlCheckerDelegate>
-      safe_browsing_url_checker_delegate_;
-
   StartupData startup_data_;
 
 #if !defined(OS_ANDROID)
