diff --git a/chrome/browser/ui/webui/reset_password/reset_password_ui.cc b/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
index 1f98e4ab4416..3644c458644e 100644
--- a/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
+++ b/chrome/browser/ui/webui/reset_password/reset_password_ui.cc
@@ -14,10 +14,6 @@
 #include "chrome/browser/ui/webui/reset_password/reset_password.mojom.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/browser_resources.h"
-#include "components/safe_browsing/content/password_protection/password_protection_service.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
-#include "components/safe_browsing/core/password_protection/metrics_util.h"
-#include "components/safe_browsing/core/proto/csd.pb.h"
 #include "components/strings/grit/components_strings.h"
 #include "components/url_formatter/url_formatter.h"
 #include "components/user_prefs/user_prefs.h"
@@ -28,9 +24,6 @@
 #include "mojo/public/cpp/bindings/receiver.h"
 #include "ui/base/l10n/l10n_util.h"
 
-using safe_browsing::LoginReputationClientResponse;
-using safe_browsing::RequestOutcome;
-
 namespace {
 
 constexpr char kStringTypeUMAName[] = "PasswordProtection.InterstitialString";
@@ -58,24 +51,10 @@ class ResetPasswordHandlerImpl : public mojom::ResetPasswordHandler {
   ~ResetPasswordHandlerImpl() override {}
 
   // mojom::ResetPasswordHandler overrides:
-  void HandlePasswordReset() override {
-    Profile* profile =
-        Profile::FromBrowserContext(web_contents_->GetBrowserContext());
-    safe_browsing::ChromePasswordProtectionService* service = safe_browsing::
-        ChromePasswordProtectionService::GetPasswordProtectionService(profile);
-    if (service) {
-      service->OnUserAction(
-          web_contents_,
-          service->reused_password_account_type_for_last_shown_warning(),
-          RequestOutcome::UNKNOWN,
-          LoginReputationClientResponse::VERDICT_TYPE_UNSPECIFIED,
-          /*verdict_token=*/"", safe_browsing::WarningUIType::INTERSTITIAL,
-          safe_browsing::WarningAction::CHANGE_PASSWORD);
-    }
-  }
+  void HandlePasswordReset() override {}
 
  private:
-  content::WebContents* web_contents_;
+  ALLOW_UNUSED_TYPE content::WebContents* web_contents_;
   mojo::Receiver<mojom::ResetPasswordHandler> receiver_;
 
   DISALLOW_COPY_AND_ASSIGN(ResetPasswordHandlerImpl);
@@ -138,10 +117,7 @@ void ResetPasswordUI::BindInterface(
 }
 
 base::DictionaryValue ResetPasswordUI::PopulateStrings() const {
-  auto* service = safe_browsing::ChromePasswordProtectionService::
-      GetPasswordProtectionService(Profile::FromWebUI(web_ui()));
-  std::string org_name = service->GetOrganizationName(
-      service->reused_password_account_type_for_last_shown_warning());
+  std::string org_name = "";
   bool known_password_type =
       password_type_ != PasswordType::PASSWORD_TYPE_UNKNOWN;
 
@@ -149,7 +125,7 @@ base::DictionaryValue ResetPasswordUI::PopulateStrings() const {
                               ? IDS_RESET_PASSWORD_WARNING_HEADING
                               : IDS_RESET_PASSWORD_HEADING;
   base::string16 explanation_paragraph_string;
-  if (org_name.empty()) {
+
     explanation_paragraph_string = l10n_util::GetStringUTF16(
         known_password_type ? IDS_RESET_PASSWORD_WARNING_EXPLANATION_PARAGRAPH
                             : IDS_RESET_PASSWORD_EXPLANATION_PARAGRAPH);
@@ -157,18 +133,7 @@ base::DictionaryValue ResetPasswordUI::PopulateStrings() const {
                               known_password_type
                                   ? StringType::WARNING_NO_ORG_NAME
                                   : StringType::GENERIC_NO_ORG_NAME);
-  } else {
-    base::string16 formatted_org_name = GetFormattedHostName(org_name);
-    explanation_paragraph_string = l10n_util::GetStringFUTF16(
-        known_password_type
-            ? IDS_RESET_PASSWORD_WARNING_EXPLANATION_PARAGRAPH_WITH_ORG_NAME
-            : IDS_RESET_PASSWORD_EXPLANATION_PARAGRAPH_WITH_ORG_NAME,
-        formatted_org_name);
-    UMA_HISTOGRAM_ENUMERATION(kStringTypeUMAName,
-                              known_password_type
-                                  ? StringType::WARNING_WITH_ORG_NAME
-                                  : StringType::GENERIC_WITH_ORG_NAME);
-  }
+
 
   base::DictionaryValue load_time_data;
   load_time_data.SetString("title",
