diff --git a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
index aa17d476ab01c..2f7fa73cdaddf 100644
--- a/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
+++ b/third_party/blink/renderer/modules/canvas/canvas2d/base_rendering_context_2d.cc
@@ -24,6 +24,7 @@
 #include "third_party/blink/renderer/platform/geometry/float_quad.h"
 #include "third_party/blink/renderer/platform/graphics/bitmap_image.h"
 #include "third_party/blink/renderer/platform/graphics/skia/skia_utils.h"
+#include "third_party/blink/renderer/platform/graphics/static_bitmap_image.h"
 #include "third_party/blink/renderer/platform/graphics/stroke_data.h"
 #include "third_party/blink/renderer/platform/heap/heap.h"
 
@@ -203,6 +204,7 @@ static inline void ConvertCanvasStyleToUnionType(
 }
 #endif  // defined(USE_BLINK_V8_BINDING_NEW_IDL_UNION)
 
+#if 0
 #if defined(USE_BLINK_V8_BINDING_NEW_IDL_UNION)
 void BaseRenderingContext2D::IdentifiabilityMaybeUpdateForStyleUnion(
     const V8UnionCSSColorValueOrCanvasGradientOrCanvasPatternOrString* style) {
@@ -242,6 +244,7 @@ void BaseRenderingContext2D::IdentifiabilityMaybeUpdateForStyleUnion(
   }
 }
 #endif  // defined(USE_BLINK_V8_BINDING_NEW_IDL_UNION)
+#endif
 
 RespectImageOrientationEnum
 BaseRenderingContext2D::RespectImageOrientationInternal(
@@ -263,8 +266,10 @@ void BaseRenderingContext2D::setStrokeStyle(
     const V8UnionCSSColorValueOrCanvasGradientOrCanvasPatternOrString* style) {
   DCHECK(style);
 
+#if 0
   identifiability_study_helper_.MaybeUpdateBuilder(CanvasOps::kSetStrokeStyle);
   IdentifiabilityMaybeUpdateForStyleUnion(style);
+#endif
 
   String color_string;
   CanvasStyle* canvas_style = nullptr;
@@ -322,8 +327,6 @@ void BaseRenderingContext2D::strokeStyle(
 void BaseRenderingContext2D::setStrokeStyle(
     const StringOrCanvasGradientOrCanvasPatternOrCSSColorValue& style) {
   DCHECK(!style.IsNull());
-  identifiability_study_helper_.MaybeUpdateBuilder(CanvasOps::kSetStrokeStyle);
-  IdentifiabilityMaybeUpdateForStyleUnion(style);
 
   String color_string;
   CanvasStyle* canvas_style = nullptr;
@@ -378,8 +381,10 @@ void BaseRenderingContext2D::setFillStyle(
   DCHECK(style);
 
   ValidateStateStack();
+#if 0
   identifiability_study_helper_.MaybeUpdateBuilder(CanvasOps::kSetFillStyle);
   IdentifiabilityMaybeUpdateForStyleUnion(style);
+#endif
 
   String color_string;
   CanvasStyle* canvas_style = nullptr;
@@ -438,8 +443,6 @@ void BaseRenderingContext2D::setFillStyle(
     const StringOrCanvasGradientOrCanvasPatternOrCSSColorValue& style) {
   DCHECK(!style.IsNull());
   ValidateStateStack();
-  identifiability_study_helper_.MaybeUpdateBuilder(CanvasOps::kSetFillStyle);
-  IdentifiabilityMaybeUpdateForStyleUnion(style);
 
   String color_string;
   CanvasStyle* canvas_style = nullptr;
@@ -2180,6 +2183,14 @@ ImageData* BaseRenderingContext2D::getImageDataInternal(
           snapshot->PaintImageForCurrentFrame().GetSkImageInfo().bounds();
       DCHECK(!bounds.intersect(SkIRect::MakeXYWH(sx, sy, sw, sh)));
     }
+    // if (read_pixels_successful &&
+    //     RuntimeEnabledFeatures::FingerprintingCanvasImageDataNoiseEnabled()) {
+    //   base::span<uint8_t> dst =
+    //       base::span<uint8_t>(reinterpret_cast<uint8_t*>(contents.Data()),
+    //           contents.DataLength());
+    //   StaticBitmapImage::ShuffleSubchannelColorData(dst.data(),
+    //       image_info, sx, sy);
+    // }
   }
 
   if (!IsPaint2D()) {
@@ -2485,8 +2496,6 @@ String BaseRenderingContext2D::textAlign() const {
 }
 
 void BaseRenderingContext2D::setTextAlign(const String& s) {
-  identifiability_study_helper_.MaybeUpdateBuilder(
-      CanvasOps::kSetTextAlign, IdentifiabilityBenignStringToken(s));
   TextAlign align;
   if (!ParseTextAlign(s, align))
     return;
@@ -2500,8 +2509,6 @@ String BaseRenderingContext2D::textBaseline() const {
 }
 
 void BaseRenderingContext2D::setTextBaseline(const String& s) {
-  identifiability_study_helper_.MaybeUpdateBuilder(
-      CanvasOps::kSetTextBaseline, IdentifiabilityBenignStringToken(s));
   TextBaseline baseline;
   if (!ParseTextBaseline(s, baseline))
     return;
