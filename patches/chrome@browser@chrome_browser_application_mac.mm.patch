diff --git a/chrome/browser/chrome_browser_application_mac.mm b/chrome/browser/chrome_browser_application_mac.mm
index 07d9bc3d9fa4..040bf4a095fa 100644
--- a/chrome/browser/chrome_browser_application_mac.mm
+++ b/chrome/browser/chrome_browser_application_mac.mm
@@ -15,8 +15,6 @@
 #import "chrome/browser/mac/exception_processor.h"
 #include "chrome/browser/ui/cocoa/l10n_util.h"
 #include "chrome/common/chrome_switches.h"
-#include "components/crash/core/common/crash_key.h"
-#import "components/crash/core/common/objc_zombie.h"
 #include "content/public/browser/browser_accessibility_state.h"
 #include "content/public/browser/native_event_processor_mac.h"
 #include "content/public/browser/native_event_processor_observer_mac.h"
@@ -43,72 +41,6 @@ void CancelTerminate() {
 
 }  // namespace chrome_browser_application_mac
 
-namespace {
-
-// Calling -[NSEvent description] is rather slow to build up the event
-// description. The description is stored in a crash key to aid debugging, so
-// this helper function constructs a shorter, but still useful, description.
-// See <https://crbug.com/770405>.
-std::string DescriptionForNSEvent(NSEvent* event) {
-  std::string desc = base::StringPrintf(
-      "NSEvent type=%ld modifierFlags=0x%lx locationInWindow=(%g,%g)",
-      event.type, event.modifierFlags, event.locationInWindow.x,
-      event.locationInWindow.y);
-  switch (event.type) {
-    case NSEventTypeKeyDown:
-    case NSEventTypeKeyUp: {
-      // Some NSEvents return a string with NUL in event.characters, see
-      // <https://crbug.com/826908>. To make matters worse, in rare cases,
-      // NSEvent.characters or NSEvent.charactersIgnoringModifiers can throw an
-      // NSException complaining that "TSMProcessRawKeyCode failed". Since we're
-      // trying to gather a crash key here, if that exception happens, just
-      // remark that it happened and continue rather than crashing the browser.
-      std::string characters, unmodified_characters;
-      @try {
-        characters = base::SysNSStringToUTF8([event.characters
-            stringByReplacingOccurrencesOfString:@"\0"
-                                      withString:@"\\x00"]);
-        unmodified_characters =
-            base::SysNSStringToUTF8([event.charactersIgnoringModifiers
-                stringByReplacingOccurrencesOfString:@"\0"
-                                          withString:@"\\x00"]);
-      } @catch (id exception) {
-        characters = "(exception)";
-        unmodified_characters = "(exception)";
-      }
-      desc += base::StringPrintf(
-          " keyCode=0x%d ARepeat=%d characters='%s' unmodifiedCharacters='%s'",
-          event.keyCode, event.ARepeat, characters.c_str(),
-          unmodified_characters.c_str());
-      break;
-    }
-    case NSEventTypeLeftMouseDown:
-    case NSEventTypeLeftMouseDragged:
-    case NSEventTypeLeftMouseUp:
-    case NSEventTypeOtherMouseDown:
-    case NSEventTypeOtherMouseDragged:
-    case NSEventTypeOtherMouseUp:
-    case NSEventTypeRightMouseDown:
-    case NSEventTypeRightMouseDragged:
-    case NSEventTypeRightMouseUp:
-      desc += base::StringPrintf(" buttonNumber=%ld clickCount=%ld",
-                                 event.buttonNumber, event.clickCount);
-      break;
-    case NSAppKitDefined:
-    case NSSystemDefined:
-    case NSApplicationDefined:
-    case NSPeriodic:
-      desc += base::StringPrintf(" subtype=%d data1=%ld data2=%ld",
-                                 event.subtype, event.data1, event.data2);
-      break;
-    default:
-      break;
-  }
-  return desc;
-}
-
-}  // namespace
-
 @interface BrowserCrApplication ()<NativeEventProcessor> {
   base::ObserverList<content::NativeEventProcessorObserver>::Unchecked
       _observers;
@@ -118,10 +50,6 @@ std::string DescriptionForNSEvent(NSEvent* event) {
 @implementation BrowserCrApplication
 
 + (void)initialize {
-  // Turn all deallocated Objective-C objects into zombies, keeping
-  // the most recent 10,000 of them on the treadmill.
-  ObjcEvilDoers::ZombieEnable(true, 10000);
-
   chrome::InstallObjcExceptionPreprocessor();
 
   cocoa_l10n_util::ApplyForcedRTL();
@@ -287,9 +215,6 @@ std::string DescriptionForNSEvent(NSEvent* event) {
       [actionString UTF8String],
       aTarget);
 
-  static crash_reporter::CrashKeyString<256> sendActionKey("sendaction");
-  crash_reporter::ScopedCrashKeyString scopedKey(&sendActionKey, value);
-
   __block BOOL rv;
   base::mac::CallWithEHFrame(^{
     rv = [super sendAction:anAction to:aTarget from:sender];
@@ -312,10 +237,6 @@ std::string DescriptionForNSEvent(NSEvent* event) {
   TRACE_EVENT_INSTANT1("toplevel", "KeyWindow", TRACE_EVENT_SCOPE_THREAD,
                        "KeyWin", [[NSApp keyWindow] windowNumber]);
 
-  static crash_reporter::CrashKeyString<256> nseventKey("nsevent");
-  crash_reporter::ScopedCrashKeyString scopedKey(&nseventKey,
-                                                 DescriptionForNSEvent(event));
-
   base::mac::CallWithEHFrame(^{
     static const bool kKioskMode =
         base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kKioskMode);
