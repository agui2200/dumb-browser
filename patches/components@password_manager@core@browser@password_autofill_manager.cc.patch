diff --git a/components/password_manager/core/browser/password_autofill_manager.cc b/components/password_manager/core/browser/password_autofill_manager.cc
index 977a30fc2657a..56f8b1f643e0b 100644
--- a/components/password_manager/core/browser/password_autofill_manager.cc
+++ b/components/password_manager/core/browser/password_autofill_manager.cc
@@ -37,8 +37,6 @@
 #include "components/password_manager/core/browser/password_feature_manager.h"
 #include "components/password_manager/core/browser/password_manager_client.h"
 #include "components/password_manager/core/browser/password_manager_driver.h"
-#include "components/password_manager/core/browser/password_manager_metrics_recorder.h"
-#include "components/password_manager/core/browser/password_manager_metrics_util.h"
 #include "components/password_manager/core/browser/password_manager_util.h"
 #include "components/password_manager/core/common/password_manager_features.h"
 #include "components/password_manager/core/common/password_manager_pref_names.h"
@@ -307,8 +305,6 @@ void LogAccountStoredPasswordsCountInFillDataAfterUnlock(
                              });
   if (fill_data.uses_account_store)
     ++account_store_passwords_count;
-  metrics_util::LogPasswordsCountFromAccountStoreAfterUnlock(
-      account_store_passwords_count);
 }
 
 }  // namespace
@@ -354,7 +350,6 @@ void PasswordAutofillManager::DidSelectSuggestion(const std::u16string& value,
 
 void PasswordAutofillManager::OnUnlockItemAccepted(
     autofill::PopupItemId unlock_item) {
-  using metrics_util::PasswordDropdownSelectedOption;
   DCHECK(
       unlock_item == autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_OPT_IN ||
       unlock_item ==
@@ -376,51 +371,25 @@ void PasswordAutofillManager::OnUnlockItemAccepted(
 void PasswordAutofillManager::DidAcceptSuggestion(const std::u16string& value,
                                                   int identifier,
                                                   int position) {
-  using metrics_util::PasswordDropdownSelectedOption;
-
   if (identifier == autofill::POPUP_ITEM_ID_GENERATE_PASSWORD_ENTRY) {
     password_client_->GeneratePassword(PasswordGenerationType::kAutomatic);
-    metrics_util::LogPasswordDropdownItemSelected(
-        PasswordDropdownSelectedOption::kGenerate,
-        password_client_->IsIncognito());
   } else if (identifier == autofill::POPUP_ITEM_ID_ALL_SAVED_PASSWORDS_ENTRY ||
              identifier ==
                  autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_EMPTY) {
     password_client_->NavigateToManagePasswordsPage(
         ManagePasswordsReferrer::kPasswordDropdown);
-    metrics_util::LogPasswordDropdownItemSelected(
-        PasswordDropdownSelectedOption::kShowAll,
-        password_client_->IsIncognito());
-
-    if (password_client_->GetMetricsRecorder()) {
-      using UserAction =
-          password_manager::PasswordManagerMetricsRecorder::PageLevelUserAction;
-      password_client_->GetMetricsRecorder()->RecordPageLevelUserAction(
-          UserAction::kShowAllPasswordsWhileSomeAreSuggested);
-    }
   } else if (identifier ==
              autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_RE_SIGNIN) {
     password_client_->TriggerSignIn(
         signin_metrics::AccessPoint::ACCESS_POINT_AUTOFILL_DROPDOWN);
-    metrics_util::LogPasswordDropdownItemSelected(
-        PasswordDropdownSelectedOption::kResigninToUnlockAccountStore,
-        password_client_->IsIncognito());
   } else if (
       identifier == autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_OPT_IN ||
       identifier ==
           autofill::
               POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_OPT_IN_AND_GENERATE) {
     OnUnlockItemAccepted(static_cast<autofill::PopupItemId>(identifier));
-    metrics_util::LogPasswordDropdownItemSelected(
-        identifier == autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_OPT_IN
-            ? PasswordDropdownSelectedOption::kUnlockAccountStorePasswords
-            : PasswordDropdownSelectedOption::kUnlockAccountStoreGeneration,
-        password_client_->IsIncognito());
   } else {
     bool success = FillSuggestion(GetUsernameFromSuggestion(value), identifier);
-    metrics_util::LogPasswordDropdownItemSelected(
-        PasswordDropdownSelectedOption::kPassword,
-        password_client_->IsIncognito());
     DCHECK(success);
   }
 
@@ -496,8 +465,6 @@ void PasswordAutofillManager::OnNoCredentialsFound() {
           autofill_client_->GetPopupSuggestions(),
           autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_OPT_IN))
     return;
-  metrics_util::LogPasswordsCountFromAccountStoreAfterUnlock(
-      /*account_store_passwords_count=*/0);
   UpdatePopup({CreateAccountStorageEmptyEntry()});
 }
 
@@ -614,20 +581,15 @@ std::vector<autofill::Suggestion> PasswordAutofillManager::BuildSuggestions(
 
 void PasswordAutofillManager::LogMetricsForSuggestions(
     const std::vector<autofill::Suggestion>& suggestions) const {
-  metrics_util::PasswordDropdownState dropdown_state =
-      metrics_util::PasswordDropdownState::kStandard;
   for (const auto& suggestion : suggestions) {
     switch (suggestion.frontend_id) {
       case autofill::POPUP_ITEM_ID_GENERATE_PASSWORD_ENTRY:
         // TODO(crbug.com/1062709): Revisit metrics for the "opt in and
         // generate" button.
       case autofill::POPUP_ITEM_ID_PASSWORD_ACCOUNT_STORAGE_OPT_IN_AND_GENERATE:
-        dropdown_state = metrics_util::PasswordDropdownState::kStandardGenerate;
         break;
     }
   }
-  metrics_util::LogPasswordDropdownShown(dropdown_state,
-                                         password_client_->IsIncognito());
 }
 
 bool PasswordAutofillManager::ShowPopup(
@@ -668,10 +630,6 @@ bool PasswordAutofillManager::FillSuggestion(const std::u16string& username,
   if (fill_data_ &&
       GetPasswordAndMetadataForUsername(username, item_id, *fill_data_,
                                         &password_and_meta_data)) {
-    bool is_android_credential =
-        FacetURI::FromPotentiallyInvalidSpec(password_and_meta_data.realm)
-            .IsValidAndroidFacetURI();
-    metrics_util::LogFilledCredentialIsFromAndroidApp(is_android_credential);
     password_manager_driver_->FillSuggestion(username,
                                              password_and_meta_data.password);
     return true;
