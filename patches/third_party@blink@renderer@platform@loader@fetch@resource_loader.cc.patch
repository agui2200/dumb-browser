diff --git a/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc b/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc
index 5cf198700d27..773ee1de295c 100644
--- a/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc
+++ b/third_party/blink/renderer/platform/loader/fetch/resource_loader.cc
@@ -116,6 +116,7 @@ bool IsThrottlableRequestContext(mojom::blink::RequestContextType context) {
          context != mojom::blink::RequestContextType::AUDIO;
 }
 
+#if 0
 void LogMixedAutoupgradeMetrics(blink::MixedContentAutoupgradeStatus status,
                                 base::Optional<int> response_or_error_code,
                                 ukm::SourceId source_id,
@@ -148,6 +149,7 @@ void LogMixedAutoupgradeMetrics(blink::MixedContentAutoupgradeStatus status,
   }
   builder.Record(recorder);
 }
+#endif
 
 bool CanHandleDataURLRequestLocally(const ResourceRequestHead& request) {
   if (!request.Url().ProtocolIsData())
@@ -520,6 +522,7 @@ void ResourceLoader::Start() {
   }
 
   if (request.IsAutomaticUpgrade()) {
+#if 0
     mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> pending_recorder;
     Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(
         pending_recorder.InitWithNewPipeAndPassReceiver());
@@ -528,6 +531,7 @@ void ResourceLoader::Start() {
     LogMixedAutoupgradeMetrics(MixedContentAutoupgradeStatus::kStarted,
                                base::nullopt, request.GetUkmSourceId(),
                                recorder.get(), resource_);
+#endif
   }
   if (resource_->GetResourceRequest().IsDownloadToNetworkCacheOnly()) {
     // The download-to-cache requests are throttled in net/, they are fire-and
@@ -922,6 +926,7 @@ void ResourceLoader::DidReceiveResponseInternal(
   const ResourceRequestHead& request = resource_->GetResourceRequest();
 
   if (request.IsAutomaticUpgrade()) {
+#if 0
     mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> pending_recorder;
     Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(
         pending_recorder.InitWithNewPipeAndPassReceiver());
@@ -931,6 +936,7 @@ void ResourceLoader::DidReceiveResponseInternal(
                                response.HttpStatusCode(),
                                request.GetUkmSourceId(), recorder.get(),
                                resource_);
+#endif
   }
 
   if (fetcher_->GetProperties().IsDetached()) {
@@ -1206,6 +1212,7 @@ void ResourceLoader::DidFail(const WebURLError& error,
   response_end_time_for_error_cases_ = response_end_time;
 
   if (request.IsAutomaticUpgrade()) {
+#if 0
     mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> pending_recorder;
     Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(
         pending_recorder.InitWithNewPipeAndPassReceiver());
@@ -1214,6 +1221,7 @@ void ResourceLoader::DidFail(const WebURLError& error,
     LogMixedAutoupgradeMetrics(MixedContentAutoupgradeStatus::kFailed,
                                error.reason(), request.GetUkmSourceId(),
                                recorder.get(), resource_);
+#endif
   }
   resource_->SetEncodedDataLength(encoded_data_length);
   resource_->SetEncodedBodyLength(encoded_body_length);
