diff --git a/components/policy/core/common/cloud/cloud_policy_client.cc b/components/policy/core/common/cloud/cloud_policy_client.cc
index fe51c9995128..f83e22598faf 100644
--- a/components/policy/core/common/cloud/cloud_policy_client.cc
+++ b/components/policy/core/common/cloud/cloud_policy_client.cc
@@ -21,8 +21,6 @@
 #include "components/policy/core/common/cloud/device_management_service.h"
 #include "components/policy/core/common/cloud/dm_auth.h"
 #include "components/policy/core/common/cloud/dmserver_job_configurations.h"
-#include "components/policy/core/common/cloud/encrypted_reporting_job_configuration.h"
-#include "components/policy/core/common/cloud/realtime_reporting_job_configuration.h"
 #include "components/policy/core/common/cloud/signing_service.h"
 #include "components/policy/core/common/features.h"
 #include "google_apis/gaia/gaia_constants.h"
@@ -67,61 +65,6 @@ bool IsChromePolicy(const std::string& type) {
          IsMachineLevelUserCloudPolicyType(type);
 }
 
-em::PolicyValidationReportRequest::ValidationResultType
-TranslatePolicyValidationResult(CloudPolicyValidatorBase::Status status) {
-  using report = em::PolicyValidationReportRequest;
-  using policyValidationStatus = CloudPolicyValidatorBase::Status;
-  switch (status) {
-    case policyValidationStatus::VALIDATION_OK:
-      return report::VALIDATION_RESULT_TYPE_SUCCESS;
-    case policyValidationStatus::VALIDATION_BAD_INITIAL_SIGNATURE:
-      return report::VALIDATION_RESULT_TYPE_BAD_INITIAL_SIGNATURE;
-    case policyValidationStatus::VALIDATION_BAD_SIGNATURE:
-      return report::VALIDATION_RESULT_TYPE_BAD_SIGNATURE;
-    case policyValidationStatus::VALIDATION_ERROR_CODE_PRESENT:
-      return report::VALIDATION_RESULT_TYPE_ERROR_CODE_PRESENT;
-    case policyValidationStatus::VALIDATION_PAYLOAD_PARSE_ERROR:
-      return report::VALIDATION_RESULT_TYPE_PAYLOAD_PARSE_ERROR;
-    case policyValidationStatus::VALIDATION_WRONG_POLICY_TYPE:
-      return report::VALIDATION_RESULT_TYPE_WRONG_POLICY_TYPE;
-    case policyValidationStatus::VALIDATION_WRONG_SETTINGS_ENTITY_ID:
-      return report::VALIDATION_RESULT_TYPE_WRONG_SETTINGS_ENTITY_ID;
-    case policyValidationStatus::VALIDATION_BAD_TIMESTAMP:
-      return report::VALIDATION_RESULT_TYPE_BAD_TIMESTAMP;
-    case policyValidationStatus::VALIDATION_BAD_DM_TOKEN:
-      return report::VALIDATION_RESULT_TYPE_BAD_DM_TOKEN;
-    case policyValidationStatus::VALIDATION_BAD_DEVICE_ID:
-      return report::VALIDATION_RESULT_TYPE_BAD_DEVICE_ID;
-    case policyValidationStatus::VALIDATION_BAD_USER:
-      return report::VALIDATION_RESULT_TYPE_BAD_USER;
-    case policyValidationStatus::VALIDATION_POLICY_PARSE_ERROR:
-      return report::VALIDATION_RESULT_TYPE_POLICY_PARSE_ERROR;
-    case policyValidationStatus::VALIDATION_BAD_KEY_VERIFICATION_SIGNATURE:
-      return report::VALIDATION_RESULT_TYPE_BAD_KEY_VERIFICATION_SIGNATURE;
-    case policyValidationStatus::VALIDATION_VALUE_WARNING:
-      return report::VALIDATION_RESULT_TYPE_VALUE_WARNING;
-    case policyValidationStatus::VALIDATION_VALUE_ERROR:
-      return report::VALIDATION_RESULT_TYPE_VALUE_ERROR;
-    case policyValidationStatus::VALIDATION_STATUS_SIZE:
-      return report::VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED;
-  }
-  return report::VALIDATION_RESULT_TYPE_ERROR_UNSPECIFIED;
-}
-
-em::PolicyValueValidationIssue::ValueValidationIssueSeverity
-TranslatePolicyValidationResultSeverity(
-    ValueValidationIssue::Severity severity) {
-  using issue = em::PolicyValueValidationIssue;
-  switch (severity) {
-    case ValueValidationIssue::Severity::kWarning:
-      return issue::VALUE_VALIDATION_ISSUE_SEVERITY_WARNING;
-    case ValueValidationIssue::Severity::kError:
-      return issue::VALUE_VALIDATION_ISSUE_SEVERITY_ERROR;
-  }
-  NOTREACHED();
-  return issue::VALUE_VALIDATION_ISSUE_SEVERITY_UNSPECIFIED;
-}
-
 }  // namespace
 
 CloudPolicyClient::RegistrationParameters::RegistrationParameters(
@@ -181,8 +124,6 @@ void CloudPolicyClient::SetupRegistration(
   dm_token_ = dm_token;
   client_id_ = client_id;
   request_jobs_.clear();
-  app_install_report_request_job_ = nullptr;
-  extension_install_report_request_job_ = nullptr;
   policy_fetch_request_job_.reset();
   responses_.clear();
   if (device_dm_token_callback_) {
@@ -416,46 +357,6 @@ void CloudPolicyClient::FetchPolicy() {
   policy_fetch_request_job_ = service_->CreateJob(std::move(config));
 }
 
-void CloudPolicyClient::UploadPolicyValidationReport(
-    CloudPolicyValidatorBase::Status status,
-    const std::vector<ValueValidationIssue>& value_validation_issues,
-    const std::string& policy_type,
-    const std::string& policy_token) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-
-  StatusCallback callback = base::DoNothing();
-  std::unique_ptr<DMServerJobConfiguration> config =
-      std::make_unique<DMServerJobConfiguration>(
-          DeviceManagementService::JobConfiguration::
-              TYPE_UPLOAD_POLICY_VALIDATION_REPORT,
-          this,
-          /*critical=*/false, DMAuth::FromDMToken(dm_token_),
-          /*oauth_token=*/base::nullopt,
-          base::BindOnce(&CloudPolicyClient::OnReportUploadCompleted,
-                         weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
-
-  em::DeviceManagementRequest* request = config->request();
-  em::PolicyValidationReportRequest* policy_validation_report_request =
-      request->mutable_policy_validation_report_request();
-
-  policy_validation_report_request->set_policy_type(policy_type);
-  policy_validation_report_request->set_policy_token(policy_token);
-  policy_validation_report_request->set_validation_result_type(
-      TranslatePolicyValidationResult(status));
-
-  for (const ValueValidationIssue& issue : value_validation_issues) {
-    em::PolicyValueValidationIssue* proto_result =
-        policy_validation_report_request->add_policy_value_validation_issues();
-    proto_result->set_policy_name(issue.policy_name);
-    proto_result->set_severity(
-        TranslatePolicyValidationResultSeverity(issue.severity));
-    proto_result->set_debug_message(issue.message);
-  }
-
-  request_jobs_.push_back(service_->CreateJob(std::move(config)));
-}
-
 void CloudPolicyClient::FetchRobotAuthCodes(
     DMAuth auth,
     enterprise_management::DeviceServiceApiAccessRequest::DeviceType
@@ -541,160 +442,6 @@ void CloudPolicyClient::UploadEnterpriseEnrollmentId(
   ExecuteCertUploadJob(std::move(config));
 }
 
-void CloudPolicyClient::UploadDeviceStatus(
-    const em::DeviceStatusReportRequest* device_status,
-    const em::SessionStatusReportRequest* session_status,
-    const em::ChildStatusReportRequest* child_status,
-    CloudPolicyClient::StatusCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-  // Should pass in at least one type of status.
-  DCHECK(device_status || session_status || child_status);
-
-  std::unique_ptr<DMServerJobConfiguration> config =
-      std::make_unique<DMServerJobConfiguration>(
-          DeviceManagementService::JobConfiguration::TYPE_UPLOAD_STATUS, this,
-          /*critical=*/false, DMAuth::FromDMToken(dm_token_),
-          /*oauth_token=*/oauth_token_,
-          base::BindOnce(&CloudPolicyClient::OnReportUploadCompleted,
-                         weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
-
-  em::DeviceManagementRequest* request = config->request();
-  if (device_status)
-    *request->mutable_device_status_report_request() = *device_status;
-  if (session_status)
-    *request->mutable_session_status_report_request() = *session_status;
-  if (child_status)
-    *request->mutable_child_status_report_request() = *child_status;
-
-  request_jobs_.push_back(service_->CreateJob(std::move(config)));
-}
-
-void CloudPolicyClient::UploadChromeDesktopReport(
-    std::unique_ptr<em::ChromeDesktopReportRequest> chrome_desktop_report,
-    CloudPolicyClient::StatusCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-  DCHECK(chrome_desktop_report);
-
-  std::unique_ptr<DMServerJobConfiguration> config =
-      std::make_unique<DMServerJobConfiguration>(
-          DeviceManagementService::JobConfiguration::TYPE_CHROME_DESKTOP_REPORT,
-          this,
-          /*critical=*/false, DMAuth::FromDMToken(dm_token_),
-          /*oauth_token=*/base::nullopt,
-          base::BindOnce(&CloudPolicyClient::OnReportUploadCompleted,
-                         weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
-
-  em::DeviceManagementRequest* request = config->request();
-  request->set_allocated_chrome_desktop_report_request(
-      chrome_desktop_report.release());
-
-  request_jobs_.push_back(service_->CreateJob(std::move(config)));
-}
-
-void CloudPolicyClient::UploadChromeOsUserReport(
-    std::unique_ptr<enterprise_management::ChromeOsUserReportRequest>
-        chrome_os_user_report,
-    CloudPolicyClient::StatusCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-  DCHECK(chrome_os_user_report);
-
-  std::unique_ptr<DMServerJobConfiguration> config =
-      std::make_unique<DMServerJobConfiguration>(
-          DeviceManagementService::JobConfiguration::TYPE_CHROME_OS_USER_REPORT,
-          this,
-          /*critical=*/false, DMAuth::FromDMToken(dm_token_),
-          /*oauth_token=*/base::nullopt,
-          base::BindOnce(&CloudPolicyClient::OnReportUploadCompleted,
-                         weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
-
-  em::DeviceManagementRequest* request = config->request();
-  request->set_allocated_chrome_os_user_report_request(
-      chrome_os_user_report.release());
-
-  request_jobs_.push_back(service_->CreateJob(std::move(config)));
-}
-
-void CloudPolicyClient::UploadSecurityEventReport(
-    content::BrowserContext* context,
-    bool include_device_info,
-    base::Value report,
-    StatusCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-  CreateNewRealtimeReportingJob(
-      std::move(report),
-      service()->configuration()->GetReportingConnectorServerUrl(context),
-      include_device_info, add_connector_url_params_, std::move(callback));
-}
-
-void CloudPolicyClient::UploadEncryptedReport(
-    base::Value merging_payload,
-    base::Optional<base::Value> context,
-    ResponseCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!is_registered()) {
-    std::move(callback).Run(base::nullopt);
-    return;
-  }
-
-  std::unique_ptr<EncryptedReportingJobConfiguration> config =
-      std::make_unique<EncryptedReportingJobConfiguration>(
-          this, service()->configuration()->GetEncryptedReportingServerUrl(),
-          std::move(merging_payload),
-          base::BindOnce(&CloudPolicyClient::OnEncryptedReportUploadCompleted,
-                         weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
-  if (context.has_value()) {
-    config->UpdateContext(context.value());
-  }
-  request_jobs_.push_back(service_->CreateJob(std::move(config)));
-}
-
-void CloudPolicyClient::UploadAppInstallReport(base::Value report,
-                                               StatusCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-  CancelAppInstallReportUpload();
-  app_install_report_request_job_ = CreateNewRealtimeReportingJob(
-      std::move(report),
-      service()->configuration()->GetRealtimeReportingServerUrl(),
-      /* include_device_info */ true, /* add_connector_url_params=*/false,
-      std::move(callback));
-  DCHECK(app_install_report_request_job_);
-}
-
-void CloudPolicyClient::CancelAppInstallReportUpload() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-
-  if (app_install_report_request_job_) {
-    RemoveJob(app_install_report_request_job_);
-    DCHECK_EQ(app_install_report_request_job_, nullptr);
-  }
-}
-
-void CloudPolicyClient::UploadExtensionInstallReport(base::Value report,
-                                                     StatusCallback callback) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  CHECK(is_registered());
-  CancelExtensionInstallReportUpload();
-  extension_install_report_request_job_ = CreateNewRealtimeReportingJob(
-      std::move(report),
-      service()->configuration()->GetRealtimeReportingServerUrl(),
-      /* include_device_info */ true,
-      /* add_connector_url_params=*/false, std::move(callback));
-  DCHECK(extension_install_report_request_job_);
-}
-
-void CloudPolicyClient::CancelExtensionInstallReportUpload() {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (extension_install_report_request_job_) {
-    RemoveJob(extension_install_report_request_job_);
-    DCHECK_EQ(extension_install_report_request_job_, nullptr);
-  }
-}
-
 void CloudPolicyClient::FetchRemoteCommands(
     std::unique_ptr<RemoteCommandJob::UniqueIDType> last_command_id,
     const std::vector<em::RemoteCommandResult>& command_results,
@@ -725,23 +472,6 @@ void CloudPolicyClient::FetchRemoteCommands(
   request_jobs_.push_back(service_->CreateJob(std::move(config)));
 }
 
-DeviceManagementService::Job* CloudPolicyClient::CreateNewRealtimeReportingJob(
-    base::Value report,
-    const std::string& server_url,
-    bool include_device_info,
-    bool add_connector_url_params,
-    StatusCallback callback) {
-  std::unique_ptr<RealtimeReportingJobConfiguration> config =
-      std::make_unique<RealtimeReportingJobConfiguration>(
-          this, server_url, include_device_info, add_connector_url_params,
-          base::BindOnce(&CloudPolicyClient::OnRealtimeReportUploadCompleted,
-                         weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
-
-  config->AddReport(std::move(report));
-  request_jobs_.push_back(service_->CreateJob(std::move(config)));
-  return request_jobs_.back().get();
-}
-
 void CloudPolicyClient::GetDeviceAttributeUpdatePermission(
     DMAuth auth,
     CloudPolicyClient::StatusCallback callback) {
@@ -1192,8 +922,6 @@ void CloudPolicyClient::OnUnregisterCompleted(
     dm_token_.clear();
     // Cancel all outstanding jobs.
     request_jobs_.clear();
-    app_install_report_request_job_ = nullptr;
-    extension_install_report_request_job_ = nullptr;
     device_dm_token_.clear();
     NotifyRegistrationStateChanged();
   } else {
@@ -1274,11 +1002,6 @@ void CloudPolicyClient::OnDeviceAttributeUpdated(
 }
 
 void CloudPolicyClient::RemoveJob(DeviceManagementService::Job* job) {
-  if (app_install_report_request_job_ == job) {
-    app_install_report_request_job_ = nullptr;
-  } else if (extension_install_report_request_job_ == job) {
-    extension_install_report_request_job_ = nullptr;
-  }
   for (auto it = request_jobs_.begin(); it != request_jobs_.end(); ++it) {
     if (it->get() == job) {
       request_jobs_.erase(it);
@@ -1290,55 +1013,6 @@ void CloudPolicyClient::RemoveJob(DeviceManagementService::Job* job) {
   NOTREACHED();
 }
 
-void CloudPolicyClient::OnReportUploadCompleted(
-    StatusCallback callback,
-    DeviceManagementService::Job* job,
-    DeviceManagementStatus status,
-    int net_error,
-    const em::DeviceManagementResponse& response) {
-  status_ = status;
-  if (status != DM_STATUS_SUCCESS)
-    NotifyClientError();
-
-  std::move(callback).Run(status == DM_STATUS_SUCCESS);
-  RemoveJob(job);
-}
-
-void CloudPolicyClient::OnRealtimeReportUploadCompleted(
-    StatusCallback callback,
-    DeviceManagementService::Job* job,
-    DeviceManagementStatus status,
-    int net_error,
-    const base::Value& response) {
-  status_ = status;
-  if (status != DM_STATUS_SUCCESS)
-    NotifyClientError();
-
-  std::move(callback).Run(status == DM_STATUS_SUCCESS);
-  RemoveJob(job);
-}
-
-// |job| can be null if the owning EncryptedReportingJobConfiguration is
-// destroyed prior to calling OnUploadComplete. In that case, callback will be
-// called with nullopt value.
-void CloudPolicyClient::OnEncryptedReportUploadCompleted(
-    ResponseCallback callback,
-    DeviceManagementService::Job* job,
-    DeviceManagementStatus status,
-    int net_error,
-    const base::Value& response) {
-  if (job == nullptr) {
-    std::move(callback).Run(base::nullopt);
-    return;
-  }
-  status_ = status;
-  if (status != DM_STATUS_SUCCESS) {
-    NotifyClientError();
-  }
-  std::move(callback).Run(response.Clone());
-  RemoveJob(job);
-}
-
 void CloudPolicyClient::OnRemoteCommandsFetched(
     RemoteCommandCallback callback,
     DeviceManagementService::Job* job,
