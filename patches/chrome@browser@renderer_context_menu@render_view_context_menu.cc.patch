diff --git a/chrome/browser/renderer_context_menu/render_view_context_menu.cc b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
index b590b86c8d776..1e3e43e789467 100644
--- a/chrome/browser/renderer_context_menu/render_view_context_menu.cc
+++ b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
@@ -40,7 +40,6 @@
 #include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings.h"
 #include "chrome/browser/data_reduction_proxy/data_reduction_proxy_chrome_settings_factory.h"
 #include "chrome/browser/devtools/devtools_window.h"
-#include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/language/language_model_manager_factory.h"
 #include "chrome/browser/media/router/media_router_feature.h"
 #include "chrome/browser/password_manager/chrome_password_manager_client.h"
@@ -264,6 +263,7 @@ base::OnceCallback<void(RenderViewContextMenu*)>* GetMenuShownCallback() {
   return callback.get();
 }
 
+#if 0
 enum class UmaEnumIdLookupType {
   GeneralEnumId,
   ContextSpecificEnumId,
@@ -490,6 +490,7 @@ bool IsCommandForOpenLink(int id) {
          (id >= IDC_OPEN_LINK_IN_PROFILE_FIRST &&
           id <= IDC_OPEN_LINK_IN_PROFILE_LAST);
 }
+#endif
 
 // Returns the preference of the profile represented by the |context|.
 PrefService* GetPrefs(content::BrowserContext* context) {
@@ -990,6 +991,7 @@ Profile* RenderViewContextMenu::GetProfile() const {
   return Profile::FromBrowserContext(browser_context_);
 }
 
+#if 0
 void RenderViewContextMenu::RecordUsedItem(int id) {
   // Log general ID.
 
@@ -1096,6 +1098,7 @@ void RenderViewContextMenu::RecordShownItem(int id) {
     DLOG(ERROR) << "Update kUmaEnumToControlId. Unhanded IDC: " << id;
   }
 }
+#endif
 
 bool RenderViewContextMenu::IsHTML5Fullscreen() const {
   Browser* browser = chrome::FindBrowserWithWebContents(embedder_web_contents_);
@@ -1321,7 +1324,9 @@ void RenderViewContextMenu::AppendLinkItems() {
       }
     }
 
+#if BUILDFLAG(ENABLE_CLICK_TO_CALL)
     AppendClickToCallItem();
+#endif
 
     menu_model_.AddSeparator(ui::NORMAL_SEPARATOR);
     menu_model_.AddItemWithStringId(IDC_CONTENT_CONTEXT_SAVELINKAS,
@@ -1920,7 +1925,9 @@ void RenderViewContextMenu::AppendSharingItems() {
   int items_before_sharing = menu_model_.GetItemCount();
   bool starting_separator_added = items_before_sharing > items_initial;
 
+#if BUILDFLAG(ENABLE_CLICK_TO_CALL)
   AppendClickToCallItem();
+#endif
   AppendSharedClipboardItem();
 
   // Add an ending separator if there are sharing items, otherwise remove the
@@ -1932,6 +1939,7 @@ void RenderViewContextMenu::AppendSharingItems() {
     menu_model_.RemoveItemAt(items_initial);
 }
 
+#if BUILDFLAG(ENABLE_CLICK_TO_CALL)
 void RenderViewContextMenu::AppendClickToCallItem() {
   SharingClickToCallEntryPoint entry_point;
   absl::optional<std::string> phone_number;
@@ -1958,6 +1966,7 @@ void RenderViewContextMenu::AppendClickToCallItem() {
   click_to_call_context_menu_observer_->BuildMenu(*phone_number, selection_text,
                                                   entry_point);
 }
+#endif
 
 void RenderViewContextMenu::AppendSharedClipboardItem() {
   if (!ShouldOfferSharedClipboard(browser_context_, params_.selection_text))
@@ -2999,8 +3008,6 @@ void RenderViewContextMenu::ExecSaveLinkAs() {
   if (!render_frame_host)
     return;
 
-  RecordDownloadSource(DOWNLOAD_INITIATED_BY_CONTEXT_MENU);
-
   const GURL& url = params_.link_url;
 
   net::NetworkTrafficAnnotationTag traffic_annotation =
@@ -3049,7 +3056,6 @@ void RenderViewContextMenu::ExecSaveAs() {
     if (frame_host)
       frame_host->SaveImageAt(params_.x, params_.y);
   } else {
-    RecordDownloadSource(DOWNLOAD_INITIATED_BY_CONTEXT_MENU);
     const GURL& url = params_.src_url;
     content::Referrer referrer = CreateReferrer(url, params_);
     std::string headers;
@@ -3221,8 +3227,6 @@ void RenderViewContextMenu::ExecRouteMedia() {
 
   dialog_controller->ShowMediaRouterDialog(
       media_router::MediaRouterDialogOpenOrigin::CONTEXTUAL_MENU);
-  media_router::MediaRouterMetrics::RecordMediaRouterDialogOrigin(
-      media_router::MediaRouterDialogOpenOrigin::CONTEXTUAL_MENU);
 }
 
 void RenderViewContextMenu::ExecTranslate() {
