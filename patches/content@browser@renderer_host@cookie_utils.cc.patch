diff --git a/content/browser/renderer_host/cookie_utils.cc b/content/browser/renderer_host/cookie_utils.cc
index 3c1eeccbfdfa..015a419ea57c 100644
--- a/content/browser/renderer_host/cookie_utils.cc
+++ b/content/browser/renderer_host/cookie_utils.cc
@@ -11,33 +11,9 @@
 #include "content/public/browser/cookie_access_details.h"
 #include "content/public/common/content_client.h"
 #include "net/cookies/cookie_inclusion_status.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
 
 namespace content {
 
-namespace {
-
-void RecordContextDowngradeUKM(RenderFrameHost* rfh,
-                               CookieAccessDetails::Type access_type,
-                               const net::CookieInclusionStatus& status,
-                               const GURL& url) {
-  DCHECK(rfh);
-  ukm::SourceId source_id = rfh->GetPageUkmSourceId();
-
-  if (access_type == CookieAccessDetails::Type::kRead) {
-    ukm::builders::SchemefulSameSiteContextDowngrade(source_id)
-        .SetRequestPerCookie(status.GetBreakingDowngradeMetricsEnumValue(url))
-        .Record(ukm::UkmRecorder::Get());
-  } else {
-    DCHECK(access_type == CookieAccessDetails::Type::kChange);
-    ukm::builders::SchemefulSameSiteContextDowngrade(source_id)
-        .SetResponsePerCookie(status.GetBreakingDowngradeMetricsEnumValue(url))
-        .Record(ukm::UkmRecorder::Get());
-  }
-}
-
-}  // namespace
-
 void SplitCookiesIntoAllowedAndBlocked(
     const network::mojom::CookieAccessDetailsPtr& cookie_details,
     CookieAccessDetails* allowed,
@@ -108,13 +84,6 @@ void EmitSameSiteCookiesDeprecationWarning(
     breaking_context_downgrade =
         breaking_context_downgrade ||
         excluded_cookie.access_result.status.HasDowngradeWarning();
-
-    if (excluded_cookie.access_result.status.HasDowngradeWarning()) {
-      // Unlike with UMA, do not record cookies that have no downgrade warning.
-      RecordContextDowngradeUKM(rfh, cookie_details->type,
-                                excluded_cookie.access_result.status,
-                                cookie_details->url);
-    }
   }
 
   if (samesite_treated_as_lax_cookies) {
