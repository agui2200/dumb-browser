diff --git a/third_party/blink/renderer/modules/webgpu/gpu.cc b/third_party/blink/renderer/modules/webgpu/gpu.cc
index c74039a344d4..826c70765ba6 100644
--- a/third_party/blink/renderer/modules/webgpu/gpu.cc
+++ b/third_party/blink/renderer/modules/webgpu/gpu.cc
@@ -7,9 +7,6 @@
 #include <utility>
 
 #include "gpu/command_buffer/client/webgpu_interface.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_token_builder.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/public/platform/web_graphics_context_3d_provider.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
@@ -128,33 +125,6 @@ void GPU::RecordAdapterForIdentifiability(
     ScriptState* script_state,
     const GPURequestAdapterOptions* options,
     GPUAdapter* adapter) const {
-  constexpr IdentifiableSurface::Type type =
-      IdentifiableSurface::Type::kGPU_RequestAdapter;
-  if (!IdentifiabilityStudySettings::Get()->ShouldSample(type))
-    return;
-  ExecutionContext* context = GetExecutionContext();
-  if (!context)
-    return;
-
-  IdentifiableTokenBuilder input_builder;
-  if (options && options->hasPowerPreference()) {
-    input_builder.AddToken(
-        IdentifiabilityBenignStringToken(options->powerPreference()));
-  }
-  const auto surface =
-      IdentifiableSurface::FromTypeAndToken(type, input_builder.GetToken());
-
-  IdentifiableTokenBuilder output_builder;
-  if (adapter) {
-    output_builder.AddToken(IdentifiabilityBenignStringToken(adapter->name()));
-    for (const auto& extension : adapter->extensions(script_state)) {
-      output_builder.AddToken(IdentifiabilityBenignStringToken(extension));
-    }
-  }
-
-  IdentifiabilityMetricBuilder(context->UkmSourceID())
-      .Set(surface, output_builder.GetToken())
-      .Record(context->UkmRecorder());
 }
 
 ScriptPromise GPU::requestAdapter(ScriptState* script_state,
