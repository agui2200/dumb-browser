diff --git a/third_party/blink/renderer/modules/webgpu/gpu.cc b/third_party/blink/renderer/modules/webgpu/gpu.cc
index e3be8df8fb637..d7a4132840e61 100644
--- a/third_party/blink/renderer/modules/webgpu/gpu.cc
+++ b/third_party/blink/renderer/modules/webgpu/gpu.cc
@@ -7,9 +7,6 @@
 #include <utility>
 
 #include "gpu/command_buffer/client/webgpu_interface.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_token_builder.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/public/platform/web_graphics_context_3d_provider.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
@@ -23,7 +20,6 @@
 #include "third_party/blink/renderer/platform/graphics/gpu/dawn_control_client_holder.h"
 #include "third_party/blink/renderer/platform/heap/heap.h"
 #include "third_party/blink/renderer/platform/instrumentation/use_counter.h"
-#include "third_party/blink/renderer/platform/privacy_budget/identifiability_digest_helpers.h"
 #include "third_party/blink/renderer/platform/scheduler/public/post_cross_thread_task.h"
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
@@ -133,10 +129,10 @@ void GPU::OnRequestAdapterCallback(ScriptState* script_state,
         mojom::blink::ConsoleMessageLevel::kWarning, error_message);
     execution_context->AddConsoleMessage(console_message);
   }
-  RecordAdapterForIdentifiability(script_state, options, adapter);
   resolver->Resolve(adapter);
 }
 
+#if 0
 void GPU::RecordAdapterForIdentifiability(
     ScriptState* script_state,
     const GPURequestAdapterOptions* options,
@@ -169,6 +165,7 @@ void GPU::RecordAdapterForIdentifiability(
       .Set(surface, output_builder.GetToken())
       .Record(context->UkmRecorder());
 }
+#endif
 
 ScriptPromise GPU::requestAdapter(ScriptState* script_state,
                                   const GPURequestAdapterOptions* options) {
