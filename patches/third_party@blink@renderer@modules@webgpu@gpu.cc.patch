diff --git a/third_party/blink/renderer/modules/webgpu/gpu.cc b/third_party/blink/renderer/modules/webgpu/gpu.cc
index 1ed933f92c68..aa3e1f134f26 100644
--- a/third_party/blink/renderer/modules/webgpu/gpu.cc
+++ b/third_party/blink/renderer/modules/webgpu/gpu.cc
@@ -7,9 +7,6 @@
 #include <utility>
 
 #include "gpu/command_buffer/client/webgpu_interface.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_metric_builder.h"
-#include "third_party/blink/public/common/privacy_budget/identifiability_study_settings.h"
-#include "third_party/blink/public/common/privacy_budget/identifiable_token_builder.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/public/platform/web_graphics_context_3d_provider.h"
 #include "third_party/blink/renderer/bindings/core/v8/script_promise_resolver.h"
@@ -21,7 +18,6 @@
 #include "third_party/blink/renderer/modules/webgpu/gpu_adapter.h"
 #include "third_party/blink/renderer/platform/graphics/gpu/dawn_control_client_holder.h"
 #include "third_party/blink/renderer/platform/heap/heap.h"
-#include "third_party/blink/renderer/platform/privacy_budget/identifiability_digest_helpers.h"
 #include "third_party/blink/renderer/platform/scheduler/public/post_cross_thread_task.h"
 #include "third_party/blink/renderer/platform/scheduler/public/thread.h"
 #include "third_party/blink/renderer/platform/weborigin/kurl.h"
@@ -131,43 +127,9 @@ void GPU::OnRequestAdapterCallback(ScriptState* script_state,
         mojom::blink::ConsoleMessageLevel::kWarning, error_message);
     execution_context->AddConsoleMessage(console_message);
   }
-  RecordAdapterForIdentifiability(script_state, options, adapter);
   resolver->Resolve(adapter);
 }
 
-void GPU::RecordAdapterForIdentifiability(
-    ScriptState* script_state,
-    const GPURequestAdapterOptions* options,
-    GPUAdapter* adapter) const {
-  constexpr IdentifiableSurface::Type type =
-      IdentifiableSurface::Type::kGPU_RequestAdapter;
-  if (!IdentifiabilityStudySettings::Get()->ShouldSample(type))
-    return;
-  ExecutionContext* context = GetExecutionContext();
-  if (!context)
-    return;
-
-  IdentifiableTokenBuilder input_builder;
-  if (options && options->hasPowerPreference()) {
-    input_builder.AddToken(
-        IdentifiabilityBenignStringToken(options->powerPreference()));
-  }
-  const auto surface =
-      IdentifiableSurface::FromTypeAndToken(type, input_builder.GetToken());
-
-  IdentifiableTokenBuilder output_builder;
-  if (adapter) {
-    output_builder.AddToken(IdentifiabilityBenignStringToken(adapter->name()));
-    for (const auto& feature : adapter->features()) {
-      output_builder.AddToken(IdentifiabilityBenignStringToken(feature));
-    }
-  }
-
-  IdentifiabilityMetricBuilder(context->UkmSourceID())
-      .Set(surface, output_builder.GetToken())
-      .Record(context->UkmRecorder());
-}
-
 ScriptPromise GPU::requestAdapter(ScriptState* script_state,
                                   const GPURequestAdapterOptions* options) {
   auto* resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
