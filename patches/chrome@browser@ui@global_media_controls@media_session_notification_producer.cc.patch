diff --git a/chrome/browser/ui/global_media_controls/media_session_notification_producer.cc b/chrome/browser/ui/global_media_controls/media_session_notification_producer.cc
index b85e3cea9a751..f0e22eadd01d0 100644
--- a/chrome/browser/ui/global_media_controls/media_session_notification_producer.cc
+++ b/chrome/browser/ui/global_media_controls/media_session_notification_producer.cc
@@ -25,8 +25,10 @@
 
 namespace {
 
+#if 0
 // The maximum number of actions we will record to UKM for a specific source.
 constexpr int kMaxActionsRecordedToUKM = 100;
+#endif
 
 constexpr int kAutoDismissTimerInMinutesDefault = 60;  // minutes
 
@@ -41,6 +43,7 @@ enum class MediaNotificationClickSource {
   kMaxValue = kMediaFling
 };
 
+#if 0
 // Here we check to see if the WebContents is focused. Note that since Session
 // is a WebContentsObserver, we could in theory listen for
 // |OnWebContentsFocused()| and |OnWebContentsLostFocus()|. However, this won't
@@ -60,6 +63,7 @@ bool IsWebContentsFocused(content::WebContents* web_contents) {
 
   return browser->tab_strip_model()->GetActiveWebContents() == web_contents;
 }
+#endif
 
 // Returns the time value to be used for the auto-dismissing of the
 // notifications after they are inactive.
@@ -606,6 +610,7 @@ MediaSessionNotificationProducer::GetActiveControllableSessionForWebContents(
   return "";
 }
 
+#if 0
 void MediaSessionNotificationProducer::LogMediaSessionActionButtonPressed(
     const std::string& id,
     media_session::mojom::MediaSessionAction action) {
@@ -631,6 +636,7 @@ void MediaSessionNotificationProducer::LogMediaSessionActionButtonPressed(
       .SetMediaSessionAction(static_cast<int64_t>(action))
       .Record(recorder);
 }
+#endif
 
 base::CallbackListSubscription
 MediaSessionNotificationProducer::RegisterAudioOutputDeviceDescriptionsCallback(
