diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index 64da51339475..185ff170f69a 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -103,7 +103,6 @@
 #include "chrome/common/chrome_paths.h"
 #include "chrome/common/chrome_result_codes.h"
 #include "chrome/common/chrome_switches.h"
-#include "chrome/common/crash_keys.h"
 #include "chrome/common/env_vars.h"
 #include "chrome/common/logging_chrome.h"
 #include "chrome/common/media/media_resource_provider.h"
@@ -112,7 +111,6 @@
 #include "chrome/common/profiler/thread_profiler.h"
 #include "chrome/common/profiler/thread_profiler_configuration.h"
 #include "chrome/grit/generated_resources.h"
-#include "chrome/installer/util/google_update_settings.h"
 #include "components/device_event_log/device_event_log.h"
 #include "components/embedder_support/switches.h"
 #include "components/flags_ui/pref_service_flags_storage.h"
@@ -135,10 +133,8 @@
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_value_store.h"
 #include "components/prefs/scoped_user_pref_update.h"
-#include "components/rappor/rappor_service_impl.h"
 #include "components/site_isolation/site_isolation_policy.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
-#include "components/startup_metric_utils/browser/startup_metric_utils.h"
 #include "components/tracing/common/tracing_switches.h"
 #include "components/translate/core/browser/translate_download_manager.h"
 #include "components/variations/field_trial_config/field_trial_util.h"
@@ -146,7 +142,6 @@
 #include "components/variations/service/variations_service.h"
 #include "components/variations/synthetic_trials_active_group_id_provider.h"
 #include "components/variations/variations_associated_data.h"
-#include "components/variations/variations_crash_keys.h"
 #include "components/variations/variations_ids_provider.h"
 #include "components/variations/variations_switches.h"
 #include "components/version_info/version_info.h"
@@ -190,7 +185,6 @@
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/uma_browsing_activity_observer.h"
-#include "chrome/browser/upgrade_detector/upgrade_detector.h"
 #include "chrome/browser/usb/web_usb_detector.h"
 #include "ui/base/l10n/l10n_util.h"
 #endif  // defined(OS_ANDROID)
@@ -213,11 +207,6 @@
 #include "chrome/browser/first_run/upgrade_util_linux.h"
 #endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS)
-#include "components/crash/core/app/breakpad_linux.h"
-#include "components/crash/core/app/crashpad.h"
-#endif
-
 #if defined(OS_MAC)
 #include <Security/Security.h>
 
@@ -442,10 +431,6 @@ void ProcessSingletonNotificationCallbackImpl(
 
   StartupBrowserCreator::ProcessCommandLineAlreadyRunning(
       command_line, current_directory, startup_profile_dir);
-
-  // Record now as the last successful chrome start.
-  if (ShouldRecordActiveUse(command_line))
-    GoogleUpdateSettings::SetLastRunTime();
 }
 
 bool ProcessSingletonNotificationCallback(
@@ -563,22 +548,6 @@ void ChromeBrowserMainParts::StartMetricsRecording() {
 }
 
 void ChromeBrowserMainParts::RecordBrowserStartupTime() {
-  // Don't record any metrics if UI was displayed before this point e.g.
-  // warning dialogs or browser was started in background mode.
-  if (startup_metric_utils::WasMainWindowStartupInterrupted())
-    return;
-
-  bool is_first_run = false;
-#if !defined(OS_ANDROID)
-  // On Android, first run is handled in Java code, and the C++ side of Chrome
-  // doesn't know if this is the first run. This will cause some inaccuracy in
-  // the UMA statistics, but this should be minor (first runs are rare).
-  is_first_run = first_run::IsChromeFirstRun();
-#endif  // defined(OS_ANDROID)
-
-  // Record collected startup metrics.
-  startup_metric_utils::RecordBrowserMainMessageLoopStart(
-      base::TimeTicks::Now(), is_first_run);
 }
 
 void ChromeBrowserMainParts::SetupOriginTrialsCommandLine(
@@ -718,7 +687,6 @@ void ChromeBrowserMainParts::PostMainMessageLoopStart() {
 #if !defined(OS_ANDROID)
   // Initialize the upgrade detector here after ChromeBrowserMainPartsChromeos
   // has had a chance to connect the DBus services.
-  UpgradeDetector::GetInstance()->Init();
 #endif
 
   ThreadProfiler::SetMainThreadTaskRunner(base::ThreadTaskRunnerHandle::Get());
@@ -774,21 +742,6 @@ int ChromeBrowserMainParts::OnLocalStateLoaded(
   if (!base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir_))
     return chrome::RESULT_CODE_MISSING_DATA;
 
-#if defined(OS_WIN)
-  if (first_run::IsChromeFirstRun()) {
-    bool stats_default;
-    if (GoogleUpdateSettings::GetCollectStatsConsentDefault(&stats_default)) {
-      // |stats_default| == true means that the default state of consent for the
-      // product at the time of install was to report usage statistics, meaning
-      // "opt-out".
-      metrics::RecordMetricsReportingDefaultState(
-          browser_process_->local_state(),
-          stats_default ? metrics::EnableMetricsDefault::OPT_OUT
-                        : metrics::EnableMetricsDefault::OPT_IN);
-    }
-  }
-#endif  // defined(OS_WIN)
-
   std::string locale =
       startup_data_->chrome_feature_list_creator()->actual_locale();
   if (locale.empty()) {
@@ -803,9 +756,6 @@ int ChromeBrowserMainParts::OnLocalStateLoaded(
 
   SetupOriginTrialsCommandLine(browser_process_->local_state());
 
-  metrics::EnableExpiryChecker(chrome_metrics::kExpiredHistogramsHashes,
-                               chrome_metrics::kNumExpiredHistograms);
-
   return content::RESULT_CODE_NORMAL_EXIT;
 }
 
@@ -910,11 +860,6 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   base::trace_event::TraceEventETWExport::EnableETWExport();
 #endif  // OS_WIN
 
-  // Reset the command line in the crash report details, since we may have
-  // just changed it to include experiments.
-  crash_keys::SetCrashKeysFromCommandLine(
-      *base::CommandLine::ForCurrentProcess());
-
   browser_process_->browser_policy_connector()->OnResourceBundleCreated();
 
 // Android does first run in Java instead of native.
@@ -939,13 +884,6 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   }
 #endif  // !defined(OS_ANDROID) && !defined(OS_CHROMEOS)
 
-#if defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_OPENBSD)
-  // Set the product channel for crash reports.
-  if (!crash_reporter::IsCrashpadEnabled()) {
-    breakpad::SetChannelCrashKey(chrome::GetChannelName());
-  }
-#endif  // defined(OS_LINUX) || defined(OS_CHROMEOS) || defined(OS_OPENBSD)
-
 #if defined(OS_MAC)
   // Get the Keychain API to register for distributed notifications on the main
   // thread, which has a proper CFRunloop, instead of later on the I/O thread,
@@ -956,15 +894,6 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   SecKeychainAddCallback(&KeychainCallback, 0, nullptr);
 #endif  // defined(OS_MAC)
 
-#if defined(OS_WIN) || defined(OS_MAC) || \
-    (defined(OS_LINUX) && !defined(OS_CHROMEOS))
-  metrics::DesktopSessionDurationTracker::Initialize();
-  ProfileActivityMetricsRecorder::Initialize();
-  TouchModeStatsTracker::Initialize(
-      metrics::DesktopSessionDurationTracker::Get(),
-      ui::TouchUiController::Get());
-#endif
-  metrics::RendererUptimeTracker::Initialize();
 
   // Add Site Isolation switches as dictated by policy.
   auto* command_line = base::CommandLine::ForCurrentProcess();
@@ -994,12 +923,6 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   // this.
   browser_process_->PreCreateThreads(parsed_command_line());
 
-  // This must occur in PreCreateThreads() because it initializes global state
-  // which is then read by all threads without synchronization. It must be after
-  // browser_process_->PreCreateThreads() as that instantiates the IOThread
-  // which is used in SetupMetrics().
-  SetupMetrics();
-
   return content::RESULT_CODE_NORMAL_EXIT;
 }
 
@@ -1090,12 +1013,6 @@ void ChromeBrowserMainParts::PreBrowserStart() {
   // other services to start up before we start adjusting the oom priority.
   g_browser_process->GetTabManager()->Start();
 #endif
-
-  // The RulesetService will make the filtering rules available to renderers
-  // immediately after its construction, provided that the rules are already
-  // available at no cost in an indexed format. This enables activating
-  // subresource filtering, if needed, also for page loads on start-up.
-  g_browser_process->subresource_filter_ruleset_service();
 }
 
 void ChromeBrowserMainParts::PostBrowserStart() {
@@ -1121,10 +1038,6 @@ void ChromeBrowserMainParts::PostBrowserStart() {
                    base::BindOnce(&WebUsbDetector::Initialize,
                                   base::Unretained(web_usb_detector_.get())));
   }
-  if (base::FeatureList::IsEnabled(features::kTabMetricsLogging)) {
-    // Initialize the TabActivityWatcher to begin logging tab activity events.
-    resource_coordinator::TabActivityWatcher::GetInstance();
-  }
 #endif
 
   // At this point, StartupBrowserCreator::Start has run creating initial
@@ -1150,9 +1063,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   InitializeWinParentalControls();
 #endif
 
-  // Now that the file thread has been started, start metrics.
-  StartMetricsRecording();
-
   if (!base::debug::BeingDebugged()) {
     // Create watchdog thread after creating all other threads because it will
     // watch the other threads and they must be running.
@@ -1163,9 +1073,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   // running.
   browser_process_->PreMainMessageLoopRun();
 
-  // Record last shutdown time into a histogram.
-  browser_shutdown::ReadLastShutdownInfo();
-
 #if defined(OS_WIN)
   // On Windows, we use our startup as an opportunity to do upgrade/uninstall
   // tasks.  Those care whether the browser is already running.  On Linux/Mac,
@@ -1437,8 +1344,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   // and preferences have been registered since some of the import code depends
   // on preferences.
   if (first_run::IsChromeFirstRun()) {
-    first_run::AutoImport(profile_, master_prefs_->import_bookmarks_path);
-
     // Note: This can pop-up the first run consent dialog on Linux & Mac.
     first_run::DoPostImportTasks(profile_,
                                  master_prefs_->make_chrome_default_for_user);
@@ -1528,13 +1433,7 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
 #endif
 
   HandleTestParameters(parsed_command_line());
-  browser_process_->metrics_service()->RecordBreakpadHasDebugger(
-      base::debug::BeingDebugged());
 
-  language_usage_metrics::LanguageUsageMetrics::RecordAcceptLanguages(
-      profile_->GetPrefs()->GetString(language::prefs::kAcceptLanguages));
-  language_usage_metrics::LanguageUsageMetrics::RecordApplicationLanguage(
-      browser_process_->GetApplicationLocale());
 // On ChromeOS results in a crash. https://crbug.com/1151558
 #if !defined(OS_CHROMEOS)
   language_usage_metrics::LanguageUsageMetrics::RecordPageLanguages(
@@ -1642,10 +1541,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
     upgrade_util::SaveLastModifiedTimeOfExe();
 #endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
 
-    // Record now as the last successful chrome start.
-    if (ShouldRecordActiveUse(parsed_command_line()))
-      GoogleUpdateSettings::SetLastRunTime();
-
 #if defined(OS_MAC)
     // Call Recycle() here as late as possible, before going into the loop
     // because Start() will add things to it while creating the main window.
@@ -1677,15 +1572,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   downgrade_manager_.DeleteMovedUserDataSoon(user_data_dir_);
 #endif
 
-#if defined(OS_ANDROID)
-  // We never run the C++ main loop on Android, since the UI thread message
-  // loop is controlled by the OS, so this is as close as we can get to
-  // the start of the main loop.
-  if (result_code_ <= 0) {
-    RecordBrowserStartupTime();
-  }
-#endif  // defined(OS_ANDROID)
-
   return result_code_;
 }
 
@@ -1705,10 +1591,6 @@ bool ChromeBrowserMainParts::MainMessageLoopRun(int* result_code) {
   if (!run_message_loop_)
     return true;  // Don't run the default message loop.
 
-  // These should be invoked as close to the start of the browser's
-  // UI thread message loop as possible to get a stable measurement
-  // across versions.
-  RecordBrowserStartupTime();
 
   DCHECK(base::CurrentUIThread::IsSet());
 
@@ -1729,7 +1611,6 @@ void ChromeBrowserMainParts::PostMainMessageLoopRun() {
 #else
   // Shutdown the UpgradeDetector here before ChromeBrowserMainPartsChromeos
   // disconnects DBus services in its PostDestroyThreads.
-  UpgradeDetector::GetInstance()->Shutdown();
 
   // Start watching for jank during shutdown. It gets disarmed when
   // |shutdown_watcher_| object is destructed.
