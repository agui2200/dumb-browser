diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index c832319917cb0..aa14997f55037 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -69,15 +69,11 @@
 #include "chrome/browser/media/webrtc/webrtc_log_util.h"
 #include "chrome/browser/metrics/chrome_feature_list_creator.h"
 #include "chrome/browser/metrics/chrome_metrics_service_accessor.h"
-#include "chrome/browser/metrics/expired_histograms_array.h"
-#include "chrome/browser/metrics/renderer_uptime_tracker.h"
-#include "chrome/browser/metrics/thread_watcher.h"
 #include "chrome/browser/nacl_host/nacl_browser_delegate_impl.h"
 #include "chrome/browser/net/system_network_context_manager.h"
 #include "chrome/browser/policy/chrome_browser_policy_connector.h"
 #include "chrome/browser/prefs/chrome_command_line_pref_store.h"
 #include "chrome/browser/prefs/chrome_pref_service_factory.h"
-#include "chrome/browser/prefs/pref_metrics_service.h"
 #include "chrome/browser/process_singleton.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_attributes_entry.h"
@@ -109,25 +105,16 @@
 #include "chrome/common/media/media_resource_provider.h"
 #include "chrome/common/net/net_resource_provider.h"
 #include "chrome/common/pref_names.h"
-#include "chrome/common/profiler/thread_profiler.h"
-#include "chrome/common/profiler/thread_profiler_configuration.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
-#include "chrome/installer/util/google_update_settings.h"
 #include "components/device_event_log/device_event_log.h"
 #include "components/embedder_support/origin_trials/pref_names.h"
 #include "components/embedder_support/switches.h"
 #include "components/flags_ui/pref_service_flags_storage.h"
 #include "components/google/core/common/google_util.h"
 #include "components/language/content/browser/geo_language_provider.h"
-#include "components/language/core/browser/language_usage_metrics.h"
 #include "components/language/core/browser/pref_names.h"
 #include "components/language/core/common/language_experiments.h"
-#include "components/metrics/call_stack_profile_metrics_provider.h"
-#include "components/metrics/call_stack_profile_params.h"
-#include "components/metrics/clean_exit_beacon.h"
-#include "components/metrics/expired_histogram_util.h"
-#include "components/metrics/metrics_reporting_default_state.h"
 #include "components/metrics/metrics_service.h"
 #include "components/metrics_services_manager/metrics_services_manager.h"
 #include "components/nacl/browser/nacl_browser.h"
@@ -140,7 +127,6 @@
 #include "components/prefs/scoped_user_pref_update.h"
 #include "components/site_isolation/site_isolation_policy.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
-#include "components/startup_metric_utils/browser/startup_metric_utils.h"
 #include "components/tracing/common/tracing_switches.h"
 #include "components/translate/core/browser/translate_download_manager.h"
 #include "components/variations/field_trial_config/field_trial_util.h"
@@ -176,7 +162,6 @@
 #include "ppapi/buildflags/buildflags.h"
 #include "printing/buildflags/buildflags.h"
 #include "rlz/buildflags/buildflags.h"
-#include "services/tracing/public/cpp/stack_sampling/tracing_sampler_profiler.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/layout.h"
 #include "ui/base/resource/resource_bundle.h"
@@ -193,7 +178,6 @@
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/uma_browsing_activity_observer.h"
-#include "chrome/browser/upgrade_detector/upgrade_detector.h"
 #include "chrome/browser/usb/web_usb_detector.h"
 #include "components/soda/soda_installer.h"
 #endif  // defined(OS_ANDROID)
@@ -212,7 +196,6 @@
 #include "chrome/browser/ash/settings/stats_reporting_controller.h"
 #include "chrome/browser/chromeos/policy/browser_policy_connector_chromeos.h"
 #include "chromeos/settings/cros_settings_names.h"
-#include "components/arc/metrics/stability_metrics_manager.h"
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 
 // TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
@@ -466,10 +449,6 @@ void ProcessSingletonNotificationCallbackImpl(
 
   StartupBrowserCreator::ProcessCommandLineAlreadyRunning(
       command_line, current_directory, startup_profile_dir);
-
-  // Record now as the last successful chrome start.
-  if (ShouldRecordActiveUse(command_line))
-    GoogleUpdateSettings::SetLastRunTime();
 }
 
 bool ProcessSingletonNotificationCallback(
@@ -514,10 +493,6 @@ ChromeBrowserMainParts::ChromeBrowserMainParts(
   // If we're running tests (ui_task is non-null).
   if (parameters.ui_task)
     browser_defaults::enable_help_app = false;
-
-#if !defined(OS_ANDROID)
-  shutdown_watcher_ = std::make_unique<ShutdownWatcherHelper>();
-#endif  // !defined(OS_ANDROID)
 }
 
 ChromeBrowserMainParts::~ChromeBrowserMainParts() {
@@ -526,73 +501,6 @@ ChromeBrowserMainParts::~ChromeBrowserMainParts() {
     chrome_extra_parts_.pop_back();
 }
 
-void ChromeBrowserMainParts::SetupMetrics() {
-  TRACE_EVENT0("startup", "ChromeBrowserMainParts::SetupMetrics");
-  metrics::MetricsService* metrics = browser_process_->metrics_service();
-  metrics->synthetic_trial_registry()->AddSyntheticTrialObserver(
-      variations::VariationsIdsProvider::GetInstance());
-  metrics->synthetic_trial_registry()->AddSyntheticTrialObserver(
-      variations::SyntheticTrialsActiveGroupIdProvider::GetInstance());
-  // Now that field trials have been created, initializes metrics recording.
-  metrics->InitializeMetricsRecordingState();
-
-  startup_data_->chrome_feature_list_creator()
-      ->browser_field_trials()
-      ->RegisterSyntheticTrials();
-}
-
-// static
-void ChromeBrowserMainParts::StartMetricsRecording() {
-  TRACE_EVENT0("startup", "ChromeBrowserMainParts::StartMetricsRecording");
-
-  // Register a synthetic field trial for the sampling profiler configuration
-  // that was already chosen.
-  std::string trial_name, group_name;
-  if (ThreadProfilerConfiguration::Get()->GetSyntheticFieldTrial(&trial_name,
-                                                                 &group_name)) {
-    ChromeMetricsServiceAccessor::RegisterSyntheticFieldTrial(trial_name,
-                                                              group_name);
-  }
-
-#if defined(OS_ANDROID)
-  // Android updates the metrics service dynamically depending on whether the
-  // application is in the foreground or not. Do not start here unless
-  // kUmaBackgroundSessions is enabled.
-  if (!base::FeatureList::IsEnabled(chrome::android::kUmaBackgroundSessions))
-    return;
-#endif
-
-  g_browser_process->metrics_service()->CheckForClonedInstall();
-
-#if defined(OS_WIN)
-  // The last live timestamp is used to assess whether a browser crash occurred
-  // due to a full system crash. Update the last live timestamp on a slow
-  // schedule to get the bast possible accuracy for the assessment.
-  g_browser_process->metrics_service()->StartUpdatingLastLiveTimestamp();
-#endif
-
-  g_browser_process->GetMetricsServicesManager()->UpdateUploadPermissions(true);
-}
-
-void ChromeBrowserMainParts::RecordBrowserStartupTime() {
-  // Don't record any metrics if UI was displayed before this point e.g.
-  // warning dialogs or browser was started in background mode.
-  if (startup_metric_utils::WasMainWindowStartupInterrupted())
-    return;
-
-  bool is_first_run = false;
-#if !defined(OS_ANDROID)
-  // On Android, first run is handled in Java code, and the C++ side of Chrome
-  // doesn't know if this is the first run. This will cause some inaccuracy in
-  // the UMA statistics, but this should be minor (first runs are rare).
-  is_first_run = first_run::IsChromeFirstRun();
-#endif  // defined(OS_ANDROID)
-
-  // Record collected startup metrics.
-  startup_metric_utils::RecordBrowserMainMessageLoopStart(
-      base::TimeTicks::Now(), is_first_run);
-}
-
 void ChromeBrowserMainParts::SetupOriginTrialsCommandLine(
     PrefService* local_state) {
   // TODO(crbug.com/1211739): Temporary workaround to prevent an overly large
@@ -747,14 +655,6 @@ void ChromeBrowserMainParts::PreCreateMainMessageLoop() {
 void ChromeBrowserMainParts::PostCreateMainMessageLoop() {
   TRACE_EVENT0("startup", "ChromeBrowserMainParts::PostCreateMainMessageLoop");
 
-#if !defined(OS_ANDROID)
-  // Initialize the upgrade detector here after ChromeBrowserMainPartsChromeos
-  // has had a chance to connect the DBus services.
-  UpgradeDetector::GetInstance()->Init();
-#endif
-
-  ThreadProfiler::SetMainThreadTaskRunner(base::ThreadTaskRunnerHandle::Get());
-
   // TODO(sebmarchand): Allow this to be created earlier if startup tracing is
   // enabled.
   trace_event_system_stats_monitor_ =
@@ -804,21 +704,6 @@ int ChromeBrowserMainParts::OnLocalStateLoaded(
   if (!base::PathService::Get(chrome::DIR_USER_DATA, &user_data_dir_))
     return chrome::RESULT_CODE_MISSING_DATA;
 
-#if defined(OS_WIN)
-  if (first_run::IsChromeFirstRun()) {
-    bool stats_default;
-    if (GoogleUpdateSettings::GetCollectStatsConsentDefault(&stats_default)) {
-      // |stats_default| == true means that the default state of consent for the
-      // product at the time of install was to report usage statistics, meaning
-      // "opt-out".
-      metrics::RecordMetricsReportingDefaultState(
-          browser_process_->local_state(),
-          stats_default ? metrics::EnableMetricsDefault::OPT_OUT
-                        : metrics::EnableMetricsDefault::OPT_IN);
-    }
-  }
-#endif  // defined(OS_WIN)
-
   std::string locale =
       startup_data_->chrome_feature_list_creator()->actual_locale();
   if (locale.empty()) {
@@ -833,9 +718,6 @@ int ChromeBrowserMainParts::OnLocalStateLoaded(
 
   SetupOriginTrialsCommandLine(browser_process_->local_state());
 
-  metrics::EnableExpiryChecker(chrome_metrics::kExpiredHistogramsHashes,
-                               chrome_metrics::kNumExpiredHistograms);
-
   return content::RESULT_CODE_NORMAL_EXIT;
 }
 
@@ -987,18 +869,6 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   SecKeychainAddCallback(&KeychainCallback, 0, nullptr);
 #endif  // defined(OS_MAC)
 
-// TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
-// of lacros-chrome is complete.
-#if defined(OS_WIN) || defined(OS_MAC) || \
-    (defined(OS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS))
-  metrics::DesktopSessionDurationTracker::Initialize();
-  ProfileActivityMetricsRecorder::Initialize();
-  TouchModeStatsTracker::Initialize(
-      metrics::DesktopSessionDurationTracker::Get(),
-      ui::TouchUiController::Get());
-#endif
-  metrics::RendererUptimeTracker::Initialize();
-
   // Add Site Isolation switches as dictated by policy.
   auto* command_line = base::CommandLine::ForCurrentProcess();
   if (local_state->GetBoolean(prefs::kSitePerProcess) &&
@@ -1027,34 +897,10 @@ int ChromeBrowserMainParts::PreCreateThreadsImpl() {
   // this.
   browser_process_->PreCreateThreads(parsed_command_line());
 
-  // This must occur in PreCreateThreads() because it initializes global state
-  // which is then read by all threads without synchronization. It must be after
-  // browser_process_->PreCreateThreads() as that instantiates the IOThread
-  // which is used in SetupMetrics().
-  SetupMetrics();
-
   return content::RESULT_CODE_NORMAL_EXIT;
 }
 
 void ChromeBrowserMainParts::PostCreateThreads() {
-  // This task should be posted after the IO thread starts, and prior to the
-  // base version of the function being invoked. It is functionally okay to post
-  // this task in method ChromeBrowserMainParts::BrowserThreadsStarted() which
-  // we also need to add in this class, and call this method at the very top of
-  // BrowserMainLoop::InitializeMainThread(). PostCreateThreads is preferred to
-  // BrowserThreadsStarted as it matches the PreCreateThreads and CreateThreads
-  // stages.
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&ThreadProfiler::StartOnChildThread,
-                                metrics::CallStackProfileParams::IO_THREAD));
-// Sampling multiple threads might cause overhead on Android and we don't want
-// to enable it unless the data is needed.
-#if !defined(OS_ANDROID)
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(&tracing::TracingSamplerProfiler::CreateOnChildThread));
-#endif
-
   tracing::SetupBackgroundTracingFieldTrial();
 
   for (size_t i = 0; i < chrome_extra_parts_.size(); ++i)
@@ -1132,12 +978,6 @@ void ChromeBrowserMainParts::PreBrowserStart() {
 #if BUILDFLAG(ENABLE_PAK_FILE_INTEGRITY_CHECKS)
   CheckPakFileIntegrity();
 #endif
-
-  // The RulesetService will make the filtering rules available to renderers
-  // immediately after its construction, provided that the rules are already
-  // available at no cost in an indexed format. This enables activating
-  // subresource filtering, if needed, also for page loads on start-up.
-  g_browser_process->subresource_filter_ruleset_service();
 }
 
 void ChromeBrowserMainParts::PostBrowserStart() {
@@ -1163,10 +1003,6 @@ void ChromeBrowserMainParts::PostBrowserStart() {
                    base::BindOnce(&WebUsbDetector::Initialize,
                                   base::Unretained(web_usb_detector_.get())));
   }
-  if (base::FeatureList::IsEnabled(features::kTabMetricsLogging)) {
-    // Initialize the TabActivityWatcher to begin logging tab activity events.
-    resource_coordinator::TabActivityWatcher::GetInstance();
-  }
 #endif
 
   // At this point, StartupBrowserCreator::Start has run creating initial
@@ -1188,22 +1024,10 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   InitializeWinParentalControls();
 #endif
 
-  // Now that the file thread has been started, start metrics.
-  StartMetricsRecording();
-
-  if (!base::debug::BeingDebugged()) {
-    // Create watchdog thread after creating all other threads because it will
-    // watch the other threads and they must be running.
-    browser_process_->watchdog_thread();
-  }
-
   // Do any initializating in the browser process that requires all threads
   // running.
   browser_process_->PreMainMessageLoopRun();
 
-  // Record last shutdown time into a histogram.
-  browser_shutdown::ReadLastShutdownInfo();
-
 #if defined(OS_WIN)
   // On Windows, we use our startup as an opportunity to do upgrade/uninstall
   // tasks.  Those care whether the browser is already running.  On Linux/Mac,
@@ -1261,9 +1085,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   // 20 seconds to respond. Note that this needs to be done before we attempt
   // to read the profile.
   notify_result_ = process_singleton_->NotifyOtherProcessOrCreate();
-  UMA_HISTOGRAM_ENUMERATION("Chrome.ProcessSingleton.NotifyResult",
-                            notify_result_,
-                            ProcessSingleton::kNumNotifyResults);
   switch (notify_result_) {
     case ProcessSingleton::PROCESS_NONE:
       // No process already running, fall through to starting a new one.
@@ -1571,29 +1392,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
 
   HandleTestParameters(parsed_command_line());
 
-  language::LanguageUsageMetrics::RecordAcceptLanguages(
-      profile_->GetPrefs()->GetString(language::prefs::kAcceptLanguages));
-  language::LanguageUsageMetrics::RecordApplicationLanguage(
-      browser_process_->GetApplicationLocale());
-// On ChromeOS results in a crash. https://crbug.com/1151558
-#if !BUILDFLAG(IS_CHROMEOS_ASH)
-  language::LanguageUsageMetrics::RecordPageLanguages(
-      *UrlLanguageHistogramFactory::GetForBrowserContext(profile_));
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
-
-// On mobile, need for clean shutdown arises only when the application comes
-// to foreground (i.e. MetricsService::OnAppEnterForeground is called).
-// http://crbug.com/179143
-#if !defined(OS_ANDROID)
-  // Start watching for a hang.
-  //
-  // TODO(b/184937096): Remove the below call and remove the function
-  // MetricsService::LogNeedForCleanShutdown() once this is moved earlier. It
-  // is being kept here for the time being for the control group of the
-  // extended Variations Safe Mode experiment.
-  browser_process_->metrics_service()->LogNeedForCleanShutdown();
-#endif  // !defined(OS_ANDROID)
-
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW) && !BUILDFLAG(IS_CHROMEOS_ASH)
   // Create the instance of the cloud print proxy service so that it can launch
   // the service process if needed. This is needed because the service process
@@ -1604,13 +1402,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   CloudPrintProxyServiceFactory::GetForProfile(profile_);
 #endif
 
-  // Two different types of hang detection cannot attempt to upload crashes at
-  // the same time or they would interfere with each other.
-  if (!base::HangWatcher::IsCrashReportingEnabled()) {
-    // Start watching all browser threads for responsiveness.
-    ThreadWatcherList::StartWatchingAll(parsed_command_line());
-  }
-
   // This has to come before the first GetInstance() call. PreBrowserStart()
   // seems like a reasonable place to put this, except on Android,
   // OfflinePageInfoHandler::Register() below calls GetInstance().
@@ -1634,9 +1425,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
                         base::BindOnce(nacl::NaClProcessHost::EarlyStartup));
 #endif  // BUILDFLAG(ENABLE_NACL)
 
-  // Make sure initial prefs are recorded
-  PrefMetricsService::Factory::GetForProfile(profile_);
-
   PreBrowserStart();
 
   if (!parsed_command_line().HasSwitch(switches::kDisableComponentUpdate)) {
@@ -1709,10 +1497,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
     upgrade_util::SaveLastModifiedTimeOfExe();
 #endif  // defined(OS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
 
-    // Record now as the last successful chrome start.
-    if (ShouldRecordActiveUse(parsed_command_line()))
-      GoogleUpdateSettings::SetLastRunTime();
-
 #if defined(OS_MAC)
     // Call Recycle() here as late as possible, before going into the loop
     // because Start() will add things to it while creating the main window.
@@ -1745,15 +1529,6 @@ int ChromeBrowserMainParts::PreMainMessageLoopRunImpl() {
   downgrade_manager_.DeleteMovedUserDataSoon(user_data_dir_);
 #endif
 
-#if defined(OS_ANDROID)
-  // We never run the C++ main loop on Android, since the UI thread message
-  // loop is controlled by the OS, so this is as close as we can get to
-  // the start of the main loop.
-  if (result_code_ <= 0) {
-    RecordBrowserStartupTime();
-  }
-#endif  // defined(OS_ANDROID)
-
   return result_code_;
 }
 
@@ -1769,10 +1544,6 @@ void ChromeBrowserMainParts::WillRunMainMessageLoop(
     return;
   }
 
-  // These should be invoked as close to the start of the browser's
-  // UI thread message loop as possible to get a stable measurement
-  // across versions.
-  RecordBrowserStartupTime();
 
   DCHECK(base::CurrentUIThread::IsSet());
 
@@ -1788,7 +1559,6 @@ void ChromeBrowserMainParts::WillRunMainMessageLoop(
 }
 
 void ChromeBrowserMainParts::OnFirstIdle() {
-  startup_metric_utils::RecordBrowserMainLoopFirstIdle(base::TimeTicks::Now());
 #if defined(OS_ANDROID)
   sharing::ShareHistory::CreateForProfile(profile_);
 #endif
@@ -1805,11 +1575,6 @@ void ChromeBrowserMainParts::PostMainMessageLoopRun() {
 #else
   // Shutdown the UpgradeDetector here before ChromeBrowserMainPartsChromeos
   // disconnects DBus services in its PostDestroyThreads.
-  UpgradeDetector::GetInstance()->Shutdown();
-
-  // Start watching for jank during shutdown. It gets disarmed when
-  // |shutdown_watcher_| object is destructed.
-  shutdown_watcher_->Arm(base::TimeDelta::FromSeconds(300));
 
   web_usb_detector_.reset();
 
@@ -1824,9 +1589,6 @@ void ChromeBrowserMainParts::PostMainMessageLoopRun() {
   if (notify_result_ == ProcessSingleton::PROCESS_NONE)
     process_singleton_->Cleanup();
 
-  // Stop all tasks that might run on WatchDogThread.
-  ThreadWatcherList::StopWatchingAll();
-
   browser_process_->metrics_service()->Stop();
 
   restart_last_session_ = browser_shutdown::ShutdownPreThreadsStop();
@@ -1855,17 +1617,6 @@ void ChromeBrowserMainParts::PostDestroyThreads() {
 
   browser_process_->PostDestroyThreads();
 
-  // We need to do this check as late as possible, but due to modularity, this
-  // may be the last point in Chrome. This would be more effective if done at a
-  // higher level on the stack, so that it is impossible for an early return to
-  // bypass this code. Perhaps we need a *final* hook that is called on all
-  // paths from content/browser/browser_main.
-  //
-  // Since we use |browser_process_|'s local state for this CHECK, it must be
-  // done before |browser_process_| is released.
-  metrics::CleanExitBeacon::EnsureCleanShutdown(
-      browser_process_->local_state());
-
   // The below call to browser_shutdown::ShutdownPostThreadsStop() deletes
   // |browser_process_|. We release it so that we don't keep holding onto an
   // invalid reference.
