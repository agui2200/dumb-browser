diff --git a/content/gpu/gpu_child_thread.cc b/content/gpu/gpu_child_thread.cc
index 371ba6406e1b..3bcad1d7de3d 100644
--- a/content/gpu/gpu_child_thread.cc
+++ b/content/gpu/gpu_child_thread.cc
@@ -35,10 +35,7 @@
 #include "mojo/public/cpp/bindings/binder_map.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
-#include "mojo/public/cpp/bindings/scoped_message_error_crash_key.h"
 #include "mojo/public/cpp/system/functions.h"
-#include "services/metrics/public/cpp/mojo_ukm_recorder.h"
-#include "services/metrics/public/mojom/ukm_interface.mojom.h"
 #include "services/service_manager/public/cpp/binder_registry.h"
 #include "services/viz/privileged/mojom/gl/gpu_service.mojom.h"
 #include "third_party/skia/include/core/SkGraphics.h"
@@ -54,7 +51,6 @@ namespace {
 // Called when the GPU process receives a bad IPC message.
 void HandleBadMessage(const std::string& error) {
   LOG(ERROR) << "Mojo error in GPU process: " << error;
-  mojo::debug::ScopedMessageErrorCrashKey crash_key_value(error);
   base::debug::DumpWithoutCrashing();
 }
 
@@ -84,11 +80,6 @@ viz::VizMainImpl::ExternalDependencies CreateVizMainDependencies() {
   deps.shutdown_event = process->GetShutDownEvent();
   deps.io_thread_task_runner = process->io_task_runner();
 
-  mojo::PendingRemote<ukm::mojom::UkmRecorderInterface> ukm_recorder;
-  ChildThread::Get()->BindHostReceiver(
-      ukm_recorder.InitWithNewPipeAndPassReceiver());
-  deps.ukm_recorder =
-      std::make_unique<ukm::MojoUkmRecorder>(std::move(ukm_recorder));
   return deps;
 }
 
