diff --git a/components/javascript_dialogs/tab_modal_dialog_manager.cc b/components/javascript_dialogs/tab_modal_dialog_manager.cc
index 6890e2a7f65a2..6578218572095 100644
--- a/components/javascript_dialogs/tab_modal_dialog_manager.cc
+++ b/components/javascript_dialogs/tab_modal_dialog_manager.cc
@@ -14,13 +14,9 @@
 #include "base/strings/stringprintf.h"
 #include "components/javascript_dialogs/app_modal_dialog_manager.h"
 #include "components/javascript_dialogs/tab_modal_dialog_view.h"
-#include "components/navigation_metrics/navigation_metrics.h"
-#include "components/ukm/content/source_url_recorder.h"
 #include "content/public/browser/devtools_agent_host.h"
 #include "content/public/browser/navigation_handle.h"
 #include "content/public/browser/render_frame_host.h"
-#include "services/metrics/public/cpp/ukm_builders.h"
-#include "services/metrics/public/cpp/ukm_recorder.h"
 #include "ui/gfx/text_elider.h"
 
 namespace javascript_dialogs {
@@ -65,50 +61,6 @@ enum class DialogOriginRelationship {
   COUNT,
 };
 
-DialogOriginRelationship GetDialogOriginRelationship(
-    content::WebContents* web_contents,
-    content::RenderFrameHost* alerting_frame) {
-  GURL main_frame_url = web_contents->GetLastCommittedURL();
-
-  if (!main_frame_url.SchemeIsHTTPOrHTTPS())
-    return DialogOriginRelationship::NON_HTTP_MAIN_FRAME;
-
-  if (alerting_frame == web_contents->GetMainFrame())
-    return DialogOriginRelationship::HTTP_MAIN_FRAME;
-
-  GURL alerting_frame_url = alerting_frame->GetLastCommittedURL();
-
-  if (alerting_frame_url.SchemeIsHTTPOrHTTPS()) {
-    if (main_frame_url.GetOrigin() == alerting_frame_url.GetOrigin()) {
-      return DialogOriginRelationship::
-          HTTP_MAIN_FRAME_HTTP_SAME_ORIGIN_ALERTING_FRAME;
-    }
-    return DialogOriginRelationship::
-        HTTP_MAIN_FRAME_HTTP_DIFFERENT_ORIGIN_ALERTING_FRAME;
-  }
-
-  // Walk up the tree to find the nearest ancestor frame of the alerting frame
-  // that has an HTTP(S) scheme. Note that this is guaranteed to terminate
-  // because the main frame has an HTTP(S) scheme.
-  content::RenderFrameHost* nearest_http_ancestor_frame =
-      alerting_frame->GetParent();
-  while (!nearest_http_ancestor_frame->GetLastCommittedURL()
-              .SchemeIsHTTPOrHTTPS()) {
-    nearest_http_ancestor_frame = nearest_http_ancestor_frame->GetParent();
-  }
-
-  GURL nearest_http_ancestor_frame_url =
-      nearest_http_ancestor_frame->GetLastCommittedURL();
-
-  if (main_frame_url.GetOrigin() ==
-      nearest_http_ancestor_frame_url.GetOrigin()) {
-    return DialogOriginRelationship::
-        HTTP_MAIN_FRAME_NON_HTTP_ALERTING_FRAME_SAME_ORIGIN_ANCESTOR;
-  }
-  return DialogOriginRelationship::
-      HTTP_MAIN_FRAME_NON_HTTP_ALERTING_FRAME_DIFFERENT_ORIGIN_ANCESTOR;
-}
-
 }  // namespace
 
 TabModalDialogManager::~TabModalDialogManager() {
@@ -161,33 +113,6 @@ void TabModalDialogManager::RunJavaScriptDialog(
   GURL alerting_frame_url = render_frame_host->GetLastCommittedURL();
 
   content::WebContents* web_contents = WebContentsObserver::web_contents();
-  DialogOriginRelationship origin_relationship =
-      GetDialogOriginRelationship(alerting_web_contents, render_frame_host);
-  navigation_metrics::Scheme scheme =
-      navigation_metrics::GetScheme(alerting_frame_url);
-  switch (dialog_type) {
-    case content::JAVASCRIPT_DIALOG_TYPE_ALERT:
-      UMA_HISTOGRAM_ENUMERATION("JSDialogs.OriginRelationship.Alert",
-                                origin_relationship,
-                                DialogOriginRelationship::COUNT);
-      UMA_HISTOGRAM_ENUMERATION("JSDialogs.Scheme.Alert", scheme,
-                                navigation_metrics::Scheme::COUNT);
-      break;
-    case content::JAVASCRIPT_DIALOG_TYPE_CONFIRM:
-      UMA_HISTOGRAM_ENUMERATION("JSDialogs.OriginRelationship.Confirm",
-                                origin_relationship,
-                                DialogOriginRelationship::COUNT);
-      UMA_HISTOGRAM_ENUMERATION("JSDialogs.Scheme.Confirm", scheme,
-                                navigation_metrics::Scheme::COUNT);
-      break;
-    case content::JAVASCRIPT_DIALOG_TYPE_PROMPT:
-      UMA_HISTOGRAM_ENUMERATION("JSDialogs.OriginRelationship.Prompt",
-                                origin_relationship,
-                                DialogOriginRelationship::COUNT);
-      UMA_HISTOGRAM_ENUMERATION("JSDialogs.Scheme.Prompt", scheme,
-                                navigation_metrics::Scheme::COUNT);
-      break;
-  }
 
   // Close any dialog already showing.
   CloseDialog(DismissalCause::kSubsequentDialogShown, false, std::u16string());
@@ -296,16 +221,6 @@ void TabModalDialogManager::RunBeforeUnloadDialog(
   DCHECK_EQ(web_contents,
             content::WebContents::FromRenderFrameHost(render_frame_host));
 
-  DialogOriginRelationship origin_relationship =
-      GetDialogOriginRelationship(web_contents, render_frame_host);
-  navigation_metrics::Scheme scheme =
-      navigation_metrics::GetScheme(render_frame_host->GetLastCommittedURL());
-  UMA_HISTOGRAM_ENUMERATION("JSDialogs.OriginRelationship.BeforeUnload",
-                            origin_relationship,
-                            DialogOriginRelationship::COUNT);
-  UMA_HISTOGRAM_ENUMERATION("JSDialogs.Scheme.BeforeUnload", scheme,
-                            navigation_metrics::Scheme::COUNT);
-
   // onbeforeunload dialogs are always handled with an app-modal dialog, because
   // - they are critical to the user not losing data
   // - they can be requested for tabs that are not foremost
@@ -364,25 +279,6 @@ TabModalDialogManager::TabModalDialogManager(
     : content::WebContentsObserver(web_contents),
       delegate_(std::move(delegate)) {}
 
-void TabModalDialogManager::LogDialogDismissalCause(DismissalCause cause) {
-  if (dialog_dismissed_)
-    std::move(dialog_dismissed_).Run(cause);
-
-  // Log to UKM.
-  //
-  // Note that this will return the outermost WebContents, not necessarily the
-  // WebContents that had the alert call in it. For 99.9999% of cases they're
-  // the same, but for instances like the <webview> tag in extensions and PDF
-  // files that alert they may differ.
-  ukm::SourceId source_id = ukm::GetSourceIdForWebContentsDocument(
-      WebContentsObserver::web_contents());
-  if (source_id != ukm::kInvalidSourceId) {
-    ukm::builders::AbusiveExperienceHeuristic_JavaScriptDialog(source_id)
-        .SetDismissalCause(static_cast<int64_t>(cause))
-        .Record(ukm::UkmRecorder::Get());
-  }
-}
-
 void TabModalDialogManager::HandleTabSwitchAway(DismissalCause cause) {
   if (!dialog_ || content::DevToolsAgentHost::IsDebuggerAttached(
                       WebContentsObserver::web_contents())) {
@@ -407,8 +303,6 @@ void TabModalDialogManager::CloseDialog(DismissalCause cause,
   if (!dialog_ && !pending_dialog_)
     return;
 
-  LogDialogDismissalCause(cause);
-
   // CloseDialog() can be called two ways. It can be called from within
   // TabModalDialogManager, in which case the dialog needs to be closed.
   // However, it can also be called, bound, from the JavaScriptDialog. In that
