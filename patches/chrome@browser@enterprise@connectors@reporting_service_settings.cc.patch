diff --git a/chrome/browser/enterprise/connectors/reporting_service_settings.cc b/chrome/browser/enterprise/connectors/reporting_service_settings.cc
index a1b619c0cfc5..0e9713ea7941 100644
--- a/chrome/browser/enterprise/connectors/reporting_service_settings.cc
+++ b/chrome/browser/enterprise/connectors/reporting_service_settings.cc
@@ -5,7 +5,6 @@
 #include "chrome/browser/enterprise/connectors/reporting_service_settings.h"
 
 #include "chrome/browser/enterprise/connectors/service_provider_config.h"
-#include "chrome/browser/extensions/api/safe_browsing_private/safe_browsing_private_event_router.h"
 #include "components/policy/core/browser/url_util.h"
 
 namespace enterprise_connectors {
@@ -32,20 +31,8 @@ ReportingServiceSettings::ReportingServiceSettings(
          enabled_event_name_list_value->GetList()) {
       if (enabled_event_name_value.is_string())
         enabled_event_names_.insert(enabled_event_name_value.GetString());
-      else
-        DVLOG(1) << "Enabled event name list contains a non string value!";
     }
   } else {
-    // When the list of enabled event names is not set, we assume all events are
-    // enabled. This is to support the feature of selecting the "All always on"
-    // option in the policy UI, which means to always enable all events, even
-    // when new events may be added in the future. And this is also to support
-    // existing customer policies that were created before we introduced the
-    // concept of enabling/disabling events.
-    for (auto* event_name :
-         extensions::SafeBrowsingPrivateEventRouter::kAllEvents) {
-      enabled_event_names_.insert(event_name);
-    }
   }
 }
 
