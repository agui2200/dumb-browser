diff --git a/third_party/blink/renderer/core/workers/dedicated_worker_thread.cc b/third_party/blink/renderer/core/workers/dedicated_worker_thread.cc
index e805e993988d..351add9b1942 100644
--- a/third_party/blink/renderer/core/workers/dedicated_worker_thread.cc
+++ b/third_party/blink/renderer/core/workers/dedicated_worker_thread.cc
@@ -34,7 +34,6 @@
 #include <utility>
 
 #include "base/memory/ptr_util.h"
-#include "services/metrics/public/cpp/ukm_source_id.h"
 #include "third_party/blink/renderer/core/dom/document.h"
 #include "third_party/blink/renderer/core/execution_context/execution_context.h"
 #include "third_party/blink/renderer/core/frame/local_frame.h"
@@ -56,10 +55,6 @@ DedicatedWorkerThread::DedicatedWorkerThread(
   worker_backing_thread_ = std::make_unique<WorkerBackingThread>(
       ThreadCreationParams(GetThreadType())
           .SetFrameOrWorkerScheduler(scheduler));
-
-  // As a dedicated worker can only be associated with one parent context,
-  // we inherit the parent's UKM source id.
-  ukm_source_id_ = parent_execution_context->UkmSourceID();
 }
 
 DedicatedWorkerThread::~DedicatedWorkerThread() = default;
@@ -71,7 +66,7 @@ void DedicatedWorkerThread::ClearWorkerBackingThread() {
 WorkerOrWorkletGlobalScope* DedicatedWorkerThread::CreateWorkerGlobalScope(
     std::unique_ptr<GlobalScopeCreationParams> creation_params) {
   return DedicatedWorkerGlobalScope::Create(std::move(creation_params), this,
-                                            time_origin_, ukm_source_id_);
+                                            time_origin_);
 }
 
 }  // namespace blink
