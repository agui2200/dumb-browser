diff --git a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
index 9351dd050ecf..da6e14c0d28b 100644
--- a/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
+++ b/chrome/browser/chrome_content_browser_client_receiver_bindings.cc
@@ -25,10 +25,8 @@
 #include "components/content_capture/browser/content_capture_receiver_manager.h"
 #include "components/data_reduction_proxy/core/browser/data_reduction_proxy_service.h"
 #include "components/data_reduction_proxy/core/common/data_reduction_proxy_params.h"
-#include "components/metrics/call_stack_profile_collector.h"
 #include "components/password_manager/content/browser/content_password_manager_driver_factory.h"
 #include "components/safe_browsing/buildflags.h"
-#include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/spellcheck/spellcheck_buildflags.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
@@ -72,43 +70,6 @@
 #endif
 #endif
 
-namespace {
-
-// Helper method for ExposeInterfacesToRenderer() that checks the latest
-// SafeBrowsing pref value on the UI thread before hopping over to the IO
-// thread.
-void MaybeCreateSafeBrowsingForRenderer(
-    int process_id,
-    content::ResourceContext* resource_context,
-    base::RepeatingCallback<scoped_refptr<safe_browsing::UrlCheckerDelegate>(
-        bool safe_browsing_enabled,
-        bool should_check_on_sb_disabled)> get_checker_delegate,
-    mojo::PendingReceiver<safe_browsing::mojom::SafeBrowsing> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  content::RenderProcessHost* render_process_host =
-      content::RenderProcessHost::FromID(process_id);
-  if (!render_process_host)
-    return;
-
-  bool safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-      *Profile::FromBrowserContext(render_process_host->GetBrowserContext())
-           ->GetPrefs());
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE,
-      base::BindOnce(
-          &safe_browsing::MojoSafeBrowsingImpl::MaybeCreate, process_id,
-          resource_context,
-          base::BindRepeating(get_checker_delegate, safe_browsing_enabled,
-                              // Navigation initiated from renderer should never
-                              // check when safe browsing is disabled, because
-                              // enterprise check only supports mainframe URL.
-                              /*should_check_on_sb_disabled=*/false),
-          std::move(receiver)));
-}
-
-}  // namespace
-
 void ChromeContentBrowserClient::ExposeInterfacesToRenderer(
     service_manager::BinderRegistry* registry,
     blink::AssociatedInterfaceRegistry* associated_registry,
@@ -123,8 +84,6 @@ void ChromeContentBrowserClient::ExposeInterfacesToRenderer(
 
   scoped_refptr<base::SingleThreadTaskRunner> ui_task_runner =
       content::GetUIThreadTaskRunner({});
-  registry->AddInterface(
-      base::BindRepeating(&metrics::CallStackProfileCollector::Create));
 
   if (NetBenchmarking::CheckBenchmarkingEnabled()) {
     Profile* profile =
@@ -290,11 +249,6 @@ void ChromeContentBrowserClient::BindBadgeServiceReceiverFromServiceWorker(
 
 void ChromeContentBrowserClient::BindGpuHostReceiver(
     mojo::GenericPendingReceiver receiver) {
-  if (auto r = receiver.As<metrics::mojom::CallStackProfileCollector>()) {
-    metrics::CallStackProfileCollector::Create(std::move(r));
-    return;
-  }
-
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   if (auto r = receiver.As<chromeos::cdm::mojom::CdmFactoryDaemon>())
     chromeos::CdmFactoryDaemonProxy::Create(std::move(r));
@@ -303,8 +257,6 @@ void ChromeContentBrowserClient::BindGpuHostReceiver(
 
 void ChromeContentBrowserClient::BindUtilityHostReceiver(
     mojo::GenericPendingReceiver receiver) {
-  if (auto r = receiver.As<metrics::mojom::CallStackProfileCollector>())
-    metrics::CallStackProfileCollector::Create(std::move(r));
 }
 
 void ChromeContentBrowserClient::BindHostReceiverForRenderer(
