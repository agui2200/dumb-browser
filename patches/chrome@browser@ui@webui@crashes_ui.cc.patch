diff --git a/chrome/browser/ui/webui/crashes_ui.cc b/chrome/browser/ui/webui/crashes_ui.cc
index 7b13ef38eddcc..4b9b51d94f4f1 100644
--- a/chrome/browser/ui/webui/crashes_ui.cc
+++ b/chrome/browser/ui/webui/crashes_ui.cc
@@ -19,7 +19,6 @@
 #include "base/values.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
-#include "chrome/browser/crash_upload_list/crash_upload_list.h"
 #include "chrome/browser/metrics/chrome_metrics_service_accessor.h"
 #include "chrome/browser/metrics/metrics_reporting_state.h"
 #include "chrome/browser/profiles/profile.h"
@@ -107,7 +106,6 @@ class CrashesDOMHandler : public WebUIMessageHandler {
   // Asynchronously requests a user triggered upload. Called from JS.
   void HandleRequestSingleCrashUpload(const base::ListValue* args);
 
-  scoped_refptr<UploadList> upload_list_;
   bool list_available_;
   bool first_load_;
 
@@ -116,16 +114,12 @@ class CrashesDOMHandler : public WebUIMessageHandler {
 
 CrashesDOMHandler::CrashesDOMHandler()
     : list_available_(false), first_load_(true) {
-  upload_list_ = CreateCrashUploadList();
 }
 
 CrashesDOMHandler::~CrashesDOMHandler() {
-  upload_list_->CancelLoadCallback();
 }
 
 void CrashesDOMHandler::RegisterMessages() {
-  upload_list_->Load(base::BindOnce(&CrashesDOMHandler::OnUploadListAvailable,
-                                    base::Unretained(this)));
   web_ui()->RegisterMessageCallback(
       crash_reporter::kCrashesUIRequestCrashList,
       base::BindRepeating(&CrashesDOMHandler::HandleRequestCrashes,
@@ -152,8 +146,6 @@ void CrashesDOMHandler::HandleRequestCrashes(const base::ListValue* args) {
       UpdateUI();
   } else {
     list_available_ = false;
-    upload_list_->Load(base::BindOnce(&CrashesDOMHandler::OnUploadListAvailable,
-                                      base::Unretained(this)));
   }
 }
 
@@ -209,17 +201,9 @@ void CrashesDOMHandler::UpdateUI() {
 
   // Manual uploads currently are supported only for Crashpad-using platforms
   // and only if crash uploads are not disabled by policy.
-  bool support_manual_uploads =
-      using_crashpad &&
-      (crash_reporting_enabled || !IsMetricsReportingPolicyManaged());
-
-  // Show crash reports regardless of |crash_reporting_enabled| when using
-  // Crashpad so that users can manually upload those reports.
-  bool upload_list = using_crashpad || crash_reporting_enabled;
+  bool support_manual_uploads = false;
 
   base::ListValue crash_list;
-  if (upload_list)
-    crash_reporter::UploadListToValue(upload_list_.get(), &crash_list);
 
   base::Value result(base::Value::Type::DICTIONARY);
   result.SetBoolPath("enabled", crash_reporting_enabled);
@@ -235,18 +219,6 @@ void CrashesDOMHandler::UpdateUI() {
 
 void CrashesDOMHandler::HandleRequestSingleCrashUpload(
     const base::ListValue* args) {
-  DCHECK(args);
-
-  std::string local_id;
-  bool success = args->GetString(0, &local_id);
-  DCHECK(success);
-
-  // Only allow manual uploads if crash uploads arenâ€™t disabled by policy.
-  if (!ChromeMetricsServiceAccessor::IsMetricsAndCrashReportingEnabled() &&
-      IsMetricsReportingPolicyManaged()) {
-    return;
-  }
-  upload_list_->RequestSingleUploadAsync(local_id);
 }
 
 }  // namespace
