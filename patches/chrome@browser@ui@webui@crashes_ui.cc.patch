diff --git a/chrome/browser/ui/webui/crashes_ui.cc b/chrome/browser/ui/webui/crashes_ui.cc
index acf4c69a9097..79a07876a3a0 100644
--- a/chrome/browser/ui/webui/crashes_ui.cc
+++ b/chrome/browser/ui/webui/crashes_ui.cc
@@ -18,7 +18,6 @@
 #include "base/system/sys_info.h"
 #include "base/values.h"
 #include "build/build_config.h"
-#include "chrome/browser/crash_upload_list/crash_upload_list.h"
 #include "chrome/browser/metrics/chrome_metrics_service_accessor.h"
 #include "chrome/browser/metrics/metrics_reporting_state.h"
 #include "chrome/browser/profiles/profile.h"
@@ -102,7 +101,6 @@ class CrashesDOMHandler : public WebUIMessageHandler {
   // Asynchronously requests a user triggered upload. Called from JS.
   void HandleRequestSingleCrashUpload(const base::ListValue* args);
 
-  scoped_refptr<UploadList> upload_list_;
   bool list_available_;
   bool first_load_;
 
@@ -111,16 +109,12 @@ class CrashesDOMHandler : public WebUIMessageHandler {
 
 CrashesDOMHandler::CrashesDOMHandler()
     : list_available_(false), first_load_(true) {
-  upload_list_ = CreateCrashUploadList();
 }
 
 CrashesDOMHandler::~CrashesDOMHandler() {
-  upload_list_->CancelLoadCallback();
 }
 
 void CrashesDOMHandler::RegisterMessages() {
-  upload_list_->Load(base::BindOnce(&CrashesDOMHandler::OnUploadListAvailable,
-                                    base::Unretained(this)));
   web_ui()->RegisterMessageCallback(
       crash_reporter::kCrashesUIRequestCrashList,
       base::BindRepeating(&CrashesDOMHandler::HandleRequestCrashes,
@@ -146,8 +140,6 @@ void CrashesDOMHandler::HandleRequestCrashes(const base::ListValue* args) {
       UpdateUI();
   } else {
     list_available_ = false;
-    upload_list_->Load(base::BindOnce(&CrashesDOMHandler::OnUploadListAvailable,
-                                      base::Unretained(this)));
   }
 }
 
@@ -209,8 +201,6 @@ void CrashesDOMHandler::UpdateUI() {
   bool upload_list = using_crashpad || crash_reporting_enabled;
 
   base::ListValue crash_list;
-  if (upload_list)
-    crash_reporter::UploadListToValue(upload_list_.get(), &crash_list);
 
   base::Value enabled(crash_reporting_enabled);
   base::Value dynamic_backend(system_crash_reporter);
@@ -245,7 +235,6 @@ void CrashesDOMHandler::HandleRequestSingleCrashUpload(
       IsMetricsReportingPolicyManaged()) {
     return;
   }
-  upload_list_->RequestSingleUploadAsync(local_id);
 }
 
 }  // namespace
