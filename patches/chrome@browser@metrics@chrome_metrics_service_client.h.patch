diff --git a/chrome/browser/metrics/chrome_metrics_service_client.h b/chrome/browser/metrics/chrome_metrics_service_client.h
index 650ea5ecdff2e..63c931da4fedb 100644
--- a/chrome/browser/metrics/chrome_metrics_service_client.h
+++ b/chrome/browser/metrics/chrome_metrics_service_client.h
@@ -17,21 +17,13 @@
 #include "base/memory/weak_ptr.h"
 #include "base/sequence_checker.h"
 #include "build/build_config.h"
-#include "chrome/browser/metrics/incognito_observer.h"
-#include "chrome/browser/metrics/metrics_memory_details.h"
-#include "chrome/browser/privacy_budget/identifiability_study_state.h"
-#include "components/metrics/file_metrics_provider.h"
-#include "components/metrics/metrics_log_uploader.h"
 #include "components/metrics/metrics_service_client.h"
 #include "components/omnibox/browser/omnibox_event_global_tracker.h"
-#include "components/ukm/observers/history_delete_observer.h"
-#include "components/ukm/observers/ukm_consent_state_observer.h"
 #include "content/public/browser/notification_observer.h"
 #include "content/public/browser/notification_registrar.h"
 #include "ppapi/buildflags/buildflags.h"
 #include "third_party/metrics_proto/system_profile.pb.h"
 
-class BrowserActivityWatcher;
 class PluginMetricsProvider;
 class Profile;
 class PrefRegistrySimple;
@@ -44,9 +36,7 @@ class MetricsStateManager;
 // ChromeMetricsServiceClient provides an implementation of MetricsServiceClient
 // that depends on chrome/.
 class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
-                                   public content::NotificationObserver,
-                                   public ukm::HistoryDeleteObserver,
-                                   public ukm::UkmConsentStateObserver {
+                                   public content::NotificationObserver {
  public:
   ~ChromeMetricsServiceClient() override;
 
@@ -59,7 +49,6 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
 
   // metrics::MetricsServiceClient:
   metrics::MetricsService* GetMetricsService() override;
-  ukm::UkmService* GetUkmService() override;
   void SetMetricsClientId(const std::string& client_id) override;
   int32_t GetProduct() override;
   std::string GetApplicationLocale() override;
@@ -67,6 +56,7 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
   metrics::SystemProfileProto::Channel GetChannel() override;
   bool IsExtendedStableChannel() override;
   std::string GetVersionString() override;
+#if 0
   void OnEnvironmentUpdate(std::string* serialized_environment) override;
   void CollectFinalMetricsForLog(base::OnceClosure done_callback) override;
   std::unique_ptr<metrics::MetricsLogUploader> CreateUploader(
@@ -84,12 +74,13 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
   bool IsUkmAllowedForAllProfiles() override;
   bool IsUkmAllowedWithExtensionsForAllProfiles() override;
   bool AreNotificationListenersEnabledOnAllProfiles() override;
+#endif
   std::string GetAppPackageName() override;
-  std::string GetUploadSigningKey() override;
   static void SetNotificationListenerSetupFailedForTesting(
       bool simulate_failure);
   bool ShouldResetClientIdsOnClonedInstall() override;
 
+#if 0
   // ukm::HistoryDeleteObserver:
   void OnHistoryDeleted() override;
 
@@ -101,6 +92,7 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
   static metrics::FileMetricsProvider::FilterAction FilterBrowserMetricsFiles(
       const base::FilePath& path);
   static void SetIsProcessRunningForTesting(IsProcessRunningFunction func);
+#endif
 
  private:
   FRIEND_TEST_ALL_PREFIXES(ChromeMetricsServiceClientTest, IsWebstoreExtension);
@@ -111,6 +103,7 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
   // Completes the two-phase initialization of ChromeMetricsServiceClient.
   void Initialize();
 
+#if 0
   // Registers providers to the MetricsService. These provide data from
   // alternate sources.
   void RegisterMetricsServiceProviders();
@@ -143,12 +136,14 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
   // Call to listen for events on the selected profile's services.
   // Returns true if we registered for all notifications we wanted successfully.
   bool RegisterForProfileEvents(Profile* profile);
+#endif
 
   // content::NotificationObserver:
   void Observe(int type,
                const content::NotificationSource& source,
                const content::NotificationDetails& details) override;
 
+#if 0
   // Called when a URL is opened from the Omnibox.
   void OnURLOpenedFromOmnibox(OmniboxLog* log);
 
@@ -160,23 +155,19 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
 
   // Check if an extension is installed via the Web Store.
   static bool IsWebstoreExtension(base::StringPiece id);
+#endif
 
   SEQUENCE_CHECKER(sequence_checker_);
 
-  // Chrome's privacy budget identifiability study state.
-  std::unique_ptr<IdentifiabilityStudyState> identifiability_study_state_;
-
   // Weak pointer to the MetricsStateManager.
   metrics::MetricsStateManager* const metrics_state_manager_;
 
   // The MetricsService that |this| is a client of.
   std::unique_ptr<metrics::MetricsService> metrics_service_;
 
-  // The UkmService that |this| is a client of.
-  std::unique_ptr<ukm::UkmService> ukm_service_;
-
   content::NotificationRegistrar registrar_;
 
+#if 0
   // Listener for changes in incognito activity.
   std::unique_ptr<IncognitoObserver> incognito_observer_;
 
@@ -204,6 +195,7 @@ class ChromeMetricsServiceClient : public metrics::MetricsServiceClient,
 
 #if !defined(OS_ANDROID)
   std::unique_ptr<BrowserActivityWatcher> browser_activity_watcher_;
+#endif
 #endif
 
   base::WeakPtrFactory<ChromeMetricsServiceClient> weak_ptr_factory_{this};
