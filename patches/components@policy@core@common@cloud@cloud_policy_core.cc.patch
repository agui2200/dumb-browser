diff --git a/components/policy/core/common/cloud/cloud_policy_core.cc b/components/policy/core/common/cloud/cloud_policy_core.cc
index aaac41b3923a..37c14cafee2f 100644
--- a/components/policy/core/common/cloud/cloud_policy_core.cc
+++ b/components/policy/core/common/cloud/cloud_policy_core.cc
@@ -14,18 +14,12 @@
 #include "components/policy/core/common/cloud/cloud_policy_service.h"
 #include "components/policy/core/common/cloud/cloud_policy_store.h"
 #include "components/policy/core/common/cloud/policy_invalidation_scope.h"
-#include "components/policy/core/common/remote_commands/remote_commands_factory.h"
-#include "components/policy/core/common/remote_commands/remote_commands_service.h"
 #include "components/prefs/pref_service.h"
 
 namespace policy {
 
 CloudPolicyCore::Observer::~Observer() {}
 
-void CloudPolicyCore::Observer::OnRemoteCommandsServiceStarted(
-    CloudPolicyCore* core) {
-}
-
 CloudPolicyCore::CloudPolicyCore(
     const std::string& policy_type,
     const std::string& settings_entity_id,
@@ -57,27 +51,10 @@ void CloudPolicyCore::Disconnect() {
       observer.OnCoreDisconnecting(this);
   refresh_delay_.reset();
   refresh_scheduler_.reset();
-  remote_commands_service_.reset();
   service_.reset();
   client_.reset();
 }
 
-void CloudPolicyCore::StartRemoteCommandsService(
-    std::unique_ptr<RemoteCommandsFactory> factory,
-    PolicyInvalidationScope scope) {
-  DCHECK(client_);
-  DCHECK(factory);
-
-  remote_commands_service_ = std::make_unique<RemoteCommandsService>(
-      std::move(factory), client_.get(), store_, scope);
-
-  // Do an initial remote commands fetch immediately.
-  remote_commands_service_->FetchRemoteCommands();
-
-  for (auto& observer : observers_)
-    observer.OnRemoteCommandsServiceStarted(this);
-}
-
 void CloudPolicyCore::RefreshSoon() {
   if (refresh_scheduler_)
     refresh_scheduler_->RefreshSoon();
