diff --git a/third_party/blink/renderer/core/frame/local_frame_view.cc b/third_party/blink/renderer/core/frame/local_frame_view.cc
index 2590dcfce831..bc014b7b00d6 100644
--- a/third_party/blink/renderer/core/frame/local_frame_view.cc
+++ b/third_party/blink/renderer/core/frame/local_frame_view.cc
@@ -66,7 +66,6 @@
 #include "third_party/blink/renderer/core/frame/local_dom_window.h"
 #include "third_party/blink/renderer/core/frame/local_frame.h"
 #include "third_party/blink/renderer/core/frame/local_frame_client.h"
-#include "third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.h"
 #include "third_party/blink/renderer/core/frame/location.h"
 #include "third_party/blink/renderer/core/frame/page_scale_constraints_set.h"
 #include "third_party/blink/renderer/core/frame/remote_frame.h"
@@ -429,7 +428,6 @@ void LocalFrameView::Dispose() {
   if (owner_element && owner_element->OwnedEmbeddedContentView() == this)
     owner_element->SetEmbeddedContentView(nullptr);
 
-  ukm_aggregator_.reset();
   layout_shift_tracker_->Dispose();
 
 #if DCHECK_IS_ON()
@@ -1008,17 +1006,6 @@ void LocalFrameView::WillStartForcedLayout() {
 void LocalFrameView::DidFinishForcedLayout(DocumentUpdateReason reason) {
   CHECK_GT(forced_layout_stack_depth_, (unsigned)0);
   forced_layout_stack_depth_--;
-  if (!forced_layout_stack_depth_ && base::TimeTicks::IsHighResolution()) {
-    LocalFrameUkmAggregator& aggregator = EnsureUkmAggregator();
-    aggregator.RecordSample(
-        static_cast<size_t>(LocalFrameUkmAggregator::kForcedStyleAndLayout),
-        forced_layout_start_time_, base::TimeTicks::Now());
-    if (reason == DocumentUpdateReason::kHitTest) {
-      aggregator.RecordSample(
-          static_cast<size_t>(LocalFrameUkmAggregator::kHitTestDocumentUpdate),
-          forced_layout_start_time_, base::TimeTicks::Now());
-    }
-  }
 }
 
 void LocalFrameView::MarkFirstEligibleToPaint() {
@@ -1118,8 +1105,6 @@ void LocalFrameView::RunIntersectionObserverSteps() {
 
   TRACE_EVENT0("blink,benchmark",
                "LocalFrameView::UpdateViewportIntersectionsForSubtree");
-  SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                           LocalFrameUkmAggregator::kIntersectionObservation);
 
   bool needs_occlusion_tracking = UpdateViewportIntersectionsForSubtree(0);
   if (FrameOwner* owner = frame_->Owner())
@@ -2429,15 +2414,6 @@ bool LocalFrameView::UpdateLifecyclePhases(
     });
   }
 
-  // Hit testing metrics include the entire time processing a document update
-  // in preparation for a hit test.
-  if (reason == DocumentUpdateReason::kHitTest) {
-    LocalFrameUkmAggregator& aggregator = EnsureUkmAggregator();
-    aggregator.RecordSample(
-        static_cast<size_t>(LocalFrameUkmAggregator::kHitTestDocumentUpdate),
-        lifecycle_data_.start_time, base::TimeTicks::Now());
-  }
-
   return Lifecycle().GetState() == target_state;
 }
 
@@ -2634,8 +2610,6 @@ bool LocalFrameView::RunCompositingInputsLifecyclePhase(
   DCHECK(layout_view);
 
   if (!RuntimeEnabledFeatures::CompositeAfterPaintEnabled()) {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kCompositingInputs);
     layout_view->Compositor()->UpdateInputsIfNeededRecursive(target_state);
   } else {
     ForAllNonThrottledLocalFrameViews([](LocalFrameView& frame_view) {
@@ -2655,8 +2629,6 @@ bool LocalFrameView::RunCompositingAssignmentsLifecyclePhase(
   DCHECK(layout_view);
 
   if (!RuntimeEnabledFeatures::CompositeAfterPaintEnabled()) {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kCompositingAssignments);
     layout_view->Compositor()->UpdateAssignmentsIfNeededRecursive(target_state);
   } else {
     ForAllNonThrottledLocalFrameViews([](LocalFrameView& frame_view) {
@@ -2713,9 +2685,6 @@ bool LocalFrameView::RunPrePaintLifecyclePhase(
   });
 
   {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kPrePaint);
-
     GetPage()->GetLinkHighlight().UpdateBeforePrePaint();
     PrePaintTreeWalk().WalkTree(*this);
     GetPage()->GetLinkHighlight().UpdateAfterPrePaint();
@@ -2892,9 +2861,6 @@ static void UpdateLayerDebugInfoRecursively(const GraphicsLayer& root) {
 
 void LocalFrameView::PaintTree(
     HashSet<const GraphicsLayer*>& repainted_layers) {
-  SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                           LocalFrameUkmAggregator::kPaint);
-
   DCHECK(GetFrame().IsLocalRoot());
 
   auto* layout_view = GetLayoutView();
@@ -3024,9 +2990,6 @@ void LocalFrameView::PushPaintArtifactToCompositor(
         paint_artifact_compositor_->RootLayer(), &GetFrame());
   }
 
-  SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                           LocalFrameUkmAggregator::kCompositingCommit);
-
   if (!RuntimeEnabledFeatures::CompositeAfterPaintEnabled() &&
       layer_debug_info_enabled_) {
     if (auto* root = GetLayoutView()->Compositor()->PaintRootGraphicsLayer())
@@ -3144,8 +3107,6 @@ void LocalFrameView::UpdateStyleAndLayoutIfNeededRecursive() {
   // out.
 
   {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kStyle);
     frame_->GetDocument()->UpdateStyleAndLayoutTree();
 
     // Update style for all embedded SVG documents underneath this frame, so
@@ -3163,8 +3124,6 @@ void LocalFrameView::UpdateStyleAndLayoutIfNeededRecursive() {
   CHECK(!nested_layout_count_);
 
   if (NeedsLayout()) {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kLayout);
     UpdateLayout();
   } else {
     UpdateGeometriesIfNeeded();
@@ -4604,19 +4563,9 @@ LayoutUnit LocalFrameView::CaretWidth() const {
       1.0f, GetChromeClient()->WindowToViewportScalar(&GetFrame(), 1.0f)));
 }
 
-LocalFrameUkmAggregator& LocalFrameView::EnsureUkmAggregator() {
-  if (!ukm_aggregator_) {
-    ukm_aggregator_ = base::MakeRefCounted<LocalFrameUkmAggregator>(
-        frame_->GetDocument()->UkmSourceID(),
-        frame_->GetDocument()->UkmRecorder());
-  }
-  return *ukm_aggregator_;
-}
-
 void LocalFrameView::OnFirstContentfulPaint() {
   GetPage()->GetChromeClient().StopDeferringCommits(
       *frame_, cc::PaintHoldingCommitTrigger::kFirstContentfulPaint);
-  EnsureUkmAggregator().DidReachFirstContentfulPaint(frame_->IsMainFrame());
 }
 
 void LocalFrameView::RegisterForLifecycleNotifications(
