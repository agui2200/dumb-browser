diff --git a/third_party/blink/renderer/core/frame/local_frame_view.cc b/third_party/blink/renderer/core/frame/local_frame_view.cc
index cd23c7cd570a..3b6d89e2d214 100644
--- a/third_party/blink/renderer/core/frame/local_frame_view.cc
+++ b/third_party/blink/renderer/core/frame/local_frame_view.cc
@@ -67,7 +67,6 @@
 #include "third_party/blink/renderer/core/frame/local_dom_window.h"
 #include "third_party/blink/renderer/core/frame/local_frame.h"
 #include "third_party/blink/renderer/core/frame/local_frame_client.h"
-#include "third_party/blink/renderer/core/frame/local_frame_ukm_aggregator.h"
 #include "third_party/blink/renderer/core/frame/location.h"
 #include "third_party/blink/renderer/core/frame/page_scale_constraints_set.h"
 #include "third_party/blink/renderer/core/frame/remote_frame.h"
@@ -431,7 +430,6 @@ void LocalFrameView::Dispose() {
   if (owner_element && owner_element->OwnedEmbeddedContentView() == this)
     owner_element->SetEmbeddedContentView(nullptr);
 
-  ukm_aggregator_.reset();
   layout_shift_tracker_->Dispose();
 
 #if DCHECK_IS_ON()
@@ -1009,17 +1007,6 @@ void LocalFrameView::WillStartForcedLayout() {
 void LocalFrameView::DidFinishForcedLayout(DocumentUpdateReason reason) {
   CHECK_GT(forced_layout_stack_depth_, (unsigned)0);
   forced_layout_stack_depth_--;
-  if (!forced_layout_stack_depth_ && base::TimeTicks::IsHighResolution()) {
-    LocalFrameUkmAggregator& aggregator = EnsureUkmAggregator();
-    aggregator.RecordSample(
-        static_cast<size_t>(LocalFrameUkmAggregator::kForcedStyleAndLayout),
-        forced_layout_start_time_, base::TimeTicks::Now());
-    if (reason == DocumentUpdateReason::kHitTest) {
-      aggregator.RecordSample(
-          static_cast<size_t>(LocalFrameUkmAggregator::kHitTestDocumentUpdate),
-          forced_layout_start_time_, base::TimeTicks::Now());
-    }
-  }
 }
 
 void LocalFrameView::MarkFirstEligibleToPaint() {
@@ -1120,8 +1107,6 @@ void LocalFrameView::RunIntersectionObserverSteps() {
 
   TRACE_EVENT0("blink,benchmark",
                "LocalFrameView::UpdateViewportIntersectionsForSubtree");
-  SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                           LocalFrameUkmAggregator::kIntersectionObservation);
 
   bool needs_occlusion_tracking = UpdateViewportIntersectionsForSubtree(0);
   if (FrameOwner* owner = frame_->Owner())
@@ -1724,7 +1709,7 @@ void LocalFrameView::ComputePostLayoutIntersections(unsigned parent_flags) {
 
   if (auto* controller =
           GetFrame().GetDocument()->GetIntersectionObserverController()) {
-    controller->ComputeIntersections(flags, EnsureUkmAggregator());
+    controller->ComputeIntersections(flags);
   }
 
   for (Frame* child = frame_->Tree().FirstChild(); child;
@@ -2473,15 +2458,6 @@ bool LocalFrameView::UpdateLifecyclePhases(
     });
   }
 
-  // Hit testing metrics include the entire time processing a document update
-  // in preparation for a hit test.
-  if (reason == DocumentUpdateReason::kHitTest) {
-    LocalFrameUkmAggregator& aggregator = EnsureUkmAggregator();
-    aggregator.RecordSample(
-        static_cast<size_t>(LocalFrameUkmAggregator::kHitTestDocumentUpdate),
-        lifecycle_data_.start_time, base::TimeTicks::Now());
-  }
-
   return Lifecycle().GetState() == target_state;
 }
 
@@ -2673,8 +2649,6 @@ bool LocalFrameView::RunCompositingInputsLifecyclePhase(
   DCHECK(layout_view);
 
   if (!RuntimeEnabledFeatures::CompositeAfterPaintEnabled()) {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kCompositingInputs);
     layout_view->Compositor()->UpdateInputsIfNeededRecursive(target_state);
   } else {
     ForAllNonThrottledLocalFrameViews([](LocalFrameView& frame_view) {
@@ -2694,8 +2668,6 @@ bool LocalFrameView::RunCompositingAssignmentsLifecyclePhase(
   DCHECK(layout_view);
 
   if (!RuntimeEnabledFeatures::CompositeAfterPaintEnabled()) {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kCompositingAssignments);
     layout_view->Compositor()->UpdateAssignmentsIfNeededRecursive(target_state);
   } else {
     ForAllNonThrottledLocalFrameViews([](LocalFrameView& frame_view) {
@@ -2752,9 +2724,6 @@ bool LocalFrameView::RunPrePaintLifecyclePhase(
   });
 
   {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kPrePaint);
-
     GetPage()->GetLinkHighlight().UpdateBeforePrePaint();
     PrePaintTreeWalk().WalkTree(*this);
     GetPage()->GetLinkHighlight().UpdateAfterPrePaint();
@@ -2922,9 +2891,6 @@ void LocalFrameView::EnqueueScrollEvents() {
 }
 
 bool LocalFrameView::PaintTree(PaintBenchmarkMode benchmark_mode) {
-  SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                           LocalFrameUkmAggregator::kPaint);
-
   DCHECK(GetFrame().IsLocalRoot());
 
   auto* layout_view = GetLayoutView();
@@ -3109,9 +3075,6 @@ void LocalFrameView::PushPaintArtifactToCompositor(bool repainted) {
         paint_artifact_compositor_->RootLayer(), &GetFrame());
   }
 
-  SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                           LocalFrameUkmAggregator::kCompositingCommit);
-
   // Skip updating property trees, pushing cc::Layers, and issuing raster
   // invalidations if possible.
   // TODO(paint-dev): In CompositeAfterPaint mode, we always set
@@ -3194,8 +3157,6 @@ void LocalFrameView::UpdateStyleAndLayoutIfNeededRecursive() {
   // out.
 
   {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kStyle);
     frame_->GetDocument()->UpdateStyleAndLayoutTree();
 
     // Update style for all embedded SVG documents underneath this frame, so
@@ -3213,8 +3174,6 @@ void LocalFrameView::UpdateStyleAndLayoutIfNeededRecursive() {
   CHECK(!nested_layout_count_);
 
   if (NeedsLayout()) {
-    SCOPED_UMA_AND_UKM_TIMER(EnsureUkmAggregator(),
-                             LocalFrameUkmAggregator::kLayout);
     UpdateLayout();
   } else {
     UpdateGeometriesIfNeeded();
@@ -4282,7 +4241,7 @@ bool LocalFrameView::UpdateViewportIntersectionsForSubtree(
     if (IntersectionObserverController* controller =
             GetFrame().GetDocument()->GetIntersectionObserverController()) {
       needs_occlusion_tracking |=
-          controller->ComputeIntersections(flags, EnsureUkmAggregator());
+          controller->ComputeIntersections(flags);
     }
     intersection_observation_state_ = kNotNeeded;
   }
@@ -4712,19 +4671,9 @@ void LocalFrameView::DidChangeMobileFriendliness(
   GetFrame().Client()->DidChangeMobileFriendliness(mf);
 }
 
-LocalFrameUkmAggregator& LocalFrameView::EnsureUkmAggregator() {
-  if (!ukm_aggregator_) {
-    ukm_aggregator_ = base::MakeRefCounted<LocalFrameUkmAggregator>(
-        frame_->GetDocument()->UkmSourceID(),
-        frame_->GetDocument()->UkmRecorder());
-  }
-  return *ukm_aggregator_;
-}
-
 void LocalFrameView::OnFirstContentfulPaint() {
   GetPage()->GetChromeClient().StopDeferringCommits(
       *frame_, cc::PaintHoldingCommitTrigger::kFirstContentfulPaint);
-  EnsureUkmAggregator().DidReachFirstContentfulPaint(frame_->IsMainFrame());
 }
 
 void LocalFrameView::RegisterForLifecycleNotifications(
